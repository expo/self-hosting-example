var __DEV__=false,__BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),process=this.process||{};process.env=process.env||{};process.env.NODE_ENV="production";
(function (global) {
  'use strict';

  global.__r = metroRequire;
  global.__d = define;
  global.__c = clear;
  var modules = clear();
  var EMPTY = {};
  var _ref = {},
      hasOwnProperty = _ref.hasOwnProperty;

  function clear() {
    modules = typeof __NUM_MODULES__ === 'number' ? Array(__NUM_MODULES__ | 0) : Object.create(null);
    return modules;
  }

  function define(factory, moduleId, dependencyMap) {
    if (modules[moduleId] != null) {
      return;
    }

    modules[moduleId] = {
      dependencyMap: dependencyMap,
      factory: factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      publicModule: {
        exports: {}
      }
    };
  }

  function metroRequire(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  function metroImportDefault(moduleId) {
    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedDefault !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedDefault;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedDefault = exports && exports.__esModule ? exports.default : exports;
    return modules[moduleIdReallyIsNumber].importedDefault = importedDefault;
  }

  function metroImportAll(moduleId) {
    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedAll !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedAll;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedAll = undefined;

    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};

      if (exports) {
        for (var _key in exports) {
          if (hasOwnProperty.call(exports, _key)) {
            importedAll[_key] = exports[_key];
          }
        }
      }

      importedAll.default = exports;
    }

    return modules[moduleIdReallyIsNumber].importedAll = importedAll;
  }

  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue = undefined;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = 65535;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  metroRequire.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }

  metroRequire.packModuleId = packModuleId;
  var hooks = [];

  function registerHook(cb) {
    var hook = {
      cb: cb
    };
    hooks.push(hook);
    return {
      release: function release() {
        for (var i = 0; i < hooks.length; ++i) {
          if (hooks[i] === hook) {
            hooks.splice(i, 1);
            break;
          }
        }
      }
    };
  }

  metroRequire.registerHook = registerHook;

  function loadModuleImplementation(moduleId, module) {
    if (!module && global.__defineModule) {
      global.__defineModule(moduleId);

      module = modules[moduleId];
    }

    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId),
          _segmentId = _unpackModuleId.segmentId,
          _localId = _unpackModuleId.localId;

      nativeRequire(_localId, _segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    module.isInitialized = true;
    var _module = module,
        factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    try {
      var _moduleObject = module.publicModule;

      if (hooks.length > 0) {
        for (var i = 0; i < hooks.length; ++i) {
          hooks[i].cb(moduleId, _moduleObject);
        }
      }

      factory(global, metroRequire, metroImportDefault, metroImportAll, _moduleObject, _moduleObject.exports, dependencyMap);
      {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }
      return _moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {}
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';
    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
(function (global) {
  Object.assign = function (target, sources) {
    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];

      if (nextSource == null) {
        continue;
      }

      for (var key in nextSource) {
        target[key] = nextSource[key];
      }
    }

    return target;
  };
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
(function (global) {
  var inspect = function () {
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }

    function stylizeNoColor(str, styleType) {
      return str;
    }

    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }

    function formatValue(ctx, value, recurseTimes) {
      var primitive = formatPrimitive(ctx, value);

      if (primitive) {
        return primitive;
      }

      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }

        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }

        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }

        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '',
          array = false,
          braces = ['{', '}'];

      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);
      var output;

      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }

    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }

      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      if (isNull(value)) return ctx.stylize('null', 'null');
    }

    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }

    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];

      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }

      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }

    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };

      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }

      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }

      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }

          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }

      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }

        name = JSON.stringify('' + key);

        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }

    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isUndefined(arg) {
      return arg === undefined;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    return inspect;
  }();

  var OBJECT_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  var INSPECTOR_LEVELS = [];
  INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
  INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
  INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
  INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';
  var INSPECTOR_FRAMES_TO_SKIP = 1;

  function getNativeLogFunction(level) {
    return function () {
      var str;

      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, {
            depth: 2
          });
        }).join(', ');
      }

      var logLevel = level;

      if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        logLevel = LOG_LEVELS.warn;
      }

      if (global.__inspectorLog) {
        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
      }

      if (groupStack.length) {
        str = groupFormat('', str);
      }

      global.nativeLoggingHook(str, logLevel);
    };
  }

  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  }

  function consoleTablePolyfill(rows) {
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];

      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }

    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }

    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];
    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;

      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || '?').toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return cells.join(space + '|' + space);
    }

    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators, '-');
    var header = joinRow(columns);
    var table = [header, separatorRow];

    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }

  var GROUP_PAD = "\u2502";
  var GROUP_OPEN = "\u2510";
  var GROUP_CLOSE = "\u2518";
  var groupStack = [];

  function groupFormat(prefix, msg) {
    return groupStack.join('') + prefix + ' ' + (msg || '');
  }

  function consoleGroupPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }

  function consoleGroupEndPolyfill() {
    groupStack.pop();
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);
  }

  if (global.nativeLoggingHook) {
    var originalConsole = global.console;
    global.console = {
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill,
      group: consoleGroupPolyfill,
      groupEnd: consoleGroupEndPolyfill
    };
  } else if (!global.console) {
    var log = global.print || function consoleLoggingStub() {};

    global.console = {
      error: log,
      info: log,
      log: log,
      warn: log,
      trace: log,
      debug: log,
      table: log
    };
  }
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
(function (global) {
  var _inGuard = 0;

  var _globalHandler = function onError(e) {
    throw e;
  };

  var ErrorUtils = {
    setGlobalHandler: function setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler: function getGlobalHandler() {
      return _globalHandler;
    },
    reportError: function reportError(error) {
      _globalHandler && _globalHandler(error);
    },
    reportFatalError: function reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard: function applyWithGuard(fun, context, args) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }

      return null;
    },
    applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }

      return null;
    },
    inGuard: function inGuard() {
      return _inGuard;
    },
    guard: function guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }

      name = name || fun.name || '<generated guard>';

      function guarded() {
        return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
      }

      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
(function (global) {
  if (Number.EPSILON === undefined) {
    Object.defineProperty(Number, 'EPSILON', {
      value: Math.pow(2, -52)
    });
  }

  if (Number.MAX_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
      value: Math.pow(2, 53) - 1
    });
  }

  if (Number.MIN_SAFE_INTEGER === undefined) {
    Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
      value: -(Math.pow(2, 53) - 1)
    });
  }

  if (!Number.isNaN) {
    var globalIsNaN = global.isNaN;
    Object.defineProperty(Number, 'isNaN', {
      configurable: true,
      enumerable: false,
      value: function isNaN(value) {
        return typeof value === 'number' && globalIsNaN(value);
      },
      writable: true
    });
  }
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
(function (global) {
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
      var start = Math.min(Math.max(pos, 0), string.length);
      return string.indexOf(String(search), pos) === start;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var stringLength = string.length;
      var searchString = String(search);
      var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
      var end = Math.min(Math.max(pos, 0), stringLength);
      var start = end - searchString.length;

      if (start < 0) {
        return false;
      }

      return string.lastIndexOf(searchString, start) === start;
    };
  }

  if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {
      'use strict';

      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      count = Number(count) || 0;

      if (count < 0 || count === Infinity) {
        throw RangeError();
      }

      if (count === 1) {
        return string;
      }

      var result = '';

      while (count) {
        if (count & 1) {
          result += string;
        }

        if (count >>= 1) {
          string += string;
        }
      }

      return result;
    };
  }

  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
      'use strict';

      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > this.length) {
        return false;
      } else {
        return this.indexOf(search, start) !== -1;
      }
    };
  }

  if (!String.prototype.codePointAt) {
    String.prototype.codePointAt = function (position) {
      if (this == null) {
        throw TypeError();
      }

      var string = String(this);
      var size = string.length;
      var index = position ? Number(position) : 0;

      if (Number.isNaN(index)) {
        index = 0;
      }

      if (index < 0 || index >= size) {
        return undefined;
      }

      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xd800 && first <= 0xdbff && size > index + 1) {
          second = string.charCodeAt(index + 1);

          if (second >= 0xdc00 && second <= 0xdfff) {
            return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
          }
        }

      return first;
    };
  }

  if (!String.prototype.padEnd) {
    String.prototype.padEnd = function padEnd(targetLength, padString) {
      targetLength = targetLength >> 0;
      padString = String(typeof padString !== 'undefined' ? padString : ' ');

      if (this.length > targetLength) {
        return String(this);
      } else {
        targetLength = targetLength - this.length;

        if (targetLength > padString.length) {
          padString += padString.repeat(targetLength / padString.length);
        }

        return String(this) + padString.slice(0, targetLength);
      }
    };
  }

  if (!String.prototype.padStart) {
    String.prototype.padStart = function padStart(targetLength, padString) {
      targetLength = targetLength >> 0;
      padString = String(typeof padString !== 'undefined' ? padString : ' ');

      if (this.length > targetLength) {
        return String(this);
      } else {
        targetLength = targetLength - this.length;

        if (targetLength > padString.length) {
          padString += padString.repeat(targetLength / padString.length);
        }

        return padString.slice(0, targetLength) + String(this);
      }
    };
  }
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
(function (global) {
  function findIndex(predicate, context) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }

    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }

    var list = Object(this);
    var length = list.length >>> 0;

    for (var i = 0; i < length; i++) {
      if (predicate.call(context, list[i], i, list)) {
        return i;
      }
    }

    return -1;
  }

  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: findIndex
    });
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(predicate, context) {
        if (this == null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }

        var index = findIndex.call(this, predicate, context);
        return index === -1 ? undefined : this[index];
      }
    });
  }

  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      enumerable: false,
      writable: true,
      configurable: true,
      value: function value(searchElement) {
        var O = Object(this);
        var len = parseInt(O.length) || 0;

        if (len === 0) {
          return false;
        }

        var n = parseInt(arguments[1]) || 0;
        var k;

        if (n >= 0) {
          k = n;
        } else {
          k = len + n;

          if (k < 0) {
            k = 0;
          }
        }

        var currentElement;

        while (k < len) {
          currentElement = O[k];

          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
            return true;
          }

          k++;
        }

        return false;
      }
    });
  }
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
(function (global) {
  if (!Array.from) {
    Array.from = function (arrayLike) {
      if (arrayLike == null) {
        throw new TypeError('Object is null or undefined');
      }

      var mapFn = arguments[1];
      var thisArg = arguments[2];
      var C = this;
      var items = Object(arrayLike);
      var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';
      var mapping = typeof mapFn === 'function';
      var usingIterator = typeof items[symbolIterator] === 'function';
      var key = 0;
      var ret;
      var value;

      if (usingIterator) {
        ret = typeof C === 'function' ? new C() : [];
        var it = items[symbolIterator]();
        var next;

        while (!(next = it.next()).done) {
          value = next.value;

          if (mapping) {
            value = mapFn.call(thisArg, value, key);
          }

          ret[key] = value;
          key += 1;
        }

        ret.length = key;
        return ret;
      }

      var len = items.length;

      if (isNaN(len) || len < 0) {
        len = 0;
      }

      ret = typeof C === 'function' ? new C(len) : new Array(len);

      while (key < len) {
        value = items[key];

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    };
  }
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
(function (global) {
  (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    if (typeof Object.entries !== 'function') {
      Object.entries = function (object) {
        if (object == null) {
          throw new TypeError('Object.entries called on non-object');
        }

        var entries = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            entries.push([key, object[key]]);
          }
        }

        return entries;
      };
    }

    if (typeof Object.values !== 'function') {
      Object.values = function (object) {
        if (object == null) {
          throw new TypeError('Object.values called on non-object');
        }

        var values = [];

        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            values.push(object[key]);
          }
        }

        return values;
      };
    }
  })();
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
(function (global) {
  'use strict';

  var babelHelpers = global.babelHelpers = {};

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  babelHelpers.classCallCheck = _classCallCheck;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;

      if ('value' in descriptor) {
        descriptor.writable = true;
      }

      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
      _defineProperties(Constructor.prototype, protoProps);
    }

    if (staticProps) {
      _defineProperties(Constructor, staticProps);
    }

    return Constructor;
  }

  babelHelpers.createClass = _createClass;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  babelHelpers.defineProperty = _defineProperty;

  function _extends() {
    babelHelpers.extends = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  babelHelpers.extends = _extends;

  function _setPrototypeOf(o, p) {
    babelHelpers.setPrototypeOf = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  babelHelpers.setPrototypeOf = _setPrototypeOf;

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = babelHelpers.getPrototypeOf(object);

      if (object === null) {
        break;
      }
    }

    return object;
  }

  babelHelpers.superPropBase = _superPropBase;

  babelHelpers.get = function _get(target, property) {
    var receiver = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : target;
    var base = babelHelpers.superPropBase(target, property);

    if (!base) {
      return;
    }

    var desc = Object.getOwnPropertyDescriptor(base, property);

    if (desc.get) {
      return desc.get.call(receiver);
    }

    return desc.value;
  };

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function');
    }

    babelHelpers.setPrototypeOf(subClass.prototype, superClass && superClass.prototype);

    if (superClass) {
      babelHelpers.setPrototypeOf(subClass, superClass);
    }
  }

  babelHelpers.inherits = _inherits;

  function _construct(Parent, args, Class) {
    babelHelpers.construct = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Parent.bind.apply(Parent, a);
      var instance = new Constructor();

      if (Class) {
        babelHelpers.setPrototypeOf(instance, Class.prototype);
      }

      return instance;
    };

    return _construct.apply(null, arguments);
  }

  babelHelpers.construct = _construct;

  function _getPrototypeOf(o) {
    babelHelpers.getPrototypeOf = _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) {
      return o.__proto__;
    };

    return _getPrototypeOf(o);
  }

  babelHelpers.getPrototypeOf = _getPrototypeOf;

  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  babelHelpers.assertThisInitialized = _assertThisInitialized;

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === 'function' ? new Map() : undefined;

    babelHelpers.wrapNativeSuper = _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (typeof Class !== 'function') {
        throw new TypeError('Super expression must either be null or a function');
      }

      if (typeof _cache !== 'undefined') {
        if (_cache.has(Class)) {
          return _cache.get(Class);
        }

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return babelHelpers.setPrototypeOf(Wrapper, babelHelpers.setPrototypeOf(function Super() {
        return babelHelpers.construct(Class, arguments, babelHelpers.getPrototypeOf(this).constructor);
      }, Class));
    };

    return _wrapNativeSuper(Class);
  }

  babelHelpers.wrapNativeSuper = _wrapNativeSuper;

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  babelHelpers.interopRequireDefault = _interopRequireDefault;

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  babelHelpers.interopRequireWildcard = _interopRequireWildcard;

  function _objectWithoutProperties(source, excluded) {
    if (source == null) {
      return {};
    }

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];

      if (excluded.indexOf(key) >= 0) {
        continue;
      }

      target[key] = source[key];
    }

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];

        if (excluded.indexOf(key) >= 0) {
          continue;
        }

        if (!Object.prototype.propertyIsEnumerable.call(source, key)) {
          continue;
        }

        target[key] = source[key];
      }
    }

    return target;
  }

  babelHelpers.objectWithoutProperties = _objectWithoutProperties;

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === 'object' || typeof call === 'function')) {
      return call;
    }

    return babelHelpers.assertThisInitialized(self);
  }

  babelHelpers.possibleConstructorReturn = _possibleConstructorReturn;

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) {
      return arr;
    }
  }

  babelHelpers.arrayWithHoles = _arrayWithHoles;

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  babelHelpers.arrayWithoutHoles = _arrayWithoutHoles;

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) {
          break;
        }
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i.return != null) {
          _i.return();
        }
      } finally {
        if (_d) {
          throw _e;
        }
      }
    }

    return _arr;
  }

  babelHelpers.iterableToArrayLimit = _iterableToArrayLimit;

  function _nonIterableRest() {
    throw new TypeError('Invalid attempt to destructure non-iterable instance');
  }

  babelHelpers.nonIterableRest = _nonIterableRest;

  function _nonIterableSpread() {
    throw new TypeError('Invalid attempt to spread non-iterable instance');
  }

  babelHelpers.nonIterableSpread = _nonIterableSpread;

  function _slicedToArray(arr, i) {
    return babelHelpers.arrayWithHoles(arr) || babelHelpers.iterableToArrayLimit(arr, i) || babelHelpers.nonIterableRest();
  }

  babelHelpers.slicedToArray = _slicedToArray;

  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  babelHelpers.taggedTemplateLiteral = _taggedTemplateLiteral;

  function _toArray(arr) {
    return babelHelpers.arrayWithHoles(arr) || babelHelpers.iterableToArray(arr) || babelHelpers.nonIterableRest();
  }

  babelHelpers.toArray = _toArray;

  function _toConsumableArray(arr) {
    return babelHelpers.arrayWithoutHoles(arr) || babelHelpers.iterableToArray(arr) || babelHelpers.nonIterableSpread();
  }

  babelHelpers.toConsumableArray = _toConsumableArray;

  function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    strings.raw = raw;
    return strings;
  }

  babelHelpers.taggedTemplateLiteralLoose = _taggedTemplateLiteralLoose;

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        babelHelpers.defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  babelHelpers.objectSpread = _objectSpread;

  function _iterableToArray(iter) {
    if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(iter) || Object.prototype.toString.call(iter) === '[object Arguments]') {
      return Array.from(iter);
    }
  }

  babelHelpers.iterableToArray = _iterableToArray;
})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _expo = _$$_REQUIRE(_dependencyMap[1]);

  var _App = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  (0, _expo.registerRootComponent)(_App.default);
},0,[1,2,904]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  module.exports = _interopRequireDefault;
},1,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Constants", {
    enumerable: true,
    get: function get() {
      return _expoConstants().default;
    }
  });
  Object.defineProperty(exports, "AdMobBanner", {
    enumerable: true,
    get: function get() {
      return _expoAdsAdmob().AdMobBanner;
    }
  });
  Object.defineProperty(exports, "AdMobInterstitial", {
    enumerable: true,
    get: function get() {
      return _expoAdsAdmob().AdMobInterstitial;
    }
  });
  Object.defineProperty(exports, "AdMobRewarded", {
    enumerable: true,
    get: function get() {
      return _expoAdsAdmob().AdMobRewarded;
    }
  });
  Object.defineProperty(exports, "PublisherBanner", {
    enumerable: true,
    get: function get() {
      return _expoAdsAdmob().PublisherBanner;
    }
  });
  Object.defineProperty(exports, "Segment", {
    enumerable: true,
    get: function get() {
      return _expoAnalyticsSegment().Segment;
    }
  });
  Object.defineProperty(exports, "Asset", {
    enumerable: true,
    get: function get() {
      return _expoAsset().Asset;
    }
  });
  Object.defineProperty(exports, "AppAuth", {
    enumerable: true,
    get: function get() {
      return _expoAppAuth().AppAuth;
    }
  });
  Object.defineProperty(exports, "BarCodeScanner", {
    enumerable: true,
    get: function get() {
      return _expoBarcodeScanner().BarCodeScanner;
    }
  });
  Object.defineProperty(exports, "Camera", {
    enumerable: true,
    get: function get() {
      return _expoCamera().Camera;
    }
  });
  Object.defineProperty(exports, "Contacts", {
    enumerable: true,
    get: function get() {
      return _expoContacts().Contacts;
    }
  });
  Object.defineProperty(exports, "FaceDetector", {
    enumerable: true,
    get: function get() {
      return _expoFaceDetector().FaceDetector;
    }
  });
  Object.defineProperty(exports, "FileSystem", {
    enumerable: true,
    get: function get() {
      return _expoFileSystem().FileSystem;
    }
  });
  Object.defineProperty(exports, "GLView", {
    enumerable: true,
    get: function get() {
      return _expoGl().GLView;
    }
  });
  Object.defineProperty(exports, "GoogleSignIn", {
    enumerable: true,
    get: function get() {
      return _expoGoogleSignIn().GoogleSignIn;
    }
  });
  Object.defineProperty(exports, "LocalAuthentication", {
    enumerable: true,
    get: function get() {
      return _expoLocalAuthentication().LocalAuthentication;
    }
  });
  Object.defineProperty(exports, "Localization", {
    enumerable: true,
    get: function get() {
      return _expoLocalization().Localization;
    }
  });
  Object.defineProperty(exports, "MediaLibrary", {
    enumerable: true,
    get: function get() {
      return _expoMediaLibrary().MediaLibrary;
    }
  });
  Object.defineProperty(exports, "Permissions", {
    enumerable: true,
    get: function get() {
      return _expoPermissions().Permissions;
    }
  });
  Object.defineProperty(exports, "Print", {
    enumerable: true,
    get: function get() {
      return _expoPrint().Print;
    }
  });
  Object.defineProperty(exports, "Accelerometer", {
    enumerable: true,
    get: function get() {
      return _expoSensors().Accelerometer;
    }
  });
  Object.defineProperty(exports, "Gyroscope", {
    enumerable: true,
    get: function get() {
      return _expoSensors().Gyroscope;
    }
  });
  Object.defineProperty(exports, "Magnetometer", {
    enumerable: true,
    get: function get() {
      return _expoSensors().Magnetometer;
    }
  });
  Object.defineProperty(exports, "MagnetometerUncalibrated", {
    enumerable: true,
    get: function get() {
      return _expoSensors().MagnetometerUncalibrated;
    }
  });
  Object.defineProperty(exports, "GestureHandler", {
    enumerable: true,
    get: function get() {
      return _GestureHandler.GestureHandler;
    }
  });
  Object.defineProperty(exports, "MapView", {
    enumerable: true,
    get: function get() {
      return _reactNativeMaps().default;
    }
  });
  Object.defineProperty(exports, "Amplitude", {
    enumerable: true,
    get: function get() {
      return _Amplitude.default;
    }
  });
  Object.defineProperty(exports, "AuthSession", {
    enumerable: true,
    get: function get() {
      return _AuthSession.default;
    }
  });
  Object.defineProperty(exports, "DangerZone", {
    enumerable: true,
    get: function get() {
      return _DangerZone.default;
    }
  });
  Object.defineProperty(exports, "ErrorRecovery", {
    enumerable: true,
    get: function get() {
      return _ErrorRecovery.default;
    }
  });
  Object.defineProperty(exports, "Icon", {
    enumerable: true,
    get: function get() {
      return _Icon.default;
    }
  });
  Object.defineProperty(exports, "KeepAwake", {
    enumerable: true,
    get: function get() {
      return _KeepAwake.default;
    }
  });
  Object.defineProperty(exports, "Linking", {
    enumerable: true,
    get: function get() {
      return _Linking.default;
    }
  });
  Object.defineProperty(exports, "Notifications", {
    enumerable: true,
    get: function get() {
      return _Notifications.default;
    }
  });
  Object.defineProperty(exports, "SQLite", {
    enumerable: true,
    get: function get() {
      return _SQLite.default;
    }
  });
  Object.defineProperty(exports, "Svg", {
    enumerable: true,
    get: function get() {
      return _Svg.default;
    }
  });
  Object.defineProperty(exports, "WebBrowser", {
    enumerable: true,
    get: function get() {
      return _WebBrowser.default;
    }
  });
  Object.defineProperty(exports, "apisAreAvailable", {
    enumerable: true,
    get: function get() {
      return _apisAreAvailable.default;
    }
  });
  Object.defineProperty(exports, "takeSnapshotAsync", {
    enumerable: true,
    get: function get() {
      return _takeSnapshotAsync.default;
    }
  });
  Object.defineProperty(exports, "Video", {
    enumerable: true,
    get: function get() {
      return _Video.default;
    }
  });
  Object.defineProperty(exports, "BlurView", {
    enumerable: true,
    get: function get() {
      return _BlurView.default;
    }
  });
  Object.defineProperty(exports, "LinearGradient", {
    enumerable: true,
    get: function get() {
      return _LinearGradient.default;
    }
  });
  Object.defineProperty(exports, "AppLoading", {
    enumerable: true,
    get: function get() {
      return _AppLoading.default;
    }
  });
  Object.defineProperty(exports, "registerRootComponent", {
    enumerable: true,
    get: function get() {
      return _registerRootComponent.default;
    }
  });
  Object.defineProperty(exports, "Logs", {
    enumerable: true,
    get: function get() {
      return _Logs.default;
    }
  });
  exports.SplashScreen = exports.FacebookAds = exports.Audio = exports.Util = exports.Updates = exports.StoreReview = exports.Speech = exports.SecureStore = exports.ScreenOrientation = exports.MailComposer = exports.IntentLauncherAndroid = exports.ImagePicker = exports.ImageManipulator = exports.Haptic = exports.Google = exports.Facebook = exports.DocumentPicker = exports.Calendar = exports.Brightness = exports.AR = exports.TaskManager = exports.SMS = exports.Location = exports.Font = exports.BackgroundFetch = undefined;

  _$$_REQUIRE(_dependencyMap[1]);

  _$$_REQUIRE(_dependencyMap[2]);

  _$$_REQUIRE(_dependencyMap[3]);

  function _expoConstants() {
    var data = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

    _expoConstants = function _expoConstants() {
      return data;
    };

    return data;
  }

  function _reactNative() {
    var data = _$$_REQUIRE(_dependencyMap[5]);

    _reactNative = function _reactNative() {
      return data;
    };

    return data;
  }

  function _expoAdsAdmob() {
    var data = _$$_REQUIRE(_dependencyMap[6]);

    _expoAdsAdmob = function _expoAdsAdmob() {
      return data;
    };

    return data;
  }

  function _expoAnalyticsSegment() {
    var data = _$$_REQUIRE(_dependencyMap[7]);

    _expoAnalyticsSegment = function _expoAnalyticsSegment() {
      return data;
    };

    return data;
  }

  function _expoAsset() {
    var data = _$$_REQUIRE(_dependencyMap[8]);

    _expoAsset = function _expoAsset() {
      return data;
    };

    return data;
  }

  function _expoAppAuth() {
    var data = _$$_REQUIRE(_dependencyMap[9]);

    _expoAppAuth = function _expoAppAuth() {
      return data;
    };

    return data;
  }

  function BackgroundFetch() {
    var data = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

    BackgroundFetch = function BackgroundFetch() {
      return data;
    };

    return data;
  }

  Object.defineProperty(exports, "BackgroundFetch", {
    enumerable: true,
    get: function get() {
      return BackgroundFetch();
    }
  });

  function _expoBarcodeScanner() {
    var data = _$$_REQUIRE(_dependencyMap[11]);

    _expoBarcodeScanner = function _expoBarcodeScanner() {
      return data;
    };

    return data;
  }

  function _expoCamera() {
    var data = _$$_REQUIRE(_dependencyMap[12]);

    _expoCamera = function _expoCamera() {
      return data;
    };

    return data;
  }

  function _expoContacts() {
    var data = _$$_REQUIRE(_dependencyMap[13]);

    _expoContacts = function _expoContacts() {
      return data;
    };

    return data;
  }

  function _expoFaceDetector() {
    var data = _$$_REQUIRE(_dependencyMap[14]);

    _expoFaceDetector = function _expoFaceDetector() {
      return data;
    };

    return data;
  }

  function _expoFileSystem() {
    var data = _$$_REQUIRE(_dependencyMap[15]);

    _expoFileSystem = function _expoFileSystem() {
      return data;
    };

    return data;
  }

  function Font() {
    var data = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[16]));

    Font = function Font() {
      return data;
    };

    return data;
  }

  Object.defineProperty(exports, "Font", {
    enumerable: true,
    get: function get() {
      return Font();
    }
  });

  function _expoGl() {
    var data = _$$_REQUIRE(_dependencyMap[17]);

    _expoGl = function _expoGl() {
      return data;
    };

    return data;
  }

  function _expoGoogleSignIn() {
    var data = _$$_REQUIRE(_dependencyMap[18]);

    _expoGoogleSignIn = function _expoGoogleSignIn() {
      return data;
    };

    return data;
  }

  function _expoLocalAuthentication() {
    var data = _$$_REQUIRE(_dependencyMap[19]);

    _expoLocalAuthentication = function _expoLocalAuthentication() {
      return data;
    };

    return data;
  }

  function _expoLocalization() {
    var data = _$$_REQUIRE(_dependencyMap[20]);

    _expoLocalization = function _expoLocalization() {
      return data;
    };

    return data;
  }

  function Location() {
    var data = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[21]));

    Location = function Location() {
      return data;
    };

    return data;
  }

  Object.defineProperty(exports, "Location", {
    enumerable: true,
    get: function get() {
      return Location();
    }
  });

  function _expoMediaLibrary() {
    var data = _$$_REQUIRE(_dependencyMap[22]);

    _expoMediaLibrary = function _expoMediaLibrary() {
      return data;
    };

    return data;
  }

  function _expoPermissions() {
    var data = _$$_REQUIRE(_dependencyMap[23]);

    _expoPermissions = function _expoPermissions() {
      return data;
    };

    return data;
  }

  function _expoPrint() {
    var data = _$$_REQUIRE(_dependencyMap[24]);

    _expoPrint = function _expoPrint() {
      return data;
    };

    return data;
  }

  function _expoSensors() {
    var data = _$$_REQUIRE(_dependencyMap[25]);

    _expoSensors = function _expoSensors() {
      return data;
    };

    return data;
  }

  function SMS() {
    var data = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[26]));

    SMS = function SMS() {
      return data;
    };

    return data;
  }

  Object.defineProperty(exports, "SMS", {
    enumerable: true,
    get: function get() {
      return SMS();
    }
  });

  function TaskManager() {
    var data = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[27]));

    TaskManager = function TaskManager() {
      return data;
    };

    return data;
  }

  Object.defineProperty(exports, "TaskManager", {
    enumerable: true,
    get: function get() {
      return TaskManager();
    }
  });

  var _GestureHandler = _$$_REQUIRE(_dependencyMap[28]);

  function _reactNativeMaps() {
    var data = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[29]));

    _reactNativeMaps = function _reactNativeMaps() {
      return data;
    };

    return data;
  }

  var AR = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[30]));

  exports.AR = AR;

  var _Amplitude = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[31]));

  var _AuthSession = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[32]));

  var Brightness = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[33]));

  exports.Brightness = Brightness;

  var Calendar = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[34]));

  exports.Calendar = Calendar;

  var _DangerZone = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[35]));

  var DocumentPicker = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[36]));

  exports.DocumentPicker = DocumentPicker;

  var _ErrorRecovery = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[37]));

  var Facebook = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[38]));

  exports.Facebook = Facebook;

  var Google = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[39]));

  exports.Google = Google;

  var Haptic = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[40]));

  exports.Haptic = Haptic;

  var _Icon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[41]));

  var ImageManipulator = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[42]));

  exports.ImageManipulator = ImageManipulator;

  var ImagePicker = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[43]));

  exports.ImagePicker = ImagePicker;

  var IntentLauncherAndroid = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[44]));

  exports.IntentLauncherAndroid = IntentLauncherAndroid;

  var _KeepAwake = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[45]));

  var _Linking = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[46]));

  var MailComposer = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[47]));

  exports.MailComposer = MailComposer;

  var _Notifications = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[48]));

  var _SQLite = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[49]));

  var ScreenOrientation = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[50]));

  exports.ScreenOrientation = ScreenOrientation;

  var SecureStore = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[51]));

  exports.SecureStore = SecureStore;

  var Speech = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[52]));

  exports.Speech = Speech;

  var StoreReview = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[53]));

  exports.StoreReview = StoreReview;

  var _Svg = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[54]));

  var Updates = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[55]));

  exports.Updates = Updates;

  var Util = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[56]));

  exports.Util = Util;

  var _WebBrowser = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[57]));

  var _apisAreAvailable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[58]));

  var _takeSnapshotAsync = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[59]));

  var Audio = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[60]));

  exports.Audio = Audio;

  var _Video = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[61]));

  var _BlurView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[62]));

  var _LinearGradient = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[63]));

  var FacebookAds = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[64]));

  exports.FacebookAds = FacebookAds;

  var _AppLoading = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[65]));

  var SplashScreen = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[66]));

  exports.SplashScreen = SplashScreen;

  var _registerRootComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[67]));

  var _Logs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[68]));

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  if (typeof _expoConstants().default.manifest.env === 'object') {
    _extends(process.env, _expoConstants().default.manifest.env);
  }

  Location().installWebGeolocationPolyfill();
  Object.defineProperties(exports, {
    Pedometer: {
      enumerable: true,
      get: function get() {
        if (_reactNative().Platform.OS === 'android') {
          return _$$_REQUIRE(_dependencyMap[69]);
        } else {
          return _$$_REQUIRE(_dependencyMap[25]).Pedometer;
        }
      }
    }
  });

  if (global) {
    global.__exponent = module.exports;
    global.__expo = module.exports;
    global.Expo = module.exports;
  }
},2,[3,4,339,355,329,5,364,376,378,379,381,384,387,389,392,361,394,396,399,407,410,413,415,418,422,425,434,382,436,449,462,463,465,474,475,476,550,551,553,555,556,558,764,766,768,770,471,772,774,776,793,795,797,799,801,872,874,472,875,876,878,883,885,886,888,897,899,900,340,903]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _extends() {
    module.exports = _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  module.exports = _extends;
},3,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  _reactNative.findNodeHandle;

  if (!_expoConstants.default || !_expoConstants.default.expoVersion) {
    throw new Error("The Expo SDK requires Expo to run. It appears the native Expo modules are unavailable and this code is not running on Expo. Visit https://docs.expo.io to learn more about developing an Expo project.");
  }
},4,[1,5,329]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNative = {
    get AccessibilityInfo() {
      return _$$_REQUIRE(_dependencyMap[1]);
    },

    get ActivityIndicator() {
      return _$$_REQUIRE(_dependencyMap[2]);
    },

    get ART() {
      return _$$_REQUIRE(_dependencyMap[3]);
    },

    get Button() {
      return _$$_REQUIRE(_dependencyMap[4]);
    },

    get CheckBox() {
      return _$$_REQUIRE(_dependencyMap[5]);
    },

    get DatePickerIOS() {
      return _$$_REQUIRE(_dependencyMap[6]);
    },

    get DrawerLayoutAndroid() {
      return _$$_REQUIRE(_dependencyMap[7]);
    },

    get FlatList() {
      return _$$_REQUIRE(_dependencyMap[8]);
    },

    get Image() {
      return _$$_REQUIRE(_dependencyMap[9]);
    },

    get ImageBackground() {
      return _$$_REQUIRE(_dependencyMap[10]);
    },

    get ImageEditor() {
      return _$$_REQUIRE(_dependencyMap[11]);
    },

    get ImageStore() {
      return _$$_REQUIRE(_dependencyMap[12]);
    },

    get InputAccessoryView() {
      return _$$_REQUIRE(_dependencyMap[13]);
    },

    get KeyboardAvoidingView() {
      return _$$_REQUIRE(_dependencyMap[14]);
    },

    get ListView() {
      return _$$_REQUIRE(_dependencyMap[15]);
    },

    get MaskedViewIOS() {
      return _$$_REQUIRE(_dependencyMap[16]);
    },

    get Modal() {
      return _$$_REQUIRE(_dependencyMap[17]);
    },

    get NavigatorIOS() {
      return _$$_REQUIRE(_dependencyMap[18]);
    },

    get Picker() {
      return _$$_REQUIRE(_dependencyMap[19]);
    },

    get PickerIOS() {
      return _$$_REQUIRE(_dependencyMap[20]);
    },

    get ProgressBarAndroid() {
      return _$$_REQUIRE(_dependencyMap[21]);
    },

    get ProgressViewIOS() {
      return _$$_REQUIRE(_dependencyMap[22]);
    },

    get SafeAreaView() {
      return _$$_REQUIRE(_dependencyMap[23]);
    },

    get ScrollView() {
      return _$$_REQUIRE(_dependencyMap[24]);
    },

    get SectionList() {
      return _$$_REQUIRE(_dependencyMap[25]);
    },

    get SegmentedControlIOS() {
      return _$$_REQUIRE(_dependencyMap[26]);
    },

    get Slider() {
      return _$$_REQUIRE(_dependencyMap[27]);
    },

    get SnapshotViewIOS() {
      return _$$_REQUIRE(_dependencyMap[28]);
    },

    get Switch() {
      return _$$_REQUIRE(_dependencyMap[29]);
    },

    get RefreshControl() {
      return _$$_REQUIRE(_dependencyMap[30]);
    },

    get StatusBar() {
      return _$$_REQUIRE(_dependencyMap[31]);
    },

    get SwipeableFlatList() {
      return _$$_REQUIRE(_dependencyMap[32]);
    },

    get SwipeableListView() {
      return _$$_REQUIRE(_dependencyMap[33]);
    },

    get TabBarIOS() {
      return _$$_REQUIRE(_dependencyMap[34]);
    },

    get Text() {
      return _$$_REQUIRE(_dependencyMap[35]);
    },

    get TextInput() {
      return _$$_REQUIRE(_dependencyMap[36]);
    },

    get ToastAndroid() {
      return _$$_REQUIRE(_dependencyMap[37]);
    },

    get ToolbarAndroid() {
      return _$$_REQUIRE(_dependencyMap[38]);
    },

    get Touchable() {
      return _$$_REQUIRE(_dependencyMap[39]);
    },

    get TouchableHighlight() {
      return _$$_REQUIRE(_dependencyMap[40]);
    },

    get TouchableNativeFeedback() {
      return _$$_REQUIRE(_dependencyMap[41]);
    },

    get TouchableOpacity() {
      return _$$_REQUIRE(_dependencyMap[42]);
    },

    get TouchableWithoutFeedback() {
      return _$$_REQUIRE(_dependencyMap[43]);
    },

    get View() {
      return _$$_REQUIRE(_dependencyMap[44]);
    },

    get ViewPagerAndroid() {
      return _$$_REQUIRE(_dependencyMap[45]);
    },

    get VirtualizedList() {
      return _$$_REQUIRE(_dependencyMap[46]);
    },

    get WebView() {
      return _$$_REQUIRE(_dependencyMap[47]);
    },

    get ActionSheetIOS() {
      return _$$_REQUIRE(_dependencyMap[48]);
    },

    get Alert() {
      return _$$_REQUIRE(_dependencyMap[49]);
    },

    get AlertIOS() {
      return _$$_REQUIRE(_dependencyMap[50]);
    },

    get Animated() {
      return _$$_REQUIRE(_dependencyMap[51]);
    },

    get AppRegistry() {
      return _$$_REQUIRE(_dependencyMap[52]);
    },

    get AppState() {
      return _$$_REQUIRE(_dependencyMap[53]);
    },

    get AsyncStorage() {
      return _$$_REQUIRE(_dependencyMap[54]);
    },

    get BackAndroid() {
      return _$$_REQUIRE(_dependencyMap[55]);
    },

    get BackHandler() {
      return _$$_REQUIRE(_dependencyMap[56]);
    },

    get CameraRoll() {
      return _$$_REQUIRE(_dependencyMap[57]);
    },

    get Clipboard() {
      return _$$_REQUIRE(_dependencyMap[58]);
    },

    get DatePickerAndroid() {
      return _$$_REQUIRE(_dependencyMap[59]);
    },

    get DeviceInfo() {
      return _$$_REQUIRE(_dependencyMap[60]);
    },

    get Dimensions() {
      return _$$_REQUIRE(_dependencyMap[61]);
    },

    get Easing() {
      return _$$_REQUIRE(_dependencyMap[62]);
    },

    get findNodeHandle() {
      return _$$_REQUIRE(_dependencyMap[63]).findNodeHandle;
    },

    get I18nManager() {
      return _$$_REQUIRE(_dependencyMap[64]);
    },

    get ImagePickerIOS() {
      return _$$_REQUIRE(_dependencyMap[65]);
    },

    get InteractionManager() {
      return _$$_REQUIRE(_dependencyMap[66]);
    },

    get Keyboard() {
      return _$$_REQUIRE(_dependencyMap[67]);
    },

    get LayoutAnimation() {
      return _$$_REQUIRE(_dependencyMap[68]);
    },

    get Linking() {
      return _$$_REQUIRE(_dependencyMap[69]);
    },

    get NativeEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[70]);
    },

    get NetInfo() {
      return _$$_REQUIRE(_dependencyMap[71]);
    },

    get PanResponder() {
      return _$$_REQUIRE(_dependencyMap[72]);
    },

    get PermissionsAndroid() {
      return _$$_REQUIRE(_dependencyMap[73]);
    },

    get PixelRatio() {
      return _$$_REQUIRE(_dependencyMap[74]);
    },

    get PushNotificationIOS() {
      return _$$_REQUIRE(_dependencyMap[75]);
    },

    get Settings() {
      return _$$_REQUIRE(_dependencyMap[76]);
    },

    get Share() {
      return _$$_REQUIRE(_dependencyMap[77]);
    },

    get StatusBarIOS() {
      return _$$_REQUIRE(_dependencyMap[78]);
    },

    get StyleSheet() {
      return _$$_REQUIRE(_dependencyMap[79]);
    },

    get Systrace() {
      return _$$_REQUIRE(_dependencyMap[80]);
    },

    get TimePickerAndroid() {
      return _$$_REQUIRE(_dependencyMap[81]);
    },

    get TVEventHandler() {
      return _$$_REQUIRE(_dependencyMap[82]);
    },

    get UIManager() {
      return _$$_REQUIRE(_dependencyMap[83]);
    },

    get unstable_batchedUpdates() {
      return _$$_REQUIRE(_dependencyMap[63]).unstable_batchedUpdates;
    },

    get Vibration() {
      return _$$_REQUIRE(_dependencyMap[84]);
    },

    get VibrationIOS() {
      return _$$_REQUIRE(_dependencyMap[85]);
    },

    get YellowBox() {
      return _$$_REQUIRE(_dependencyMap[86]);
    },

    get DeviceEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[87]);
    },

    get NativeAppEventEmitter() {
      return _$$_REQUIRE(_dependencyMap[88]);
    },

    get NativeModules() {
      return _$$_REQUIRE(_dependencyMap[89]);
    },

    get Platform() {
      return _$$_REQUIRE(_dependencyMap[90]);
    },

    get processColor() {
      return _$$_REQUIRE(_dependencyMap[91]);
    },

    get requireNativeComponent() {
      return _$$_REQUIRE(_dependencyMap[92]);
    },

    get takeSnapshot() {
      return _$$_REQUIRE(_dependencyMap[93]);
    },

    get ColorPropType() {
      return _$$_REQUIRE(_dependencyMap[94]);
    },

    get EdgeInsetsPropType() {
      return _$$_REQUIRE(_dependencyMap[95]);
    },

    get PointPropType() {
      return _$$_REQUIRE(_dependencyMap[96]);
    },

    get ViewPropTypes() {
      return _$$_REQUIRE(_dependencyMap[97]);
    },

    get Navigator() {
      invariant(false, "Navigator is deprecated and has been removed from this package. It can now be installed and imported from `react-native-deprecated-custom-components` instead of `react-native`. Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html");
    }

  };
  module.exports = ReactNative;
},5,[6,7,47,156,166,247,249,250,210,238,251,253,254,255,259,212,260,261,264,266,267,269,270,271,216,241,272,273,274,275,232,277,278,282,284,167,286,292,293,172,294,179,180,244,80,295,233,296,300,127,128,181,301,311,312,313,307,314,315,316,57,56,207,83,263,317,189,219,220,297,112,318,280,134,55,319,320,321,322,54,24,323,176,71,324,325,326,33,138,8,50,74,146,327,60,169,328,256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var validateFormat = function validateFormat(format) {};

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
},6,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _$$_REQUIRE(_dependencyMap[0]);

  var Promise = _$$_REQUIRE(_dependencyMap[1]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  var AccessibilityManager = NativeModules.AccessibilityManager;
  var VOICE_OVER_EVENT = 'voiceOverDidChange';
  var ANNOUNCEMENT_DID_FINISH_EVENT = 'announcementDidFinish';

  var _subscriptions = new Map();

  var AccessibilityInfo = {
    fetch: function fetch() {
      return new Promise(function (resolve, reject) {
        AccessibilityManager.getCurrentVoiceOverState(resolve, reject);
      });
    },
    addEventListener: function addEventListener(eventName, handler) {
      var listener;

      if (eventName === 'change') {
        listener = RCTDeviceEventEmitter.addListener(VOICE_OVER_EVENT, handler);
      } else if (eventName === 'announcementFinished') {
        listener = RCTDeviceEventEmitter.addListener(ANNOUNCEMENT_DID_FINISH_EVENT, handler);
      }

      _subscriptions.set(handler, listener);

      return {
        remove: AccessibilityInfo.removeEventListener.bind(null, eventName, handler)
      };
    },
    setAccessibilityFocus: function setAccessibilityFocus(reactTag) {
      AccessibilityManager.setAccessibilityFocus(reactTag);
    },
    announceForAccessibility: function announceForAccessibility(announcement) {
      AccessibilityManager.announceForAccessibility(announcement);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    }
  };
  module.exports = AccessibilityInfo;
},7,[8,28,33]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[2]);

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }

    var _config = _slicedToArray(config, 5),
        moduleName = _config[0],
        constants = _config[1],
        methods = _config[2],
        promiseMethods = _config[3],
        syncMethods = _config[4];

    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), "Module name prefixes should've been stripped by the native side but wasn't for " + moduleName);

    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }

    var module = {};
    methods && methods.forEach(function (methodName, methodID) {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
      var isSync = syncMethods && arrayContains(syncMethods, methodID);
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });

    _extends(module, constants);

    return {
      name: moduleName,
      module: module
    };
  }

  global.__fbGenNativeModule = genModule;

  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, "Can't lazily create module without nativeRequireModuleConfig");
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }

  function genMethod(moduleID, methodID, type) {
    var fn = null;

    if (type === 'promise') {
      fn = function fn() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return new Promise(function (resolve, reject) {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
            return resolve(data);
          }, function (errorData) {
            return reject(createErrorFromErrorData(errorData));
          });
        });
      };
    } else if (type === 'sync') {
      fn = function fn() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return global.nativeCallSyncHook(moduleID, methodID, args);
      };
    } else {
      fn = function fn() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        args = args.slice(0, args.length - callbackCount);
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
      };
    }

    fn.type = type;
    return fn;
  }

  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }

  function createErrorFromErrorData(errorData) {
    var _ref = errorData || {},
        message = _ref.message,
        extraErrorInfo = _objectWithoutProperties(_ref, ["message"]);

    var error = new Error(message);
    error.framesToPop = 1;
    return _extends(error, extraErrorInfo);
  }

  var NativeModules = {};

  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else if (!global.nativeExtensions) {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

    var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[5]);

    (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
      var info = genModule(config, moduleID);

      if (!info) {
        return;
      }

      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
          defineLazyObjectProperty(NativeModules, info.name, {
            get: function get() {
              return loadModule(info.name, moduleID);
            }
          });
        }
    });
  }

  module.exports = NativeModules;
},8,[9,3,11,15,6,27]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectWithoutPropertiesLoose = _$$_REQUIRE(_dependencyMap[0]);

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  module.exports = _objectWithoutProperties;
},9,[10]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  module.exports = _objectWithoutPropertiesLoose;
},10,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArrayLimit = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableRest = _$$_REQUIRE(_dependencyMap[2]);

  function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
  }

  module.exports = _slicedToArray;
},11,[12,13,14]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  module.exports = _arrayWithHoles;
},12,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  module.exports = _iterableToArrayLimit;
},13,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  module.exports = _nonIterableRest;
},14,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var MessageQueue = _$$_REQUIRE(_dependencyMap[0]);

  var BatchedBridge = new MessageQueue();
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  module.exports = BatchedBridge;
},15,[16]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var ErrorUtils = _$$_REQUIRE(_dependencyMap[3]);

  var Systrace = _$$_REQUIRE(_dependencyMap[4]);

  var deepFreezeAndThrowOnMutationInDev = _$$_REQUIRE(_dependencyMap[5]);

  var invariant = _$$_REQUIRE(_dependencyMap[6]);

  var stringifySafe = _$$_REQUIRE(_dependencyMap[7]);

  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 131072;
  var DEBUG_INFO_LIMIT = 32;

  var MessageQueue = function () {
    function MessageQueue() {
      _classCallCheck(this, MessageQueue);

      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = {};
      this._failureCallbacks = {};
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = new Date().getTime();
      this._immediatesCallback = null;
      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }

    _createClass(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        var _this = this;

        this.__guard(function () {
          _this.__callFunction(module, method, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "callFunctionReturnResultAndFlushedQueue",
      value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
        var _this2 = this;

        var result;

        this.__guard(function () {
          result = _this2.__callFunction(module, method, args);
        });

        return [result, this.flushedQueue()];
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        var _this3 = this;

        this.__guard(function () {
          _this3.__invokeCallback(cbID, args);
        });

        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        var _this4 = this;

        this.__guard(function () {
          _this4.__callImmediates();
        });

        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return new Date().getTime() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = function () {
          return module;
        };
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module;
        var getValue = factory;

        this._lazyCallableModules[name] = function () {
          if (getValue) {
            module = getValue();
            getValue = null;
          }

          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks[this._callID] = onSucc;
          this._failureCallbacks[this._callID] = onFail;
        }

        this._callID++;

        this._queue[MODULE_IDS].push(moduleID);

        this._queue[METHOD_IDS].push(methodID);

        this._queue[PARAMS].push(params);

        var now = new Date().getTime();

        if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }

        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

        if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {}
    }, {
      key: "setImmediatesCallback",
      value: function setImmediatesCallback(fn) {
        this._immediatesCallback = fn;
      }
    }, {
      key: "__guard",
      value: function __guard(fn) {
        if (this.__shouldPauseOnThrow()) {
          fn();
        } else {
          try {
            fn();
          } catch (error) {
            ErrorUtils.reportFatalError(error);
          }
        }
      }
    }, {
      key: "__shouldPauseOnThrow",
      value: function __shouldPauseOnThrow() {
        return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;
      }
    }, {
      key: "__callImmediates",
      value: function __callImmediates() {
        Systrace.beginEvent('JSTimers.callImmediates()');

        if (this._immediatesCallback != null) {
          this._immediatesCallback();
        }

        Systrace.endEvent();
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;

        if (this.__spy) {
          Systrace.beginEvent(module + "." + method + "(" + stringifySafe(args) + ")");
        } else {
          Systrace.beginEvent(module + "." + method + "(...)");
        }

        if (this.__spy) {
          this.__spy({
            type: TO_JS,
            module: module,
            method: method,
            args: args
          });
        }

        var moduleMethods = this.getCallableModule(module);
        invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
        invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
        var result = moduleMethods[method].apply(moduleMethods, args);
        Systrace.endEvent();
        return result;
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = new Date().getTime();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

        if (!callback) {
          return;
        }

        delete this._successCallbacks[callID];
        delete this._failureCallbacks[callID];
        callback.apply(undefined, _toConsumableArray(args));
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = function (info) {
            console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);

    return MessageQueue;
  }();

  module.exports = MessageQueue;
},16,[17,21,22,23,24,25,6,26]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithoutHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArray = _$$_REQUIRE(_dependencyMap[1]);

  var nonIterableSpread = _$$_REQUIRE(_dependencyMap[2]);

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
  }

  module.exports = _toConsumableArray;
},17,[18,19,20]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  module.exports = _arrayWithoutHoles;
},18,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArray(iter) {
    if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  module.exports = _iterableToArray;
},19,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  module.exports = _nonIterableSpread;
},20,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  module.exports = _classCallCheck;
},21,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  module.exports = _createClass;
},22,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = global.ErrorUtils;
},23,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var TRACE_TAG_REACT_APPS = 131072;
  var TRACE_TAG_JS_VM_CALLS = 134217728;
  var _enabled = false;
  var _asyncCookie = 0;
  var _markStack = [];

  var _markStackIndex = -1;

  var _canInstallReactHook = false;
  var REACT_MARKER = "\u269B";
  var userTimingPolyfill = null;
  var Systrace = {
    installReactHook: function installReactHook() {
      if (_enabled) {}

      _canInstallReactHook = true;
    },
    setEnabled: function setEnabled(enabled) {
      if (_enabled !== enabled) {
        _enabled = enabled;
      }
    },
    isEnabled: function isEnabled() {
      return _enabled;
    },
    beginEvent: function beginEvent(profileName, args) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
      }
    },
    endEvent: function endEvent() {
      if (_enabled) {
        global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
      }
    },
    beginAsyncEvent: function beginAsyncEvent(profileName) {
      var cookie = _asyncCookie;

      if (_enabled) {
        _asyncCookie++;
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }

      return cookie;
    },
    endAsyncEvent: function endAsyncEvent(profileName, cookie) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie);
      }
    },
    counterEvent: function counterEvent(profileName, value) {
      if (_enabled) {
        profileName = typeof profileName === 'function' ? profileName() : profileName;
        global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
      }
    }
  };
  module.exports = Systrace;
},24,[6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function deepFreezeAndThrowOnMutationInDev(object) {
    return object;
  }

  module.exports = deepFreezeAndThrowOnMutationInDev;
},25,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function stringifySafe(arg) {
    var ret;
    var type = typeof arg;

    if (arg === undefined) {
      ret = 'undefined';
    } else if (arg === null) {
      ret = 'null';
    } else if (type === 'string') {
      ret = '"' + arg + '"';
    } else if (type === 'function') {
      try {
        ret = arg.toString();
      } catch (e) {
        ret = '[function unknown]';
      }
    } else {
      try {
        ret = JSON.stringify(arg);
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            ret = arg.toString();
          } catch (E) {}
        }
      }
    }

    return ret || '["' + type + '" failed to stringify]';
  }

  module.exports = stringifySafe;
},26,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value;
    var valueSet = false;

    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }

      return value;
    }

    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable: enumerable,
        writable: writable
      });
    }

    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable: enumerable
    });
  }

  module.exports = defineLazyObjectProperty;
},27,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Promise;
},28,[29]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  Promise.prototype['finally'] = function (onSettled) {
    return this.then(onSettled, onSettled);
  };

  module.exports = Promise;
},29,[30,32]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Promise;
  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');

  function valuePromise(value) {
    var p = new Promise(Promise._61);
    p._65 = 1;
    p._55 = value;
    return p;
  }

  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;

    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;

        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }

    return valuePromise(value);
  };

  Promise.all = function (arr) {
    var args = Array.prototype.slice.call(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._65 === 3) {
              val = val._55;
            }

            if (val._65 === 1) return res(i, val._55);
            if (val._65 === 2) reject(val._55);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;

            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }

        args[i] = val;

        if (--remaining === 0) {
          resolve(args);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      values.forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
},30,[31]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  var LAST_ERROR = null;
  var IS_ERROR = {};

  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }

  module.exports = Promise;

  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }

    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }

    this._40 = 0;
    this._65 = 0;
    this._55 = null;
    this._72 = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }

  Promise._37 = null;
  Promise._87 = null;
  Promise._61 = noop;

  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }

    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };

  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }

  function handle(self, deferred) {
    while (self._65 === 3) {
      self = self._55;
    }

    if (Promise._37) {
      Promise._37(self);
    }

    if (self._65 === 0) {
      if (self._40 === 0) {
        self._40 = 1;
        self._72 = deferred;
        return;
      }

      if (self._40 === 1) {
        self._40 = 2;
        self._72 = [self._72, deferred];
        return;
      }

      self._72.push(deferred);

      return;
    }

    handleResolved(self, deferred);
  }

  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;

      if (cb === null) {
        if (self._65 === 1) {
          resolve(deferred.promise, self._55);
        } else {
          reject(deferred.promise, self._55);
        }

        return;
      }

      var ret = tryCallOne(cb, self._55);

      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }

  function resolve(self, newValue) {
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }

    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);

      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }

      if (then === self.then && newValue instanceof Promise) {
        self._65 = 3;
        self._55 = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }

    self._65 = 1;
    self._55 = newValue;
    finale(self);
  }

  function reject(self, newValue) {
    self._65 = 2;
    self._55 = newValue;

    if (Promise._87) {
      Promise._87(self, newValue);
    }

    finale(self);
  }

  function finale(self) {
    if (self._40 === 1) {
      handle(self, self._72);
      self._72 = null;
    }

    if (self._40 === 2) {
      for (var i = 0; i < self._72.length; i++) {
        handle(self, self._72[i]);
      }

      self._72 = null;
    }
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });

    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},31,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Promise;

  Promise.prototype.done = function (onFulfilled, onRejected) {
    var self = arguments.length ? this.then.apply(this, arguments) : this;
    self.then(null, function (err) {
      setTimeout(function () {
        throw err;
      }, 0);
    });
  };
},32,[31]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[6]);

  var EventSubscriptionVendor = _$$_REQUIRE(_dependencyMap[7]);

  var RCTDeviceEventEmitter = function (_EventEmitter) {
    _inherits(RCTDeviceEventEmitter, _EventEmitter);

    function RCTDeviceEventEmitter() {
      var _this;

      _classCallCheck(this, RCTDeviceEventEmitter);

      var sharedSubscriber = new EventSubscriptionVendor();
      _this = _possibleConstructorReturn(this, _getPrototypeOf(RCTDeviceEventEmitter).call(this, sharedSubscriber));
      _this.sharedSubscriber = sharedSubscriber;
      return _this;
    }

    _createClass(RCTDeviceEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (subscription.emitter !== this) {
          subscription.emitter.removeSubscription(subscription);
        } else {
          _get(_getPrototypeOf(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
        }
      }
    }]);

    return RCTDeviceEventEmitter;
  }(EventEmitter);

  module.exports = new RCTDeviceEventEmitter();
},33,[21,22,34,37,38,40,42,45]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = _$$_REQUIRE(_dependencyMap[0]);

  var assertThisInitialized = _$$_REQUIRE(_dependencyMap[1]);

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }

    return assertThisInitialized(self);
  }

  module.exports = _possibleConstructorReturn;
},34,[35,36]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _typeof2(obj) {
    if (typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol") {
      _typeof2 = function _typeof2(obj) {
        return typeof obj;
      };
    } else {
      _typeof2 = function _typeof2(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
      };
    }

    return _typeof2(obj);
  }

  function _typeof(obj) {
    if (typeof Symbol === "function" && _typeof2(typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol") {
      module.exports = _typeof = function _typeof(obj) {
        return _typeof2(obj);
      };
    } else {
      module.exports = _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : _typeof2(obj);
      };
    }

    return _typeof(obj);
  }

  module.exports = _typeof;
},35,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  module.exports = _assertThisInitialized;
},36,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  module.exports = _getPrototypeOf;
},37,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  var superPropBase = _$$_REQUIRE(_dependencyMap[1]);

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      module.exports = _get = Reflect.get;
    } else {
      module.exports = _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  module.exports = _get;
},38,[37,39]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  module.exports = _superPropBase;
},39,[37]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf(subClass, superClass);
  }

  module.exports = _inherits;
},40,[41]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  module.exports = _setPrototypeOf;
},41,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var EmitterSubscription = _$$_REQUIRE(_dependencyMap[2]);

  var EventSubscriptionVendor = _$$_REQUIRE(_dependencyMap[3]);

  var emptyFunction = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var EventEmitter = function () {
    function EventEmitter(subscriber) {
      _classCallCheck(this, EventEmitter);

      this._subscriber = subscriber || new EventSubscriptionVendor();
    }

    _createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        var _this = this;

        return this.addListener(eventType, function () {
          _this.removeCurrentListener();

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          listener.apply(context, args);
        });
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._subscriber.removeAllSubscriptions(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
        this.removeSubscription(this._currentSubscription);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');

        this._subscriber.removeSubscription(subscription);
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
          return subscription.listener;
        }) : [];
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription) {
              this._currentSubscription = subscription;
              subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
            }
          }

          this._currentSubscription = null;
        }
      }
    }, {
      key: "removeListener",
      value: function removeListener(eventType, listener) {
        var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

        if (subscriptions) {
          for (var i = 0, l = subscriptions.length; i < l; i++) {
            var subscription = subscriptions[i];

            if (subscription && subscription.listener === listener) {
              subscription.remove();
            }
          }
        }
      }
    }]);

    return EventEmitter;
  }();

  module.exports = EventEmitter;
},42,[21,22,43,45,46,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var EventSubscription = _$$_REQUIRE(_dependencyMap[5]);

  var EmitterSubscription = function (_EventSubscription) {
    _inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(emitter, subscriber, listener, context) {
      var _this;

      _classCallCheck(this, EmitterSubscription);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(EmitterSubscription).call(this, subscriber));
      _this.emitter = emitter;
      _this.listener = listener;
      _this.context = context;
      return _this;
    }

    _createClass(EmitterSubscription, [{
      key: "remove",
      value: function remove() {
        this.emitter.removeSubscription(this);
      }
    }]);

    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},43,[21,22,34,37,40,44]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      _classCallCheck(this, EventSubscription);

      this.subscriber = subscriber;
    }

    _createClass(EventSubscription, [{
      key: "remove",
      value: function remove() {
        this.subscriber.removeSubscription(this);
      }
    }]);

    return EventSubscription;
  }();

  module.exports = EventSubscription;
},44,[21,22]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      _classCallCheck(this, EventSubscriptionVendor);

      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    _createClass(EventSubscriptionVendor, [{
      key: "addSubscription",
      value: function addSubscription(eventType, subscription) {
        invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

        if (!this._subscriptionsForType[eventType]) {
          this._subscriptionsForType[eventType] = [];
        }

        var key = this._subscriptionsForType[eventType].length;

        this._subscriptionsForType[eventType].push(subscription);

        subscription.eventType = eventType;
        subscription.key = key;
        return subscription;
      }
    }, {
      key: "removeAllSubscriptions",
      value: function removeAllSubscriptions(eventType) {
        if (eventType === undefined) {
          this._subscriptionsForType = {};
        } else {
          delete this._subscriptionsForType[eventType];
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var eventType = subscription.eventType;
        var key = subscription.key;
        var subscriptionsForType = this._subscriptionsForType[eventType];

        if (subscriptionsForType) {
          delete subscriptionsForType[key];
        }
      }
    }, {
      key: "getSubscriptionsForType",
      value: function getSubscriptionsForType(eventType) {
        return this._subscriptionsForType[eventType];
      }
    }]);

    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},45,[21,22,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);

  emptyFunction.thatReturnsThis = function () {
    return this;
  };

  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
},46,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[4]);

  var View = _$$_REQUIRE(_dependencyMap[5]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[6]);

  var RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView');
  var GRAY = '#999999';

  var ActivityIndicator = function ActivityIndicator(props, forwardedRef) {
    var onLayout = props.onLayout,
        style = props.style,
        restProps = _objectWithoutProperties(props, ["onLayout", "style"]);

    var sizeStyle;

    switch (props.size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        break;

      case 'large':
        sizeStyle = styles.sizeLarge;
        break;

      default:
        sizeStyle = {
          height: props.size,
          width: props.size
        };
        break;
    }

    var nativeProps = _objectSpread({}, restProps, {
      ref: forwardedRef,
      style: sizeStyle,
      styleAttr: 'Normal',
      indeterminate: true
    });

    return React.createElement(View, {
      onLayout: onLayout,
      style: StyleSheet.compose(styles.container, style)
    }, React.createElement(RCTActivityIndicator, nativeProps));
  };

  var ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);
  ActivityIndicatorWithRef.defaultProps = {
    animating: true,
    color: GRAY,
    hidesWhenStopped: true,
    size: 'small'
  };
  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });
  module.exports = ActivityIndicatorWithRef;
},47,[48,9,50,51,54,80,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  module.exports = _objectSpread;
},48,[49]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  module.exports = _defineProperty;
},49,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _$$_REQUIRE(_dependencyMap[0]);

  var Platform = {
    OS: 'ios',

    get Version() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.osVersion;
    },

    get isPad() {
      var constants = NativeModules.PlatformConstants;
      return constants ? constants.interfaceIdiom === 'pad' : false;
    },

    get isTVOS() {
      return Platform.isTV;
    },

    get isTV() {
      var constants = NativeModules.PlatformConstants;
      return constants ? constants.interfaceIdiom === 'tv' : false;
    },

    get isTesting() {
      var constants = NativeModules.PlatformConstants;
      return constants && constants.isTesting;
    },

    select: function select(obj) {
      return 'ios' in obj ? obj.ios : obj.default;
    }
  };
  module.exports = Platform;
},50,[8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  }
},51,[52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.5.0
   * react.production.min.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var m = _$$_REQUIRE(_dependencyMap[0]),
      n = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      p = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      q = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      r = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      t = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      u = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      v = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      w = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      x = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.async_mode") : 60111,
      y = n ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112;

  n && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.placeholder");
  var z = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function A(a, b, d, c, e, g, h, f) {
    if (!a) {
      a = undefined;
      if (undefined === b) a = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
        var k = [d, c, e, g, h, f],
            l = 0;
        a = Error(b.replace(/%s/g, function () {
          return k[l++];
        }));
        a.name = "Invariant Violation";
      }
      a.framesToPop = 1;
      throw a;
    }
  }

  function B(a) {
    for (var b = arguments.length - 1, d = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 0; c < b; c++) {
      d += "&args[]=" + encodeURIComponent(arguments[c + 1]);
    }

    A(false, "Minified React error #" + a + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", d);
  }

  var C = {
    isMounted: function isMounted() {
      return false;
    },
    enqueueForceUpdate: function enqueueForceUpdate() {},
    enqueueReplaceState: function enqueueReplaceState() {},
    enqueueSetState: function enqueueSetState() {}
  },
      D = {};

  function E(a, b, d) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = d || C;
  }

  E.prototype.isReactComponent = {};

  E.prototype.setState = function (a, b) {
    "object" !== typeof a && "function" !== typeof a && null != a ? B("85") : undefined;
    this.updater.enqueueSetState(this, a, b, "setState");
  };

  E.prototype.forceUpdate = function (a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };

  function F() {}

  F.prototype = E.prototype;

  function G(a, b, d) {
    this.props = a;
    this.context = b;
    this.refs = D;
    this.updater = d || C;
  }

  var H = G.prototype = new F();
  H.constructor = G;
  m(H, E.prototype);
  H.isPureReactComponent = true;
  var I = {
    current: null,
    currentDispatcher: null
  },
      J = Object.prototype.hasOwnProperty,
      K = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };

  function L(a, b, d) {
    var c = undefined,
        e = {},
        g = null,
        h = null;
    if (null != b) for (c in undefined !== b.ref && (h = b.ref), undefined !== b.key && (g = "" + b.key), b) {
      J.call(b, c) && !K.hasOwnProperty(c) && (e[c] = b[c]);
    }
    var f = arguments.length - 2;
    if (1 === f) e.children = d;else if (1 < f) {
      for (var k = Array(f), l = 0; l < f; l++) {
        k[l] = arguments[l + 2];
      }

      e.children = k;
    }
    if (a && a.defaultProps) for (c in f = a.defaultProps, f) {
      undefined === e[c] && (e[c] = f[c]);
    }
    return {
      $$typeof: p,
      type: a,
      key: g,
      ref: h,
      props: e,
      _owner: I.current
    };
  }

  function M(a, b) {
    return {
      $$typeof: p,
      type: a.type,
      key: b,
      ref: a.ref,
      props: a.props,
      _owner: a._owner
    };
  }

  function N(a) {
    return "object" === typeof a && null !== a && a.$$typeof === p;
  }

  function escape(a) {
    var b = {
      "=": "=0",
      ":": "=2"
    };
    return "$" + ("" + a).replace(/[=:]/g, function (a) {
      return b[a];
    });
  }

  var O = /\/+/g,
      P = [];

  function Q(a, b, d, c) {
    if (P.length) {
      var e = P.pop();
      e.result = a;
      e.keyPrefix = b;
      e.func = d;
      e.context = c;
      e.count = 0;
      return e;
    }

    return {
      result: a,
      keyPrefix: b,
      func: d,
      context: c,
      count: 0
    };
  }

  function R(a) {
    a.result = null;
    a.keyPrefix = null;
    a.func = null;
    a.context = null;
    a.count = 0;
    10 > P.length && P.push(a);
  }

  function S(a, b, d, c) {
    var e = typeof a;
    if ("undefined" === e || "boolean" === e) a = null;
    var g = false;
    if (null === a) g = true;else switch (e) {
      case "string":
      case "number":
        g = true;
        break;

      case "object":
        switch (a.$$typeof) {
          case p:
          case q:
            g = true;
        }

    }
    if (g) return d(c, a, "" === b ? "." + T(a, 0) : b), 1;
    g = 0;
    b = "" === b ? "." : b + ":";
    if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
      e = a[h];
      var f = b + T(e, h);
      g += S(e, f, d, c);
    } else if (null === a || "object" !== typeof a ? f = null : (f = z && a[z] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), h = 0; !(e = a.next()).done;) {
      e = e.value, f = b + T(e, h++), g += S(e, f, d, c);
    } else "object" === e && (d = "" + a, B("31", "[object Object]" === d ? "object with keys {" + Object.keys(a).join(", ") + "}" : d, ""));
    return g;
  }

  function U(a, b, d) {
    return null == a ? 0 : S(a, "", b, d);
  }

  function T(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
  }

  function V(a, b) {
    a.func.call(a.context, b, a.count++);
  }

  function aa(a, b, d) {
    var c = a.result,
        e = a.keyPrefix;
    a = a.func.call(a.context, b, a.count++);
    Array.isArray(a) ? W(a, c, d, function (a) {
      return a;
    }) : null != a && (N(a) && (a = M(a, e + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(O, "$&/") + "/") + d)), c.push(a));
  }

  function W(a, b, d, c, e) {
    var g = "";
    null != d && (g = ("" + d).replace(O, "$&/") + "/");
    b = Q(b, g, c, e);
    U(a, aa, b);
    R(b);
  }

  function ba(a, b) {
    var d = I.currentDispatcher;
    null === d ? B("277") : undefined;
    return d.readContext(a, b);
  }

  var X = {
    Children: {
      map: function map(a, b, d) {
        if (null == a) return a;
        var c = [];
        W(a, c, null, b, d);
        return c;
      },
      forEach: function forEach(a, b, d) {
        if (null == a) return a;
        b = Q(null, null, b, d);
        U(a, V, b);
        R(b);
      },
      count: function count(a) {
        return U(a, function () {
          return null;
        }, null);
      },
      toArray: function toArray(a) {
        var b = [];
        W(a, b, null, function (a) {
          return a;
        });
        return b;
      },
      only: function only(a) {
        N(a) ? undefined : B("143");
        return a;
      }
    },
    createRef: function createRef() {
      return {
        current: null
      };
    },
    Component: E,
    PureComponent: G,
    createContext: function createContext(a, b) {
      undefined === b && (b = null);
      a = {
        $$typeof: w,
        _calculateChangedBits: b,
        _currentValue: a,
        _currentValue2: a,
        Provider: null,
        Consumer: null,
        unstable_read: null
      };
      a.Provider = {
        $$typeof: v,
        _context: a
      };
      a.Consumer = a;
      a.unstable_read = ba.bind(null, a);
      return a;
    },
    forwardRef: function forwardRef(a) {
      return {
        $$typeof: y,
        render: a
      };
    },
    Fragment: r,
    StrictMode: t,
    unstable_AsyncMode: x,
    unstable_Profiler: u,
    createElement: L,
    cloneElement: function cloneElement(a, b, d) {
      null === a || undefined === a ? B("267", a) : undefined;
      var c = undefined,
          e = m({}, a.props),
          g = a.key,
          h = a.ref,
          f = a._owner;

      if (null != b) {
        undefined !== b.ref && (h = b.ref, f = I.current);
        undefined !== b.key && (g = "" + b.key);
        var k = undefined;
        a.type && a.type.defaultProps && (k = a.type.defaultProps);

        for (c in b) {
          J.call(b, c) && !K.hasOwnProperty(c) && (e[c] = undefined === b[c] && undefined !== k ? k[c] : b[c]);
        }
      }

      c = arguments.length - 2;
      if (1 === c) e.children = d;else if (1 < c) {
        k = Array(c);

        for (var l = 0; l < c; l++) {
          k[l] = arguments[l + 2];
        }

        e.children = k;
      }
      return {
        $$typeof: p,
        type: a.type,
        key: g,
        ref: h,
        props: e,
        _owner: f
      };
    },
    createFactory: function createFactory(a) {
      var b = L.bind(null, a);
      b.type = a;
      return b;
    },
    isValidElement: N,
    version: "16.5.0",
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: I,
      assign: m
    }
  },
      Y = {
    default: X
  },
      Z = Y && X || Y;
  module.exports = Z.default || Z;
},52,[53]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }

      var test1 = new String('abc');
      test1[5] = 'de';

      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      }

      var test2 = {};

      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }

      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });

      if (order2.join('') !== '0123456789') {
        return false;
      }

      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });

      if (Object.keys(_extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      return false;
    }
  }

  module.exports = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;

    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);

      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }

      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);

        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }

    return to;
  };
},53,[3]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var PixelRatio = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var StyleSheetValidation = _$$_REQUIRE(_dependencyMap[3]);

  var flatten = _$$_REQUIRE(_dependencyMap[4]);

  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }

  var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  module.exports = {
    hairlineWidth: hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFill,
    compose: function compose(style1, style2) {
      if (style1 != null && style2 != null) {
        return [style1, style2];
      } else {
        return style1 != null ? style1 : style2;
      }
    },
    flatten: flatten,
    setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
      var value;

      if (typeof ReactNativeStyleAttributes[property] === 'string') {
        value = {};
      } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
        value = ReactNativeStyleAttributes[property];
      } else {
        console.error(property + " is not a valid style attribute");
        return;
      }

      ReactNativeStyleAttributes[property] = _objectSpread({}, value, {
        process: process
      });
    },
    create: function create(obj) {
      return obj;
    }
  };
},54,[48,55,58,78,79]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var Dimensions = _$$_REQUIRE(_dependencyMap[2]);

  var PixelRatio = function () {
    function PixelRatio() {
      _classCallCheck(this, PixelRatio);
    }

    _createClass(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);

    return PixelRatio;
  }();

  module.exports = PixelRatio;
},55,[21,22,56]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[5]);

  var invariant = _$$_REQUIRE(_dependencyMap[6]);

  var eventEmitter = new EventEmitter();
  var dimensionsInitialized = false;
  var dimensions = {};

  var Dimensions = function () {
    function Dimensions() {
      _classCallCheck(this, Dimensions);
    }

    _createClass(Dimensions, null, [{
      key: "set",
      value: function set(dims) {
        if (dims && dims.windowPhysicalPixels) {
          dims = JSON.parse(JSON.stringify(dims));
          var windowPhysicalPixels = dims.windowPhysicalPixels;
          dims.window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };
          {
            dims.screen = dims.window;
          }
          delete dims.windowPhysicalPixels;
        }

        _extends(dimensions, dims);

        if (dimensionsInitialized) {
          eventEmitter.emit('change', {
            window: dimensions.window,
            screen: dimensions.screen
          });
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "get",
      value: function get(dim) {
        invariant(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        eventEmitter.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
        eventEmitter.removeListener(type, handler);
      }
    }]);

    return Dimensions;
  }();

  var dims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
  var nativeExtensionsEnabled = true;

  if (!dims) {
    var DeviceInfo = _$$_REQUIRE(_dependencyMap[7]);

    dims = DeviceInfo.Dimensions;
    nativeExtensionsEnabled = false;
  }

  invariant(dims, 'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');
  Dimensions.set(dims);

  if (!nativeExtensionsEnabled) {
    RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
      Dimensions.set(update);
    });
  }

  module.exports = Dimensions;
},56,[3,21,22,42,50,33,6,57]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DeviceInfo = _$$_REQUIRE(_dependencyMap[0]).DeviceInfo;

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');
  module.exports = DeviceInfo;
},57,[8,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ImageStylePropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var TextStylePropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[4]);

  var processColor = _$$_REQUIRE(_dependencyMap[5]);

  var processTransform = _$$_REQUIRE(_dependencyMap[6]);

  var sizesDiffer = _$$_REQUIRE(_dependencyMap[7]);

  var ReactNativeStyleAttributes = _objectSpread({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));

  ReactNativeStyleAttributes.transform = {
    process: processTransform
  };
  ReactNativeStyleAttributes.shadowOffset = {
    diff: sizesDiffer
  };
  var colorAttributes = {
    process: processColor
  };
  ReactNativeStyleAttributes.backgroundColor = colorAttributes;
  ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
  ReactNativeStyleAttributes.borderColor = colorAttributes;
  ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
  ReactNativeStyleAttributes.borderRightColor = colorAttributes;
  ReactNativeStyleAttributes.borderTopColor = colorAttributes;
  ReactNativeStyleAttributes.borderStartColor = colorAttributes;
  ReactNativeStyleAttributes.borderEndColor = colorAttributes;
  ReactNativeStyleAttributes.color = colorAttributes;
  ReactNativeStyleAttributes.shadowColor = colorAttributes;
  ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
  ReactNativeStyleAttributes.tintColor = colorAttributes;
  ReactNativeStyleAttributes.textShadowColor = colorAttributes;
  ReactNativeStyleAttributes.overlayColor = colorAttributes;
  module.exports = ReactNativeStyleAttributes;
},58,[48,59,72,73,63,74,75,77]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var ImageResizeMode = _$$_REQUIRE(_dependencyMap[2]);

  var LayoutPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var ShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[5]);

  var TransformPropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var ImageStylePropTypes = _objectSpread({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderWidth: ReactPropTypes.number,
    borderRadius: ReactPropTypes.number,
    overflow: ReactPropTypes.oneOf(['visible', 'hidden']),
    tintColor: ColorPropType,
    opacity: ReactPropTypes.number,
    overlayColor: ReactPropTypes.string,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number
  });

  module.exports = ImageStylePropTypes;
},59,[48,60,62,64,65,68,69]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var normalizeColor = _$$_REQUIRE(_dependencyMap[0]);

  var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
    var color = props[propName];

    if (color === undefined || color === null) {
      if (isRequired) {
        return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
      }

      return;
    }

    if (typeof color === 'number') {
      return;
    }

    if (normalizeColor(color) === null) {
      return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + "Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n");
    }
  };

  var ColorPropType = colorPropType.bind(null, false);
  ColorPropType.isRequired = colorPropType.bind(null, true);
  module.exports = ColorPropType;
},60,[61]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function normalizeColor(color) {
    var matchers = getMatchers();
    var match;

    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }

      return null;
    }

    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }

    if (names.hasOwnProperty(color)) {
      return names[color];
    }

    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
    }

    if (match = matchers.rgba.exec(color)) {
      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
    }

    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
    }

    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }

    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
    }

    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
    }

    if (match = matchers.hsla.exec(color)) {
      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
    }

    return null;
  }

  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }

    if (t > 1) {
      t -= 1;
    }

    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }

    if (t < 0.5) {
      return q;
    }

    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }

    return p;
  }

  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }

  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";

  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }

  var cachedMatchers;

  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }

    return cachedMatchers;
  }

  function parse255(str) {
    var int = parseInt(str, 10);

    if (int < 0) {
      return 0;
    }

    if (int > 255) {
      return 255;
    }

    return int;
  }

  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }

  function parse1(str) {
    var num = parseFloat(str);

    if (num < 0) {
      return 0;
    }

    if (num > 1) {
      return 255;
    }

    return Math.round(num * 255);
  }

  function parsePercentage(str) {
    var int = parseFloat(str);

    if (int < 0) {
      return 0;
    }

    if (int > 100) {
      return 1;
    }

    return int / 100;
  }

  var names = {
    transparent: 0x00000000,
    aliceblue: 0xf0f8ffff,
    antiquewhite: 0xfaebd7ff,
    aqua: 0x00ffffff,
    aquamarine: 0x7fffd4ff,
    azure: 0xf0ffffff,
    beige: 0xf5f5dcff,
    bisque: 0xffe4c4ff,
    black: 0x000000ff,
    blanchedalmond: 0xffebcdff,
    blue: 0x0000ffff,
    blueviolet: 0x8a2be2ff,
    brown: 0xa52a2aff,
    burlywood: 0xdeb887ff,
    burntsienna: 0xea7e5dff,
    cadetblue: 0x5f9ea0ff,
    chartreuse: 0x7fff00ff,
    chocolate: 0xd2691eff,
    coral: 0xff7f50ff,
    cornflowerblue: 0x6495edff,
    cornsilk: 0xfff8dcff,
    crimson: 0xdc143cff,
    cyan: 0x00ffffff,
    darkblue: 0x00008bff,
    darkcyan: 0x008b8bff,
    darkgoldenrod: 0xb8860bff,
    darkgray: 0xa9a9a9ff,
    darkgreen: 0x006400ff,
    darkgrey: 0xa9a9a9ff,
    darkkhaki: 0xbdb76bff,
    darkmagenta: 0x8b008bff,
    darkolivegreen: 0x556b2fff,
    darkorange: 0xff8c00ff,
    darkorchid: 0x9932ccff,
    darkred: 0x8b0000ff,
    darksalmon: 0xe9967aff,
    darkseagreen: 0x8fbc8fff,
    darkslateblue: 0x483d8bff,
    darkslategray: 0x2f4f4fff,
    darkslategrey: 0x2f4f4fff,
    darkturquoise: 0x00ced1ff,
    darkviolet: 0x9400d3ff,
    deeppink: 0xff1493ff,
    deepskyblue: 0x00bfffff,
    dimgray: 0x696969ff,
    dimgrey: 0x696969ff,
    dodgerblue: 0x1e90ffff,
    firebrick: 0xb22222ff,
    floralwhite: 0xfffaf0ff,
    forestgreen: 0x228b22ff,
    fuchsia: 0xff00ffff,
    gainsboro: 0xdcdcdcff,
    ghostwhite: 0xf8f8ffff,
    gold: 0xffd700ff,
    goldenrod: 0xdaa520ff,
    gray: 0x808080ff,
    green: 0x008000ff,
    greenyellow: 0xadff2fff,
    grey: 0x808080ff,
    honeydew: 0xf0fff0ff,
    hotpink: 0xff69b4ff,
    indianred: 0xcd5c5cff,
    indigo: 0x4b0082ff,
    ivory: 0xfffff0ff,
    khaki: 0xf0e68cff,
    lavender: 0xe6e6faff,
    lavenderblush: 0xfff0f5ff,
    lawngreen: 0x7cfc00ff,
    lemonchiffon: 0xfffacdff,
    lightblue: 0xadd8e6ff,
    lightcoral: 0xf08080ff,
    lightcyan: 0xe0ffffff,
    lightgoldenrodyellow: 0xfafad2ff,
    lightgray: 0xd3d3d3ff,
    lightgreen: 0x90ee90ff,
    lightgrey: 0xd3d3d3ff,
    lightpink: 0xffb6c1ff,
    lightsalmon: 0xffa07aff,
    lightseagreen: 0x20b2aaff,
    lightskyblue: 0x87cefaff,
    lightslategray: 0x778899ff,
    lightslategrey: 0x778899ff,
    lightsteelblue: 0xb0c4deff,
    lightyellow: 0xffffe0ff,
    lime: 0x00ff00ff,
    limegreen: 0x32cd32ff,
    linen: 0xfaf0e6ff,
    magenta: 0xff00ffff,
    maroon: 0x800000ff,
    mediumaquamarine: 0x66cdaaff,
    mediumblue: 0x0000cdff,
    mediumorchid: 0xba55d3ff,
    mediumpurple: 0x9370dbff,
    mediumseagreen: 0x3cb371ff,
    mediumslateblue: 0x7b68eeff,
    mediumspringgreen: 0x00fa9aff,
    mediumturquoise: 0x48d1ccff,
    mediumvioletred: 0xc71585ff,
    midnightblue: 0x191970ff,
    mintcream: 0xf5fffaff,
    mistyrose: 0xffe4e1ff,
    moccasin: 0xffe4b5ff,
    navajowhite: 0xffdeadff,
    navy: 0x000080ff,
    oldlace: 0xfdf5e6ff,
    olive: 0x808000ff,
    olivedrab: 0x6b8e23ff,
    orange: 0xffa500ff,
    orangered: 0xff4500ff,
    orchid: 0xda70d6ff,
    palegoldenrod: 0xeee8aaff,
    palegreen: 0x98fb98ff,
    paleturquoise: 0xafeeeeff,
    palevioletred: 0xdb7093ff,
    papayawhip: 0xffefd5ff,
    peachpuff: 0xffdab9ff,
    peru: 0xcd853fff,
    pink: 0xffc0cbff,
    plum: 0xdda0ddff,
    powderblue: 0xb0e0e6ff,
    purple: 0x800080ff,
    rebeccapurple: 0x663399ff,
    red: 0xff0000ff,
    rosybrown: 0xbc8f8fff,
    royalblue: 0x4169e1ff,
    saddlebrown: 0x8b4513ff,
    salmon: 0xfa8072ff,
    sandybrown: 0xf4a460ff,
    seagreen: 0x2e8b57ff,
    seashell: 0xfff5eeff,
    sienna: 0xa0522dff,
    silver: 0xc0c0c0ff,
    skyblue: 0x87ceebff,
    slateblue: 0x6a5acdff,
    slategray: 0x708090ff,
    slategrey: 0x708090ff,
    snow: 0xfffafaff,
    springgreen: 0x00ff7fff,
    steelblue: 0x4682b4ff,
    tan: 0xd2b48cff,
    teal: 0x008080ff,
    thistle: 0xd8bfd8ff,
    tomato: 0xff6347ff,
    turquoise: 0x40e0d0ff,
    violet: 0xee82eeff,
    wheat: 0xf5deb3ff,
    white: 0xffffffff,
    whitesmoke: 0xf5f5f5ff,
    yellow: 0xffff00ff,
    yellowgreen: 0x9acd32ff
  };
  module.exports = normalizeColor;
},61,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var keyMirror = _$$_REQUIRE(_dependencyMap[0]);

  var ImageResizeMode = keyMirror({
    contain: null,
    cover: null,
    stretch: null,
    center: null,
    repeat: null
  });
  module.exports = ImageResizeMode;
},62,[63]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var keyMirror = function keyMirror(obj) {
    var ret = {};
    var key;
    !(obj instanceof Object && !Array.isArray(obj)) ? invariant(false) : undefined;

    for (key in obj) {
      if (!obj.hasOwnProperty(key)) {
        continue;
      }

      ret[key] = key;
    }

    return ret;
  };

  module.exports = keyMirror;
},63,[6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var LayoutPropTypes = {
    display: ReactPropTypes.oneOf(['none', 'flex']),
    width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    start: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    end: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    marginEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingStart: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    paddingEnd: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderStartWidth: ReactPropTypes.number,
    borderEndWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    position: ReactPropTypes.oneOf(['absolute', 'relative']),
    flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
    flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap', 'wrap-reverse']),
    justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly']),
    alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),
    alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),
    overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),
    flex: ReactPropTypes.number,
    flexGrow: ReactPropTypes.number,
    flexShrink: ReactPropTypes.number,
    flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),
    aspectRatio: ReactPropTypes.number,
    zIndex: ReactPropTypes.number,
    direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
  };
  module.exports = LayoutPropTypes;
},64,[65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  {
    module.exports = _$$_REQUIRE(_dependencyMap[0])();
  }
},65,[66]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = _$$_REQUIRE(_dependencyMap[0]);

  function emptyFunction() {}

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }

      var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      err.name = 'Invariant Violation';
      throw err;
    }

    ;
    shim.isRequired = shim;

    function getShim() {
      return shim;
    }

    ;
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim
    };
    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},66,[67]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  module.exports = ReactPropTypesSecret;
},67,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[1]);

  var ShadowPropTypesIOS = {
    shadowColor: ColorPropType,
    shadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    shadowOpacity: ReactPropTypes.number,
    shadowRadius: ReactPropTypes.number
  };
  module.exports = ShadowPropTypesIOS;
},68,[60,65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var deprecatedPropType = _$$_REQUIRE(_dependencyMap[1]);

  var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The transformMatrix style property is deprecated. Use `transform: [{ matrix: ... }]` instead.");
    }
  };

  var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
    if (props[propName]) {
      return new Error("The decomposedMatrix style property is deprecated. Use `transform: [...]` instead.");
    }
  };

  var TransformPropTypes = {
    transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
      perspective: ReactPropTypes.number
    }), ReactPropTypes.shape({
      rotate: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateY: ReactPropTypes.string
    }), ReactPropTypes.shape({
      rotateZ: ReactPropTypes.string
    }), ReactPropTypes.shape({
      scale: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      scaleY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateX: ReactPropTypes.number
    }), ReactPropTypes.shape({
      translateY: ReactPropTypes.number
    }), ReactPropTypes.shape({
      skewX: ReactPropTypes.string
    }), ReactPropTypes.shape({
      skewY: ReactPropTypes.string
    })])),
    transformMatrix: TransformMatrixPropType,
    decomposedMatrix: DecomposedMatrixPropType,
    scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
    translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
  };
  module.exports = TransformPropTypes;
},69,[65,70]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var UIManager = _$$_REQUIRE(_dependencyMap[0]);

  function deprecatedPropType(propType, explanation) {
    return function validate(props, propName, componentName) {
      if (!UIManager[componentName] && props[propName] !== undefined) {
        console.warn("`" + propName + "` supplied to `" + componentName + "` has been deprecated. " + explanation);
      }

      for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        rest[_key - 3] = arguments[_key];
      }

      return propType.apply(undefined, [props, propName, componentName].concat(rest));
    };
  }

  module.exports = deprecatedPropType;
},70,[71]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _$$_REQUIRE(_dependencyMap[0]);

  var Platform = _$$_REQUIRE(_dependencyMap[1]);

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[2]);

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var UIManager = NativeModules.UIManager;
  invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');
  UIManager.__takeSnapshot = UIManager.takeSnapshot;

  UIManager.takeSnapshot = function () {
    invariant(false, "UIManager.takeSnapshot should not be called directly. Use ReactNative.takeSnapshot instead.");
  };

  {
    Object.keys(UIManager).forEach(function (viewName) {
      var viewConfig = UIManager[viewName];

      if (viewConfig.Manager) {
        defineLazyObjectProperty(viewConfig, 'Constants', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var constants = {};
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value !== 'function') {
                constants[key] = value;
              }
            });
            return constants;
          }
        });
        defineLazyObjectProperty(viewConfig, 'Commands', {
          get: function get() {
            var viewManager = NativeModules[viewConfig.Manager];
            var commands = {};
            var index = 0;
            viewManager && Object.keys(viewManager).forEach(function (key) {
              var value = viewManager[key];

              if (typeof value === 'function') {
                commands[key] = index++;
              }
            });
            return commands;
          }
        });
      }
    });
  }
  module.exports = UIManager;
},71,[8,50,27,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var TextStylePropTypes = _objectSpread({}, ViewStylePropTypes, {
    color: ColorPropType,
    fontFamily: ReactPropTypes.string,
    fontSize: ReactPropTypes.number,
    fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
    fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
    fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
    textShadowOffset: ReactPropTypes.shape({
      width: ReactPropTypes.number,
      height: ReactPropTypes.number
    }),
    textShadowRadius: ReactPropTypes.number,
    textShadowColor: ColorPropType,
    letterSpacing: ReactPropTypes.number,
    lineHeight: ReactPropTypes.number,
    textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
    textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
    includeFontPadding: ReactPropTypes.bool,
    textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
    textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
    textDecorationColor: ColorPropType,
    textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
    writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
  });

  module.exports = TextStylePropTypes;
},72,[48,60,65,73]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var LayoutPropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var ReactPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var ShadowPropTypesIOS = _$$_REQUIRE(_dependencyMap[4]);

  var TransformPropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var ViewStylePropTypes = _objectSpread({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
    backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
    backgroundColor: ColorPropType,
    borderColor: ColorPropType,
    borderTopColor: ColorPropType,
    borderRightColor: ColorPropType,
    borderBottomColor: ColorPropType,
    borderLeftColor: ColorPropType,
    borderStartColor: ColorPropType,
    borderEndColor: ColorPropType,
    borderRadius: ReactPropTypes.number,
    borderTopLeftRadius: ReactPropTypes.number,
    borderTopRightRadius: ReactPropTypes.number,
    borderTopStartRadius: ReactPropTypes.number,
    borderTopEndRadius: ReactPropTypes.number,
    borderBottomLeftRadius: ReactPropTypes.number,
    borderBottomRightRadius: ReactPropTypes.number,
    borderBottomStartRadius: ReactPropTypes.number,
    borderBottomEndRadius: ReactPropTypes.number,
    borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
    borderWidth: ReactPropTypes.number,
    borderTopWidth: ReactPropTypes.number,
    borderRightWidth: ReactPropTypes.number,
    borderBottomWidth: ReactPropTypes.number,
    borderLeftWidth: ReactPropTypes.number,
    opacity: ReactPropTypes.number,
    elevation: ReactPropTypes.number
  });

  module.exports = ViewStylePropTypes;
},73,[48,60,64,65,68,69]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var normalizeColor = _$$_REQUIRE(_dependencyMap[1]);

  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }

    var int32Color = normalizeColor(color);

    if (int32Color === null || int32Color === undefined) {
      return undefined;
    }

    int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;
    return int32Color;
  }

  module.exports = processColor;
},74,[50,61]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var MatrixMath = _$$_REQUIRE(_dependencyMap[0]);

  var Platform = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var stringifySafe = _$$_REQUIRE(_dependencyMap[3]);

  function processTransform(transform) {
    {
      return transform;
    }
    var result = MatrixMath.createIdentityMatrix();
    transform.forEach(function (transformation) {
      var key = Object.keys(transformation)[0];
      var value = transformation[key];

      switch (key) {
        case 'matrix':
          MatrixMath.multiplyInto(result, result, value);
          break;

        case 'perspective':
          _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);

          break;

        case 'rotateX':
          _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);

          break;

        case 'rotateY':
          _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);

          break;

        case 'rotate':
        case 'rotateZ':
          _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);

          break;

        case 'scale':
          _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);

          break;

        case 'scaleX':
          _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);

          break;

        case 'scaleY':
          _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);

          break;

        case 'translate':
          _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);

          break;

        case 'translateX':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);

          break;

        case 'translateY':
          _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);

          break;

        case 'skewX':
          _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);

          break;

        case 'skewY':
          _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);

          break;

        default:
          throw new Error('Invalid transform name: ' + key);
      }
    });
    return result;
  }

  function _multiplyTransform(result, matrixMathFunction, args) {
    var matrixToApply = MatrixMath.createIdentityMatrix();
    var argsWithIdentity = [matrixToApply].concat(args);
    matrixMathFunction.apply(this, argsWithIdentity);
    MatrixMath.multiplyInto(result, result, matrixToApply);
  }

  function _convertToRadians(value) {
    var floatValue = parseFloat(value);
    return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
  }

  module.exports = processTransform;
},75,[76,50,6,26]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  var MatrixMath = {
    createIdentityMatrix: function createIdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    createCopy: function createCopy(m) {
      return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
    },
    createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
      var a = 2 / (right - left);
      var b = 2 / (top - bottom);
      var c = -2 / (far - near);
      var tx = -(right + left) / (right - left);
      var ty = -(top + bottom) / (top - bottom);
      var tz = -(far + near) / (far - near);
      return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
    },
    createFrustum: function createFrustum(left, right, bottom, top, near, far) {
      var r_width = 1 / (right - left);
      var r_height = 1 / (top - bottom);
      var r_depth = 1 / (near - far);
      var x = 2 * (near * r_width);
      var y = 2 * (near * r_height);
      var A = (right + left) * r_width;
      var B = (top + bottom) * r_height;
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
    },
    createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
      var h = 1 / Math.tan(fovInRadians / 2);
      var r_depth = 1 / (near - far);
      var C = (far + near) * r_depth;
      var D = 2 * (far * near * r_depth);
      return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
    },
    createTranslate2d: function createTranslate2d(x, y) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseTranslate2dCommand(mat, x, y);
      return mat;
    },
    reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
    },
    reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
      matrixCommand[12] = x;
      matrixCommand[13] = y;
      matrixCommand[14] = z;
    },
    createScale: function createScale(factor) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseScaleCommand(mat, factor);
      return mat;
    },
    reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
      matrixCommand[5] = factor;
    },
    reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
      matrixCommand[0] = x;
      matrixCommand[5] = y;
      matrixCommand[10] = z;
    },
    reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
      matrixCommand[11] = -1 / p;
    },
    reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
      matrixCommand[0] = factor;
    },
    reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
      matrixCommand[5] = factor;
    },
    reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
      matrixCommand[10] = factor;
    },
    reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
      matrixCommand[5] = Math.cos(radians);
      matrixCommand[6] = Math.sin(radians);
      matrixCommand[9] = -Math.sin(radians);
      matrixCommand[10] = Math.cos(radians);
    },
    reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
      matrixCommand[0] = Math.cos(amount);
      matrixCommand[2] = -Math.sin(amount);
      matrixCommand[8] = Math.sin(amount);
      matrixCommand[10] = Math.cos(amount);
    },
    reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
      matrixCommand[0] = Math.cos(radians);
      matrixCommand[1] = Math.sin(radians);
      matrixCommand[4] = -Math.sin(radians);
      matrixCommand[5] = Math.cos(radians);
    },
    createRotateZ: function createRotateZ(radians) {
      var mat = MatrixMath.createIdentityMatrix();
      MatrixMath.reuseRotateZCommand(mat, radians);
      return mat;
    },
    reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
      matrixCommand[4] = Math.tan(radians);
    },
    reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
      matrixCommand[1] = Math.tan(radians);
    },
    multiplyInto: function multiplyInto(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7],
          a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11],
          a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    },
    determinant: function determinant(matrix) {
      var _matrix = _slicedToArray(matrix, 16),
          m00 = _matrix[0],
          m01 = _matrix[1],
          m02 = _matrix[2],
          m03 = _matrix[3],
          m10 = _matrix[4],
          m11 = _matrix[5],
          m12 = _matrix[6],
          m13 = _matrix[7],
          m20 = _matrix[8],
          m21 = _matrix[9],
          m22 = _matrix[10],
          m23 = _matrix[11],
          m30 = _matrix[12],
          m31 = _matrix[13],
          m32 = _matrix[14],
          m33 = _matrix[15];

      return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
    },
    inverse: function inverse(matrix) {
      var det = MatrixMath.determinant(matrix);

      if (!det) {
        return matrix;
      }

      var _matrix2 = _slicedToArray(matrix, 16),
          m00 = _matrix2[0],
          m01 = _matrix2[1],
          m02 = _matrix2[2],
          m03 = _matrix2[3],
          m10 = _matrix2[4],
          m11 = _matrix2[5],
          m12 = _matrix2[6],
          m13 = _matrix2[7],
          m20 = _matrix2[8],
          m21 = _matrix2[9],
          m22 = _matrix2[10],
          m23 = _matrix2[11],
          m30 = _matrix2[12],
          m31 = _matrix2[13],
          m32 = _matrix2[14],
          m33 = _matrix2[15];

      return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
    },
    transpose: function transpose(m) {
      return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
    },
    multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
      var _v = _slicedToArray(v, 4),
          vx = _v[0],
          vy = _v[1],
          vz = _v[2],
          vw = _v[3];

      return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
    },
    v3Length: function v3Length(a) {
      return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    },
    v3Normalize: function v3Normalize(vector, v3Length) {
      var im = 1 / (v3Length || MatrixMath.v3Length(vector));
      return [vector[0] * im, vector[1] * im, vector[2] * im];
    },
    v3Dot: function v3Dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    },
    v3Combine: function v3Combine(a, b, aScale, bScale) {
      return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
    },
    v3Cross: function v3Cross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    },
    quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
      var _q = _slicedToArray(q, 4),
          qx = _q[0],
          qy = _q[1],
          qz = _q[2],
          qw = _q[3];

      var qw2 = qw * qw;
      var qx2 = qx * qx;
      var qy2 = qy * qy;
      var qz2 = qz * qz;
      var test = qx * qy + qz * qw;
      var unit = qw2 + qx2 + qy2 + qz2;
      var conv = 180 / Math.PI;

      if (test > 0.49999 * unit) {
        return [0, 2 * Math.atan2(qx, qw) * conv, 90];
      }

      if (test < -0.49999 * unit) {
        return [0, -2 * Math.atan2(qx, qw) * conv, -90];
      }

      return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
    },
    roundTo3Places: function roundTo3Places(n) {
      var arr = n.toString().split('e');
      return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
    },
    decomposeMatrix: function decomposeMatrix(transformMatrix) {
      invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);
      var perspective = [];
      var quaternion = [];
      var scale = [];
      var skew = [];
      var translation = [];

      if (!transformMatrix[15]) {
        return;
      }

      var matrix = [];
      var perspectiveMatrix = [];

      for (var i = 0; i < 4; i++) {
        matrix.push([]);

        for (var j = 0; j < 4; j++) {
          var value = transformMatrix[i * 4 + j] / transformMatrix[15];
          matrix[i].push(value);
          perspectiveMatrix.push(j === 3 ? 0 : value);
        }
      }

      perspectiveMatrix[15] = 1;

      if (!MatrixMath.determinant(perspectiveMatrix)) {
        return;
      }

      if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
        var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];
        var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
        var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
        var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
      } else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
      }

      for (var i = 0; i < 3; i++) {
        translation[i] = matrix[3][i];
      }

      var row = [];

      for (i = 0; i < 3; i++) {
        row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
      }

      scale[0] = MatrixMath.v3Length(row[0]);
      row[0] = MatrixMath.v3Normalize(row[0], scale[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      skew[0] = MatrixMath.v3Dot(row[0], row[1]);
      row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);
      scale[1] = MatrixMath.v3Length(row[1]);
      row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
      skew[0] /= scale[1];
      skew[1] = MatrixMath.v3Dot(row[0], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
      skew[2] = MatrixMath.v3Dot(row[1], row[2]);
      row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);
      scale[2] = MatrixMath.v3Length(row[2]);
      row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
      skew[1] /= scale[2];
      skew[2] /= scale[2];
      var pdum3 = MatrixMath.v3Cross(row[1], row[2]);

      if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
        for (i = 0; i < 3; i++) {
          scale[i] *= -1;
          row[i][0] *= -1;
          row[i][1] *= -1;
          row[i][2] *= -1;
        }
      }

      quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
      quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
      quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
      quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

      if (row[2][1] > row[1][2]) {
        quaternion[0] = -quaternion[0];
      }

      if (row[0][2] > row[2][0]) {
        quaternion[1] = -quaternion[1];
      }

      if (row[1][0] > row[0][1]) {
        quaternion[2] = -quaternion[2];
      }

      var rotationDegrees;

      if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
        rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
      } else {
        rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
      }

      return {
        rotationDegrees: rotationDegrees,
        perspective: perspective,
        quaternion: quaternion,
        scale: scale,
        skew: skew,
        translation: translation,
        rotate: rotationDegrees[2],
        rotateX: rotationDegrees[0],
        rotateY: rotationDegrees[1],
        scaleX: scale[0],
        scaleY: scale[1],
        translateX: translation[0],
        translateY: translation[1]
      };
    }
  };
  module.exports = MatrixMath;
},76,[11,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummySize = {
    width: undefined,
    height: undefined
  };

  var sizesDiffer = function sizesDiffer(one, two) {
    one = one || dummySize;
    two = two || dummySize;
    return one !== two && (one.width !== two.width || one.height !== two.height);
  };

  module.exports = sizesDiffer;
},77,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var ImageStylePropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var TextStylePropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      _classCallCheck(this, StyleSheetValidation);
    }

    _createClass(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        {
          return;
        }

        for (var prop in styles[name]) {
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);

    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};
  StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);
  module.exports = StyleSheetValidation;
},78,[21,22,59,72,73,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
      return undefined;
    }

    if (!Array.isArray(style)) {
      return style;
    }

    var result = {};

    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);

      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }

    return result;
  }

  module.exports = flattenStyle;
},79,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var TextAncestor = _$$_REQUIRE(_dependencyMap[2]);

  var ViewNativeComponent = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var ViewToExport = ViewNativeComponent;
  module.exports = ViewToExport;
},80,[3,51,81,82,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = React.createContext(false);
},81,[51]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative = _$$_REQUIRE(_dependencyMap[0]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[1]);

  var NativeViewComponent = requireNativeComponent('RCTView');
  module.exports = NativeViewComponent;
},82,[83,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactNative;
  {
    ReactNative = _$$_REQUIRE(_dependencyMap[0]);
  }
  module.exports = ReactNative;
},83,[84]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeViewConfigRegistry = _$$_REQUIRE(_dependencyMap[2]),
      UIManager = _$$_REQUIRE(_dependencyMap[3]),
      RCTEventEmitter = _$$_REQUIRE(_dependencyMap[4]),
      React = _$$_REQUIRE(_dependencyMap[5]),
      deepDiffer = _$$_REQUIRE(_dependencyMap[6]),
      flattenStyle = _$$_REQUIRE(_dependencyMap[7]),
      TextInputState = _$$_REQUIRE(_dependencyMap[8]);

  var ExceptionsManager = _$$_REQUIRE(_dependencyMap[9]);

  function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      condition = undefined;
      if (undefined === format) condition = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
        var args = [a, b, c, d, e, f],
            argIndex = 0;
        condition = Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        condition.name = "Invariant Violation";
      }
      condition.framesToPop = 1;
      throw condition;
    }
  }

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else invariant(false, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."), error = undefined;

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, simulated, listener, inst) {
    simulated = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(simulated, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, false, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, false, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = true);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 7 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes$1 = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes$1,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes$1.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes$1.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes$1.selectionChangeShouldSetResponder : eventTypes$1.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes$1.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes$1.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes$1.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes$1.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes$1.responderStart : targetInst ? eventTypes$1.responderMove : depthA ? eventTypes$1.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes$1.responderTerminate : topLevelType ? eventTypes$1.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes$1 = ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes$1 = ReactNativeViewConfigRegistry.customDirectEventTypes,
      ReactNativeBridgeEventPlugin = {
    eventTypes: ReactNativeViewConfigRegistry.eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (null == targetInst) return null;
      var bubbleDispatchConfig = customBubblingEventTypes$1[topLevelType],
          directDispatchConfig = customDirectEventTypes$1[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    }
  };
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });
  var instanceCache = {},
      instanceProps = {};

  function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(false, "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null(target.stateNode, target.type, props);
    }
  }

  function _batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function _flushInteractiveUpdatesImpl() {}

  var isBatching = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isBatching) return fn(bookkeeping);
    isBatching = true;

    try {
      return _batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isBatching = false, null !== restoreTarget || null !== restoreQueue) if (_flushInteractiveUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  var EMPTY_NATIVE_EVENT = {};

  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
        inst = getInstanceFromTag(rootNodeID);
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;
      if (events && (forEachAccumulated(events, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), hasRethrowError)) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
    });
  }

  RCTEventEmitter.register({
    getListener: getListener,
    registrationNames: registrationNameModules,
    _receiveRootNodeIDEvent: _receiveRootNodeIDEvent,
    receiveEvent: function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];

        for (var i = 0; i < changedIndices.length; i++) {
          var index = changedIndices[i];
          JSCompiler_temp.push(touches[index]);
          touches[index] = null;
        }

        for (i = changedIndices = 0; i < touches.length; i++) {
          index = touches[i], null !== index && (touches[changedIndices++] = index);
        }

        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) {
        JSCompiler_temp.push(touches[changedIndices[i]]);
      }

      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index = null;
        var target = i.target;
        null === target || undefined === target || 1 > target || (index = target);

        _receiveRootNodeIDEvent(index, eventTopLevelType, i);
      }
    }
  });

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
  };

  getInstanceFromNode = getInstanceFromTag;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    var tag = inst.stateNode._nativeTag;
    undefined === tag && (tag = inst.stateNode.canonical._nativeTag);
    invariant(tag, "All native instances should have a tag.");
    return tag;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
      hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_ASYNC_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.async_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_PLACEHOLDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.placeholder") : 60113,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_ASYNC_MODE_TYPE:
        return "AsyncMode";

      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_PLACEHOLDER_TYPE:
        return "Placeholder";
    }

    if ("object" === typeof type) {
      switch (type.$$typeof) {
        case REACT_CONTEXT_TYPE:
          return "Context.Consumer";

        case REACT_PROVIDER_TYPE:
          return "Context.Provider";

        case REACT_FORWARD_REF_TYPE:
          return type = type.render, type = type.displayName || type.name || "", "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef";
      }

      if ("function" === typeof type.then && (type = 1 === type._reactStatus ? type._reactResult : null)) return getComponentName(type);
    }

    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 5 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return,
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(false, "Unable to find node on an unmounted component.");
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        child = false;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(5 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (7 === node.tag || 8 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
      if (!(this instanceof ReactNativeFiberHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this._children = [];
      this.viewConfig = viewConfig;
    }

    ReactNativeFiberHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactNativeFiberHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactNativeFiberHostComponent;
  }(),
      now$1 = "object" === typeof performance && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0,
      frameDeadlineObject = {
    timeRemaining: function timeRemaining() {
      return frameDeadline - now$1();
    },
    didTimeout: false
  };

  function setTimeoutCallback() {
    frameDeadline = now$1() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback(frameDeadlineObject);
  }

  function shim$1() {
    invariant(false, "The current renderer does not support hyration. This error is likely caused by a bug in React. Please file an issue.");
  }

  var UPDATE_SIGNAL = {},
      nextReactTag = 3;

  function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
  }

  function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) delete instanceCache[node], delete instanceProps[node];else {
      var tag = node._nativeTag;
      delete instanceCache[tag];
      delete instanceProps[tag];

      node._children.forEach(recursivelyUncacheFiberNode);
    }
  }

  function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return false;

    var nativeTags = parentInstance._children.map(function (child) {
      return "number" === typeof child ? child : child._nativeTag;
    });

    UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return false;
  }

  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 4:
        case 0:
        case 1:
        case 2:
        case 3:
        case 7:
        case 10:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          var JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
          break a;

        default:
          JSCompiler_inline_result = "";
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(contextStackCursor.current === emptyContextObject, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      invariant(contextKey in fiber, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || "Unknown", contextKey);
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.firstContextDependency = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function createWorkInProgress(current, pendingProps, expirationTime) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = new FiberNode(current.tag, pendingProps, current.key, current.mode), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = pendingProps !== current.pendingProps ? expirationTime : current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.firstContextDependency = current.firstContextDependency;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromElement(element, mode, expirationTime) {
    var type = element.type,
        key = element.key;
    element = element.props;
    var fiberTag = undefined;
    if ("function" === typeof type) fiberTag = shouldConstruct(type) ? 2 : 4;else if ("string" === typeof type) fiberTag = 7;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(element.children, mode, expirationTime, key);

      case REACT_ASYNC_MODE_TYPE:
        fiberTag = 10;
        mode |= 3;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 10;
        mode |= 2;
        break;

      case REACT_PROFILER_TYPE:
        return type = new FiberNode(15, element, key, mode | 4), type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_PLACEHOLDER_TYPE:
        fiberTag = 16;
        break;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 12;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 11;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 13;
            break a;

          default:
            if ("function" === typeof type.then) {
              fiberTag = 4;
              break a;
            }

        }
        invariant(false, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, "");
    }
    mode = new FiberNode(fiberTag, element, key, mode);
    mode.type = type;
    mode.expirationTime = expirationTime;
    return mode;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = new FiberNode(9, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = new FiberNode(8, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = new FiberNode(6, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function markPendingPriorityLevel(root, expirationTime) {
    root.didError = false;
    var earliestPendingTime = root.earliestPendingTime;
    0 === earliestPendingTime ? root.earliestPendingTime = root.latestPendingTime = expirationTime : earliestPendingTime > expirationTime ? root.earliestPendingTime = expirationTime : root.latestPendingTime < expirationTime && (root.latestPendingTime = expirationTime);
    findNextExpirationTimeToWorkOn(expirationTime, root);
  }

  function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
    var earliestSuspendedTime = root.earliestSuspendedTime,
        latestSuspendedTime = root.latestSuspendedTime,
        earliestPendingTime = root.earliestPendingTime,
        latestPingedTime = root.latestPingedTime;
    earliestPendingTime = 0 !== earliestPendingTime ? earliestPendingTime : latestPingedTime;
    0 === earliestPendingTime && (0 === completedExpirationTime || latestSuspendedTime > completedExpirationTime) && (earliestPendingTime = latestSuspendedTime);
    completedExpirationTime = earliestPendingTime;
    0 !== completedExpirationTime && 0 !== earliestSuspendedTime && earliestSuspendedTime < completedExpirationTime && (completedExpirationTime = earliestSuspendedTime);
    root.nextExpirationTimeToWorkOn = earliestPendingTime;
    root.expirationTime = completedExpirationTime;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime) {
    return {
      expirationTime: expirationTime,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -1025 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime > renderExpirationTime) {
        if (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), 0 === newExpirationTime || newExpirationTime > updateExpirationTime) newExpirationTime = updateExpirationTime;
      } else resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update));

      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;

      if (_updateExpirationTime > renderExpirationTime) {
        if (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), 0 === newExpirationTime || newExpirationTime > _updateExpirationTime) newExpirationTime = _updateExpirationTime;
      } else resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update));

      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        invariant("function" === typeof _callback3, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback3);

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue = currentValue;
  }

  function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress.firstContextDependency = null;
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };
      null === lastContextDependency ? (invariant(null !== currentlyRenderingFiber, "Context.unstable_read(): Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps."), currentlyRenderingFiber.firstContextDependency = lastContextDependency = observedBits) : lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue;
  }

  var NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    return x === y ? 0 !== x || 0 !== y || 1 / x === 1 / y : x !== x && y !== y;
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  var emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextLegacyContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextLegacyContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextLegacyContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode,
        unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
    unmaskedContext = workInProgress.updateQueue;
    null !== unmaskedContext && (processUpdateQueue(workInProgress, unmaskedContext, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    unmaskedContext = ctor.getDerivedStateFromProps;
    "function" === typeof unmaskedContext && (applyDerivedStateFromProps(workInProgress, ctor, unmaskedContext, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), unmaskedContext = workInProgress.updateQueue, null !== unmaskedContext && (processUpdateQueue(workInProgress, unmaskedContext, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray$1 = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;
        element && (invariant(2 === element.tag || 3 === element.tag, "Stateless function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", returnFiber);
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      invariant("string" === typeof returnFiber, "Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.", returnFiber);
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(false, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 8 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.type === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromElement(element, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 9 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber;
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (9 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.type === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                  break;
                }
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);
              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (6 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 8 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 2:
        case 3:
        case 0:
          expirationTime = returnFiber.type, invariant(false, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 7:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 8:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = new FiberNode(7, null, null, 0);
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  function readLazyComponentType(thenable) {
    switch (thenable._reactStatus) {
      case 1:
        return thenable._reactResult;

      case 2:
        throw thenable._reactResult;

      case 0:
        throw thenable;

      default:
        throw thenable._reactStatus = 0, thenable.then(function (resolvedValue) {
          if (0 === thenable._reactStatus) {
            thenable._reactStatus = 1;

            if ("object" === typeof resolvedValue && null !== resolvedValue) {
              var defaultExport = resolvedValue.default;
              resolvedValue = undefined !== defaultExport && null !== defaultExport ? defaultExport : resolvedValue;
            }

            thenable._reactResult = resolvedValue;
          }
        }, function (error) {
          0 === thenable._reactStatus && (thenable._reactStatus = 2, thenable._reactResult = error);
        }), thenable;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, type, nextProps, renderExpirationTime) {
    type = type.render;
    var ref = workInProgress.ref;
    if (!didPerformWorkStackCursor.current && workInProgress.memoizedProps === nextProps && ref === (null !== current$$1 ? current$$1.ref : null)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    type = type(nextProps, ref);
    reconcileChildren(current$$1, workInProgress, type, renderExpirationTime);
    workInProgress.memoizedProps = nextProps;
    return workInProgress.child;
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionalComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var unmaskedContext = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = Component(nextProps, unmaskedContext);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    workInProgress.memoizedProps = nextProps;
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === current$$1) {
      if (null === workInProgress.stateNode) {
        var unmaskedContext = isContextProvider(Component) ? previousContext : contextStackCursor.current,
            contextTypes = Component.contextTypes,
            isContextConsumer = null !== contextTypes && undefined !== contextTypes;
        contextTypes = isContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        var instance = new Component(nextProps, contextTypes);
        workInProgress.memoizedState = null !== instance.state && undefined !== instance.state ? instance.state : null;
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        instance._reactInternalFiber = workInProgress;
        isContextConsumer && (isContextConsumer = workInProgress.stateNode, isContextConsumer.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, isContextConsumer.__reactInternalMemoizedMaskedChildContext = contextTypes);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        nextProps = true;
      } else {
        unmaskedContext = workInProgress.stateNode;
        contextTypes = workInProgress.memoizedProps;
        unmaskedContext.props = contextTypes;
        var oldContext = unmaskedContext.context;
        isContextConsumer = isContextProvider(Component) ? previousContext : contextStackCursor.current;
        isContextConsumer = getMaskedContext(workInProgress, isContextConsumer);
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        (instance = "function" === typeof getDerivedStateFromProps || "function" === typeof unmaskedContext.getSnapshotBeforeUpdate) || "function" !== typeof unmaskedContext.UNSAFE_componentWillReceiveProps && "function" !== typeof unmaskedContext.componentWillReceiveProps || (contextTypes !== nextProps || oldContext !== isContextConsumer) && callComponentWillReceiveProps(workInProgress, unmaskedContext, nextProps, isContextConsumer);
        hasForceUpdate = false;
        var oldState = workInProgress.memoizedState;
        oldContext = unmaskedContext.state = oldState;
        var updateQueue = workInProgress.updateQueue;
        null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, unmaskedContext, renderExpirationTime), oldContext = workInProgress.memoizedState);
        contextTypes !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (contextTypes = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextTypes, nextProps, oldState, oldContext, isContextConsumer)) ? (instance || "function" !== typeof unmaskedContext.UNSAFE_componentWillMount && "function" !== typeof unmaskedContext.componentWillMount || ("function" === typeof unmaskedContext.componentWillMount && unmaskedContext.componentWillMount(), "function" === typeof unmaskedContext.UNSAFE_componentWillMount && unmaskedContext.UNSAFE_componentWillMount()), "function" === typeof unmaskedContext.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof unmaskedContext.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), unmaskedContext.props = nextProps, unmaskedContext.state = oldContext, unmaskedContext.context = isContextConsumer, nextProps = contextTypes) : ("function" === typeof unmaskedContext.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
      }
    } else unmaskedContext = workInProgress.stateNode, contextTypes = workInProgress.memoizedProps, unmaskedContext.props = contextTypes, oldContext = unmaskedContext.context, isContextConsumer = isContextProvider(Component) ? previousContext : contextStackCursor.current, isContextConsumer = getMaskedContext(workInProgress, isContextConsumer), getDerivedStateFromProps = Component.getDerivedStateFromProps, (instance = "function" === typeof getDerivedStateFromProps || "function" === typeof unmaskedContext.getSnapshotBeforeUpdate) || "function" !== typeof unmaskedContext.UNSAFE_componentWillReceiveProps && "function" !== typeof unmaskedContext.componentWillReceiveProps || (contextTypes !== nextProps || oldContext !== isContextConsumer) && callComponentWillReceiveProps(workInProgress, unmaskedContext, nextProps, isContextConsumer), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = unmaskedContext.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, unmaskedContext, renderExpirationTime), oldState = workInProgress.memoizedState), contextTypes !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextTypes, nextProps, oldContext, oldState, isContextConsumer)) ? (instance || "function" !== typeof unmaskedContext.UNSAFE_componentWillUpdate && "function" !== typeof unmaskedContext.componentWillUpdate || ("function" === typeof unmaskedContext.componentWillUpdate && unmaskedContext.componentWillUpdate(nextProps, oldState, isContextConsumer), "function" === typeof unmaskedContext.UNSAFE_componentWillUpdate && unmaskedContext.UNSAFE_componentWillUpdate(nextProps, oldState, isContextConsumer)), "function" === typeof unmaskedContext.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof unmaskedContext.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof unmaskedContext.componentDidUpdate || contextTypes === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof unmaskedContext.getSnapshotBeforeUpdate || contextTypes === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), unmaskedContext.props = nextProps, unmaskedContext.state = oldState, unmaskedContext.context = isContextConsumer, nextProps = getDerivedStateFromProps) : ("function" !== typeof unmaskedContext.componentDidUpdate || contextTypes === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof unmaskedContext.getSnapshotBeforeUpdate || contextTypes === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError && (reconcileChildren(current$$1, workInProgress, null, renderExpirationTime), workInProgress.child = null);
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    workInProgress.memoizedProps = shouldUpdate.props;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function mountIndeterminateComponent(current$$1, workInProgress, Component, renderExpirationTime) {
    invariant(null === current$$1, "An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");
    var props = workInProgress.pendingProps;

    if ("object" === typeof Component && null !== Component && "function" === typeof Component.then) {
      Component = readLazyComponentType(Component);
      var JSCompiler_inline_result = Component;
      JSCompiler_inline_result = "function" === typeof JSCompiler_inline_result ? shouldConstruct(JSCompiler_inline_result) ? 3 : 1 : undefined !== JSCompiler_inline_result && null !== JSCompiler_inline_result && JSCompiler_inline_result.$$typeof ? 14 : 4;
      JSCompiler_inline_result = workInProgress.tag = JSCompiler_inline_result;
      var resolvedProps = resolveDefaultProps(Component, props);

      switch (JSCompiler_inline_result) {
        case 1:
          return updateFunctionalComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);

        case 3:
          return updateClassComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);

        case 14:
          return updateForwardRef(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);

        default:
          invariant(false, "Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.", Component);
      }
    }

    JSCompiler_inline_result = getMaskedContext(workInProgress, contextStackCursor.current);
    prepareToReadContext(workInProgress, renderExpirationTime);
    JSCompiler_inline_result = Component(props, JSCompiler_inline_result);
    workInProgress.effectTag |= 1;

    if ("object" === typeof JSCompiler_inline_result && null !== JSCompiler_inline_result && "function" === typeof JSCompiler_inline_result.render && undefined === JSCompiler_inline_result.$$typeof) {
      workInProgress.tag = 2;
      isContextProvider(Component) ? (resolvedProps = true, pushContextProvider(workInProgress)) : resolvedProps = false;
      workInProgress.memoizedState = null !== JSCompiler_inline_result.state && undefined !== JSCompiler_inline_result.state ? JSCompiler_inline_result.state : null;
      var getDerivedStateFromProps = Component.getDerivedStateFromProps;
      "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
      JSCompiler_inline_result.updater = classComponentUpdater;
      workInProgress.stateNode = JSCompiler_inline_result;
      JSCompiler_inline_result._reactInternalFiber = workInProgress;
      mountClassInstance(workInProgress, Component, props, renderExpirationTime);
      return finishClassComponent(current$$1, workInProgress, Component, true, resolvedProps, renderExpirationTime);
    }

    workInProgress.tag = 0;
    reconcileChildren(current$$1, workInProgress, JSCompiler_inline_result, renderExpirationTime);
    workInProgress.memoizedProps = props;
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.firstContextDependency = current$$1.firstContextDependency);
    var childExpirationTime = workInProgress.childExpirationTime;
    if (0 === childExpirationTime || childExpirationTime > renderExpirationTime) return null;
    invariant(null === current$$1 || workInProgress.child === current$$1.child, "Resuming work not yet implemented.");

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  function beginWork(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;

    if (!didPerformWorkStackCursor.current && (0 === updateExpirationTime || updateExpirationTime > renderExpirationTime)) {
      switch (workInProgress.tag) {
        case 5:
          pushHostRootContext(workInProgress);
          break;

        case 7:
          pushHostContext(workInProgress);
          break;

        case 2:
          isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
          break;

        case 3:
          isContextProvider(workInProgress.type._reactResult) && pushContextProvider(workInProgress);
          break;

        case 6:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case 12:
          pushProvider(workInProgress, workInProgress.memoizedProps.value);
      }

      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }

    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 4:
        return mountIndeterminateComponent(current$$1, workInProgress, workInProgress.type, renderExpirationTime);

      case 0:
        return updateFunctionalComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, renderExpirationTime);

      case 1:
        var _Component5 = workInProgress.type._reactResult;
        updateExpirationTime = workInProgress.pendingProps;
        current$$1 = updateFunctionalComponent(current$$1, workInProgress, _Component5, resolveDefaultProps(_Component5, updateExpirationTime), renderExpirationTime);
        workInProgress.memoizedProps = updateExpirationTime;
        return current$$1;

      case 2:
        return updateClassComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, renderExpirationTime);

      case 3:
        return _Component5 = workInProgress.type._reactResult, updateExpirationTime = workInProgress.pendingProps, current$$1 = updateClassComponent(current$$1, workInProgress, _Component5, resolveDefaultProps(_Component5, updateExpirationTime), renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, current$$1;

      case 5:
        return pushHostRootContext(workInProgress), updateExpirationTime = workInProgress.updateQueue, invariant(null !== updateExpirationTime, "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."), _Component5 = workInProgress.memoizedState, _Component5 = null !== _Component5 ? _Component5.element : null, processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime), updateExpirationTime = workInProgress.memoizedState.element, updateExpirationTime === _Component5 ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child), workInProgress;

      case 7:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps, _Component5 = updateExpirationTime.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, _Component5, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress = workInProgress.child, workInProgress;

      case 8:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), workInProgress.memoizedProps = workInProgress.pendingProps, null;

      case 16:
        return null;

      case 6:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      case 13:
        return updateForwardRef(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, renderExpirationTime);

      case 14:
        return _Component5 = workInProgress.type._reactResult, updateExpirationTime = workInProgress.pendingProps, current$$1 = updateForwardRef(current$$1, workInProgress, _Component5, resolveDefaultProps(_Component5, updateExpirationTime), renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, current$$1;

      case 9:
        return updateExpirationTime = workInProgress.pendingProps, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      case 10:
        return updateExpirationTime = workInProgress.pendingProps.children, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      case 15:
        return updateExpirationTime = workInProgress.pendingProps, reconcileChildren(current$$1, workInProgress, updateExpirationTime.children, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      case 12:
        a: {
          updateExpirationTime = workInProgress.type._context;
          _Component5 = workInProgress.pendingProps;
          var oldProps = workInProgress.memoizedProps,
              newValue = _Component5.value;
          workInProgress.memoizedProps = _Component5;
          pushProvider(workInProgress, newValue);

          if (null !== oldProps) {
            var oldValue = oldProps.value;
            newValue = oldValue === newValue && (0 !== oldValue || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, newValue) : 1073741823) | 0;

            if (0 === newValue) {
              if (oldProps.children === _Component5.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (oldProps = workInProgress.child, null !== oldProps && (oldProps.return = workInProgress); null !== oldProps;) {
              oldValue = oldProps.firstContextDependency;

              if (null !== oldValue) {
                do {
                  if (oldValue.context === updateExpirationTime && 0 !== (oldValue.observedBits & newValue)) {
                    if (2 === oldProps.tag || 3 === oldProps.tag) {
                      var nextFiber = createUpdate(renderExpirationTime);
                      nextFiber.tag = 2;
                      enqueueUpdate(oldProps, nextFiber);
                    }

                    if (0 === oldProps.expirationTime || oldProps.expirationTime > renderExpirationTime) oldProps.expirationTime = renderExpirationTime;
                    nextFiber = oldProps.alternate;
                    null !== nextFiber && (0 === nextFiber.expirationTime || nextFiber.expirationTime > renderExpirationTime) && (nextFiber.expirationTime = renderExpirationTime);

                    for (var node = oldProps.return; null !== node;) {
                      nextFiber = node.alternate;
                      if (0 === node.childExpirationTime || node.childExpirationTime > renderExpirationTime) node.childExpirationTime = renderExpirationTime, null !== nextFiber && (0 === nextFiber.childExpirationTime || nextFiber.childExpirationTime > renderExpirationTime) && (nextFiber.childExpirationTime = renderExpirationTime);else if (null !== nextFiber && (0 === nextFiber.childExpirationTime || nextFiber.childExpirationTime > renderExpirationTime)) nextFiber.childExpirationTime = renderExpirationTime;else break;
                      node = node.return;
                    }
                  }

                  nextFiber = oldProps.child;
                  oldValue = oldValue.next;
                } while (null !== oldValue);
              } else nextFiber = 12 === oldProps.tag ? oldProps.type === workInProgress.type ? null : oldProps.child : oldProps.child;

              if (null !== nextFiber) nextFiber.return = oldProps;else for (nextFiber = oldProps; null !== nextFiber;) {
                if (nextFiber === workInProgress) {
                  nextFiber = null;
                  break;
                }

                oldProps = nextFiber.sibling;

                if (null !== oldProps) {
                  oldProps.return = nextFiber.return;
                  nextFiber = oldProps;
                  break;
                }

                nextFiber = nextFiber.return;
              }
              oldProps = nextFiber;
            }
          }

          reconcileChildren(current$$1, workInProgress, _Component5.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 11:
        return newValue = workInProgress.type, updateExpirationTime = workInProgress.pendingProps, _Component5 = updateExpirationTime.children, prepareToReadContext(workInProgress, renderExpirationTime), newValue = readContext(newValue, updateExpirationTime.unstable_observedBits), _Component5 = _Component5(newValue), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, _Component5, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      default:
        invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  var updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  updateHostContainer = function updateHostContainer() {};

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    current.memoizedProps !== newProps && (requiredContext(contextStackCursor$1.current), workInProgress.updateQueue = UPDATE_SIGNAL) && (workInProgress.effectTag |= 4);
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (workInProgress.effectTag |= 4);
  };

  function logCapturedError(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;

    if (error instanceof Error) {
      capturedError = error.message;
      var name = error.name;

      try {
        error.message = (capturedError ? name + ": " + capturedError : name) + "\n\nThis error is located at:" + componentStack;
      } catch (e) {}
    } else error = "string" === typeof error ? Error(error + "\n\nThis error is located at:" + componentStack) : Error("Unspecified error at:" + componentStack);

    ExceptionsManager.handleException(error, false);
  }

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 2 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitUnmount(current$$1) {
    "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(current$$1);

    switch (current$$1.tag) {
      case 2:
      case 3:
        safelyDetachRef(current$$1);
        var instance = current$$1.stateNode;
        if ("function" === typeof instance.componentWillUnmount) try {
          instance.props = current$$1.memoizedProps, instance.state = current$$1.memoizedState, instance.componentWillUnmount();
        } catch (unmountError) {
          captureCommitPhaseError(current$$1, unmountError);
        }
        break;

      case 7:
        safelyDetachRef(current$$1);
        break;

      case 6:
        unmountHostComponents(current$$1);
    }
  }

  function isHostParent(fiber) {
    return 7 === fiber.tag || 5 === fiber.tag || 6 === fiber.tag;
  }

  function commitPlacement(finishedWork) {
    a: {
      for (var parent = finishedWork.return; null !== parent;) {
        if (isHostParent(parent)) {
          var parentFiber = parent;
          break a;
        }

        parent = parent.return;
      }

      invariant(false, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      parentFiber = undefined;
    }

    var isContainer = parent = undefined;

    switch (parentFiber.tag) {
      case 7:
        parent = parentFiber.stateNode;
        isContainer = false;
        break;

      case 5:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;

      case 6:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;

      default:
        invariant(false, "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
    }

    parentFiber.effectTag & 16 && (parentFiber.effectTag &= -17);

    a: b: for (parentFiber = finishedWork;;) {
      for (; null === parentFiber.sibling;) {
        if (null === parentFiber.return || isHostParent(parentFiber.return)) {
          parentFiber = null;
          break a;
        }

        parentFiber = parentFiber.return;
      }

      parentFiber.sibling.return = parentFiber.return;

      for (parentFiber = parentFiber.sibling; 7 !== parentFiber.tag && 8 !== parentFiber.tag;) {
        if (parentFiber.effectTag & 2) continue b;
        if (null === parentFiber.child || 6 === parentFiber.tag) continue b;else parentFiber.child.return = parentFiber, parentFiber = parentFiber.child;
      }

      if (!(parentFiber.effectTag & 2)) {
        parentFiber = parentFiber.stateNode;
        break a;
      }
    }

    for (var node = finishedWork;;) {
      if (7 === node.tag || 8 === node.tag) {
        if (parentFiber) {
          if (isContainer) invariant("number" !== typeof parent, "Container does not support insertBefore operation");else {
            var parentInstance = parent,
                child = node.stateNode,
                beforeChild = parentFiber,
                children = parentInstance._children,
                index = children.indexOf(child);
            0 <= index ? (children.splice(index, 1), beforeChild = children.indexOf(beforeChild), children.splice(beforeChild, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChild], [], [], [])) : (index = children.indexOf(beforeChild), children.splice(index, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [], [], ["number" === typeof child ? child : child._nativeTag], [index], []));
          }
        } else isContainer ? (parentInstance = node.stateNode, UIManager.setChildren(parent, ["number" === typeof parentInstance ? parentInstance : parentInstance._nativeTag])) : (parentInstance = parent, child = node.stateNode, children = "number" === typeof child ? child : child._nativeTag, index = parentInstance._children, beforeChild = index.indexOf(child), 0 <= beforeChild ? (index.splice(beforeChild, 1), index.push(child), UIManager.manageChildren(parentInstance._nativeTag, [beforeChild], [index.length - 1], [], [], [])) : (index.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [children], [index.length - 1], [])));
      } else if (6 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === finishedWork) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === finishedWork) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function unmountHostComponents(current$$1) {
    for (var node = current$$1, currentParentIsValid = false, currentParent = undefined, currentParentIsContainer = undefined;;) {
      if (!currentParentIsValid) {
        currentParentIsValid = node.return;

        a: for (;;) {
          invariant(null !== currentParentIsValid, "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");

          switch (currentParentIsValid.tag) {
            case 7:
              currentParent = currentParentIsValid.stateNode;
              currentParentIsContainer = false;
              break a;

            case 5:
              currentParent = currentParentIsValid.stateNode.containerInfo;
              currentParentIsContainer = true;
              break a;

            case 6:
              currentParent = currentParentIsValid.stateNode.containerInfo;
              currentParentIsContainer = true;
              break a;
          }

          currentParentIsValid = currentParentIsValid.return;
        }

        currentParentIsValid = true;
      }

      if (7 === node.tag || 8 === node.tag) {
        a: for (var root = node, node$jscomp$0 = root;;) {
          if (commitUnmount(node$jscomp$0), null !== node$jscomp$0.child && 6 !== node$jscomp$0.tag) node$jscomp$0.child.return = node$jscomp$0, node$jscomp$0 = node$jscomp$0.child;else {
            if (node$jscomp$0 === root) break;

            for (; null === node$jscomp$0.sibling;) {
              if (null === node$jscomp$0.return || node$jscomp$0.return === root) break a;
              node$jscomp$0 = node$jscomp$0.return;
            }

            node$jscomp$0.sibling.return = node$jscomp$0.return;
            node$jscomp$0 = node$jscomp$0.sibling;
          }
        }

        if (currentParentIsContainer) root = currentParent, recursivelyUncacheFiberNode(node.stateNode), UIManager.manageChildren(root, [], [], [], [], [0]);else {
          root = currentParent;
          var child = node.stateNode;
          recursivelyUncacheFiberNode(child);
          node$jscomp$0 = root._children;
          child = node$jscomp$0.indexOf(child);
          node$jscomp$0.splice(child, 1);
          UIManager.manageChildren(root._nativeTag, [], [], [], [], [child]);
        }
      } else if (6 === node.tag ? (currentParent = node.stateNode.containerInfo, currentParentIsContainer = true) : commitUnmount(node), null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === current$$1) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === current$$1) return;
        node = node.return;
        6 === node.tag && (currentParentIsValid = false);
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 2:
      case 3:
        break;

      case 7:
        var instance = finishedWork.stateNode;

        if (null != instance) {
          var newProps = finishedWork.memoizedProps;
          current$$1 = null !== current$$1 ? current$$1.memoizedProps : newProps;
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          null !== updatePayload && (finishedWork = instance.viewConfig, instanceProps[instance._nativeTag] = newProps, newProps = diffProperties(null, current$$1, newProps, finishedWork.validAttributes), null != newProps && UIManager.updateView(instance._nativeTag, finishedWork.uiViewClassName, newProps));
        }

        break;

      case 8:
        invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
        UIManager.updateView(finishedWork.stateNode, "RCTRawText", {
          text: finishedWork.memoizedProps
        });
        break;

      case 5:
        break;

      case 15:
        break;

      case 16:
        break;

      default:
        invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      onUncaughtError(error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime);
    expirationTime.tag = 3;
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this);
      var error = errorInfo.value,
          stack = errorInfo.stack;
      logError(fiber, errorInfo);
      this.componentDidCatch(error, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 2:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

      case 3:
        return isContextProvider(workInProgress.type._reactResult) && popContext(workInProgress), effectTag = workInProgress.effectTag, effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

      case 5:
        return popHostContainer(workInProgress), popTopLevelContextObject(workInProgress), effectTag = workInProgress.effectTag, invariant(0 === (effectTag & 64), "The root failed to unmount after an error. This is likely a bug in React. Please file an issue."), workInProgress.effectTag = effectTag & -1025 | 64, workInProgress;

      case 7:
        return popHostContext(workInProgress), null;

      case 16:
        return effectTag = workInProgress.effectTag, effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

      case 6:
        return popHostContainer(workInProgress), null;

      case 12:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  var Dispatcher = {
    readContext: readContext
  },
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      isWorking = false,
      nextUnitOfWork = null,
      nextRoot = null,
      nextRenderExpirationTime = 0,
      nextRenderDidError = false,
      nextEffect = null,
      isCommitting$1 = false,
      legacyErrorBoundariesThatAlreadyFailed = null;

  function resetStack() {
    if (null !== nextUnitOfWork) for (var interruptedWork = nextUnitOfWork.return; null !== interruptedWork;) {
      var interruptedWork$jscomp$0 = interruptedWork;

      switch (interruptedWork$jscomp$0.tag) {
        case 2:
          var childContextTypes = interruptedWork$jscomp$0.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork$jscomp$0);
          break;

        case 3:
          childContextTypes = interruptedWork$jscomp$0.type._reactResult.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork$jscomp$0);
          break;

        case 5:
          popHostContainer(interruptedWork$jscomp$0);
          popTopLevelContextObject(interruptedWork$jscomp$0);
          break;

        case 7:
          popHostContext(interruptedWork$jscomp$0);
          break;

        case 6:
          popHostContainer(interruptedWork$jscomp$0);
          break;

        case 12:
          popProvider(interruptedWork$jscomp$0);
      }

      interruptedWork = interruptedWork.return;
    }
    nextRoot = null;
    nextRenderExpirationTime = 0;
    nextRenderDidError = false;
    nextUnitOfWork = null;
  }

  function completeUnitOfWork(workInProgress) {
    for (;;) {
      var current$$1 = workInProgress.alternate,
          returnFiber = workInProgress.return,
          siblingFiber = workInProgress.sibling;

      if (0 === (workInProgress.effectTag & 512)) {
        var current = current$$1;
        current$$1 = workInProgress;
        var newProps = current$$1.pendingProps;

        switch (current$$1.tag) {
          case 0:
          case 1:
            break;

          case 2:
            isContextProvider(current$$1.type) && popContext(current$$1);
            break;

          case 3:
            isContextProvider(current$$1.type._reactResult) && popContext(current$$1);
            break;

          case 5:
            popHostContainer(current$$1);
            popTopLevelContextObject(current$$1);
            newProps = current$$1.stateNode;
            newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
            if (null === current || null === current.child) current$$1.effectTag &= -3;
            updateHostContainer(current$$1);
            break;

          case 7:
            popHostContext(current$$1);
            var rootContainerInstance = requiredContext(rootInstanceStackCursor.current),
                type = current$$1.type;
            if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, newProps, rootContainerInstance), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (newProps) {
              current = requiredContext(contextStackCursor$1.current);
              var internalInstanceHandle = current$$1,
                  tag = allocateTag(),
                  viewConfig = ReactNativeViewConfigRegistry.get(type);
              invariant("RCTView" !== type || !current.isInAParentText, "Nesting of <View> within <Text> is not currently supported.");
              var updatePayload = diffProperties(null, emptyObject, newProps, viewConfig.validAttributes);
              UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
              viewConfig = new ReactNativeFiberHostComponent(tag, viewConfig);
              instanceCache[tag] = internalInstanceHandle;
              instanceProps[tag] = newProps;

              a: for (internalInstanceHandle = viewConfig, tag = current$$1, updatePayload = tag.child; null !== updatePayload;) {
                if (7 === updatePayload.tag || 8 === updatePayload.tag) internalInstanceHandle._children.push(updatePayload.stateNode);else if (6 !== updatePayload.tag && null !== updatePayload.child) {
                  updatePayload.child.return = updatePayload;
                  updatePayload = updatePayload.child;
                  continue;
                }
                if (updatePayload === tag) break;

                for (; null === updatePayload.sibling;) {
                  if (null === updatePayload.return || updatePayload.return === tag) break a;
                  updatePayload = updatePayload.return;
                }

                updatePayload.sibling.return = updatePayload.return;
                updatePayload = updatePayload.sibling;
              }

              finalizeInitialChildren(viewConfig, type, newProps, rootContainerInstance, current) && (current$$1.effectTag |= 4);
              current$$1.stateNode = viewConfig;
              null !== current$$1.ref && (current$$1.effectTag |= 128);
            } else invariant(null !== current$$1.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            break;

          case 8:
            current && null != current$$1.stateNode ? updateHostText$1(current, current$$1, current.memoizedProps, newProps) : ("string" !== typeof newProps && invariant(null !== current$$1.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), current = requiredContext(rootInstanceStackCursor.current), type = requiredContext(contextStackCursor$1.current), rootContainerInstance = current$$1, invariant(type.isInAParentText, "Text strings must be rendered within a <Text> component."), type = allocateTag(), UIManager.createView(type, "RCTRawText", current, {
              text: newProps
            }), instanceCache[type] = current$$1, rootContainerInstance.stateNode = type);
            break;

          case 13:
          case 14:
            break;

          case 16:
            break;

          case 9:
            break;

          case 10:
            break;

          case 15:
            break;

          case 6:
            popHostContainer(current$$1);
            updateHostContainer(current$$1);
            break;

          case 12:
            popProvider(current$$1);
            break;

          case 11:
            break;

          case 4:
            invariant(false, "An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");

          default:
            invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }

        current$$1 = nextUnitOfWork = null;
        newProps = workInProgress;

        if (1073741823 === nextRenderExpirationTime || 1073741823 !== newProps.childExpirationTime) {
          rootContainerInstance = 0;

          for (type = newProps.child; null !== type;) {
            current = type.expirationTime;
            viewConfig = type.childExpirationTime;
            if (0 === rootContainerInstance || 0 !== current && current < rootContainerInstance) rootContainerInstance = current;
            if (0 === rootContainerInstance || 0 !== viewConfig && viewConfig < rootContainerInstance) rootContainerInstance = viewConfig;
            type = type.sibling;
          }

          newProps.childExpirationTime = rootContainerInstance;
        }

        if (null !== current$$1) return current$$1;
        null !== returnFiber && 0 === (returnFiber.effectTag & 512) && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress.firstEffect), returnFiber.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress : returnFiber.firstEffect = workInProgress, returnFiber.lastEffect = workInProgress));
      } else {
        workInProgress = unwindWork(workInProgress, nextRenderExpirationTime);
        if (null !== workInProgress) return workInProgress.effectTag &= 511, workInProgress;
        null !== returnFiber && (returnFiber.firstEffect = returnFiber.lastEffect = null, returnFiber.effectTag |= 512);
      }

      if (null !== siblingFiber) return siblingFiber;
      if (null !== returnFiber) workInProgress = returnFiber;else break;
    }

    return null;
  }

  function performUnitOfWork(workInProgress) {
    var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
    null === next && (next = completeUnitOfWork(workInProgress));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function renderRoot(root, isYieldy, isExpired) {
    invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
    isWorking = true;
    ReactCurrentOwner$2.currentDispatcher = Dispatcher;
    var expirationTime = root.nextExpirationTimeToWorkOn;
    if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || null === nextUnitOfWork) resetStack(), nextRoot = root, nextRenderExpirationTime = expirationTime, nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime), root.pendingCommitExpirationTime = 0;
    var didFatal = false;

    do {
      try {
        if (isYieldy) for (; null !== nextUnitOfWork && !shouldYield();) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        } else for (; null !== nextUnitOfWork;) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      } catch (thrownValue) {
        if (null === nextUnitOfWork) didFatal = true, onUncaughtError(thrownValue);else {
          invariant(null !== nextUnitOfWork, "Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.");
          var sourceFiber = nextUnitOfWork,
              returnFiber = sourceFiber.return;
          if (null === returnFiber) didFatal = true, onUncaughtError(thrownValue);else {
            a: {
              var returnFiber$jscomp$0 = returnFiber,
                  sourceFiber$jscomp$0 = sourceFiber,
                  value = thrownValue;
              returnFiber = nextRenderExpirationTime;
              sourceFiber$jscomp$0.effectTag |= 512;
              sourceFiber$jscomp$0.firstEffect = sourceFiber$jscomp$0.lastEffect = null;
              nextRenderDidError = true;
              value = createCapturedValue(value, sourceFiber$jscomp$0);

              do {
                switch (returnFiber$jscomp$0.tag) {
                  case 5:
                    returnFiber$jscomp$0.effectTag |= 1024;
                    returnFiber$jscomp$0.expirationTime = returnFiber;
                    returnFiber = createRootErrorUpdate(returnFiber$jscomp$0, value, returnFiber);
                    enqueueCapturedUpdate(returnFiber$jscomp$0, returnFiber);
                    break a;

                  case 2:
                  case 3:
                    sourceFiber$jscomp$0 = value;
                    var instance = returnFiber$jscomp$0.stateNode;

                    if (0 === (returnFiber$jscomp$0.effectTag & 64) && null !== instance && "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                      returnFiber$jscomp$0.effectTag |= 1024;
                      returnFiber$jscomp$0.expirationTime = returnFiber;
                      returnFiber = createClassErrorUpdate(returnFiber$jscomp$0, sourceFiber$jscomp$0, returnFiber);
                      enqueueCapturedUpdate(returnFiber$jscomp$0, returnFiber);
                      break a;
                    }

                }

                returnFiber$jscomp$0 = returnFiber$jscomp$0.return;
              } while (null !== returnFiber$jscomp$0);
            }

            nextUnitOfWork = completeUnitOfWork(sourceFiber);
            continue;
          }
        }
      }

      break;
    } while (1);

    isWorking = false;
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = ReactCurrentOwner$2.currentDispatcher = null;
    if (didFatal) nextRoot = null, root.finishedWork = null;else if (null !== nextUnitOfWork) root.finishedWork = null;else {
      isYieldy = root.current.alternate;
      invariant(null !== isYieldy, "Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.");
      nextRoot = null;

      if (nextRenderDidError) {
        didFatal = root.latestPendingTime;
        sourceFiber = root.latestSuspendedTime;
        returnFiber = root.latestPingedTime;

        if (0 !== didFatal && didFatal > expirationTime || 0 !== sourceFiber && sourceFiber > expirationTime || 0 !== returnFiber && returnFiber > expirationTime) {
          root.didError = false;
          isExpired = root.latestPingedTime;
          0 !== isExpired && isExpired <= expirationTime && (root.latestPingedTime = 0);
          isExpired = root.earliestPendingTime;
          isYieldy = root.latestPendingTime;
          isExpired === expirationTime ? root.earliestPendingTime = isYieldy === expirationTime ? root.latestPendingTime = 0 : isYieldy : isYieldy === expirationTime && (root.latestPendingTime = isExpired);
          isExpired = root.earliestSuspendedTime;
          isYieldy = root.latestSuspendedTime;
          0 === isExpired ? root.earliestSuspendedTime = root.latestSuspendedTime = expirationTime : isExpired > expirationTime ? root.earliestSuspendedTime = expirationTime : isYieldy < expirationTime && (root.latestSuspendedTime = expirationTime);
          findNextExpirationTimeToWorkOn(expirationTime, root);
          root.expirationTime = root.expirationTime;
          return;
        }

        if (!root.didError && !isExpired) {
          root.didError = true;
          root.nextExpirationTimeToWorkOn = expirationTime;
          root.expirationTime = 1;
          return;
        }
      }

      root.pendingCommitExpirationTime = expirationTime;
      root.finishedWork = isYieldy;
    }
  }

  function captureCommitPhaseError(fiber, error) {
    var JSCompiler_inline_result;

    a: {
      invariant(!isWorking || isCommitting$1, "dispatch: Cannot dispatch during the render phase.");

      for (JSCompiler_inline_result = fiber.return; null !== JSCompiler_inline_result;) {
        switch (JSCompiler_inline_result.tag) {
          case 2:
          case 3:
            var instance = JSCompiler_inline_result.stateNode;

            if ("function" === typeof JSCompiler_inline_result.type.getDerivedStateFromCatch || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
              fiber = createCapturedValue(error, fiber);
              fiber = createClassErrorUpdate(JSCompiler_inline_result, fiber, 1);
              enqueueUpdate(JSCompiler_inline_result, fiber);
              scheduleWork(JSCompiler_inline_result, 1);
              JSCompiler_inline_result = undefined;
              break a;
            }

            break;

          case 5:
            fiber = createCapturedValue(error, fiber);
            fiber = createRootErrorUpdate(JSCompiler_inline_result, fiber, 1);
            enqueueUpdate(JSCompiler_inline_result, fiber);
            scheduleWork(JSCompiler_inline_result, 1);
            JSCompiler_inline_result = undefined;
            break a;
        }

        JSCompiler_inline_result = JSCompiler_inline_result.return;
      }

      5 === fiber.tag && (JSCompiler_inline_result = createCapturedValue(error, fiber), JSCompiler_inline_result = createRootErrorUpdate(fiber, JSCompiler_inline_result, 1), enqueueUpdate(fiber, JSCompiler_inline_result), scheduleWork(fiber, 1));
      JSCompiler_inline_result = undefined;
    }

    return JSCompiler_inline_result;
  }

  function computeExpirationForFiber(currentTime, fiber) {
    isWorking ? currentTime = isCommitting$1 ? 1 : nextRenderExpirationTime : fiber.mode & 1 ? (currentTime = isBatchingInteractiveUpdates ? 2 + 10 * (((currentTime - 2 + 15) / 10 | 0) + 1) : 2 + 25 * (((currentTime - 2 + 500) / 25 | 0) + 1), null !== nextRoot && currentTime === nextRenderExpirationTime && (currentTime += 1)) : currentTime = 1;
    isBatchingInteractiveUpdates && (0 === lowestPriorityPendingInteractiveExpirationTime || currentTime > lowestPriorityPendingInteractiveExpirationTime) && (lowestPriorityPendingInteractiveExpirationTime = currentTime);
    return currentTime;
  }

  function scheduleWork(fiber, expirationTime) {
    a: {
      if (0 === fiber.expirationTime || fiber.expirationTime > expirationTime) fiber.expirationTime = expirationTime;
      var alternate = fiber.alternate;
      null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > expirationTime) && (alternate.expirationTime = expirationTime);
      var node = fiber.return;
      if (null === node && 5 === fiber.tag) fiber = fiber.stateNode;else {
        for (; null !== node;) {
          alternate = node.alternate;
          if (0 === node.childExpirationTime || node.childExpirationTime > expirationTime) node.childExpirationTime = expirationTime;
          null !== alternate && (0 === alternate.childExpirationTime || alternate.childExpirationTime > expirationTime) && (alternate.childExpirationTime = expirationTime);

          if (null === node.return && 5 === node.tag) {
            fiber = node.stateNode;
            break a;
          }

          node = node.return;
        }

        fiber = null;
      }
    }

    if (null !== fiber) {
      !isWorking && 0 !== nextRenderExpirationTime && expirationTime < nextRenderExpirationTime && resetStack();
      markPendingPriorityLevel(fiber, expirationTime);

      if (!isWorking || isCommitting$1 || nextRoot !== fiber) {
        expirationTime = fiber;
        fiber = fiber.expirationTime;
        if (null === expirationTime.nextScheduledRoot) expirationTime.expirationTime = fiber, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = expirationTime, expirationTime.nextScheduledRoot = expirationTime) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = expirationTime, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot);else if (alternate = expirationTime.expirationTime, 0 === alternate || fiber < alternate) expirationTime.expirationTime = fiber;
        isRendering || (isBatchingUpdates ? isUnbatchingUpdates && (nextFlushedRoot = expirationTime, nextFlushedExpirationTime = 1, performWorkOnRoot(expirationTime, 1, true)) : 1 === fiber ? performWork(1, null) : scheduleCallbackWithExpirationTime(expirationTime, fiber));
      }

      nestedUpdateCount > NESTED_UPDATE_LIMIT && (nestedUpdateCount = 0, invariant(false, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."));
    }
  }

  var firstScheduledRoot = null,
      lastScheduledRoot = null,
      callbackExpirationTime = 0,
      callbackID = undefined,
      isRendering = false,
      nextFlushedRoot = null,
      nextFlushedExpirationTime = 0,
      lowestPriorityPendingInteractiveExpirationTime = 0,
      deadlineDidExpire = false,
      hasUnhandledError = false,
      unhandledError = null,
      deadline = null,
      isBatchingUpdates = false,
      isUnbatchingUpdates = false,
      isBatchingInteractiveUpdates = false,
      completedBatches = null,
      originalStartTimeMs = now$1(),
      currentRendererTime = (originalStartTimeMs / 10 | 0) + 2,
      currentSchedulerTime = currentRendererTime,
      NESTED_UPDATE_LIMIT = 50,
      nestedUpdateCount = 0,
      lastCommittedRootDuringThisBatch = null,
      timeHeuristicForUnitOfWork = 1;

  function recomputeCurrentRendererTime() {
    currentRendererTime = ((now$1() - originalStartTimeMs) / 10 | 0) + 2;
  }

  function scheduleCallbackWithExpirationTime(root, expirationTime) {
    if (0 !== callbackExpirationTime) {
      if (expirationTime > callbackExpirationTime) return;
      null !== callbackID && (root = callbackID, scheduledCallback = null, clearTimeout(root));
    }

    callbackExpirationTime = expirationTime;
    now$1();
    scheduledCallback = performAsyncWork;
    callbackID = setTimeout(setTimeoutCallback, 1);
  }

  function requestCurrentTime() {
    if (isRendering) return currentSchedulerTime;
    findHighestPriorityRoot();
    if (0 === nextFlushedExpirationTime || 1073741823 === nextFlushedExpirationTime) recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime;
    return currentSchedulerTime;
  }

  function findHighestPriorityRoot() {
    var highestPriorityWork = 0,
        highestPriorityRoot = null;
    if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
      var remainingExpirationTime = root.expirationTime;

      if (0 === remainingExpirationTime) {
        invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

        if (root === root.nextScheduledRoot) {
          firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
          break;
        } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
          lastScheduledRoot = previousScheduledRoot;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
          root.nextScheduledRoot = null;
          break;
        } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

        root = previousScheduledRoot.nextScheduledRoot;
      } else {
        if (0 === highestPriorityWork || remainingExpirationTime < highestPriorityWork) highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root;
        if (root === lastScheduledRoot) break;
        if (1 === highestPriorityWork) break;
        previousScheduledRoot = root;
        root = root.nextScheduledRoot;
      }
    }
    nextFlushedRoot = highestPriorityRoot;
    nextFlushedExpirationTime = highestPriorityWork;
  }

  function performAsyncWork(dl) {
    if (dl.didTimeout && null !== firstScheduledRoot) {
      recomputeCurrentRendererTime();
      var root = firstScheduledRoot;

      do {
        var expirationTime = root.expirationTime;
        0 !== expirationTime && currentRendererTime >= expirationTime && (root.nextExpirationTimeToWorkOn = currentRendererTime);
        root = root.nextScheduledRoot;
      } while (root !== firstScheduledRoot);
    }

    performWork(0, dl);
  }

  function performWork(minExpirationTime, dl) {
    deadline = dl;
    findHighestPriorityRoot();
    if (null !== deadline) for (recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || currentRendererTime >= nextFlushedExpirationTime);) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime >= nextFlushedExpirationTime), findHighestPriorityRoot(), recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime;
    } else for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime);) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, true), findHighestPriorityRoot();
    }
    null !== deadline && (callbackExpirationTime = 0, callbackID = null);
    0 !== nextFlushedExpirationTime && scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
    deadline = null;
    deadlineDidExpire = false;
    nestedUpdateCount = 0;
    lastCommittedRootDuringThisBatch = null;
    if (null !== completedBatches) for (minExpirationTime = completedBatches, completedBatches = null, dl = 0; dl < minExpirationTime.length; dl++) {
      var batch = minExpirationTime[dl];

      try {
        batch._onComplete();
      } catch (error) {
        hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
      }
    }
    if (hasUnhandledError) throw minExpirationTime = unhandledError, unhandledError = null, hasUnhandledError = false, minExpirationTime;
  }

  function performWorkOnRoot(root, expirationTime, isExpired) {
    invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
    isRendering = true;

    if (null === deadline || isExpired) {
      var finishedWork = root.finishedWork;
      null !== finishedWork ? completeRoot(root, finishedWork, expirationTime) : (root.finishedWork = null, renderRoot(root, false, isExpired), finishedWork = root.finishedWork, null !== finishedWork && completeRoot(root, finishedWork, expirationTime));
    } else finishedWork = root.finishedWork, null !== finishedWork ? completeRoot(root, finishedWork, expirationTime) : (root.finishedWork = null, renderRoot(root, true, isExpired), finishedWork = root.finishedWork, null !== finishedWork && (shouldYield() ? root.finishedWork = finishedWork : completeRoot(root, finishedWork, expirationTime)));

    isRendering = false;
  }

  function completeRoot(root, finishedWork$jscomp$0, expirationTime) {
    var firstBatch = root.firstBatch;

    if (null !== firstBatch && firstBatch._expirationTime <= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
      root.finishedWork = finishedWork$jscomp$0;
      root.expirationTime = 0;
      return;
    }

    root.finishedWork = null;
    root === lastCommittedRootDuringThisBatch ? nestedUpdateCount++ : (lastCommittedRootDuringThisBatch = root, nestedUpdateCount = 0);
    isCommitting$1 = isWorking = true;
    invariant(root.current !== finishedWork$jscomp$0, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
    expirationTime = root.pendingCommitExpirationTime;
    invariant(0 !== expirationTime, "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    root.pendingCommitExpirationTime = 0;
    firstBatch = finishedWork$jscomp$0.expirationTime;
    var childExpirationTimeBeforeCommit = finishedWork$jscomp$0.childExpirationTime;
    firstBatch = 0 === firstBatch || 0 !== childExpirationTimeBeforeCommit && childExpirationTimeBeforeCommit < firstBatch ? childExpirationTimeBeforeCommit : firstBatch;
    root.didError = false;
    0 === firstBatch ? (root.earliestPendingTime = 0, root.latestPendingTime = 0, root.earliestSuspendedTime = 0, root.latestSuspendedTime = 0, root.latestPingedTime = 0) : (childExpirationTimeBeforeCommit = root.latestPendingTime, 0 !== childExpirationTimeBeforeCommit && (childExpirationTimeBeforeCommit < firstBatch ? root.earliestPendingTime = root.latestPendingTime = 0 : root.earliestPendingTime < firstBatch && (root.earliestPendingTime = root.latestPendingTime)), childExpirationTimeBeforeCommit = root.earliestSuspendedTime, 0 === childExpirationTimeBeforeCommit ? markPendingPriorityLevel(root, firstBatch) : firstBatch > root.latestSuspendedTime ? (root.earliestSuspendedTime = 0, root.latestSuspendedTime = 0, root.latestPingedTime = 0, markPendingPriorityLevel(root, firstBatch)) : firstBatch < childExpirationTimeBeforeCommit && markPendingPriorityLevel(root, firstBatch));
    findNextExpirationTimeToWorkOn(0, root);
    ReactCurrentOwner$2.current = null;
    1 < finishedWork$jscomp$0.effectTag ? null !== finishedWork$jscomp$0.lastEffect ? (finishedWork$jscomp$0.lastEffect.nextEffect = finishedWork$jscomp$0, firstBatch = finishedWork$jscomp$0.firstEffect) : firstBatch = finishedWork$jscomp$0 : firstBatch = finishedWork$jscomp$0.firstEffect;

    for (nextEffect = firstBatch; null !== nextEffect;) {
      childExpirationTimeBeforeCommit = false;
      var error = undefined;

      try {
        for (; null !== nextEffect;) {
          if (nextEffect.effectTag & 256) {
            var current$$1 = nextEffect.alternate;

            a: {
              var finishedWork = nextEffect;

              switch (finishedWork.tag) {
                case 2:
                case 3:
                  if (finishedWork.effectTag & 256 && null !== current$$1) {
                    var prevProps = current$$1.memoizedProps,
                        prevState = current$$1.memoizedState,
                        instance = finishedWork.stateNode;
                    instance.props = finishedWork.memoizedProps;
                    instance.state = finishedWork.memoizedState;
                    var snapshot = instance.getSnapshotBeforeUpdate(prevProps, prevState);
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }

                  break a;

                case 5:
                case 7:
                case 8:
                case 6:
                  break a;

                default:
                  invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }

          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        childExpirationTimeBeforeCommit = true, error = e;
      }

      childExpirationTimeBeforeCommit && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    for (nextEffect = firstBatch; null !== nextEffect;) {
      current$$1 = false;
      prevProps = undefined;

      try {
        for (; null !== nextEffect;) {
          var effectTag = nextEffect.effectTag;

          if (effectTag & 128) {
            var current$$1$jscomp$0 = nextEffect.alternate;

            if (null !== current$$1$jscomp$0) {
              var currentRef = current$$1$jscomp$0.ref;
              null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
            }
          }

          switch (effectTag & 14) {
            case 2:
              commitPlacement(nextEffect);
              nextEffect.effectTag &= -3;
              break;

            case 6:
              commitPlacement(nextEffect);
              nextEffect.effectTag &= -3;
              commitWork(nextEffect.alternate, nextEffect);
              break;

            case 4:
              commitWork(nextEffect.alternate, nextEffect);
              break;

            case 8:
              prevState = nextEffect, unmountHostComponents(prevState), prevState.return = null, prevState.child = null, prevState.alternate && (prevState.alternate.child = null, prevState.alternate.return = null);
          }

          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        current$$1 = true, prevProps = e;
      }

      current$$1 && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, prevProps), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    root.current = finishedWork$jscomp$0;

    for (nextEffect = firstBatch; null !== nextEffect;) {
      effectTag = false;
      current$$1$jscomp$0 = undefined;

      try {
        for (currentRef = expirationTime; null !== nextEffect;) {
          var effectTag$jscomp$0 = nextEffect.effectTag;

          if (effectTag$jscomp$0 & 36) {
            var current$$1$jscomp$1 = nextEffect.alternate;
            current$$1 = nextEffect;
            prevProps = currentRef;

            switch (current$$1.tag) {
              case 2:
              case 3:
                var instance$jscomp$0 = current$$1.stateNode;
                if (current$$1.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$0.props = current$$1.memoizedProps, instance$jscomp$0.state = current$$1.memoizedState, instance$jscomp$0.componentDidMount();else {
                  var prevProps$jscomp$0 = current$$1$jscomp$1.memoizedProps,
                      prevState$jscomp$0 = current$$1$jscomp$1.memoizedState;
                  instance$jscomp$0.props = current$$1.memoizedProps;
                  instance$jscomp$0.state = current$$1.memoizedState;
                  instance$jscomp$0.componentDidUpdate(prevProps$jscomp$0, prevState$jscomp$0, instance$jscomp$0.__reactInternalSnapshotBeforeUpdate);
                }
                var updateQueue = current$$1.updateQueue;
                null !== updateQueue && (instance$jscomp$0.props = current$$1.memoizedProps, instance$jscomp$0.state = current$$1.memoizedState, commitUpdateQueue(current$$1, updateQueue, instance$jscomp$0, prevProps));
                break;

              case 5:
                var _updateQueue = current$$1.updateQueue;

                if (null !== _updateQueue) {
                  prevState = null;
                  if (null !== current$$1.child) switch (current$$1.child.tag) {
                    case 7:
                      prevState = current$$1.child.stateNode;
                      break;

                    case 2:
                    case 3:
                      prevState = current$$1.child.stateNode;
                  }
                  commitUpdateQueue(current$$1, _updateQueue, prevState, prevProps);
                }

                break;

              case 7:
                break;

              case 8:
                break;

              case 6:
                break;

              case 15:
                break;

              case 16:
                break;

              default:
                invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }

          if (effectTag$jscomp$0 & 128) {
            var ref = nextEffect.ref;

            if (null !== ref) {
              var instance$jscomp$1 = nextEffect.stateNode;

              switch (nextEffect.tag) {
                case 7:
                  var instanceToUse = instance$jscomp$1;
                  break;

                default:
                  instanceToUse = instance$jscomp$1;
              }

              "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
            }
          }

          var next = nextEffect.nextEffect;
          nextEffect.nextEffect = null;
          nextEffect = next;
        }
      } catch (e) {
        effectTag = true, current$$1$jscomp$0 = e;
      }

      effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, current$$1$jscomp$0), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    isWorking = isCommitting$1 = false;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork$jscomp$0.stateNode);
    effectTag$jscomp$0 = finishedWork$jscomp$0.expirationTime;
    finishedWork$jscomp$0 = finishedWork$jscomp$0.childExpirationTime;
    finishedWork$jscomp$0 = 0 === effectTag$jscomp$0 || 0 !== finishedWork$jscomp$0 && finishedWork$jscomp$0 < effectTag$jscomp$0 ? finishedWork$jscomp$0 : effectTag$jscomp$0;
    0 === finishedWork$jscomp$0 && (legacyErrorBoundariesThatAlreadyFailed = null);
    root.expirationTime = finishedWork$jscomp$0;
    root.finishedWork = null;
  }

  function shouldYield() {
    return deadlineDidExpire ? true : null === deadline || deadline.timeRemaining() > timeHeuristicForUnitOfWork ? false : deadlineDidExpire = true;
  }

  function onUncaughtError(error) {
    invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
    nextFlushedRoot.expirationTime = 0;
    hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
  }

  function getContextForSubtree(parentComponent) {
    if (!parentComponent) return emptyContextObject;
    parentComponent = parentComponent._reactInternalFiber;

    a: {
      invariant(2 === isFiberMountedImpl(parentComponent) && (2 === parentComponent.tag || 3 === parentComponent.tag), "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
      var parentContext = parentComponent;

      do {
        switch (parentContext.tag) {
          case 5:
            parentContext = parentContext.stateNode.context;
            break a;

          case 2:
            if (isContextProvider(parentContext.type)) {
              parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
              break a;
            }

            break;

          case 3:
            if (isContextProvider(parentContext.type._reactResult)) {
              parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
              break a;
            }

        }

        parentContext = parentContext.return;
      } while (null !== parentContext);

      invariant(false, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      parentContext = undefined;
    }

    if (2 === parentComponent.tag) {
      var Component = parentComponent.type;
      if (isContextProvider(Component)) return processChildContext(parentComponent, Component, parentContext);
    } else if (3 === parentComponent.tag && (Component = parentComponent.type._reactResult, isContextProvider(Component))) return processChildContext(parentComponent, Component, parentContext);

    return parentContext;
  }

  function findHostInstance$1(component) {
    var fiber = component._reactInternalFiber;
    undefined === fiber && ("function" === typeof component.render ? invariant(false, "Unable to find node on an unmounted component.") : invariant(false, "Argument appears to not be a ReactComponent. Keys: %s", Object.keys(component)));
    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime();
    current$$1 = computeExpirationForFiber(currentTime, current$$1);
    currentTime = container.current;
    parentComponent = getContextForSubtree(parentComponent);
    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    callback = createUpdate(current$$1);
    callback.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (callback.callback = container);
    enqueueUpdate(currentTime, callback);
    scheduleWork(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(false, "getInspectorDataForViewTag() is not available in production");
  };

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance$1(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  _batchedUpdatesImpl = function _batchedUpdatesImpl(fn, a) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;

    try {
      return fn(a);
    } finally {
      (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, null);
    }
  };

  _flushInteractiveUpdatesImpl = function _flushInteractiveUpdatesImpl() {
    isRendering || 0 === lowestPriorityPendingInteractiveExpirationTime || (performWork(lowestPriorityPendingInteractiveExpirationTime, null), lowestPriorityPendingInteractiveExpirationTime = 0);
  };

  var roots = new Map(),
      ReactNativeRenderer = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance$1),
    findNodeHandle: findNodeHandle,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = new FiberNode(5, null, null, 0);
        var root$jscomp$0 = {
          current: root,
          containerInfo: containerTag,
          pendingChildren: null,
          earliestPendingTime: 0,
          latestPendingTime: 0,
          earliestSuspendedTime: 0,
          latestSuspendedTime: 0,
          latestPingedTime: 0,
          didError: false,
          pendingCommitExpirationTime: 0,
          finishedWork: null,
          timeoutHandle: -1,
          context: null,
          pendingContext: null,
          hydrate: false,
          nextExpirationTimeToWorkOn: 0,
          expirationTime: 0,
          firstBatch: null,
          nextScheduledRoot: null
        };
        root = root.stateNode = root$jscomp$0;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 7:
          element = element.child.stateNode;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
      ReactNativeRenderer.unmountComponentAtNode(containerTag);
      UIManager.removeRootView(containerTag);
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    unstable_batchedUpdates: batchedUpdates,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          },
          measureInWindow: function measureInWindow(callback) {
            UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance) {
              var viewConfig = maybeInstance.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, viewConfig.validAttributes);
              null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance$1),
      computeComponentStackForErrorReporting: function computeComponentStackForErrorReporting(reactTag) {
        return (reactTag = getInstanceFromTag(reactTag)) ? getStackByFiberInDevAndProd(reactTag) : "";
      }
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      }
    }));
  })({
    findFiberByHostInstance: getInstanceFromTag,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.5.0",
    rendererPackageName: "react-native-renderer"
  });

  var ReactNativeRenderer$2 = {
    default: ReactNativeRenderer
  },
      ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
  module.exports = ReactNativeRenderer$3.default || ReactNativeRenderer$3;
},84,[3,85,142,71,143,51,144,79,145,93]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      polyfillObjectProperty = _require.polyfillObjectProperty,
      polyfillGlobal = _require.polyfillGlobal;

  if (global.GLOBAL === undefined) {
    global.GLOBAL = global;
  }

  if (global.window === undefined) {
    global.window = global;
  }

  var _shouldPolyfillCollection = _$$_REQUIRE(_dependencyMap[1]);

  if (_shouldPolyfillCollection('Map')) {
    polyfillGlobal('Map', function () {
      return _$$_REQUIRE(_dependencyMap[2]);
    });
  }

  if (_shouldPolyfillCollection('Set')) {
    polyfillGlobal('Set', function () {
      return _$$_REQUIRE(_dependencyMap[3]);
    });
  }

  global.process = global.process || {};
  global.process.env = global.process.env || {};

  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = 'production';
  }

  if (global.__RCTProfileIsProfiling) {
    var Systrace = _$$_REQUIRE(_dependencyMap[4]);

    Systrace.installReactHook();
    Systrace.setEnabled(true);
  }

  var ExceptionsManager = _$$_REQUIRE(_dependencyMap[5]);

  ExceptionsManager.installConsoleErrorReporter();

  if (!global.__fbDisableExceptionsManager) {
    var handleError = function handleError(e, isFatal) {
      try {
        ExceptionsManager.handleException(e, isFatal);
      } catch (ee) {
        console.log('Failed to print error: ', ee.message);
        throw e;
      }
    };

    var ErrorUtils = _$$_REQUIRE(_dependencyMap[6]);

    ErrorUtils.setGlobalHandler(handleError);
  }

  var ReactNativeVersionCheck = _$$_REQUIRE(_dependencyMap[7]);

  ReactNativeVersionCheck.checkVersions();
  polyfillGlobal('Promise', function () {
    return _$$_REQUIRE(_dependencyMap[8]);
  });
  polyfillGlobal('regeneratorRuntime', function () {
    delete global.regeneratorRuntime;

    _$$_REQUIRE(_dependencyMap[9]);

    return global.regeneratorRuntime;
  });

  var defineLazyTimer = function defineLazyTimer(name) {
    polyfillGlobal(name, function () {
      return _$$_REQUIRE(_dependencyMap[10])[name];
    });
  };

  defineLazyTimer('setTimeout');
  defineLazyTimer('setInterval');
  defineLazyTimer('setImmediate');
  defineLazyTimer('clearTimeout');
  defineLazyTimer('clearInterval');
  defineLazyTimer('clearImmediate');
  defineLazyTimer('requestAnimationFrame');
  defineLazyTimer('cancelAnimationFrame');
  defineLazyTimer('requestIdleCallback');
  defineLazyTimer('cancelIdleCallback');
  polyfillGlobal('XMLHttpRequest', function () {
    return _$$_REQUIRE(_dependencyMap[11]);
  });
  polyfillGlobal('FormData', function () {
    return _$$_REQUIRE(_dependencyMap[12]);
  });
  polyfillGlobal('fetch', function () {
    return _$$_REQUIRE(_dependencyMap[13]).fetch;
  });
  polyfillGlobal('Headers', function () {
    return _$$_REQUIRE(_dependencyMap[13]).Headers;
  });
  polyfillGlobal('Request', function () {
    return _$$_REQUIRE(_dependencyMap[13]).Request;
  });
  polyfillGlobal('Response', function () {
    return _$$_REQUIRE(_dependencyMap[13]).Response;
  });
  polyfillGlobal('WebSocket', function () {
    return _$$_REQUIRE(_dependencyMap[14]);
  });
  polyfillGlobal('Blob', function () {
    return _$$_REQUIRE(_dependencyMap[15]);
  });
  polyfillGlobal('File', function () {
    return _$$_REQUIRE(_dependencyMap[16]);
  });
  polyfillGlobal('FileReader', function () {
    return _$$_REQUIRE(_dependencyMap[17]);
  });
  polyfillGlobal('URL', function () {
    return _$$_REQUIRE(_dependencyMap[18]);
  });

  if (!global.alert) {
    global.alert = function (text) {
      _$$_REQUIRE(_dependencyMap[19]).alert('Alert', '' + text);
    };
  }

  var navigator = global.navigator;

  if (navigator === undefined) {
    global.navigator = navigator = {};
  }

  polyfillObjectProperty(navigator, 'product', function () {
    return 'ReactNative';
  });
  polyfillObjectProperty(navigator, 'geolocation', function () {
    return _$$_REQUIRE(_dependencyMap[20]);
  });

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[21]);

  BatchedBridge.registerLazyCallableModule('Systrace', function () {
    return _$$_REQUIRE(_dependencyMap[4]);
  });
  BatchedBridge.registerLazyCallableModule('JSTimers', function () {
    return _$$_REQUIRE(_dependencyMap[10]);
  });
  BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
    return _$$_REQUIRE(_dependencyMap[22]);
  });
  BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
    return _$$_REQUIRE(_dependencyMap[23]);
  });
  BatchedBridge.registerLazyCallableModule('RCTLog', function () {
    return _$$_REQUIRE(_dependencyMap[24]);
  });
  BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
    return _$$_REQUIRE(_dependencyMap[25]);
  });
  BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
    return _$$_REQUIRE(_dependencyMap[26]);
  });
  BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
    return _$$_REQUIRE(_dependencyMap[27]);
  });
  BatchedBridge.registerLazyCallableModule('JSDevSupportModule', function () {
    return _$$_REQUIRE(_dependencyMap[28]);
  });

  global.__fetchSegment = function (segmentId, options, callback) {
    var _require2 = _$$_REQUIRE(_dependencyMap[29]),
        SegmentFetcher = _require2.SegmentFetcher;

    if (!SegmentFetcher) {
      throw new Error("SegmentFetcher is missing. Please ensure that it is included as a NativeModule.");
    }

    SegmentFetcher.fetchSegment(segmentId, options, function (errorObject) {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
      }

      callback(null);
    });
  };
},85,[86,87,88,92,24,93,23,97,28,99,100,105,119,120,122,116,124,125,126,127,129,15,135,136,137,33,138,139,141,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var defineLazyObjectProperty = _$$_REQUIRE(_dependencyMap[1]);

  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);

    var _ref = descriptor || {},
        enumerable = _ref.enumerable,
        writable = _ref.writable,
        configurable = _ref.configurable;

    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }

    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }

  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }

  module.exports = {
    polyfillObjectProperty: polyfillObjectProperty,
    polyfillGlobal: polyfillGlobal
  };
},86,[48,27]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _shouldActuallyPolyfillES6Collection(collectionName) {
    var Collection = global[collectionName];

    if (Collection == null) {
      return true;
    }

    if (typeof global.Symbol !== 'function') {
      return true;
    }

    var proto = Collection.prototype;
    return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
  }

  var cache = {};

  function _shouldPolyfillES6Collection(collectionName) {
    var result = cache[collectionName];

    if (result !== undefined) {
      return result;
    }

    result = _shouldActuallyPolyfillES6Collection(collectionName);
    cache[collectionName] = result;
    return result;
  }

  module.exports = _shouldPolyfillES6Collection;
},87,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _shouldPolyfillES6Collection = _$$_REQUIRE(_dependencyMap[2]);

  var guid = _$$_REQUIRE(_dependencyMap[3]);

  var isNode = _$$_REQUIRE(_dependencyMap[4]);

  var toIterator = _$$_REQUIRE(_dependencyMap[5]);

  module.exports = function (global, undefined) {
    if (!_shouldPolyfillES6Collection('Map')) {
      return global.Map;
    }

    var KIND_KEY = 'key';
    var KIND_VALUE = 'value';
    var KIND_KEY_VALUE = 'key+value';
    var KEY_PREFIX = '$map_';
    var SECRET_SIZE_PROP;
    var OLD_IE_HASH_PREFIX = 'IE_HASH_';

    var Map = function () {
      function Map(iterable) {
        _classCallCheck(this, Map);

        if (!isObject(this)) {
          throw new TypeError('Wrong map object type.');
        }

        initMap(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            if (!isObject(next.value)) {
              throw new TypeError('Expected iterable items to be pair objects.');
            }

            this.set(next.value[0], next.value[1]);
          }
        }
      }

      _createClass(Map, [{
        key: "clear",
        value: function clear() {
          initMap(this);
        }
      }, {
        key: "has",
        value: function has(key) {
          var index = getIndex(this, key);
          return !!(index != null && this._mapData[index]);
        }
      }, {
        key: "set",
        value: function set(key, value) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            this._mapData[index][1] = value;
          } else {
            index = this._mapData.push([key, value]) - 1;
            setIndex(this, key, index);
            {
              this.size += 1;
            }
          }

          return this;
        }
      }, {
        key: "get",
        value: function get(key) {
          var index = getIndex(this, key);

          if (index == null) {
            return undefined;
          } else {
            return this._mapData[index][1];
          }
        }
      }, {
        key: "delete",
        value: function _delete(key) {
          var index = getIndex(this, key);

          if (index != null && this._mapData[index]) {
            setIndex(this, key, undefined);
            this._mapData[index] = undefined;
            {
              this.size -= 1;
            }
            return true;
          } else {
            return false;
          }
        }
      }, {
        key: "entries",
        value: function entries() {
          return new MapIterator(this, KIND_KEY_VALUE);
        }
      }, {
        key: "keys",
        value: function keys() {
          return new MapIterator(this, KIND_KEY);
        }
      }, {
        key: "values",
        value: function values() {
          return new MapIterator(this, KIND_VALUE);
        }
      }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
          if (typeof callback !== 'function') {
            throw new TypeError('Callback must be callable.');
          }

          var boundCallback = callback.bind(thisArg || undefined);
          var mapData = this._mapData;

          for (var i = 0; i < mapData.length; i++) {
            var entry = mapData[i];

            if (entry != null) {
              boundCallback(entry[1], entry[0], this);
            }
          }
        }
      }]);

      return Map;
    }();

    Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

    var MapIterator = function () {
      function MapIterator(map, kind) {
        _classCallCheck(this, MapIterator);

        if (!(isObject(map) && map._mapData)) {
          throw new TypeError('Object is not a map.');
        }

        if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
          throw new Error('Invalid iteration kind.');
        }

        this._map = map;
        this._nextIndex = 0;
        this._kind = kind;
      }

      _createClass(MapIterator, [{
        key: "next",
        value: function next() {
          if (!this instanceof Map) {
            throw new TypeError('Expected to be called on a MapIterator.');
          }

          var map = this._map;
          var index = this._nextIndex;
          var kind = this._kind;

          if (map == null) {
            return createIterResultObject(undefined, true);
          }

          var entries = map._mapData;

          while (index < entries.length) {
            var record = entries[index];
            index += 1;
            this._nextIndex = index;

            if (record) {
              if (kind === KIND_KEY) {
                return createIterResultObject(record[0], false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(record[1], false);
              } else if (kind) {
                return createIterResultObject(record, false);
              }
            }
          }

          this._map = undefined;
          return createIterResultObject(undefined, true);
        }
      }]);

      return MapIterator;
    }();

    MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
      return this;
    };

    function getIndex(map, key) {
      if (isObject(key)) {
        var hash = getHash(key);
        return map._objectIndex[hash];
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          return map._stringIndex[prefixedKey];
        } else {
          return map._otherIndex[prefixedKey];
        }
      }
    }

    function setIndex(map, key, index) {
      var shouldDelete = index == null;

      if (isObject(key)) {
        var hash = getHash(key);

        if (shouldDelete) {
          delete map._objectIndex[hash];
        } else {
          map._objectIndex[hash] = index;
        }
      } else {
        var prefixedKey = KEY_PREFIX + key;

        if (typeof key === 'string') {
          if (shouldDelete) {
            delete map._stringIndex[prefixedKey];
          } else {
            map._stringIndex[prefixedKey] = index;
          }
        } else {
          if (shouldDelete) {
            delete map._otherIndex[prefixedKey];
          } else {
            map._otherIndex[prefixedKey] = index;
          }
        }
      }
    }

    function initMap(map) {
      map._mapData = [];
      map._objectIndex = {};
      map._stringIndex = {};
      map._otherIndex = {};
      map.size = 0;
    }

    function isObject(o) {
      return o != null && (typeof o === 'object' || typeof o === 'function');
    }

    function createIterResultObject(value, done) {
      return {
        value: value,
        done: done
      };
    }

    var isES5 = function () {
      try {
        Object.defineProperty({}, 'x', {});
        return true;
      } catch (e) {
        return false;
      }
    }();

    function isExtensible(o) {
      if (!isES5) {
        return true;
      } else {
        return Object.isExtensible(o);
      }
    }

    function getIENodeHash(node) {
      var uniqueID;

      switch (node.nodeType) {
        case 1:
          uniqueID = node.uniqueID;
          break;

        case 9:
          uniqueID = node.documentElement.uniqueID;
          break;

        default:
          return null;
      }

      if (uniqueID) {
        return OLD_IE_HASH_PREFIX + uniqueID;
      } else {
        return null;
      }
    }

    var getHash = function () {
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      var hashProperty = guid();
      var hashCounter = 0;
      return function getHash(o) {
        if (o[hashProperty]) {
          return o[hashProperty];
        } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
          return o.propertyIsEnumerable[hashProperty];
        } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
          return getIENodeHash(o);
        } else if (!isES5 && o[hashProperty]) {
          return o[hashProperty];
        }

        if (isExtensible(o)) {
          hashCounter += 1;

          if (isES5) {
            Object.defineProperty(o, hashProperty, {
              enumerable: false,
              writable: false,
              configurable: false,
              value: hashCounter
            });
          } else if (o.propertyIsEnumerable) {
            o.propertyIsEnumerable = function () {
              return propIsEnumerable.apply(this, arguments);
            };

            o.propertyIsEnumerable[hashProperty] = hashCounter;
          } else if (isNode(o)) {
            o[hashProperty] = hashCounter;
          } else {
            throw new Error('Unable to set a non-enumerable property on object.');
          }

          return hashCounter;
        } else {
          throw new Error('Non-extensible objects are not allowed as keys.');
        }
      };
    }();

    return Map;
  }(Function('return this')());
},88,[21,22,87,89,90,91]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function guid() {
    return 'f' + (Math.random() * 1073741824).toString(16).replace('.', '');
  }

  module.exports = guid;
},89,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }

  module.exports = isNode;
},90,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VAL = 'key+value';
  var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : '@@iterator';

  var toIterator = function () {
    if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
      return function () {
        var ArrayIterator = function () {
          function ArrayIterator(array, kind) {
            _classCallCheck(this, ArrayIterator);

            if (!Array.isArray(array)) {
              throw new TypeError('Object is not an Array');
            }

            this._iteratedObject = array;
            this._kind = kind;
            this._nextIndex = 0;
          }

          _createClass(ArrayIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof ArrayIterator) {
                throw new TypeError('Object is not an ArrayIterator');
              }

              if (this._iteratedObject == null) {
                return createIterResultObject(undefined, true);
              }

              var array = this._iteratedObject;
              var len = this._iteratedObject.length;
              var index = this._nextIndex;
              var kind = this._kind;

              if (index >= len) {
                this._iteratedObject = undefined;
                return createIterResultObject(undefined, true);
              }

              this._nextIndex = index + 1;

              if (kind === KIND_KEY) {
                return createIterResultObject(index, false);
              } else if (kind === KIND_VALUE) {
                return createIterResultObject(array[index], false);
              } else if (kind === KIND_KEY_VAL) {
                return createIterResultObject([index, array[index]], false);
              }
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);

          return ArrayIterator;
        }();

        var StringIterator = function () {
          function StringIterator(string) {
            _classCallCheck(this, StringIterator);

            if (typeof string !== 'string') {
              throw new TypeError('Object is not a string');
            }

            this._iteratedString = string;
            this._nextIndex = 0;
          }

          _createClass(StringIterator, [{
            key: "next",
            value: function next() {
              if (!this instanceof StringIterator) {
                throw new TypeError('Object is not a StringIterator');
              }

              if (this._iteratedString == null) {
                return createIterResultObject(undefined, true);
              }

              var index = this._nextIndex;
              var s = this._iteratedString;
              var len = s.length;

              if (index >= len) {
                this._iteratedString = undefined;
                return createIterResultObject(undefined, true);
              }

              var ret;
              var first = s.charCodeAt(index);

              if (first < 0xd800 || first > 0xdbff || index + 1 === len) {
                ret = s[index];
              } else {
                var second = s.charCodeAt(index + 1);

                if (second < 0xdc00 || second > 0xdfff) {
                  ret = s[index];
                } else {
                  ret = s[index] + s[index + 1];
                }
              }

              this._nextIndex = index + ret.length;
              return createIterResultObject(ret, false);
            }
          }, {
            key: '@@iterator',
            value: function iterator() {
              return this;
            }
          }]);

          return StringIterator;
        }();

        function createIterResultObject(value, done) {
          return {
            value: value,
            done: done
          };
        }

        return function (object, kind) {
          if (typeof object === 'string') {
            return new StringIterator(object);
          } else if (Array.isArray(object)) {
            return new ArrayIterator(object, kind || KIND_VALUE);
          } else {
            return object[ITERATOR_SYMBOL]();
          }
        };
      }();
    } else {
      return function (object) {
        return object[ITERATOR_SYMBOL]();
      };
    }
  }();

  _extends(toIterator, {
    KIND_KEY: KIND_KEY,
    KIND_VALUE: KIND_VALUE,
    KIND_KEY_VAL: KIND_KEY_VAL,
    ITERATOR_SYMBOL: ITERATOR_SYMBOL
  });

  module.exports = toIterator;
},91,[3,21,22]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var Map = _$$_REQUIRE(_dependencyMap[2]);

  var _shouldPolyfillES6Collection = _$$_REQUIRE(_dependencyMap[3]);

  var toIterator = _$$_REQUIRE(_dependencyMap[4]);

  module.exports = function (global) {
    if (!_shouldPolyfillES6Collection('Set')) {
      return global.Set;
    }

    var Set = function () {
      function Set(iterable) {
        _classCallCheck(this, Set);

        if (this == null || typeof this !== 'object' && typeof this !== 'function') {
          throw new TypeError('Wrong set object type.');
        }

        initSet(this);

        if (iterable != null) {
          var it = toIterator(iterable);
          var next;

          while (!(next = it.next()).done) {
            this.add(next.value);
          }
        }
      }

      _createClass(Set, [{
        key: "add",
        value: function add(value) {
          this._map.set(value, value);

          this.size = this._map.size;
          return this;
        }
      }, {
        key: "clear",
        value: function clear() {
          initSet(this);
        }
      }, {
        key: "delete",
        value: function _delete(value) {
          var ret = this._map.delete(value);

          this.size = this._map.size;
          return ret;
        }
      }, {
        key: "entries",
        value: function entries() {
          return this._map.entries();
        }
      }, {
        key: "forEach",
        value: function forEach(callback) {
          var thisArg = arguments[1];

          var it = this._map.keys();

          var next;

          while (!(next = it.next()).done) {
            callback.call(thisArg, next.value, next.value, this);
          }
        }
      }, {
        key: "has",
        value: function has(value) {
          return this._map.has(value);
        }
      }, {
        key: "values",
        value: function values() {
          return this._map.values();
        }
      }]);

      return Set;
    }();

    Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;
    Set.prototype.keys = Set.prototype.values;

    function initSet(set) {
      set._map = new Map();
      set.size = set._map.size;
    }

    return Set;
  }(Function('return this')());
},92,[21,22,88,87,91]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var exceptionID = 0;

  function reportException(e, isFatal) {
    var _require = _$$_REQUIRE(_dependencyMap[0]),
        ExceptionsManager = _require.ExceptionsManager;

    if (ExceptionsManager) {
      var parseErrorStack = _$$_REQUIRE(_dependencyMap[1]);

      var stack = parseErrorStack(e);
      var currentExceptionID = ++exceptionID;

      if (isFatal) {
        ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
      } else {
        ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
      }
    }
  }

  function handleException(e, isFatal) {
    if (!e.message) {
      e = new Error(e);
    }

    if (console._errorOriginal) {
      console._errorOriginal(e.message);
    } else {
      console.error(e.message);
    }

    reportException(e, isFatal);
  }

  function reactConsoleErrorHandler() {
    console._errorOriginal.apply(console, arguments);

    if (!console.reportErrorsAsExceptions) {
      return;
    }

    if (arguments[0] && arguments[0].stack) {
      reportException(arguments[0], false);
    } else {
      var stringifySafe = _$$_REQUIRE(_dependencyMap[2]);

      var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');

      if (str.slice(0, 10) === '"Warning: ') {
        return;
      }

      var error = new Error('console.error: ' + str);
      error.framesToPop = 1;
      reportException(error, false);
    }
  }

  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }

    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;

    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }

  module.exports = {
    handleException: handleException,
    installConsoleErrorReporter: installConsoleErrorReporter
  };
},93,[8,94,26]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function parseErrorStack(e) {
    if (!e || !e.stack) {
      return [];
    }

    var stacktraceParser = _$$_REQUIRE(_dependencyMap[0]);

    var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);
    var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;

    while (framesToPop--) {
      stack.shift();
    }

    return stack;
  }

  module.exports = parseErrorStack;
},94,[95]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},95,[96]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var UNKNOWN_FUNCTION = '<unknown>';
  var StackTraceParser = {
    parse: function parse(stackString) {
      var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
          gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
          node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
          lines = stackString.split('\n'),
          stack = [],
          parts,
          element;

      for (var i = 0, j = lines.length; i < j; ++i) {
        if (parts = gecko.exec(lines[i])) {
          element = {
            'file': parts[3],
            'methodName': parts[1] || UNKNOWN_FUNCTION,
            'lineNumber': +parts[4],
            'column': parts[5] ? +parts[5] : null
          };
        } else if (parts = chrome.exec(lines[i])) {
          element = {
            'file': parts[2],
            'methodName': parts[1] || UNKNOWN_FUNCTION,
            'lineNumber': +parts[3],
            'column': parts[4] ? +parts[4] : null
          };
        } else if (parts = node.exec(lines[i])) {
          element = {
            'file': parts[2],
            'methodName': parts[1] || UNKNOWN_FUNCTION,
            'lineNumber': +parts[3],
            'column': parts[4] ? +parts[4] : null
          };
        } else {
          continue;
        }

        stack.push(element);
      }

      return stack;
    }
  };
  module.exports = StackTraceParser;
},96,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      PlatformConstants = _require.PlatformConstants;

  var ReactNativeVersion = _$$_REQUIRE(_dependencyMap[1]);

  exports.checkVersions = function checkVersions() {
    if (!PlatformConstants) {
      return;
    }

    var nativeVersion = PlatformConstants.reactNativeVersion;

    if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(ReactNativeVersion.version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease !== null ? "-" + version.prerelease : '');
  }
},97,[8,98]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  exports.version = {
    major: 0,
    minor: 57,
    patch: 1,
    prerelease: null
  };
},98,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this;
  }() || Function("return this")());
},99,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var Systrace = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var _require = _$$_REQUIRE(_dependencyMap[3]),
      Timing = _require.Timing;

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[4]);

  var _performanceNow = null;

  function performanceNow() {
    if (!_performanceNow) {
      _performanceNow = _$$_REQUIRE(_dependencyMap[5]);
    }

    return _performanceNow();
  }

  var FRAME_DURATION = 16.666666666666668;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var MAX_TIMER_DURATION_MS = 60000;
  var IS_ANDROID = false;
  var ANDROID_LONG_TIMER_MESSAGE = "Setting a timer for a long period of time, i.e. multiple minutes, is a performance and correctness issue on Android as it keeps the timer module awake, and timers can only be called when the app is in the foreground. See https://github.com/facebook/react-native/issues/12981 for more info.";
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var immediates = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var identifiers = [];
  var GUID = 1;
  var errors = null;
  var hasEmittedTimeDriftWarning = false;

  function _getFreeIndex() {
    var freeIndex = timerIDs.indexOf(null);

    if (freeIndex === -1) {
      freeIndex = timerIDs.length;
    }

    return freeIndex;
  }

  function _allocateCallback(func, type) {
    var id = GUID++;

    var freeIndex = _getFreeIndex();

    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
  }

  function _callTimer(timerID, frameTime, didTimeout) {
    _$$_REQUIRE(_dependencyMap[6])(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = timerIDs.indexOf(timerID);

    if (timerIndex === -1) {
      return;
    }

    var type = types[timerIndex];
    var callback = callbacks[timerIndex];

    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      _clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!errors) {
        errors = [e];
      } else {
        errors.push(e);
      }
    }
  }

  function _callImmediatesPass() {
    if (immediates.length > 0) {
      var passImmediates = immediates.slice();
      immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        _callTimer(passImmediates[i], 0);
      }
    }

    return immediates.length > 0;
  }

  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    identifiers[i] = null;
  }

  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }

    var index = timerIDs.indexOf(timerID);

    if (index !== -1) {
      _clearIndex(index);

      var type = types[index];

      if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
        Timing.deleteTimer(timerID);
      }
    }
  }

  var JSTimers = {
    setTimeout: function setTimeout(func, duration) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setTimeout');

      Timing.createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function setInterval(func, duration) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setInterval');

      Timing.createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    setImmediate: function setImmediate(func) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var id = _allocateCallback(function () {
        return func.apply(undefined, args);
      }, 'setImmediate');

      immediates.push(id);
      return id;
    },
    requestAnimationFrame: function requestAnimationFrame(func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');

      Timing.createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function requestIdleCallback(func, options) {
      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(true);
      }

      var timeout = options && options.timeout;

      var id = _allocateCallback(timeout != null ? function (deadline) {
        var timeoutId = requestIdleCallbackTimeouts[id];

        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }

        return func(deadline);
      } : func, 'requestIdleCallback');

      requestIdleCallbacks.push(id);

      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(function () {
          var index = requestIdleCallbacks.indexOf(id);

          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);

            _callTimer(id, performanceNow(), true);
          }

          delete requestIdleCallbackTimeouts[id];

          if (requestIdleCallbacks.length === 0) {
            Timing.setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }

      return id;
    },
    cancelIdleCallback: function cancelIdleCallback(timerID) {
      _freeCallback(timerID);

      var index = requestIdleCallbacks.indexOf(timerID);

      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }

      var timeoutId = requestIdleCallbackTimeouts[timerID];

      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }
    },
    clearTimeout: function clearTimeout(timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function clearInterval(timerID) {
      _freeCallback(timerID);
    },
    clearImmediate: function clearImmediate(timerID) {
      _freeCallback(timerID);

      var index = immediates.indexOf(timerID);

      if (index !== -1) {
        immediates.splice(index, 1);
      }
    },
    cancelAnimationFrame: function cancelAnimationFrame(timerID) {
      _freeCallback(timerID);
    },
    callTimers: function callTimers(timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors = null;

      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }

      if (errors) {
        var errorCount = errors.length;

        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout(function (error) {
              throw error;
            }.bind(null, errors[ii]), 0);
          }
        }

        throw errors[0];
      }
    },
    callIdleCallbacks: function callIdleCallbacks(frameTime) {
      if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }

      errors = null;

      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks.slice();
        requestIdleCallbacks = [];

        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }

      if (requestIdleCallbacks.length === 0) {
        Timing.setSendIdleEvents(false);
      }

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    callImmediates: function callImmediates() {
      errors = null;

      while (_callImmediatesPass()) {}

      if (errors) {
        errors.forEach(function (error) {
          return JSTimers.setTimeout(function () {
            throw error;
          }, 0);
        });
      }
    },
    emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }

      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };
  var ExportedJSTimers;

  if (!Timing) {
    console.warn("Timing native module is not available, can't set timers.");
    ExportedJSTimers = {
      callImmediates: JSTimers.callImmediates,
      setImmediate: JSTimers.setImmediate
    };
  } else {
    ExportedJSTimers = JSTimers;
  }

  BatchedBridge.setImmediatesCallback(ExportedJSTimers.callImmediates.bind(ExportedJSTimers));
  module.exports = ExportedJSTimers;
},100,[50,24,6,8,15,101,104]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var performance = _$$_REQUIRE(_dependencyMap[0]);

  var performanceNow;

  if (performance.now) {
    performanceNow = function performanceNow() {
      return performance.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }

  module.exports = performanceNow;
},101,[102]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ExecutionEnvironment = _$$_REQUIRE(_dependencyMap[0]);

  var performance;

  if (ExecutionEnvironment.canUseDOM) {
    performance = window.performance || window.msPerformance || window.webkitPerformance;
  }

  module.exports = performance || {};
},102,[103]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM: canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
  };
  module.exports = ExecutionEnvironment;
},103,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyFunction = _$$_REQUIRE(_dependencyMap[0]);

  var warning = emptyFunction;
  module.exports = warning;
},104,[46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);

  var _get = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var EventTarget = _$$_REQUIRE(_dependencyMap[7]);

  var RCTNetworking = _$$_REQUIRE(_dependencyMap[8]);

  var base64 = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var warning = _$$_REQUIRE(_dependencyMap[11]);

  var BlobManager = _$$_REQUIRE(_dependencyMap[12]);

  if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
  }

  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

  var XMLHttpRequestEventTarget = function (_EventTarget) {
    _inherits(XMLHttpRequestEventTarget, _EventTarget);

    function XMLHttpRequestEventTarget() {
      _classCallCheck(this, XMLHttpRequestEventTarget);

      return _possibleConstructorReturn(this, _getPrototypeOf(XMLHttpRequestEventTarget).apply(this, arguments));
    }

    return XMLHttpRequestEventTarget;
  }(EventTarget.apply(undefined, REQUEST_EVENTS));

  var XMLHttpRequest = function (_EventTarget2) {
    _inherits(XMLHttpRequest, _EventTarget2);

    _createClass(XMLHttpRequest, null, [{
      key: "setInterceptor",
      value: function setInterceptor(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }]);

    function XMLHttpRequest() {
      var _this;

      _classCallCheck(this, XMLHttpRequest);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(XMLHttpRequest).call(this));
      _this.UNSENT = UNSENT;
      _this.OPENED = OPENED;
      _this.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this.readyState = UNSENT;
      _this.status = 0;
      _this.timeout = 0;
      _this.withCredentials = true;
      _this.upload = new XMLHttpRequestEventTarget();
      _this._aborted = false;
      _this._hasError = false;
      _this._method = null;
      _this._response = '';
      _this._url = null;
      _this._timedOut = false;
      _this._trackingName = 'unknown';
      _this._incrementalEvents = false;

      _this._reset();

      return _this;
    }

    _createClass(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};

        this._clearSubscriptions();

        this._timedOut = false;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total: total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);

          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }

          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }

        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }

        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);

        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }

        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded: loaded,
          total: total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }

            this._hasError = true;

            if (timeOutError) {
              this._timedOut = true;
            }
          }

          this._clearSubscriptions();

          this._requestId = null;
          this.setReadyState(this.DONE);

          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(function (sub) {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }

        var headers = this.responseHeaders || {};
        return Object.keys(headers).map(function (headerName) {
          return headerName + ': ' + headers[headerName];
        }).join('\r\n');
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];

        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }

        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }

        if (!url) {
          throw new Error('Cannot load an empty url');
        }

        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _this2 = this;

        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }

        if (this._sent) {
          throw new Error('Request has already been sent');
        }

        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
          return _this2.__didUploadProgress.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
          return _this2.__didReceiveResponse.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
          return _this2.__didReceiveData.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
          return _this2.__didReceiveIncrementalData.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
          return _this2.__didReceiveDataProgress.apply(_this2, _toConsumableArray(args));
        }));

        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
          return _this2.__didCompleteResponse.apply(_this2, _toConsumableArray(args));
        }));

        var nativeResponseType = 'text';

        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }

        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }

        invariant(this._method, 'Request method needs to be defined.');
        invariant(this._url, 'Request URL needs to be defined.');
        RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }

        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();

          this.setReadyState(this.DONE);
        }

        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }

        _get(_getPrototypeOf(XMLHttpRequest.prototype), "addEventListener", this).call(this, type, listener);
      }
    }, {
      key: "responseType",
      get: function get() {
        return this._responseType;
      },
      set: function set(responseType) {
        if (this._sent) {
          throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The response type cannot be set after the request has been sent.");
        }

        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          warning(false, "The provided value '" + responseType + "' is not a valid 'responseType'.");
          return;
        }

        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', "The provided value '" + responseType + "' is unsupported in this environment.");

        if (responseType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
        }

        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function get() {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + ("is set to '' or 'text', but it is '" + this._responseType + "'."));
        }

        if (this.readyState < LOADING) {
          return '';
        }

        return this._response;
      }
    }, {
      key: "response",
      get: function get() {
        var responseType = this.responseType;

        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }

        if (this.readyState !== DONE) {
          return null;
        }

        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }

        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;

          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;

          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = BlobManager.createFromOptions(this._response);
            } else {
              throw new Error("Invalid response for blob: " + this._response);
            }

            break;

          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }

            break;

          default:
            this._cachedResponse = null;
        }

        return this._cachedResponse;
      }
    }]);

    return XMLHttpRequest;
  }(EventTarget.apply(undefined, _toConsumableArray(XHR_EVENTS)));

  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  module.exports = XMLHttpRequest;
},105,[17,38,22,21,34,37,40,106,110,115,6,104,117]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var Commons = _$$_REQUIRE(_dependencyMap[0]);

  var CustomEventTarget = _$$_REQUIRE(_dependencyMap[1]);

  var EventWrapper = _$$_REQUIRE(_dependencyMap[2]);

  var LISTENERS = Commons.LISTENERS;
  var CAPTURE = Commons.CAPTURE;
  var BUBBLE = Commons.BUBBLE;
  var ATTRIBUTE = Commons.ATTRIBUTE;
  var newNode = Commons.newNode;
  var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
  var createEventWrapper = EventWrapper.createEventWrapper;
  var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;
  var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

  var EventTarget = module.exports = function EventTarget() {
    if (this instanceof EventTarget) {
      Object.defineProperty(this, LISTENERS, {
        value: Object.create(null)
      });
    } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(EventTarget, arguments[0]);
    } else if (arguments.length > 0) {
      var types = Array(arguments.length);

      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }

      return defineCustomEventTarget(EventTarget, types);
    } else {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
    constructor: {
      value: EventTarget,
      writable: true,
      configurable: true
    },
    addEventListener: {
      value: function addEventListener(type, listener, capture) {
        if (listener == null) {
          return false;
        }

        if (typeof listener !== "function" && typeof listener !== "object") {
          throw new TypeError("\"listener\" is not an object.");
        }

        var kind = capture ? CAPTURE : BUBBLE;
        var node = this[LISTENERS][type];

        if (node == null) {
          this[LISTENERS][type] = newNode(listener, kind);
          return true;
        }

        var prev = null;

        while (node != null) {
          if (node.listener === listener && node.kind === kind) {
            return false;
          }

          prev = node;
          node = node.next;
        }

        prev.next = newNode(listener, kind);
        return true;
      },
      configurable: true,
      writable: true
    },
    removeEventListener: {
      value: function removeEventListener(type, listener, capture) {
        if (listener == null) {
          return false;
        }

        var kind = capture ? CAPTURE : BUBBLE;
        var prev = null;
        var node = this[LISTENERS][type];

        while (node != null) {
          if (node.listener === listener && node.kind === kind) {
            if (prev == null) {
              this[LISTENERS][type] = node.next;
            } else {
              prev.next = node.next;
            }

            return true;
          }

          prev = node;
          node = node.next;
        }

        return false;
      },
      configurable: true,
      writable: true
    },
    dispatchEvent: {
      value: function dispatchEvent(event) {
        var node = this[LISTENERS][event.type];

        if (node == null) {
          return true;
        }

        var wrapped = createEventWrapper(event, this);

        while (node != null) {
          if (typeof node.listener === "function") {
            node.listener.call(this, wrapped);
          } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
            node.listener.handleEvent(wrapped);
          }

          if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
            break;
          }

          node = node.next;
        }

        return !wrapped.defaultPrevented;
      },
      configurable: true,
      writable: true
    }
  });
},106,[107,108,109]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
    return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
  };
  exports.LISTENERS = createUniqueKey("listeners");
  exports.CAPTURE = 1;
  exports.BUBBLE = 2;
  exports.ATTRIBUTE = 3;

  exports.newNode = function newNode(listener, kind) {
    return {
      listener: listener,
      kind: kind,
      next: null
    };
  };
},107,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var Commons = _$$_REQUIRE(_dependencyMap[0]);

  var LISTENERS = Commons.LISTENERS;
  var ATTRIBUTE = Commons.ATTRIBUTE;
  var newNode = Commons.newNode;

  function getAttributeListener(eventTarget, type) {
    var node = eventTarget[LISTENERS][type];

    while (node != null) {
      if (node.kind === ATTRIBUTE) {
        return node.listener;
      }

      node = node.next;
    }

    return null;
  }

  function setAttributeListener(eventTarget, type, listener) {
    if (typeof listener !== "function" && typeof listener !== "object") {
      listener = null;
    }

    var prev = null;
    var node = eventTarget[LISTENERS][type];

    while (node != null) {
      if (node.kind === ATTRIBUTE) {
        if (prev == null) {
          eventTarget[LISTENERS][type] = node.next;
        } else {
          prev.next = node.next;
        }
      } else {
        prev = node;
      }

      node = node.next;
    }

    if (listener != null) {
      if (prev == null) {
        eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
      } else {
        prev.next = newNode(listener, ATTRIBUTE);
      }
    }
  }

  exports.defineCustomEventTarget = function (EventTargetBase, types) {
    function EventTarget() {
      EventTargetBase.call(this);
    }

    var descripter = {
      constructor: {
        value: EventTarget,
        configurable: true,
        writable: true
      }
    };
    types.forEach(function (type) {
      descripter["on" + type] = {
        get: function get() {
          return getAttributeListener(this, type);
        },
        set: function set(listener) {
          setAttributeListener(this, type, listener);
        },
        configurable: true,
        enumerable: true
      };
    });
    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);
    return EventTarget;
  };
},108,[107]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var createUniqueKey = _$$_REQUIRE(_dependencyMap[0]).createUniqueKey;

  var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");
  var CANCELED_FLAG = createUniqueKey("canceled_flag");
  var ORIGINAL_EVENT = createUniqueKey("original_event");
  var wrapperPrototypeDefinition = Object.freeze({
    stopPropagation: Object.freeze({
      value: function stopPropagation() {
        var e = this[ORIGINAL_EVENT];

        if (typeof e.stopPropagation === "function") {
          e.stopPropagation();
        }
      },
      writable: true,
      configurable: true
    }),
    stopImmediatePropagation: Object.freeze({
      value: function stopImmediatePropagation() {
        this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;
        var e = this[ORIGINAL_EVENT];

        if (typeof e.stopImmediatePropagation === "function") {
          e.stopImmediatePropagation();
        }
      },
      writable: true,
      configurable: true
    }),
    preventDefault: Object.freeze({
      value: function preventDefault() {
        if (this.cancelable === true) {
          this[CANCELED_FLAG] = true;
        }

        var e = this[ORIGINAL_EVENT];

        if (typeof e.preventDefault === "function") {
          e.preventDefault();
        }
      },
      writable: true,
      configurable: true
    }),
    defaultPrevented: Object.freeze({
      get: function defaultPrevented() {
        return this[CANCELED_FLAG];
      },
      enumerable: true,
      configurable: true
    })
  });
  exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

  exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
    var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
    var propertyDefinition = {
      type: {
        value: event.type,
        enumerable: true
      },
      target: {
        value: eventTarget,
        enumerable: true
      },
      currentTarget: {
        value: eventTarget,
        enumerable: true
      },
      eventPhase: {
        value: 2,
        enumerable: true
      },
      bubbles: {
        value: Boolean(event.bubbles),
        enumerable: true
      },
      cancelable: {
        value: Boolean(event.cancelable),
        enumerable: true
      },
      timeStamp: {
        value: timeStamp,
        enumerable: true
      },
      isTrusted: {
        value: false,
        enumerable: true
      }
    };
    propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = {
      value: false,
      writable: true
    };
    propertyDefinition[CANCELED_FLAG] = {
      value: false,
      writable: true
    };
    propertyDefinition[ORIGINAL_EVENT] = {
      value: event
    };

    if (typeof event.detail !== "undefined") {
      propertyDefinition.detail = {
        value: event.detail,
        enumerable: true
      };
    }

    return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
  };
},109,[107]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var MissingNativeEventEmitterShim = _$$_REQUIRE(_dependencyMap[6]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[7]);

  var RCTNetworkingNative = _$$_REQUIRE(_dependencyMap[8]).Networking;

  var convertRequestBody = _$$_REQUIRE(_dependencyMap[9]);

  var RCTNetworking = function (_NativeEventEmitter) {
    _inherits(RCTNetworking, _NativeEventEmitter);

    function RCTNetworking() {
      var _this;

      _classCallCheck(this, RCTNetworking);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(RCTNetworking).call(this, RCTNetworkingNative));
      _this.isAvailable = true;
      return _this;
    }

    _createClass(RCTNetworking, [{
      key: "sendRequest",
      value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
        var body = convertRequestBody(data);
        RCTNetworkingNative.sendRequest({
          method: method,
          url: url,
          data: _objectSpread({}, body, {
            trackingName: trackingName
          }),
          headers: headers,
          responseType: responseType,
          incrementalUpdates: incrementalUpdates,
          timeout: timeout,
          withCredentials: withCredentials
        }, callback);
      }
    }, {
      key: "abortRequest",
      value: function abortRequest(requestId) {
        RCTNetworkingNative.abortRequest(requestId);
      }
    }, {
      key: "clearCookies",
      value: function clearCookies(callback) {
        RCTNetworkingNative.clearCookies(callback);
      }
    }]);

    return RCTNetworking;
  }(NativeEventEmitter);

  {
    RCTNetworking = new RCTNetworking();
  }
  module.exports = RCTNetworking;
},110,[48,21,22,34,37,40,111,112,8,113]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var EmitterSubscription = _$$_REQUIRE(_dependencyMap[5]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[6]);

  var invariant = _$$_REQUIRE(_dependencyMap[7]);

  var MissingNativeEventEmitterShim = function (_EventEmitter) {
    _inherits(MissingNativeEventEmitterShim, _EventEmitter);

    function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
      var _this;

      _classCallCheck(this, MissingNativeEventEmitterShim);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(MissingNativeEventEmitterShim).call(this, null));
      _this.isAvailable = false;
      _this._nativeModuleName = nativeModuleName;
      _this._nativeEventEmitterName = nativeEventEmitterName;
      return _this;
    }

    _createClass(MissingNativeEventEmitterShim, [{
      key: "throwMissingNativeModule",
      value: function throwMissingNativeModule() {
        invariant(false, "Cannot use '" + this._nativeEventEmitterName + "' module when " + ("native '" + this._nativeModuleName + "' is not included in the build. ") + ("Either include it, or check '" + this._nativeEventEmitterName + "'.isAvailable ") + 'before calling any methods.');
      }
    }, {
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this.throwMissingNativeModule();
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this.throwMissingNativeModule();
      }
    }]);

    return MissingNativeEventEmitterShim;
  }(EventEmitter);

  module.exports = MissingNativeEventEmitterShim;
},111,[21,22,34,37,40,43,42,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[6]);

  var Platform = _$$_REQUIRE(_dependencyMap[7]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[8]);

  var invariant = _$$_REQUIRE(_dependencyMap[9]);

  var NativeEventEmitter = function (_EventEmitter) {
    _inherits(NativeEventEmitter, _EventEmitter);

    function NativeEventEmitter(nativeModule) {
      var _this;

      _classCallCheck(this, NativeEventEmitter);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NativeEventEmitter).call(this, RCTDeviceEventEmitter.sharedSubscriber));
      {
        invariant(nativeModule, 'Native module cannot be null.');
        _this._nativeModule = nativeModule;
      }
      return _this;
    }

    _createClass(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (this._nativeModule != null) {
          this._nativeModule.addListener(eventType);
        }

        return _get(_getPrototypeOf(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        invariant(eventType, 'eventType argument is required.');
        var count = this.listeners(eventType).length;

        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(count);
        }

        _get(_getPrototypeOf(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        if (this._nativeModule != null) {
          this._nativeModule.removeListeners(1);
        }

        _get(_getPrototypeOf(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }]);

    return NativeEventEmitter;
  }(EventEmitter);

  module.exports = NativeEventEmitter;
},112,[21,22,34,37,38,40,42,50,33,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var binaryToBase64 = _$$_REQUIRE(_dependencyMap[0]);

  var Blob = _$$_REQUIRE(_dependencyMap[1]);

  var FormData = _$$_REQUIRE(_dependencyMap[2]);

  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }

    if (body instanceof Blob) {
      return {
        blob: body.data
      };
    }

    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }

    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }

    return body;
  }

  module.exports = convertRequestBody;
},113,[114,116,119]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var base64 = _$$_REQUIRE(_dependencyMap[0]);

  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }

    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }

    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }

    var _data = data,
        buffer = _data.buffer,
        byteOffset = _data.byteOffset,
        byteLength = _data.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }

  module.exports = binaryToBase64;
},114,[115]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function getLens(b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }

  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }

  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

    for (var i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var parts = [];
    var maxChunkLength = 16383;

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }

    return parts.join('');
  }
},115,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var Blob = function () {
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, Blob);

      var BlobManager = _$$_REQUIRE(_dependencyMap[2]);

      this.data = BlobManager.createFromParts(parts, options).data;
    }

    _createClass(Blob, [{
      key: "slice",
      value: function slice(start, end) {
        var BlobManager = _$$_REQUIRE(_dependencyMap[2]);

        var _this$data = this.data,
            offset = _this$data.offset,
            size = _this$data.size;

        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }

          offset += start;
          size -= start;

          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }

            size = end - start;
          }
        }

        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset: offset,
          size: size
        });
      }
    }, {
      key: "close",
      value: function close() {
        var BlobManager = _$$_REQUIRE(_dependencyMap[2]);

        BlobManager.release(this.data.blobId);
        this.data = null;
      }
    }, {
      key: "data",
      set: function set(data) {
        this._data = data;
      },
      get: function get() {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }

        return this._data;
      }
    }, {
      key: "size",
      get: function get() {
        return this.data.size;
      }
    }, {
      key: "type",
      get: function get() {
        return this.data.type || '';
      }
    }]);

    return Blob;
  }();

  module.exports = Blob;
},116,[21,22,117]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var Blob = _$$_REQUIRE(_dependencyMap[3]);

  var BlobRegistry = _$$_REQUIRE(_dependencyMap[4]);

  var _require = _$$_REQUIRE(_dependencyMap[5]),
      BlobModule = _require.BlobModule;

  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }

  var BlobManager = function () {
    function BlobManager() {
      _classCallCheck(this, BlobManager);
    }

    _createClass(BlobManager, null, [{
      key: "createFromParts",
      value: function createFromParts(parts, options) {
        var blobId = uuidv4();
        var items = parts.map(function (part) {
          if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {
            throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
          }

          if (part instanceof Blob) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce(function (acc, curr) {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);
        BlobModule.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
          blobId: blobId,
          offset: 0,
          size: size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        return _extends(Object.create(Blob.prototype), {
          data: options
        });
      }
    }, {
      key: "release",
      value: function release(blobId) {
        BlobRegistry.unregister(blobId);

        if (BlobRegistry.has(blobId)) {
          return;
        }

        BlobModule.release(blobId);
      }
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        BlobModule.addNetworkingHandler();
      }
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        BlobModule.addWebSocketHandler(socketId);
      }
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        BlobModule.removeWebSocketHandler(socketId);
      }
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        BlobModule.sendOverSocket(blob.data, socketId);
      }
    }]);

    return BlobManager;
  }();

  BlobManager.isAvailable = !!BlobModule;
  module.exports = BlobManager;
},117,[3,21,22,116,118,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var registry = {};

  var register = function register(id) {
    if (registry[id]) {
      registry[id]++;
    } else {
      registry[id] = 1;
    }
  };

  var unregister = function unregister(id) {
    if (registry[id]) {
      registry[id]--;

      if (registry[id] <= 0) {
        delete registry[id];
      }
    }
  };

  var has = function has(id) {
    return registry[id] && registry[id] > 0;
  };

  module.exports = {
    register: register,
    unregister: unregister,
    has: has
  };
},118,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var FormData = function () {
    function FormData() {
      _classCallCheck(this, FormData);

      this._parts = [];
    }

    _createClass(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };

          if (typeof value === 'object' && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += '; filename="' + value.name + '"';
            }

            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }

            return _objectSpread({}, value, {
              headers: headers,
              fieldName: name
            });
          }

          return {
            string: String(value),
            headers: headers,
            fieldName: name
          };
        });
      }
    }]);

    return FormData;
  }();

  module.exports = FormData;
},119,[48,11,21,22]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var whatwg = _$$_REQUIRE(_dependencyMap[0]);

  if (whatwg && whatwg.fetch) {
    module.exports = whatwg;
  } else {
    module.exports = {
      fetch: fetch,
      Headers: Headers,
      Request: Request,
      Response: Response
    };
  }
},120,[121]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (self) {
    'use strict';

    if (self.fetch) {
      return;
    }

    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isDataView = function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      };

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    }

    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ',' + value : value;
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          throw new Error('unsupported BodyInit type');
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    }

    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }

      this.credentials = options.credentials || this.credentials || 'omit';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;

    self.fetch = function (input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        var xhr = new XMLHttpRequest();

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    };

    self.fetch.polyfill = true;
  })(typeof self !== 'undefined' ? self : this);
},121,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var Blob = _$$_REQUIRE(_dependencyMap[6]);

  var EventTarget = _$$_REQUIRE(_dependencyMap[7]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[8]);

  var BlobManager = _$$_REQUIRE(_dependencyMap[9]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[10]);

  var Platform = _$$_REQUIRE(_dependencyMap[11]);

  var WebSocketEvent = _$$_REQUIRE(_dependencyMap[12]);

  var base64 = _$$_REQUIRE(_dependencyMap[13]);

  var binaryToBase64 = _$$_REQUIRE(_dependencyMap[14]);

  var invariant = _$$_REQUIRE(_dependencyMap[15]);

  var WebSocketModule = NativeModules.WebSocketModule;
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;

  var WebSocket = function (_EventTarget) {
    _inherits(WebSocket, _EventTarget);

    function WebSocket(url, protocols, options) {
      var _this;

      _classCallCheck(this, WebSocket);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocket).call(this));
      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;

      if (typeof protocols === 'string') {
        protocols = [protocols];
      }

      var _ref = options || {},
          _ref$headers = _ref.headers,
          headers = _ref$headers === undefined ? {} : _ref$headers,
          unrecognized = _objectWithoutProperties(_ref, ["headers"]);

      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }

      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }

      if (!Array.isArray(protocols)) {
        protocols = null;
      }

      if (!WebSocket.isAvailable) {
        throw new Error("Cannot initialize WebSocket module. Native module WebSocketModule is missing.");
      }

      _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
      _this._socketId = nextWebSocketId++;

      _this._registerEvents();

      WebSocketModule.connect(url, protocols, {
        headers: headers
      }, _this._socketId);
      return _this;
    }

    _createClass(WebSocket, [{
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }

        this.readyState = this.CLOSING;

        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        if (data instanceof Blob) {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
          BlobManager.sendOverSocket(data, this._socketId);
          return;
        }

        if (typeof data === 'string') {
          WebSocketModule.send(data, this._socketId);
          return;
        }

        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
          return;
        }

        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }

        WebSocketModule.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        {
          WebSocketModule.close(this._socketId);
        }

        if (BlobManager.isAvailable && this._binaryType === 'blob') {
          BlobManager.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        var _this2 = this;

        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          var data = ev.data;

          switch (ev.type) {
            case 'binary':
              data = base64.toByteArray(ev.data).buffer;
              break;

            case 'blob':
              data = BlobManager.createFromOptions(ev.data);
              break;
          }

          _this2.dispatchEvent(new WebSocketEvent('message', {
            data: data
          }));
        }), this._eventEmitter.addListener('websocketOpen', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.OPEN;

          _this2.dispatchEvent(new WebSocketEvent('open'));
        }), this._eventEmitter.addListener('websocketClosed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('close', {
            code: ev.code,
            reason: ev.reason
          }));

          _this2._unregisterEvents();

          _this2.close();
        }), this._eventEmitter.addListener('websocketFailed', function (ev) {
          if (ev.id !== _this2._socketId) {
            return;
          }

          _this2.readyState = _this2.CLOSED;

          _this2.dispatchEvent(new WebSocketEvent('error', {
            message: ev.message
          }));

          _this2.dispatchEvent(new WebSocketEvent('close', {
            message: ev.message
          }));

          _this2._unregisterEvents();

          _this2.close();
        })];
      }
    }, {
      key: "binaryType",
      get: function get() {
        return this._binaryType;
      },
      set: function set(binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
        }

        if (this._binaryType === 'blob' || binaryType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');

          if (binaryType === 'blob') {
            BlobManager.addWebSocketHandler(this._socketId);
          } else {
            BlobManager.removeWebSocketHandler(this._socketId);
          }
        }

        this._binaryType = binaryType;
      }
    }]);

    return WebSocket;
  }(EventTarget.apply(undefined, WEBSOCKET_EVENTS));

  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  WebSocket.isAvailable = !!WebSocketModule;
  module.exports = WebSocket;
},122,[9,21,22,34,37,40,116,106,112,117,8,50,123,115,114,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
    _classCallCheck(this, WebSocketEvent);

    this.type = type.toString();

    _extends(this, eventInitDict);
  };

  module.exports = WebSocketEvent;
},123,[3,21]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var Blob = _$$_REQUIRE(_dependencyMap[5]);

  var invariant = _$$_REQUIRE(_dependencyMap[6]);

  var File = function (_Blob) {
    _inherits(File, _Blob);

    function File(parts, name, options) {
      var _this;

      _classCallCheck(this, File);

      invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');
      _this = _possibleConstructorReturn(this, _getPrototypeOf(File).call(this, parts, options));
      _this.data.name = name;
      return _this;
    }

    _createClass(File, [{
      key: "name",
      get: function get() {
        invariant(this.data.name != null, 'Files must have a name set.');
        return this.data.name;
      }
    }, {
      key: "lastModified",
      get: function get() {
        return this.data.lastModified || 0;
      }
    }]);

    return File;
  }(Blob);

  module.exports = File;
},124,[21,22,34,37,40,116,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var EventTarget = _$$_REQUIRE(_dependencyMap[5]);

  var Blob = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      FileReaderModule = _require.FileReaderModule;

  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;

  var FileReader = function (_EventTarget) {
    _inherits(FileReader, _EventTarget);

    function FileReader() {
      var _this;

      _classCallCheck(this, FileReader);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FileReader).call(this));
      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._subscriptions = [];

      _this._reset();

      return _this;
    }

    _createClass(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (sub) {
          return sub.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });

        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }

          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer() {
        throw new Error('FileReader.readAsArrayBuffer is not implemented');
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        var _this2 = this;

        this._aborted = false;
        FileReaderModule.readAsDataURL(blob.data).then(function (text) {
          if (_this2._aborted) {
            return;
          }

          _this2._result = text;

          _this2._setReadyState(DONE);
        }, function (error) {
          if (_this2._aborted) {
            return;
          }

          _this2._error = error;

          _this2._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var _this3 = this;

        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        FileReaderModule.readAsText(blob.data, encoding).then(function (text) {
          if (_this3._aborted) {
            return;
          }

          _this3._result = text;

          _this3._setReadyState(DONE);
        }, function (error) {
          if (_this3._aborted) {
            return;
          }

          _this3._error = error;

          _this3._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;

        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();

          this._setReadyState(DONE);
        }

        this._reset();
      }
    }, {
      key: "readyState",
      get: function get() {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function get() {
        return this._error;
      }
    }, {
      key: "result",
      get: function get() {
        return this._result;
      }
    }]);

    return FileReader;
  }(EventTarget.apply(undefined, READER_EVENTS));

  FileReader.EMPTY = EMPTY;
  FileReader.LOADING = LOADING;
  FileReader.DONE = DONE;
  module.exports = FileReader;
},125,[21,22,34,37,40,106,116,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var Blob = _$$_REQUIRE(_dependencyMap[2]);

  var _require = _$$_REQUIRE(_dependencyMap[3]),
      BlobModule = _require.BlobModule;

  var BLOB_URL_PREFIX = null;

  if (BlobModule && typeof BlobModule.BLOB_URI_SCHEME === 'string') {
    BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';

    if (typeof BlobModule.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += "//" + BlobModule.BLOB_URI_HOST + "/";
    }
  }

  var URL = function () {
    function URL() {
      _classCallCheck(this, URL);

      throw new Error('Creating URL objects is not supported yet.');
    }

    _createClass(URL, null, [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }

        return "" + BLOB_URL_PREFIX + blob.data.blobId + "?offset=" + blob.data.offset + "&size=" + blob.size;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);

    return URL;
  }();

  module.exports = URL;
},126,[21,22,116,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var AlertIOS = _$$_REQUIRE(_dependencyMap[3]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[4]);

  var Platform = _$$_REQUIRE(_dependencyMap[5]);

  var Alert = function () {
    function Alert() {
      _classCallCheck(this, Alert);
    }

    _createClass(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options, type) {
        {
          if (typeof type !== 'undefined') {
            console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
            AlertIOS.alert(title, message, buttons, type);
            return;
          }

          AlertIOS.alert(title, message, buttons);
        }
      }
    }]);

    return Alert;
  }();

  var AlertAndroid = function () {
    function AlertAndroid() {
      _classCallCheck(this, AlertAndroid);
    }

    _createClass(AlertAndroid, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        var config = {
          title: title || '',
          message: message || ''
        };

        if (options) {
          config = _objectSpread({}, config, {
            cancelable: options.cancelable
          });
        }

        var validButtons = buttons ? buttons.slice(0, 3) : [{
          text: 'OK'
        }];
        var buttonPositive = validButtons.pop();
        var buttonNegative = validButtons.pop();
        var buttonNeutral = validButtons.pop();

        if (buttonNeutral) {
          config = _objectSpread({}, config, {
            buttonNeutral: buttonNeutral.text || ''
          });
        }

        if (buttonNegative) {
          config = _objectSpread({}, config, {
            buttonNegative: buttonNegative.text || ''
          });
        }

        if (buttonPositive) {
          config = _objectSpread({}, config, {
            buttonPositive: buttonPositive.text || ''
          });
        }

        NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
          return console.warn(errorMessage);
        }, function (action, buttonKey) {
          if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
            if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
              buttonNeutral.onPress && buttonNeutral.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
              buttonNegative.onPress && buttonNegative.onPress();
            } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
              buttonPositive.onPress && buttonPositive.onPress();
            }
          } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
            options && options.onDismiss && options.onDismiss();
          }
        });
      }
    }]);

    return AlertAndroid;
  }();

  module.exports = Alert;
},127,[48,21,22,128,8,50]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var RCTAlertManager = _$$_REQUIRE(_dependencyMap[2]).AlertManager;

  var AlertIOS = function () {
    function AlertIOS() {
      _classCallCheck(this, AlertIOS);
    }

    _createClass(AlertIOS, null, [{
      key: "alert",
      value: function alert(title, message, callbackOrButtons, type) {
        if (typeof type !== 'undefined') {
          console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          this.prompt(title, message, callbackOrButtons, type);
          return;
        }

        this.prompt(title, message, callbackOrButtons, 'default');
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments.length > 4 ? arguments[4] : undefined;
        var keyboardType = arguments.length > 5 ? arguments[5] : undefined;

        if (typeof type === 'function') {
          console.warn("You passed a callback function as the \"type\" argument to AlertIOS.prompt(). React Native is assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, keyboardType) and the old syntax will be removed in a future version.");
          var callback = type;
          RCTAlertManager.alertWithArgs({
            title: title || '',
            type: 'plain-text',
            defaultValue: message
          }, function (id, value) {
            callback(value);
          });
          return;
        }

        var callbacks = [];
        var buttons = [];
        var cancelButtonKey;
        var destructiveButtonKey;

        if (typeof callbackOrButtons === 'function') {
          callbacks = [callbackOrButtons];
        } else if (callbackOrButtons instanceof Array) {
          callbackOrButtons.forEach(function (btn, index) {
            callbacks[index] = btn.onPress;

            if (btn.style === 'cancel') {
              cancelButtonKey = String(index);
            } else if (btn.style === 'destructive') {
              destructiveButtonKey = String(index);
            }

            if (btn.text || index < (callbackOrButtons || []).length - 1) {
              var btnDef = {};
              btnDef[index] = btn.text || '';
              buttons.push(btnDef);
            }
          });
        }

        RCTAlertManager.alertWithArgs({
          title: title || '',
          message: message || undefined,
          buttons: buttons,
          type: type || undefined,
          defaultValue: defaultValue,
          cancelButtonKey: cancelButtonKey,
          destructiveButtonKey: destructiveButtonKey,
          keyboardType: keyboardType
        }, function (id, value) {
          var cb = callbacks[id];
          cb && cb(value);
        });
      }
    }]);

    return AlertIOS;
  }();

  module.exports = AlertIOS;
},128,[21,22,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var RCTLocationObserver = _$$_REQUIRE(_dependencyMap[2]).LocationObserver;

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var logError = _$$_REQUIRE(_dependencyMap[4]);

  var warning = _$$_REQUIRE(_dependencyMap[5]);

  var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

  var Platform = _$$_REQUIRE(_dependencyMap[6]);

  var PermissionsAndroid = _$$_REQUIRE(_dependencyMap[7]);

  var subscriptions = [];
  var updatesEnabled = false;
  var Geolocation = {
    setRNConfiguration: function setRNConfiguration(config) {
      if (RCTLocationObserver.setConfiguration) {
        RCTLocationObserver.setConfiguration(config);
      }
    },
    requestAuthorization: function requestAuthorization() {
      RCTLocationObserver.requestAuthorization();
    },
    getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
      var hasPermission, status;
      return _regeneratorRuntime.async(function getCurrentPosition$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
              hasPermission = true;
              {
                _context.next = 11;
                break;
              }
              _context.next = 5;
              return _regeneratorRuntime.awrap(PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 5:
              hasPermission = _context.sent;

              if (hasPermission) {
                _context.next = 11;
                break;
              }

              _context.next = 9;
              return _regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

            case 9:
              status = _context.sent;
              hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

            case 11:
              if (hasPermission) {
                RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
              }

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    watchPosition: function watchPosition(success, error, options) {
      if (!updatesEnabled) {
        RCTLocationObserver.startObserving(options || {});
        updatesEnabled = true;
      }

      var watchID = subscriptions.length;
      subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
      return watchID;
    },
    clearWatch: function clearWatch(watchID) {
      var sub = subscriptions[watchID];

      if (!sub) {
        return;
      }

      sub[0].remove();
      var sub1 = sub[1];
      sub1 && sub1.remove();
      subscriptions[watchID] = undefined;
      var noWatchers = true;

      for (var ii = 0; ii < subscriptions.length; ii++) {
        if (subscriptions[ii]) {
          noWatchers = false;
        }
      }

      if (noWatchers) {
        Geolocation.stopObserving();
      }
    },
    stopObserving: function stopObserving() {
      if (updatesEnabled) {
        RCTLocationObserver.stopObserving();
        updatesEnabled = false;

        for (var ii = 0; ii < subscriptions.length; ii++) {
          var sub = subscriptions[ii];

          if (sub) {
            warning(false, 'Called stopObserving with existing subscriptions.');
            sub[0].remove();
            var sub1 = sub[1];
            sub1 && sub1.remove();
          }
        }

        subscriptions = [];
      }
    }
  };
  module.exports = Geolocation;
},129,[130,112,8,6,133,104,50,134]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},130,[131]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var g = function () {
    return this || typeof self === "object" && self;
  }() || Function("return this")();

  var hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
  var oldRuntime = hadRuntime && g.regeneratorRuntime;
  g.regeneratorRuntime = undefined;
  module.exports = _$$_REQUIRE(_dependencyMap[0]);

  if (hadRuntime) {
    g.regeneratorRuntime = oldRuntime;
  } else {
    try {
      delete g.regeneratorRuntime;
    } catch (e) {
      g.regeneratorRuntime = undefined;
    }
  }
},131,[132]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  !function (global) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;

    if (runtime) {
      if (inModule) {
        module.exports = runtime;
      }

      return;
    }

    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    runtime.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;

        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    runtime.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    runtime.AsyncIterator = AsyncIterator;

    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
      return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    runtime.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(function () {
    return this || typeof self === "object" && self;
  }() || Function("return this")());
},132,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var logError = function logError() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };

  module.exports = logError;
},133,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[3]);

  var PermissionsAndroid = function () {
    function PermissionsAndroid() {
      _classCallCheck(this, PermissionsAndroid);

      this.PERMISSIONS = {
        READ_CALENDAR: 'android.permission.READ_CALENDAR',
        WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
        CAMERA: 'android.permission.CAMERA',
        READ_CONTACTS: 'android.permission.READ_CONTACTS',
        WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
        GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
        ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
        ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
        RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
        READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
        CALL_PHONE: 'android.permission.CALL_PHONE',
        READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
        WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
        ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
        USE_SIP: 'android.permission.USE_SIP',
        PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
        BODY_SENSORS: 'android.permission.BODY_SENSORS',
        SEND_SMS: 'android.permission.SEND_SMS',
        RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
        READ_SMS: 'android.permission.READ_SMS',
        RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
        RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
        READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
        WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
      };
      this.RESULTS = {
        GRANTED: 'granted',
        DENIED: 'denied',
        NEVER_ASK_AGAIN: 'never_ask_again'
      };
    }

    _createClass(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        return NativeModules.PermissionsAndroid.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function requestPermission(permission, rationale) {
        var response;
        return _regeneratorRuntime.async(function requestPermission$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
                _context.next = 3;
                return _regeneratorRuntime.awrap(this.request(permission, rationale));

              case 3:
                response = _context.sent;
                return _context.abrupt("return", response === this.RESULTS.GRANTED);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "request",
      value: function request(permission, rationale) {
        var shouldShowRationale;
        return _regeneratorRuntime.async(function request$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!rationale) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return _regeneratorRuntime.awrap(NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission));

              case 3:
                shouldShowRationale = _context2.sent;

                if (!shouldShowRationale) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                    return reject(new Error('Error showing rationale'));
                  }, function () {
                    return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                  });
                }));

              case 6:
                return _context2.abrupt("return", NativeModules.PermissionsAndroid.requestPermission(permission));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
      }
    }]);

    return PermissionsAndroid;
  }();

  PermissionsAndroid = new PermissionsAndroid();
  module.exports = PermissionsAndroid;
},134,[130,21,22,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var HeapCapture = {
    captureHeap: function captureHeap(path) {
      var error = null;

      try {
        global.nativeCaptureHeap(path);
        console.log('HeapCapture.captureHeap succeeded: ' + path);
      } catch (e) {
        console.log('HeapCapture.captureHeap error: ' + e.toString());
        error = e.toString();
      }

      _$$_REQUIRE(_dependencyMap[0]).JSCHeapCapture.captureComplete(path, error);
    }
  };
  module.exports = HeapCapture;
},135,[8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var SamplingProfiler = {
    poke: function poke(token) {
      var error = null;
      var result = null;

      try {
        result = global.pokeSamplingProfiler();

        if (result === null) {
          console.log('The JSC Sampling Profiler has started');
        } else {
          console.log('The JSC Sampling Profiler has stopped');
        }
      } catch (e) {
        console.log('Error occurred when restarting Sampling Profiler: ' + e.toString());
        error = e.toString();
      }

      var _require = _$$_REQUIRE(_dependencyMap[0]),
          JSCSamplingProfiler = _require.JSCSamplingProfiler;

      JSCSamplingProfiler.operationComplete(token, result, error);
    }
  };
  module.exports = SamplingProfiler;
},136,[8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook: function logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, [level].concat(args));
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler.apply(undefined, args);
        }
      }
    },
    logToConsole: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_console = console)[logFn].apply(_console, args);
    },
    setWarningHandler: function setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  module.exports = RCTLog;
},137,[6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[0]);

  var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
  module.exports = RCTNativeAppEventEmitter;
},138,[33]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Systrace = _$$_REQUIRE(_dependencyMap[0]);

  var infoLog = _$$_REQUIRE(_dependencyMap[1]);

  var performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || _$$_REQUIRE(_dependencyMap[2]);

  var timespans = {};
  var extras = {};
  var cookies = {};
  var PRINT_TO_CONSOLE = false;
  var PerformanceLogger = {
    addTimespan: function addTimespan(key, lengthInMs, description) {
      if (timespans[key]) {
        return;
      }

      timespans[key] = {
        description: description,
        totalTime: lengthInMs
      };
    },
    startTimespan: function startTimespan(key, description) {
      if (timespans[key]) {
        return;
      }

      timespans[key] = {
        description: description,
        startTime: performanceNow()
      };
      cookies[key] = Systrace.beginAsyncEvent(key);
    },
    stopTimespan: function stopTimespan(key) {
      var timespan = timespans[key];

      if (!timespan || !timespan.startTime) {
        return;
      }

      if (timespan.endTime) {
        return;
      }

      timespan.endTime = performanceNow();
      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
      Systrace.endAsyncEvent(key, cookies[key]);
      delete cookies[key];
    },
    clear: function clear() {
      timespans = {};
      extras = {};
    },
    clearCompleted: function clearCompleted() {
      for (var _key in timespans) {
        if (timespans[_key].totalTime) {
          delete timespans[_key];
        }
      }

      extras = {};
    },
    clearExceptTimespans: function clearExceptTimespans(keys) {
      timespans = Object.keys(timespans).reduce(function (previous, key) {
        if (keys.indexOf(key) !== -1) {
          previous[key] = timespans[key];
        }

        return previous;
      }, {});
      extras = {};
    },
    currentTimestamp: function currentTimestamp() {
      return performanceNow();
    },
    getTimespans: function getTimespans() {
      return timespans;
    },
    hasTimespan: function hasTimespan(key) {
      return !!timespans[key];
    },
    logTimespans: function logTimespans() {
      for (var _key2 in timespans) {
        if (timespans[_key2].totalTime) {
          infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
        }
      }
    },
    addTimespans: function addTimespans(newTimespans, labels) {
      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
        var label = labels[ii / 2];
        PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
      }
    },
    setExtra: function setExtra(key, value) {
      if (extras[key]) {
        return;
      }

      extras[key] = value;
    },
    getExtras: function getExtras() {
      return extras;
    },
    logExtras: function logExtras() {
      infoLog(extras);
    }
  };
  module.exports = PerformanceLogger;
},139,[24,140,101]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function infoLog() {
    var _console;

    return (_console = console).log.apply(_console, arguments);
  }

  module.exports = infoLog;
},140,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var JSDevSupport = _$$_REQUIRE(_dependencyMap[0]).JSDevSupport;

  var ReactNative = _$$_REQUIRE(_dependencyMap[1]);

  var JSDevSupportModule = {
    getJSHierarchy: function getJSHierarchy(tag) {
      try {
        var computeComponentStackForErrorReporting = ReactNative.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.computeComponentStackForErrorReporting;
        var componentStack = computeComponentStackForErrorReporting(tag);

        if (!componentStack) {
          JSDevSupport.onFailure(JSDevSupport.ERROR_CODE_VIEW_NOT_FOUND, "Component stack doesn't exist for tag " + tag);
        } else {
          JSDevSupport.onSuccess(componentStack);
        }
      } catch (e) {
        JSDevSupport.onFailure(JSDevSupport.ERROR_CODE_EXCEPTION, e.message);
      }
    }
  };
  module.exports = JSDevSupportModule;
},141,[8,83]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var customBubblingEventTypes = {};
  var customDirectEventTypes = {};
  var eventTypes = {};
  exports.customBubblingEventTypes = customBubblingEventTypes;
  exports.customDirectEventTypes = customDirectEventTypes;
  exports.eventTypes = eventTypes;
  var viewConfigCallbacks = new Map();
  var viewConfigs = new Map();

  function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;

    if (bubblingEventTypes != null) {
      for (var _topLevelType in bubblingEventTypes) {
        if (customBubblingEventTypes[_topLevelType] == null) {
          eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
        }
      }
    }

    if (directEventTypes != null) {
      for (var _topLevelType2 in directEventTypes) {
        if (customDirectEventTypes[_topLevelType2] == null) {
          eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
        }
      }
    }
  }

  exports.register = function (name, callback) {
    invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    viewConfigCallbacks.set(name, callback);
    return name;
  };

  exports.get = function (name) {
    var viewConfig;

    if (!viewConfigs.has(name)) {
      var callback = viewConfigCallbacks.get(name);

      if (typeof callback !== 'function') {
        invariant(false, 'View config not found for name %s.%s', name, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
      }

      viewConfigCallbacks.set(name, null);
      viewConfig = callback();
      processEventTypes(viewConfig);
      viewConfigs.set(name, viewConfig);
    } else {
      viewConfig = viewConfigs.get(name);
    }

    invariant(viewConfig, 'View config not found for name %s', name);
    return viewConfig;
  };
},142,[6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

  var RCTEventEmitter = {
    register: function register(eventEmitter) {
      BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
    }
  };
  module.exports = RCTEventEmitter;
},143,[15]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var deepDiffer = function deepDiffer(one, two) {
    var maxDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

    if (maxDepth === 0) {
      return true;
    }

    if (one === two) {
      return false;
    }

    if (typeof one === 'function' && typeof two === 'function') {
      return false;
    }

    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }

    if (typeof two !== 'object' || two === null) {
      return true;
    }

    if (one.constructor !== two.constructor) {
      return true;
    }

    if (Array.isArray(one)) {
      var len = one.length;

      if (two.length !== len) {
        return true;
      }

      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii], maxDepth - 1)) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key], maxDepth - 1)) {
          return true;
        }
      }

      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }

    return false;
  };

  module.exports = deepDiffer;
},144,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var UIManager = _$$_REQUIRE(_dependencyMap[1]);

  var currentlyFocusedID = null;
  var inputs = new Set();

  function currentlyFocusedField() {
    return currentlyFocusedID;
  }

  function focusTextInput(textFieldID) {
    if (currentlyFocusedID !== textFieldID && textFieldID !== null) {
      currentlyFocusedID = textFieldID;
      {
        UIManager.focus(textFieldID);
      }
    }
  }

  function blurTextInput(textFieldID) {
    if (currentlyFocusedID === textFieldID && textFieldID !== null) {
      currentlyFocusedID = null;
      {
        UIManager.blur(textFieldID);
      }
    }
  }

  function registerInput(textFieldID) {
    inputs.add(textFieldID);
  }

  function unregisterInput(textFieldID) {
    inputs.delete(textFieldID);
  }

  function isTextInput(textFieldID) {
    return inputs.has(textFieldID);
  }

  module.exports = {
    currentlyFocusedField: currentlyFocusedField,
    focusTextInput: focusTextInput,
    blurTextInput: blurTextInput,
    registerInput: registerInput,
    unregisterInput: unregisterInput,
    isTextInput: isTextInput
  };
},145,[50,71]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var createReactNativeComponentClass = _$$_REQUIRE(_dependencyMap[0]);

  var getNativeComponentAttributes = _$$_REQUIRE(_dependencyMap[1]);

  var requireNativeComponent = function requireNativeComponent(uiViewClassName) {
    return createReactNativeComponentClass(uiViewClassName, function () {
      return getNativeComponentAttributes(uiViewClassName);
    });
  };

  module.exports = requireNativeComponent;
},146,[147,148]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      register = _require.register;

  var createReactNativeComponentClass = function createReactNativeComponentClass(name, callback) {
    return register(name, callback);
  };

  module.exports = createReactNativeComponentClass;
},147,[142]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[2]);

  var UIManager = _$$_REQUIRE(_dependencyMap[3]);

  var insetsDiffer = _$$_REQUIRE(_dependencyMap[4]);

  var matricesDiffer = _$$_REQUIRE(_dependencyMap[5]);

  var pointsDiffer = _$$_REQUIRE(_dependencyMap[6]);

  var processColor = _$$_REQUIRE(_dependencyMap[7]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[8]);

  var sizesDiffer = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var warning = _$$_REQUIRE(_dependencyMap[11]);

  function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager[uiViewClassName];
    invariant(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: "%s" was not found in the UIManager.', uiViewClassName);
    var baseModuleName = viewConfig.baseModuleName,
        bubblingEventTypes = viewConfig.bubblingEventTypes,
        directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;

    while (baseModuleName) {
      var baseModule = UIManager[baseModuleName];

      if (!baseModule) {
        warning(false, 'Base module "%s" does not exist', baseModuleName);
        baseModuleName = null;
      } else {
        bubblingEventTypes = _objectSpread({}, baseModule.bubblingEventTypes, bubblingEventTypes);
        directEventTypes = _objectSpread({}, baseModule.directEventTypes, directEventTypes);
        nativeProps = _objectSpread({}, baseModule.NativeProps, nativeProps);
        baseModuleName = baseModule.baseModuleName;
      }
    }

    var validAttributes = {};

    for (var key in nativeProps) {
      var typeName = nativeProps[key];
      var diff = getDifferForType(typeName);
      var process = getProcessorForType(typeName);
      validAttributes[key] = diff == null && process == null ? true : {
        diff: diff,
        process: process
      };
    }

    validAttributes.style = ReactNativeStyleAttributes;

    _extends(viewConfig, {
      uiViewClassName: uiViewClassName,
      validAttributes: validAttributes,
      bubblingEventTypes: bubblingEventTypes,
      directEventTypes: directEventTypes
    });

    if (!hasAttachedDefaultEventTypes) {
      attachDefaultEventTypes(viewConfig);
      hasAttachedDefaultEventTypes = true;
    }

    return viewConfig;
  }

  var hasAttachedDefaultEventTypes = false;

  function attachDefaultEventTypes(viewConfig) {
    if (UIManager.ViewManagerNames) {
      viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());
    } else {
      viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, UIManager.genericBubblingEventTypes);
      viewConfig.directEventTypes = merge(viewConfig.directEventTypes, UIManager.genericDirectEventTypes);
    }
  }

  function merge(destination, source) {
    if (!source) {
      return destination;
    }

    if (!destination) {
      return source;
    }

    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }

      var sourceValue = source[key];

      if (destination.hasOwnProperty(key)) {
        var destinationValue = destination[key];

        if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
          sourceValue = merge(destinationValue, sourceValue);
        }
      }

      destination[key] = sourceValue;
    }

    return destination;
  }

  function getDifferForType(typeName) {
    switch (typeName) {
      case 'CATransform3D':
        return matricesDiffer;

      case 'CGPoint':
        return pointsDiffer;

      case 'CGSize':
        return sizesDiffer;

      case 'UIEdgeInsets':
        return insetsDiffer;
    }

    return null;
  }

  function getProcessorForType(typeName) {
    switch (typeName) {
      case 'CGColor':
      case 'UIColor':
        return processColor;

      case 'CGColorArray':
      case 'UIColorArray':
        return processColorArray;

      case 'CGImage':
      case 'UIImage':
      case 'RCTImageSource':
        return resolveAssetSource;

      case 'Color':
        return processColor;

      case 'ColorArray':
        return processColorArray;
    }

    return null;
  }

  function processColorArray(colors) {
    return colors == null ? null : colors.map(processColor);
  }

  module.exports = getNativeComponentAttributes;
},148,[3,48,58,71,149,150,151,74,152,77,6,104]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };

  var insetsDiffer = function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  };

  module.exports = insetsDiffer;
},149,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var matricesDiffer = function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }

    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  };

  module.exports = matricesDiffer;
},150,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var dummyPoint = {
    x: undefined,
    y: undefined
  };

  var pointsDiffer = function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  };

  module.exports = pointsDiffer;
},151,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var AssetRegistry = _$$_REQUIRE(_dependencyMap[0]);

  var AssetSourceResolver = _$$_REQUIRE(_dependencyMap[1]);

  var _customSourceTransformer, _serverURL, _scriptURL;

  var _sourceCodeScriptURL;

  function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL) {
      return _sourceCodeScriptURL;
    }

    var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

    if (!sourceCode) {
      var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

      sourceCode = NativeModules && NativeModules.SourceCode;
    }

    _sourceCodeScriptURL = sourceCode.scriptURL;
    return _sourceCodeScriptURL;
  }

  function getDevServerURL() {
    if (_serverURL === undefined) {
      var sourceCodeScriptURL = getSourceCodeScriptURL();
      var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }

    return _serverURL;
  }

  function _coerceLocalScriptURL(scriptURL) {
    if (scriptURL) {
      if (scriptURL.startsWith('assets://')) {
        return null;
      }

      scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

      if (!scriptURL.includes('://')) {
        scriptURL = 'file://' + scriptURL;
      }
    }

    return scriptURL;
  }

  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }

    return _scriptURL;
  }

  function setCustomSourceTransformer(transformer) {
    _customSourceTransformer = transformer;
  }

  function resolveAssetSource(source) {
    if (typeof source === 'object') {
      return source;
    }

    var asset = AssetRegistry.getAssetByID(source);

    if (!asset) {
      return null;
    }

    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

    if (_customSourceTransformer) {
      return _customSourceTransformer(resolver);
    }

    return resolver.defaultAsset();
  }

  module.exports = resolveAssetSource;
  module.exports.pickScale = AssetSourceResolver.pickScale;
  module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
},152,[153,154,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var assets = [];

  function registerAsset(asset) {
    return assets.push(asset);
  }

  function getAssetByID(assetId) {
    return assets[assetId - 1];
  }

  module.exports = {
    registerAsset: registerAsset,
    getAssetByID: getAssetByID
  };
},153,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var PixelRatio = _$$_REQUIRE(_dependencyMap[2]);

  var Platform = _$$_REQUIRE(_dependencyMap[3]);

  var assetPathUtils = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  function getScaledAssetPath(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = assetPathUtils.getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }

  function getAssetPathInDrawableFolder(asset) {
    var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
    var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
    var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
    return drawbleFolder + '/' + fileName + '.' + asset.type;
  }

  var AssetSourceResolver = function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      _classCallCheck(this, AssetSourceResolver);

      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }

    _createClass(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return !!this.serverUrl;
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }

        {
          return this.scaledAssetURLNearBundle();
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(!!this.serverUrl, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + "ios" + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(false, 'resource identifiers work on Android');
        return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl || 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }], [{
      key: "pickScale",
      value: function pickScale(scales, deviceScale) {
        for (var i = 0; i < scales.length; i++) {
          if (scales[i] >= deviceScale) {
            return scales[i];
          }
        }

        return scales[scales.length - 1] || 1;
      }
    }]);

    return AssetSourceResolver;
  }();

  module.exports = AssetSourceResolver;
},154,[21,22,55,50,155,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function getAndroidAssetSuffix(scale) {
    switch (scale) {
      case 0.75:
        return 'ldpi';

      case 1:
        return 'mdpi';

      case 1.5:
        return 'hdpi';

      case 2:
        return 'xhdpi';

      case 3:
        return 'xxhdpi';

      case 4:
        return 'xxxhdpi';
    }

    throw new Error('no such scale');
  }

  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }

    var suffix = getAndroidAssetSuffix(scale);

    if (!suffix) {
      throw new Error("Don't know which android drawable suffix to use for asset: " + JSON.stringify(asset));
    }

    var androidFolder = 'drawable-' + suffix;
    return androidFolder;
  }

  function getAndroidResourceIdentifier(asset) {
    var folderPath = getBasePath(asset);
    return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
  }

  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;

    if (basePath[0] === '/') {
      basePath = basePath.substr(1);
    }

    return basePath;
  }

  module.exports = {
    getAndroidAssetSuffix: getAndroidAssetSuffix,
    getAndroidResourceFolderName: getAndroidResourceFolderName,
    getAndroidResourceIdentifier: getAndroidResourceIdentifier,
    getBasePath: getBasePath
  };
},155,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var Color = _$$_REQUIRE(_dependencyMap[5]);

  var Path = _$$_REQUIRE(_dependencyMap[6]);

  var Transform = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[9]);

  var ReactNativeViewAttributes = _$$_REQUIRE(_dependencyMap[10]);

  var createReactNativeComponentClass = _$$_REQUIRE(_dependencyMap[11]);

  var merge = _$$_REQUIRE(_dependencyMap[12]);

  var invariant = _$$_REQUIRE(_dependencyMap[13]);

  function arrayDiffer(a, b) {
    if (a == null || b == null) {
      return true;
    }

    if (a.length !== b.length) {
      return true;
    }

    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return true;
      }
    }

    return false;
  }

  function fontAndLinesDiffer(a, b) {
    if (a === b) {
      return false;
    }

    if (a.font !== b.font) {
      if (a.font === null) {
        return true;
      }

      if (b.font === null) {
        return true;
      }

      if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
        return true;
      }
    }

    return arrayDiffer(a.lines, b.lines);
  }

  var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});
  var NodeAttributes = {
    transform: {
      diff: arrayDiffer
    },
    opacity: true
  };
  var GroupAttributes = merge(NodeAttributes, {
    clipping: {
      diff: arrayDiffer
    }
  });
  var RenderableAttributes = merge(NodeAttributes, {
    fill: {
      diff: arrayDiffer
    },
    stroke: {
      diff: arrayDiffer
    },
    strokeWidth: true,
    strokeCap: true,
    strokeJoin: true,
    strokeDash: {
      diff: arrayDiffer
    }
  });
  var ShapeAttributes = merge(RenderableAttributes, {
    d: {
      diff: arrayDiffer
    }
  });
  var TextAttributes = merge(RenderableAttributes, {
    alignment: true,
    frame: {
      diff: fontAndLinesDiffer
    },
    path: {
      diff: arrayDiffer
    }
  });
  var NativeSurfaceView = createReactNativeComponentClass('ARTSurfaceView', function () {
    return {
      validAttributes: SurfaceViewAttributes,
      uiViewClassName: 'ARTSurfaceView'
    };
  });
  var NativeGroup = createReactNativeComponentClass('ARTGroup', function () {
    return {
      validAttributes: GroupAttributes,
      uiViewClassName: 'ARTGroup'
    };
  });
  var NativeShape = createReactNativeComponentClass('ARTShape', function () {
    return {
      validAttributes: ShapeAttributes,
      uiViewClassName: 'ARTShape'
    };
  });
  var NativeText = createReactNativeComponentClass('ARTText', function () {
    return {
      validAttributes: TextAttributes,
      uiViewClassName: 'ARTText'
    };
  });

  function childrenAsString(children) {
    if (!children) {
      return '';
    }

    if (typeof children === 'string') {
      return children;
    }

    if (children.length) {
      return children.join('\n');
    }

    return '';
  }

  var Surface = function (_React$Component) {
    _inherits(Surface, _React$Component);

    function Surface() {
      _classCallCheck(this, Surface);

      return _possibleConstructorReturn(this, _getPrototypeOf(Surface).apply(this, arguments));
    }

    _createClass(Surface, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          isInSurface: true
        };
      }
    }, {
      key: "render",
      value: function render() {
        var height = extractNumber(this.props.height, 0);
        var width = extractNumber(this.props.width, 0);
        return React.createElement(NativeSurfaceView, {
          style: [this.props.style, {
            height: height,
            width: width
          }]
        }, this.props.children);
      }
    }]);

    return Surface;
  }(React.Component);

  Surface.childContextTypes = {
    isInSurface: PropTypes.bool
  };

  function extractNumber(value, defaultValue) {
    if (value == null) {
      return defaultValue;
    }

    return +value;
  }

  var pooledTransform = new Transform();

  function extractTransform(props) {
    var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
    var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;
    pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

    if (props.transform != null) {
      pooledTransform.transform(props.transform);
    }

    return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
  }

  function extractOpacity(props) {
    if (props.visible === false) {
      return 0;
    }

    if (props.opacity == null) {
      return 1;
    }

    return +props.opacity;
  }

  var Group = function (_React$Component2) {
    _inherits(Group, _React$Component2);

    function Group() {
      _classCallCheck(this, Group);

      return _possibleConstructorReturn(this, _getPrototypeOf(Group).apply(this, arguments));
    }

    _createClass(Group, [{
      key: "render",
      value: function render() {
        var props = this.props;
        invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
        return React.createElement(NativeGroup, {
          opacity: extractOpacity(props),
          transform: extractTransform(props)
        }, this.props.children);
      }
    }]);

    return Group;
  }(React.Component);

  Group.contextTypes = {
    isInSurface: PropTypes.bool.isRequired
  };

  var ClippingRectangle = function (_React$Component3) {
    _inherits(ClippingRectangle, _React$Component3);

    function ClippingRectangle() {
      _classCallCheck(this, ClippingRectangle);

      return _possibleConstructorReturn(this, _getPrototypeOf(ClippingRectangle).apply(this, arguments));
    }

    _createClass(ClippingRectangle, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var x = extractNumber(props.x, 0);
        var y = extractNumber(props.y, 0);
        var w = extractNumber(props.width, 0);
        var h = extractNumber(props.height, 0);
        var clipping = [x, y, w, h];
        var propsExcludingXAndY = merge(props);
        delete propsExcludingXAndY.x;
        delete propsExcludingXAndY.y;
        return React.createElement(NativeGroup, {
          clipping: clipping,
          opacity: extractOpacity(props),
          transform: extractTransform(propsExcludingXAndY)
        }, this.props.children);
      }
    }]);

    return ClippingRectangle;
  }(React.Component);

  var SOLID_COLOR = 0;
  var LINEAR_GRADIENT = 1;
  var RADIAL_GRADIENT = 2;
  var PATTERN = 3;

  function insertColorIntoArray(color, targetArray, atIndex) {
    var c = new Color(color);
    targetArray[atIndex + 0] = c.red / 255;
    targetArray[atIndex + 1] = c.green / 255;
    targetArray[atIndex + 2] = c.blue / 255;
    targetArray[atIndex + 3] = c.alpha;
  }

  function insertColorsIntoArray(stops, targetArray, atIndex) {
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
        i++;
      }
    } else {
      for (var offset in stops) {
        insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
        i++;
      }
    }

    return atIndex + i * 4;
  }

  function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
    var offsetNumber;
    var i = 0;

    if ('length' in stops) {
      while (i < stops.length) {
        offsetNumber = i / (stops.length - 1) * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    } else {
      for (var offsetString in stops) {
        offsetNumber = +offsetString * multi;
        targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
        i++;
      }
    }

    return atIndex + i;
  }

  function insertColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
  }

  function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
    var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
    lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
    lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
    insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
  }

  function applyBoundingBoxToBrushData(brushData, props) {
    var type = brushData[0];
    var width = +props.width;
    var height = +props.height;

    if (type === LINEAR_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
    } else if (type === RADIAL_GRADIENT) {
      brushData[1] *= width;
      brushData[2] *= height;
      brushData[3] *= width;
      brushData[4] *= height;
      brushData[5] *= width;
      brushData[6] *= height;
    } else if (type === PATTERN) {}
  }

  function extractBrush(colorOrBrush, props) {
    if (colorOrBrush == null) {
      return null;
    }

    if (colorOrBrush._brush) {
      if (colorOrBrush._bb) {
        applyBoundingBoxToBrushData(colorOrBrush._brush, props);
        colorOrBrush._bb = false;
      }

      return colorOrBrush._brush;
    }

    var c = new Color(colorOrBrush);
    return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractColor(color) {
    if (color == null) {
      return null;
    }

    var c = new Color(color);
    return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
  }

  function extractStrokeCap(strokeCap) {
    switch (strokeCap) {
      case 'butt':
        return 0;

      case 'square':
        return 2;

      default:
        return 1;
    }
  }

  function extractStrokeJoin(strokeJoin) {
    switch (strokeJoin) {
      case 'miter':
        return 0;

      case 'bevel':
        return 2;

      default:
        return 1;
    }
  }

  var Shape = function (_React$Component4) {
    _inherits(Shape, _React$Component4);

    function Shape() {
      _classCallCheck(this, Shape);

      return _possibleConstructorReturn(this, _getPrototypeOf(Shape).apply(this, arguments));
    }

    _createClass(Shape, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.d || childrenAsString(props.children);
        var d = (path instanceof Path ? path : new Path(path)).toJSON();
        return React.createElement(NativeShape, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          d: d
        });
      }
    }]);

    return Shape;
  }(React.Component);

  var cachedFontObjectsFromString = {};
  var fontFamilyPrefix = /^[\s"']*/;
  var fontFamilySuffix = /[\s"']*$/;

  function extractSingleFontFamily(fontFamilyString) {
    return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
  }

  function parseFontString(font) {
    if (cachedFontObjectsFromString.hasOwnProperty(font)) {
      return cachedFontObjectsFromString[font];
    }

    var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
    var match = regexp.exec(font);

    if (!match) {
      return null;
    }

    var fontFamily = extractSingleFontFamily(match[3]);
    var fontSize = +match[2] || 12;
    var isBold = /bold/.exec(match[1]);
    var isItalic = /italic/.exec(match[1]);
    cachedFontObjectsFromString[font] = {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: isBold ? 'bold' : 'normal',
      fontStyle: isItalic ? 'italic' : 'normal'
    };
    return cachedFontObjectsFromString[font];
  }

  function extractFont(font) {
    if (font == null) {
      return null;
    }

    if (typeof font === 'string') {
      return parseFontString(font);
    }

    var fontFamily = extractSingleFontFamily(font.fontFamily);
    var fontSize = +font.fontSize || 12;
    var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
    return {
      fontFamily: fontFamily,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: font.fontStyle
    };
  }

  var newLine = /\n/g;

  function extractFontAndLines(font, text) {
    return {
      font: extractFont(font),
      lines: text.split(newLine)
    };
  }

  function extractAlignment(alignment) {
    switch (alignment) {
      case 'right':
        return 1;

      case 'center':
        return 2;

      default:
        return 0;
    }
  }

  var Text = function (_React$Component5) {
    _inherits(Text, _React$Component5);

    function Text() {
      _classCallCheck(this, Text);

      return _possibleConstructorReturn(this, _getPrototypeOf(Text).apply(this, arguments));
    }

    _createClass(Text, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var path = props.path;
        var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
        var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
        return React.createElement(NativeText, {
          fill: extractBrush(props.fill, props),
          opacity: extractOpacity(props),
          stroke: extractColor(props.stroke),
          strokeCap: extractStrokeCap(props.strokeCap),
          strokeDash: props.strokeDash || null,
          strokeJoin: extractStrokeJoin(props.strokeJoin),
          strokeWidth: extractNumber(props.strokeWidth, 1),
          transform: extractTransform(props),
          alignment: extractAlignment(props.alignment),
          frame: textFrame,
          path: textPath
        });
      }
    }]);

    return Text;
  }(React.Component);

  function LinearGradient(stops, x1, y1, x2, y2) {
    var type = LINEAR_GRADIENT;

    if (arguments.length < 5) {
      var angle = (x1 == null ? 270 : x1) * Math.PI / 180;
      var x = Math.cos(angle);
      var y = -Math.sin(angle);
      var l = (Math.abs(x) + Math.abs(y)) / 2;
      x *= l;
      y *= l;
      x1 = 0.5 - x;
      x2 = 0.5 + x;
      y1 = 0.5 - y;
      y2 = 0.5 + y;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [type, +x1, +y1, +x2, +y2];
    insertColorStopsIntoArray(stops, brushData, 5);
    this._brush = brushData;
  }

  function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
    if (ry == null) {
      ry = rx;
    }

    if (cx == null) {
      cx = fx;
    }

    if (cy == null) {
      cy = fy;
    }

    if (fx == null) {
      fx = fy = rx = ry = cx = cy = 0.5;
      this._bb = true;
    } else {
      this._bb = false;
    }

    var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
    insertDoubleColorStopsIntoArray(stops, brushData, 7);
    this._brush = brushData;
  }

  function Pattern(url, width, height, left, top) {
    this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
  }

  var ReactART = {
    LinearGradient: LinearGradient,
    RadialGradient: RadialGradient,
    Pattern: Pattern,
    Transform: Transform,
    Path: Path,
    Surface: Surface,
    Group: Group,
    ClippingRectangle: ClippingRectangle,
    Shape: Shape,
    Text: Text
  };
  module.exports = ReactART;
},156,[21,22,34,37,40,157,158,161,51,65,162,147,163,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var colors = {
    maroon: '#800000',
    red: '#ff0000',
    orange: '#ffA500',
    yellow: '#ffff00',
    olive: '#808000',
    purple: '#800080',
    fuchsia: "#ff00ff",
    white: '#ffffff',
    lime: '#00ff00',
    green: '#008000',
    navy: '#000080',
    blue: '#0000ff',
    aqua: '#00ffff',
    teal: '#008080',
    black: '#000000',
    silver: '#c0c0c0',
    gray: '#808080'
  };

  var map = function map(array, fn) {
    var results = [];

    for (var i = 0, l = array.length; i < l; i++) {
      results[i] = fn(array[i], i);
    }

    return results;
  };

  var Color = function Color(color, type) {
    if (color.isColor) {
      this.red = color.red;
      this.green = color.green;
      this.blue = color.blue;
      this.alpha = color.alpha;
    } else {
      var namedColor = colors[color];

      if (namedColor) {
        color = namedColor;
        type = 'hex';
      }

      switch (typeof color) {
        case 'string':
          if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';
          break;

        case 'object':
          type = type || 'rgb';
          color = color.toString();
          break;

        case 'number':
          type = 'hex';
          color = color.toString(16);
          break;
      }

      color = Color['parse' + type.toUpperCase()](color);
      this.red = color[0];
      this.green = color[1];
      this.blue = color[2];
      this.alpha = color[3];
    }

    this.isColor = true;
  };

  var limit = function limit(number, min, max) {
    return Math.min(max, Math.max(min, number));
  };

  var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
  var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

  Color.parseRGB = function (color) {
    return map(color.match(listMatch).slice(1), function (bit, i) {
      if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
      return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
    });
  };

  Color.parseHEX = function (color) {
    if (color.length == 1) color = color + color + color;
    return map(color.match(hexMatch).slice(1), function (bit, i) {
      if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
      return parseInt(bit.length == 1 ? bit + bit : bit, 16);
    });
  };

  Color.parseHSB = function (color) {
    var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
      if (bit) bit = parseFloat(bit);
      if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
    });
    var a = hsb[3];
    var br = Math.round(hsb[2] / 100 * 255);
    if (hsb[1] == 0) return [br, br, br, a];
    var hue = hsb[0];
    var f = hue % 60;
    var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
    var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
    var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

    switch (Math.floor(hue / 60)) {
      case 0:
        return [br, t, p, a];

      case 1:
        return [q, br, p, a];

      case 2:
        return [p, br, t, a];

      case 3:
        return [p, q, br, a];

      case 4:
        return [t, p, br, a];

      default:
        return [br, p, q, a];
    }
  };

  Color.parseHSL = function (color) {
    var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
      if (bit) bit = parseFloat(bit);
      if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
    });
    var h = hsb[0] / 60;
    var s = hsb[1] / 100;
    var l = hsb[2] / 100;
    var a = hsb[3];
    var c = (1 - Math.abs(2 * l - 1)) * s;
    var x = c * (1 - Math.abs(h % 2 - 1));
    var m = l - c / 2;
    var p = Math.round((c + m) * 255);
    var q = Math.round((x + m) * 255);
    var t = Math.round(m * 255);

    switch (Math.floor(h)) {
      case 0:
        return [p, q, t, a];

      case 1:
        return [q, p, t, a];

      case 2:
        return [t, p, q, a];

      case 3:
        return [t, q, p, a];

      case 4:
        return [q, t, p, a];

      default:
        return [p, t, q, a];
    }
  };

  var toString = function toString(type, array) {
    if (array[3] != 1) type += 'a';else array.pop();
    return type + '(' + array.join(', ') + ')';
  };

  Color.prototype = {
    toHSB: function toHSB(array) {
      var red = this.red,
          green = this.green,
          blue = this.blue,
          alpha = this.alpha;
      var max = Math.max(red, green, blue),
          min = Math.min(red, green, blue),
          delta = max - min;
      var hue = 0,
          saturation = delta != 0 ? delta / max : 0,
          brightness = max / 255;

      if (saturation) {
        var rr = (max - red) / delta,
            gr = (max - green) / delta,
            br = (max - blue) / delta;
        hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
        if ((hue /= 6) < 0) hue++;
      }

      var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];
      return array ? hsb : toString('hsb', hsb);
    },
    toHSL: function toHSL(array) {
      var red = this.red,
          green = this.green,
          blue = this.blue,
          alpha = this.alpha;
      var max = Math.max(red, green, blue),
          min = Math.min(red, green, blue),
          delta = max - min;
      var hue = 0,
          saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
          lightness = (max + min) / 512;

      if (saturation) {
        var rr = (max - red) / delta,
            gr = (max - green) / delta,
            br = (max - blue) / delta;
        hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
        if ((hue /= 6) < 0) hue++;
      }

      var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];
      return array ? hsl : toString('hsl', hsl);
    },
    toHEX: function toHEX(array) {
      var a = this.alpha;
      var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;
      var hex = map([this.red, this.green, this.blue], function (bit) {
        bit = bit.toString(16);
        return bit.length == 1 ? '0' + bit : bit;
      });
      return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
    },
    toRGB: function toRGB(array) {
      var rgb = [this.red, this.green, this.blue, this.alpha];
      return array ? rgb : toString('rgb', rgb);
    }
  };
  Color.prototype.toString = Color.prototype.toRGB;

  Color.hex = function (hex) {
    return new Color(hex, 'hex');
  };

  if (this.hex == null) this.hex = Color.hex;

  Color.hsb = function (h, s, b, a) {
    return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
  };

  if (this.hsb == null) this.hsb = Color.hsb;

  Color.hsl = function (h, s, l, a) {
    return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
  };

  if (this.hsl == null) this.hsl = Color.hsl;

  Color.rgb = function (r, g, b, a) {
    return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
  };

  if (this.rgb == null) this.rgb = Color.rgb;

  Color.detach = function (color) {
    color = new Color(color);
    return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
  };

  module.exports = Color;
},157,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Class = _$$_REQUIRE(_dependencyMap[0]);

  var Path = _$$_REQUIRE(_dependencyMap[1]);

  var MOVE_TO = 0;
  var CLOSE = 1;
  var LINE_TO = 2;
  var CURVE_TO = 3;
  var ARC = 4;
  var SerializablePath = Class(Path, {
    initialize: function initialize(path) {
      this.reset();

      if (path instanceof SerializablePath) {
        this.path = path.path.slice(0);
      } else if (path) {
        if (path.applyToPath) {
          path.applyToPath(this);
        } else {
          this.push(path);
        }
      }
    },
    onReset: function onReset() {
      this.path = [];
    },
    onMove: function onMove(sx, sy, x, y) {
      this.path.push(MOVE_TO, x, y);
    },
    onLine: function onLine(sx, sy, x, y) {
      this.path.push(LINE_TO, x, y);
    },
    onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
      this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
    },
    _arcToBezier: Path.prototype.onArc,
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      if (rx !== ry || rotation) {
        return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
      }

      this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
    },
    onClose: function onClose() {
      this.path.push(CLOSE);
    },
    toJSON: function toJSON() {
      return this.path;
    }
  });
  module.exports = SerializablePath;
},158,[159,160]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = function (mixins) {
    var proto = {};

    for (var i = 0, l = arguments.length; i < l; i++) {
      var mixin = arguments[i];
      if (typeof mixin == 'function') mixin = mixin.prototype;

      for (var key in mixin) {
        proto[key] = mixin[key];
      }
    }

    if (!proto.initialize) proto.initialize = function () {};

    proto.constructor = function (a, b, c, d, e, f, g, h) {
      return new proto.initialize(a, b, c, d, e, f, g, h);
    };

    proto.constructor.prototype = proto.initialize.prototype = proto;
    return proto.constructor;
  };
},159,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Class = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = Class({
    initialize: function initialize(path) {
      this.reset().push(path);
    },
    push: function push() {
      var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
      if (!p) return this;
      var last,
          cmd = p[0],
          i = 1;

      while (cmd) {
        switch (cmd) {
          case 'm':
            this.move(p[i++], p[i++]);
            break;

          case 'l':
            this.line(p[i++], p[i++]);
            break;

          case 'c':
            this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
            break;

          case 's':
            this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);
            break;

          case 'q':
            this.curve(p[i++], p[i++], p[i++], p[i++]);
            break;

          case 't':
            this.curve(p[i++], p[i++]);
            break;

          case 'a':
            this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
            i += 7;
            break;

          case 'h':
            this.line(p[i++], 0);
            break;

          case 'v':
            this.line(0, p[i++]);
            break;

          case 'M':
            this.moveTo(p[i++], p[i++]);
            break;

          case 'L':
            this.lineTo(p[i++], p[i++]);
            break;

          case 'C':
            this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);
            break;

          case 'S':
            this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);
            break;

          case 'Q':
            this.curveTo(p[i++], p[i++], p[i++], p[i++]);
            break;

          case 'T':
            this.curveTo(p[i++], p[i++]);
            break;

          case 'A':
            this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);
            i += 7;
            break;

          case 'H':
            this.lineTo(p[i++], this.penY);
            break;

          case 'V':
            this.lineTo(this.penX, p[i++]);
            break;

          case 'Z':
          case 'z':
            this.close();
            break;

          default:
            cmd = last;
            i--;
            continue;
        }

        last = cmd;
        if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
        cmd = p[i++];
      }

      return this;
    },
    reset: function reset() {
      this.penX = this.penY = 0;
      this.penDownX = this.penDownY = null;
      this._pivotX = this._pivotY = 0;
      this.onReset();
      return this;
    },
    move: function move(x, y) {
      this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
      return this;
    },
    moveTo: function moveTo(x, y) {
      this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
      return this;
    },
    line: function line(x, y) {
      return this.lineTo(this.penX + +x, this.penY + +y);
    },
    lineTo: function lineTo(x, y) {
      if (this.penDownX == null) {
        this.penDownX = this.penX;
        this.penDownY = this.penY;
      }

      this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
      return this;
    },
    curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
      var x = this.penX,
          y = this.penY;
      return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
    },
    curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
      var x = this.penX,
          y = this.penY;

      if (c2x == null) {
        c2x = +c1x;
        c2y = +c1y;
        c1x = x * 2 - (this._pivotX || 0);
        c1y = y * 2 - (this._pivotY || 0);
      }

      if (ex == null) {
        this._pivotX = +c1x;
        this._pivotY = +c1y;
        ex = +c2x;
        ey = +c2y;
        c2x = (ex + +c1x * 2) / 3;
        c2y = (ey + +c1y * 2) / 3;
        c1x = (x + +c1x * 2) / 3;
        c1y = (y + +c1y * 2) / 3;
      } else {
        this._pivotX = +c2x;
        this._pivotY = +c2y;
      }

      if (this.penDownX == null) {
        this.penDownX = x;
        this.penDownY = y;
      }

      this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
      return this;
    },
    arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
      return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
    },
    arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
      ry = Math.abs(+ry || +rx || +y - this.penY);
      rx = Math.abs(+rx || +x - this.penX);
      if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);
      var tX = this.penX,
          tY = this.penY,
          clockwise = !+counterClockwise,
          large = !!+outer;
      var rad = rotation ? rotation * Math.PI / 180 : 0,
          cos = Math.cos(rad),
          sin = Math.sin(rad);
      x -= tX;
      y -= tY;
      var cx = cos * x / 2 + sin * y / 2,
          cy = -sin * x / 2 + cos * y / 2,
          rxry = rx * rx * ry * ry,
          rycx = ry * ry * cx * cx,
          rxcy = rx * rx * cy * cy,
          a = rxry - rxcy - rycx;

      if (a < 0) {
        a = Math.sqrt(1 - a / rxry);
        rx *= a;
        ry *= a;
        cx = x / 2;
        cy = y / 2;
      } else {
        a = Math.sqrt(a / (rxcy + rycx));
        if (large == clockwise) a = -a;
        var cxd = -a * cy * rx / ry,
            cyd = a * cx * ry / rx;
        cx = cos * cxd - sin * cyd + x / 2;
        cy = sin * cxd + cos * cyd + y / 2;
      }

      var xx = cos / rx,
          yx = sin / rx,
          xy = -sin / ry,
          yy = cos / ry;
      var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
          ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));
      cx += tX;
      cy += tY;
      x += tX;
      y += tY;

      if (this.penDownX == null) {
        this.penDownX = this.penX;
        this.penDownY = this.penY;
      }

      this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
      return this;
    },
    counterArc: function counterArc(x, y, rx, ry, outer) {
      return this.arc(x, y, rx, ry, outer, true);
    },
    counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
      return this.arcTo(x, y, rx, ry, outer, true);
    },
    close: function close() {
      if (this.penDownX != null) {
        this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
        this.penDownX = null;
      }

      return this;
    },
    onReset: function onReset() {},
    onMove: function onMove(sx, sy, ex, ey) {},
    onLine: function onLine(sx, sy, ex, ey) {
      this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
    },
    onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
      var gx = ex - sx,
          gy = ey - sy,
          g = gx * gx + gy * gy,
          v1,
          v2,
          cx,
          cy,
          u;
      cx = c1x - sx;
      cy = c1y - sy;
      u = cx * gx + cy * gy;

      if (u > g) {
        cx -= gx;
        cy -= gy;
      } else if (u > 0 && g != 0) {
        cx -= u / g * gx;
        cy -= u / g * gy;
      }

      v1 = cx * cx + cy * cy;
      cx = c2x - sx;
      cy = c2y - sy;
      u = cx * gx + cy * gy;

      if (u > g) {
        cx -= gx;
        cy -= gy;
      } else if (u > 0 && g != 0) {
        cx -= u / g * gx;
        cy -= u / g * gy;
      }

      v2 = cx * cx + cy * cy;

      if (v1 < 0.01 && v2 < 0.01) {
        this.onLine(sx, sy, ex, ey);
        return;
      }

      if (isNaN(v1) || isNaN(v2)) {
        throw new Error('Bad input');
      }

      var s1x = (c1x + c2x) * 0.5,
          s1y = (c1y + c2y) * 0.5,
          l1x = (c1x + sx) * 0.5,
          l1y = (c1y + sy) * 0.5,
          l2x = (l1x + s1x) * 0.5,
          l2y = (l1y + s1y) * 0.5,
          r2x = (ex + c2x) * 0.5,
          r2y = (ey + c2y) * 0.5,
          r1x = (r2x + s1x) * 0.5,
          r1y = (r2y + s1y) * 0.5,
          l2r1x = (l2x + r1x) * 0.5,
          l2r1y = (l2y + r1y) * 0.5;
      this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
      this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
    },
    onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
      var rad = rotation ? rotation * Math.PI / 180 : 0,
          cos = Math.cos(rad),
          sin = Math.sin(rad),
          xx = cos * rx,
          yx = -sin * ry,
          xy = sin * rx,
          yy = cos * ry;
      var arc = ea - sa;
      if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;
      var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
          step = arc / n,
          k = 1.3333333333333333 * Math.tan(step / 4);
      var x = Math.cos(sa),
          y = Math.sin(sa);

      for (var i = 0; i < n; i++) {
        var cp1x = x - k * y,
            cp1y = y + k * x;
        sa += step;
        x = Math.cos(sa);
        y = Math.sin(sa);
        var cp2x = x + k * y,
            cp2y = y - k * x;
        this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
      }
    },
    onClose: function onClose(sx, sy, ex, ey) {
      this.onLine(sx, sy, ex, ey);
    }
  });
},160,[159]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Class = _$$_REQUIRE(_dependencyMap[0]);

  function Transform(xx, yx, xy, yy, x, y) {
    if (xx && typeof xx == 'object') {
      yx = xx.yx;
      yy = xx.yy;
      y = xx.y;
      xy = xx.xy;
      x = xx.x;
      xx = xx.xx;
    }

    this.xx = xx == null ? 1 : xx;
    this.yx = yx || 0;
    this.xy = xy || 0;
    this.yy = yy == null ? 1 : yy;
    this.x = (x == null ? this.x : x) || 0;
    this.y = (y == null ? this.y : y) || 0;

    this._transform();

    return this;
  }

  ;
  module.exports = Class({
    initialize: Transform,
    _transform: function _transform() {},
    xx: 1,
    yx: 0,
    x: 0,
    xy: 0,
    yy: 1,
    y: 0,
    transform: function transform(xx, yx, xy, yy, x, y) {
      var m = this;

      if (xx && typeof xx == 'object') {
        yx = xx.yx;
        yy = xx.yy;
        y = xx.y;
        xy = xx.xy;
        x = xx.x;
        xx = xx.xx;
      }

      if (!x) x = 0;
      if (!y) y = 0;
      return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
    },
    transformTo: Transform,
    translate: function translate(x, y) {
      return this.transform(1, 0, 0, 1, x, y);
    },
    move: function move(x, y) {
      this.x += x || 0;
      this.y += y || 0;

      this._transform();

      return this;
    },
    scale: function scale(x, y) {
      if (y == null) y = x;
      return this.transform(x, 0, 0, y, 0, 0);
    },
    rotate: function rotate(deg, x, y) {
      if (x == null || y == null) {
        x = (this.left || 0) + (this.width || 0) / 2;
        y = (this.top || 0) + (this.height || 0) / 2;
      }

      var rad = deg * Math.PI / 180,
          sin = Math.sin(rad),
          cos = Math.cos(rad);
      this.transform(1, 0, 0, 1, x, y);
      var m = this;
      return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
    },
    moveTo: function moveTo(x, y) {
      var m = this;
      return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
    },
    rotateTo: function rotateTo(deg, x, y) {
      var m = this;
      var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
      if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
      return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
    },
    scaleTo: function scaleTo(x, y) {
      var m = this;
      var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
      m.xx /= h;
      m.yx /= h;
      h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
      m.yy /= h;
      m.xy /= h;
      return this.scale(x, y);
    },
    resizeTo: function resizeTo(width, height) {
      var w = this.width,
          h = this.height;
      if (!w || !h) return this;
      return this.scaleTo(width / w, height / h);
    },
    inversePoint: function inversePoint(x, y) {
      var a = this.xx,
          b = this.yx,
          c = this.xy,
          d = this.yy,
          e = this.x,
          f = this.y;
      var det = b * c - a * d;
      if (det == 0) return null;
      return {
        x: (d * (e - x) + c * (y - f)) / det,
        y: (a * (f - y) + b * (x - e)) / det
      };
    },
    point: function point(x, y) {
      var m = this;
      return {
        x: m.xx * x + m.xy * y + m.x,
        y: m.yx * x + m.yy * y + m.y
      };
    }
  });
},161,[159]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNativeStyleAttributes = _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeViewAttributes = {};
  ReactNativeViewAttributes.UIView = {
    pointerEvents: true,
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityComponentType: true,
    accessibilityLiveRegion: true,
    accessibilityRole: true,
    accessibilityStates: true,
    accessibilityTraits: true,
    accessibilityHint: true,
    importantForAccessibility: true,
    nativeID: true,
    testID: true,
    renderToHardwareTextureAndroid: true,
    shouldRasterizeIOS: true,
    onLayout: true,
    onAccessibilityAction: true,
    onAccessibilityTap: true,
    onMagicTap: true,
    collapsable: true,
    needsOffscreenAlphaCompositing: true,
    style: ReactNativeStyleAttributes
  };
  ReactNativeViewAttributes.RCTView = _objectSpread({}, ReactNativeViewAttributes.UIView, {
    removeClippedSubviews: true
  });
  module.exports = ReactNativeViewAttributes;
},162,[48,58]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var mergeInto = _$$_REQUIRE(_dependencyMap[0]);

  var merge = function merge(one, two) {
    var result = {};
    mergeInto(result, one);
    mergeInto(result, two);
    return result;
  };

  module.exports = merge;
},163,[164]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var mergeHelpers = _$$_REQUIRE(_dependencyMap[0]);

  var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
  var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

  function mergeInto(one, two) {
    checkMergeIntoObjectArg(one);

    if (two != null) {
      checkMergeObjectArg(two);

      for (var key in two) {
        if (!two.hasOwnProperty(key)) {
          continue;
        }

        one[key] = two[key];
      }
    }
  }

  module.exports = mergeInto;
},164,[165]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var MAX_MERGE_DEPTH = 36;

  var isTerminal = function isTerminal(o) {
    return typeof o !== 'object' || o instanceof Date || o === null;
  };

  var mergeHelpers = {
    MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
    isTerminal: isTerminal,
    normalizeMergeArg: function normalizeMergeArg(arg) {
      return arg === undefined || arg === null ? {} : arg;
    },
    checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
      invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
    },
    checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
      mergeHelpers.checkMergeObjectArg(one);
      mergeHelpers.checkMergeObjectArg(two);
    },
    checkMergeObjectArg: function checkMergeObjectArg(arg) {
      invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
    },
    checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
      invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
    },
    checkMergeLevel: function checkMergeLevel(level) {
      invariant(level < MAX_MERGE_DEPTH, "Maximum deep merge depth exceeded. You may be attempting to merge circular structures in an unsupported way.");
    },
    checkArrayStrategy: function checkArrayStrategy(strategy) {
      invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, "You must provide an array strategy to deep merge functions to instruct the deep merge how to resolve merging two arrays.");
    },
    ArrayStrategies: {
      Clobber: 'Clobber',
      Concat: 'Concat',
      IndexByIndex: 'IndexByIndex'
    }
  };
  module.exports = mergeHelpers;
},165,[6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[5]);

  var Platform = _$$_REQUIRE(_dependencyMap[6]);

  var React = _$$_REQUIRE(_dependencyMap[7]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[8]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[9]);

  var Text = _$$_REQUIRE(_dependencyMap[10]);

  var TouchableNativeFeedback = _$$_REQUIRE(_dependencyMap[11]);

  var TouchableOpacity = _$$_REQUIRE(_dependencyMap[12]);

  var View = _$$_REQUIRE(_dependencyMap[13]);

  var invariant = _$$_REQUIRE(_dependencyMap[14]);

  var Button = function (_React$Component) {
    _inherits(Button, _React$Component);

    function Button() {
      _classCallCheck(this, Button);

      return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));
    }

    _createClass(Button, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            accessibilityLabel = _this$props.accessibilityLabel,
            color = _this$props.color,
            onPress = _this$props.onPress,
            title = _this$props.title,
            hasTVPreferredFocus = _this$props.hasTVPreferredFocus,
            disabled = _this$props.disabled,
            testID = _this$props.testID;
        var buttonStyles = [styles.button];
        var textStyles = [styles.text];

        if (color) {
          {
            textStyles.push({
              color: color
            });
          }
        }

        var accessibilityStates = [];

        if (disabled) {
          buttonStyles.push(styles.buttonDisabled);
          textStyles.push(styles.textDisabled);
          accessibilityStates.push('disabled');
        }

        invariant(typeof title === 'string', 'The title prop of a Button must be a string');
        var formattedTitle = title;
        var Touchable = TouchableOpacity;
        return React.createElement(Touchable, {
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: "button",
          accessibilityStates: accessibilityStates,
          hasTVPreferredFocus: hasTVPreferredFocus,
          testID: testID,
          disabled: disabled,
          onPress: onPress
        }, React.createElement(View, {
          style: buttonStyles
        }, React.createElement(Text, {
          style: textStyles,
          disabled: disabled
        }, formattedTitle)));
      }
    }]);

    return Button;
  }(React.Component);

  Button.propTypes = {
    title: PropTypes.string.isRequired,
    accessibilityLabel: PropTypes.string,
    color: ColorPropType,
    disabled: PropTypes.bool,
    hasTVPreferredFocus: PropTypes.bool,
    onPress: PropTypes.func.isRequired,
    testID: PropTypes.string
  };
  var styles = StyleSheet.create({
    button: {},
    text: {
      color: '#007AFF',
      textAlign: 'center',
      padding: 8,
      fontSize: 18
    },
    buttonDisabled: {},
    textDisabled: {
      color: '#cdcdcd'
    }
  });
  module.exports = Button;
},166,[21,22,34,37,40,60,50,51,65,54,167,179,180,80,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[6]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var ReactNativeViewAttributes = _$$_REQUIRE(_dependencyMap[9]);

  var TextAncestor = _$$_REQUIRE(_dependencyMap[10]);

  var TextPropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var Touchable = _$$_REQUIRE(_dependencyMap[12]);

  var UIManager = _$$_REQUIRE(_dependencyMap[13]);

  var createReactNativeComponentClass = _$$_REQUIRE(_dependencyMap[14]);

  var nullthrows = _$$_REQUIRE(_dependencyMap[15]);

  var processColor = _$$_REQUIRE(_dependencyMap[16]);

  var PRESS_RECT_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var viewConfig = {
    validAttributes: _objectSpread({}, ReactNativeViewAttributes.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true
    }),
    uiViewClassName: 'RCTText'
  };

  var TouchableText = function (_React$Component) {
    _inherits(TouchableText, _React$Component);

    function TouchableText() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, TouchableText);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TouchableText)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = _objectSpread({}, Touchable.Mixin.touchableGetInitialState(), {
        isHighlighted: false,
        createResponderHandlers: _this._createResponseHandlers.bind(_assertThisInitialized(_assertThisInitialized(_this))),
        responseHandlers: null
      });
      return _this;
    }

    _createClass(TouchableText, [{
      key: "render",
      value: function render() {
        var props = this.props;

        if (isTouchable(props)) {
          props = _objectSpread({}, props, this.state.responseHandlers, {
            isHighlighted: this.state.isHighlighted
          });
        }

        if (props.selectionColor != null) {
          props = _objectSpread({}, props, {
            selectionColor: processColor(props.selectionColor)
          });
        }

        return React.createElement(TextAncestor.Consumer, null, function (hasTextAncestor) {
          return hasTextAncestor ? React.createElement(RCTVirtualText, _extends({}, props, {
            ref: props.forwardedRef
          })) : React.createElement(TextAncestor.Provider, {
            value: true
          }, React.createElement(RCTText, _extends({}, props, {
            ref: props.forwardedRef
          })));
        });
      }
    }, {
      key: "_createResponseHandlers",
      value: function _createResponseHandlers() {
        var _this2 = this;

        return {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var onStartShouldSetResponder = _this2.props.onStartShouldSetResponder;
            var shouldSetResponder = (onStartShouldSetResponder == null ? false : onStartShouldSetResponder()) || isTouchable(_this2.props);

            if (shouldSetResponder) {
              _this2._attachTouchHandlers();
            }

            return shouldSetResponder;
          },
          onResponderGrant: function onResponderGrant(event, dispatchID) {
            nullthrows(_this2.touchableHandleResponderGrant)(event, dispatchID);

            if (_this2.props.onResponderGrant != null) {
              _this2.props.onResponderGrant.call(_this2, event, dispatchID);
            }
          },
          onResponderMove: function onResponderMove(event) {
            nullthrows(_this2.touchableHandleResponderMove)(event);

            if (_this2.props.onResponderMove != null) {
              _this2.props.onResponderMove.call(_this2, event);
            }
          },
          onResponderRelease: function onResponderRelease(event) {
            nullthrows(_this2.touchableHandleResponderRelease)(event);

            if (_this2.props.onResponderRelease != null) {
              _this2.props.onResponderRelease.call(_this2, event);
            }
          },
          onResponderTerminate: function onResponderTerminate(event) {
            nullthrows(_this2.touchableHandleResponderTerminate)(event);

            if (_this2.props.onResponderTerminate != null) {
              _this2.props.onResponderTerminate.call(_this2, event);
            }
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            var onResponderTerminationRequest = _this2.props.onResponderTerminationRequest;

            if (!nullthrows(_this2.touchableHandleResponderTerminationRequest)()) {
              return false;
            }

            if (onResponderTerminationRequest == null) {
              return true;
            }

            return onResponderTerminationRequest();
          }
        };
      }
    }, {
      key: "_attachTouchHandlers",
      value: function _attachTouchHandlers() {
        var _this3 = this;

        if (this.touchableGetPressRectOffset != null) {
          return;
        }

        for (var key in Touchable.Mixin) {
          if (typeof Touchable.Mixin[key] === 'function') {
            this[key] = Touchable.Mixin[key].bind(this);
          }
        }

        this.touchableHandleActivePressIn = function () {
          if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
            _this3.setState({
              isHighlighted: true
            });
          }
        };

        this.touchableHandleActivePressOut = function () {
          if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
            _this3.setState({
              isHighlighted: false
            });
          }
        };

        this.touchableHandlePress = function (event) {
          if (_this3.props.onPress != null) {
            _this3.props.onPress(event);
          }
        };

        this.touchableHandleLongPress = function (event) {
          if (_this3.props.onLongPress != null) {
            _this3.props.onLongPress(event);
          }
        };

        this.touchableGetPressRectOffset = function () {
          return _this3.props.pressRetentionOffset == null ? PRESS_RECT_OFFSET : _this3.props.pressRetentionOffset;
        };
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        return prevState.responseHandlers == null && isTouchable(nextProps) ? _objectSpread({}, prevState, {
          responseHandlers: prevState.createResponderHandlers()
        }) : null;
      }
    }]);

    return TouchableText;
  }(React.Component);

  TouchableText.defaultProps = {
    accessible: true,
    allowFontScaling: true,
    ellipsizeMode: 'tail'
  };
  TouchableText.viewConfig = viewConfig;

  var isTouchable = function isTouchable(props) {
    return props.onPress != null || props.onLongPress != null || props.onStartShouldSetResponder != null;
  };

  var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
    return viewConfig;
  });
  var RCTVirtualText = UIManager.RCTVirtualText == null ? RCTText : createReactNativeComponentClass('RCTVirtualText', function () {
    return {
      validAttributes: _objectSpread({}, ReactNativeViewAttributes.UIView, {
        isHighlighted: true
      }),
      uiViewClassName: 'RCTVirtualText'
    };
  });

  var Text = function Text(props, forwardedRef) {
    return React.createElement(TouchableText, _extends({}, props, {
      forwardedRef: forwardedRef
    }));
  };

  var TextToExport = React.forwardRef(Text);
  TextToExport.propTypes = TextPropTypes;
  module.exports = TextToExport;
},167,[3,21,22,34,37,40,36,48,51,162,81,168,172,71,147,178,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ColorPropType = _$$_REQUIRE(_dependencyMap[0]);

  var EdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[1]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var StyleSheetPropType = _$$_REQUIRE(_dependencyMap[3]);

  var TextStylePropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var stylePropType = StyleSheetPropType(TextStylePropTypes);
  module.exports = {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
    numberOfLines: PropTypes.number,
    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
    onLayout: PropTypes.func,
    onPress: PropTypes.func,
    onLongPress: PropTypes.func,
    pressRetentionOffset: EdgeInsetsPropType,
    selectable: PropTypes.bool,
    selectionColor: ColorPropType,
    suppressHighlighting: PropTypes.bool,
    style: stylePropType,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    allowFontScaling: PropTypes.bool,
    accessible: PropTypes.bool,
    adjustsFontSizeToFit: PropTypes.bool,
    minimumFontScale: PropTypes.number,
    disabled: PropTypes.bool
  };
},168,[60,169,65,170,72]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var EdgeInsetsPropType = PropTypes.shape({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
  });
  module.exports = EdgeInsetsPropType;
},169,[65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var createStrictShapeTypeChecker = _$$_REQUIRE(_dependencyMap[0]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[1]);

  function StyleSheetPropType(shape) {
    var shapePropType = createStrictShapeTypeChecker(shape);
    return function (props, propName, componentName, location) {
      var newProps = props;

      if (props[propName]) {
        newProps = {};
        newProps[propName] = flattenStyle(props[propName]);
      }

      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        rest[_key - 4] = arguments[_key];
      }

      return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
    };
  }

  module.exports = StyleSheetPropType;
},170,[171,79]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var merge = _$$_REQUIRE(_dependencyMap[1]);

  function createStrictShapeTypeChecker(shapeTypes) {
    function checkType(isRequired, props, propName, componentName, location) {
      if (!props[propName]) {
        if (isRequired) {
          invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
        }

        return;
      }

      var propValue = props[propName];
      var propType = typeof propValue;
      var locationName = location || '(unknown)';

      if (propType !== 'object') {
        invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
      }

      var allKeys = merge(props[propName], shapeTypes);

      for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
        rest[_key - 5] = arguments[_key];
      }

      for (var _key2 in allKeys) {
        var checker = shapeTypes[_key2];

        if (!checker) {
          invariant(false, "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker.apply(undefined, [propValue, _key2, componentName, location].concat(rest));

        if (error) {
          invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
        }
      }
    }

    function chainedCheckType(props, propName, componentName, location) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {
        rest[_key3 - 4] = arguments[_key3];
      }

      return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
    }

    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  module.exports = createStrictShapeTypeChecker;
},171,[6,163]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var BoundingDimensions = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var Position = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

  var TVEventHandler = _$$_REQUIRE(_dependencyMap[6]);

  var TouchEventUtils = _$$_REQUIRE(_dependencyMap[7]);

  var UIManager = _$$_REQUIRE(_dependencyMap[8]);

  var View = _$$_REQUIRE(_dependencyMap[9]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[10]);

  var normalizeColor = _$$_REQUIRE(_dependencyMap[11]);

  var States = keyMirror({
    NOT_RESPONDER: null,
    RESPONDER_INACTIVE_PRESS_IN: null,
    RESPONDER_INACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_PRESS_IN: null,
    RESPONDER_ACTIVE_PRESS_OUT: null,
    RESPONDER_ACTIVE_LONG_PRESS_IN: null,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
    ERROR: null
  });
  var IsActive = {
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = keyMirror({
    DELAY: null,
    RESPONDER_GRANT: null,
    RESPONDER_RELEASE: null,
    RESPONDER_TERMINATED: null,
    ENTER_PRESS_RECT: null,
    LEAVE_PRESS_RECT: null,
    LONG_PRESS_DETECTED: null
  });
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = 370;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixin = {
    componentDidMount: function componentDidMount() {
      if (!Platform.isTV) {
        return;
      }

      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        var myTag = ReactNative.findNodeHandle(cmp);
        evt.dispatchConfig = {};

        if (myTag === evt.tag) {
          if (evt.eventType === 'focus') {
            cmp.touchableHandleFocus(evt);
          } else if (evt.eventType === 'blur') {
            cmp.touchableHandleBlur(evt);
          } else if (evt.eventType === 'select') {
            cmp.touchableHandlePress && !cmp.props.disabled && cmp.touchableHandlePress(evt);
          }
        }
      });
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function touchableGetInitialState() {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
      return true;
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;

      this._receiveSignal(Signals.RESPONDER_GRANT, e);

      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }

      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
        return;
      }

      if (!this.state.touchable.positionOnActivate) {
        return;
      }

      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

      if (hitSlop) {
        pressExpandLeft += hitSlop.left;
        pressExpandTop += hitSlop.top;
        pressExpandRight += hitSlop.right;
        pressExpandBottom += hitSlop.bottom;
      }

      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;

      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }

      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

      if (isTouchWithinActive) {
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

        var curState = this.state.touchable.touchState;

        if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();

        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    touchableHandleFocus: function touchableHandleFocus(e) {
      this.props.onFocus && this.props.onFocus(e);
    },
    touchableHandleBlur: function touchableHandleBlur(e) {
      this.props.onBlur && this.props.onBlur(e);
    },
    _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
      var tag = this.state.touchable.responderID;

      if (tag == null) {
        return;
      }

      UIManager.measure(tag, this._handleQueryLayout);
    },
    _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }

      this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
    },
    _handleDelay: function _handleDelay(e) {
      this.touchableDelayTimeout = null;

      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function _handleLongDelay(e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;

      if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
      } else {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function _receiveSignal(signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];

      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }

      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
      }

      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
      }

      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);

        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function _isHighlight(state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function _savePressInLocation(e) {
      var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX: pageX,
        pageY: pageY,
        locationX: locationX,
        locationY: locationY
      };
    },
    _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);

      var newIsHighlight = this._isHighlight(nextState);

      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }

      if (!IsActive[curState] && IsActive[nextState]) {
        this._remeasureMetricsOnActivation();
      }

      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }

      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }

      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);

            this._endHighlight(e);
          }

          this.touchableHandlePress(e);
        }
      }

      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _playTouchSound: function _playTouchSound() {
      UIManager.playTouchSound();
    },
    _startHighlight: function _startHighlight(e) {
      this._savePressInLocation(e);

      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function _endHighlight(e) {
      var _this = this;

      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(function () {
            _this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    }
  };
  var Touchable = {
    Mixin: TouchableMixin,
    TOUCH_TARGET_DEBUG: false,
    renderDebugView: function renderDebugView(_ref) {
      var color = _ref.color,
          hitSlop = _ref.hitSlop;

      if (!Touchable.TOUCH_TARGET_DEBUG) {
        return null;
      }

      {
        throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
      }
      var debugHitSlopStyle = {};
      hitSlop = hitSlop || {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };

      for (var key in hitSlop) {
        debugHitSlopStyle[key] = -hitSlop[key];
      }

      var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
      return React.createElement(View, {
        pointerEvents: "none",
        style: _objectSpread({
          position: 'absolute',
          borderColor: hexColor.slice(0, -2) + '55',
          borderWidth: 1,
          borderStyle: 'dashed',
          backgroundColor: hexColor.slice(0, -2) + '0F'
        }, debugHitSlopStyle)
      });
    }
  };
  module.exports = Touchable;
},172,[48,173,50,175,51,83,176,177,71,80,63,61]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _$$_REQUIRE(_dependencyMap[0]);

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }

  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };

  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };

  PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  module.exports = BoundingDimensions;
},173,[174]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance = Klass.instancePool.pop();

      Klass.call(_instance, copyFieldsFrom);
      return _instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };

  var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance2 = Klass.instancePool.pop();

      Klass.call(_instance2, a1, a2);
      return _instance2;
    } else {
      return new Klass(a1, a2);
    }
  };

  var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance3 = Klass.instancePool.pop();

      Klass.call(_instance3, a1, a2, a3);
      return _instance3;
    } else {
      return new Klass(a1, a2, a3);
    }
  };

  var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;

    if (Klass.instancePool.length) {
      var _instance4 = Klass.instancePool.pop();

      Klass.call(_instance4, a1, a2, a3, a4);
      return _instance4;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };

  var standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();

    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };

  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;

  var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;

    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }

    NewKlass.release = standardReleaser;
    return NewKlass;
  };

  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  module.exports = PooledClass;
},174,[6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PooledClass = _$$_REQUIRE(_dependencyMap[0]);

  var twoArgumentPooler = PooledClass.twoArgumentPooler;

  function Position(left, top) {
    this.left = left;
    this.top = top;
  }

  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };

  PooledClass.addPoolingTo(Position, twoArgumentPooler);
  module.exports = Position;
},175,[174]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var TVNavigationEventEmitter = _$$_REQUIRE(_dependencyMap[1]).TVNavigationEventEmitter;

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  function TVEventHandler() {
    this.__nativeTVNavigationEventListener = null;
    this.__nativeTVNavigationEventEmitter = null;
  }

  TVEventHandler.prototype.enable = function (component, callback) {
    if (!TVNavigationEventEmitter) {
      return;
    }

    this.__nativeTVNavigationEventEmitter = new NativeEventEmitter(TVNavigationEventEmitter);
    this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onHWKeyEvent', function (data) {
      if (callback) {
        callback(component, data);
      }
    });
  };

  TVEventHandler.prototype.disable = function () {
    if (this.__nativeTVNavigationEventListener) {
      this.__nativeTVNavigationEventListener.remove();

      delete this.__nativeTVNavigationEventListener;
    }

    if (this.__nativeTVNavigationEventEmitter) {
      delete this.__nativeTVNavigationEventEmitter;
    }
  };

  module.exports = TVEventHandler;
},176,[50,8,112]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var TouchEventUtils = {
    extractSingleTouch: function extractSingleTouch(nativeEvent) {
      var touches = nativeEvent.touches;
      var changedTouches = nativeEvent.changedTouches;
      var hasTouches = touches && touches.length > 0;
      var hasChangedTouches = changedTouches && changedTouches.length > 0;
      return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
    }
  };
  module.exports = TouchEventUtils;
},177,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var nullthrows = function nullthrows(x) {
    if (x != null) {
      return x;
    }

    throw new Error("Got unexpected null or undefined");
  };

  module.exports = nullthrows;
},178,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[6]);

  var Text = _$$_REQUIRE(_dependencyMap[7]);

  var View = _$$_REQUIRE(_dependencyMap[8]);

  var DummyTouchableNativeFeedback = function (_React$Component) {
    _inherits(DummyTouchableNativeFeedback, _React$Component);

    function DummyTouchableNativeFeedback() {
      _classCallCheck(this, DummyTouchableNativeFeedback);

      return _possibleConstructorReturn(this, _getPrototypeOf(DummyTouchableNativeFeedback).apply(this, arguments));
    }

    _createClass(DummyTouchableNativeFeedback, [{
      key: "render",
      value: function render() {
        return React.createElement(View, {
          style: [styles.container, this.props.style]
        }, React.createElement(Text, {
          style: styles.info
        }, "TouchableNativeFeedback is not supported on this platform!"));
      }
    }]);

    return DummyTouchableNativeFeedback;
  }(React.Component);

  DummyTouchableNativeFeedback.SelectableBackground = function () {
    return {};
  };

  DummyTouchableNativeFeedback.SelectableBackgroundBorderless = function () {
    return {};
  };

  DummyTouchableNativeFeedback.Ripple = function () {
    return {};
  };

  DummyTouchableNativeFeedback.canUseNativeForeground = function () {
    return false;
  };

  var styles = StyleSheet.create({
    container: {
      height: 100,
      width: 300,
      backgroundColor: '#ffbcbc',
      borderWidth: 1,
      borderColor: 'red',
      alignItems: 'center',
      justifyContent: 'center',
      margin: 10
    },
    info: {
      color: '#333333',
      margin: 20
    }
  });
  module.exports = DummyTouchableNativeFeedback;
},179,[21,22,34,37,40,51,54,167,80]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var Animated = _$$_REQUIRE(_dependencyMap[1]);

  var Easing = _$$_REQUIRE(_dependencyMap[2]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var TimerMixin = _$$_REQUIRE(_dependencyMap[6]);

  var Touchable = _$$_REQUIRE(_dependencyMap[7]);

  var TouchableWithoutFeedback = _$$_REQUIRE(_dependencyMap[8]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[9]);

  var ensurePositiveDelayProps = _$$_REQUIRE(_dependencyMap[10]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[11]);

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableOpacity = createReactClass({
    displayName: 'TouchableOpacity',
    mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],
    propTypes: _objectSpread({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        activeOpacity: 0.2
      };
    },
    getInitialState: function getInitialState() {
      return _objectSpread({}, this.touchableGetInitialState(), {
        anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
      });
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
      if (this.props.disabled !== prevProps.disabled) {
        this._opacityInactive(250);
      }
    },
    setOpacityTo: function setOpacityTo(value, duration) {
      Animated.timing(this.state.anim, {
        toValue: value,
        duration: duration,
        easing: Easing.inOut(Easing.quad),
        useNativeDriver: true
      }).start();
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      if (e.dispatchConfig.registrationName === 'onResponderGrant') {
        this._opacityActive(0);
      } else {
        this._opacityActive(150);
      }

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this._opacityInactive(250);

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _opacityActive: function _opacityActive(duration) {
      this.setOpacityTo(this.props.activeOpacity, duration);
    },
    _opacityInactive: function _opacityInactive(duration) {
      this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
    },
    _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
      var childStyle = flattenStyle(this.props.style) || {};
      return childStyle.opacity == undefined ? 1 : childStyle.opacity;
    },
    render: function render() {
      return React.createElement(Animated.View, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        style: [this.props.style, {
          opacity: this.state.anim
        }],
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        isTVSelectable: true,
        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate
      }, this.props.children, Touchable.renderDebugView({
        color: 'cyan',
        hitSlop: this.props.hitSlop
      }));
    }
  });
  module.exports = TouchableOpacity;
},180,[48,181,207,243,51,65,230,172,244,225,245,79]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[1]);

  var FlatList = _$$_REQUIRE(_dependencyMap[2]);

  var Image = _$$_REQUIRE(_dependencyMap[3]);

  var ScrollView = _$$_REQUIRE(_dependencyMap[4]);

  var SectionList = _$$_REQUIRE(_dependencyMap[5]);

  var Text = _$$_REQUIRE(_dependencyMap[6]);

  var View = _$$_REQUIRE(_dependencyMap[7]);

  module.exports = _objectSpread({}, AnimatedImplementation, {
    View: AnimatedImplementation.createAnimatedComponent(View),
    Text: AnimatedImplementation.createAnimatedComponent(Text),
    Image: AnimatedImplementation.createAnimatedComponent(Image),
    ScrollView: AnimatedImplementation.createAnimatedComponent(ScrollView),
    FlatList: AnimatedImplementation.createAnimatedComponent(FlatList),
    SectionList: AnimatedImplementation.createAnimatedComponent(SectionList)
  });
},181,[48,182,210,238,216,241,167,80]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _require = _$$_REQUIRE(_dependencyMap[1]),
      AnimatedEvent = _require.AnimatedEvent,
      attachNativeEvent = _require.attachNativeEvent;

  var AnimatedAddition = _$$_REQUIRE(_dependencyMap[2]);

  var AnimatedDiffClamp = _$$_REQUIRE(_dependencyMap[3]);

  var AnimatedDivision = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedModulo = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedMultiplication = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedProps = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedSubtraction = _$$_REQUIRE(_dependencyMap[10]);

  var AnimatedTracking = _$$_REQUIRE(_dependencyMap[11]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[12]);

  var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[13]);

  var DecayAnimation = _$$_REQUIRE(_dependencyMap[14]);

  var SpringAnimation = _$$_REQUIRE(_dependencyMap[15]);

  var TimingAnimation = _$$_REQUIRE(_dependencyMap[16]);

  var createAnimatedComponent = _$$_REQUIRE(_dependencyMap[17]);

  var add = function add(a, b) {
    return new AnimatedAddition(a, b);
  };

  var subtract = function subtract(a, b) {
    return new AnimatedSubtraction(a, b);
  };

  var divide = function divide(a, b) {
    return new AnimatedDivision(a, b);
  };

  var multiply = function multiply(a, b) {
    return new AnimatedMultiplication(a, b);
  };

  var modulo = function modulo(a, modulus) {
    return new AnimatedModulo(a, modulus);
  };

  var diffClamp = function diffClamp(a, min, max) {
    return new AnimatedDiffClamp(a, min, max);
  };

  var _combineCallbacks = function _combineCallbacks(callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete.apply(config, arguments);
        callback && callback.apply(undefined, arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };

  var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
    if (value instanceof AnimatedValueXY) {
      var configX = _objectSpread({}, config);

      var configY = _objectSpread({}, config);

      for (var key in config) {
        var _config$key = config[key],
            x = _config$key.x,
            y = _config$key.y;

        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }

      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    }

    return null;
  };

  var spring = function spring(value, config) {
    var _start = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, spring) || {
      start: function start(callback) {
        _start(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _objectSpread({}, config, {
          iterations: iterations
        });

        _start(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var timing = function timing(value, config) {
    var _start2 = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();

      if (configuration.toValue instanceof AnimatedNode) {
        singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    };

    return maybeVectorAnim(value, config, timing) || {
      start: function start(callback) {
        _start2(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _objectSpread({}, config, {
          iterations: iterations
        });

        _start2(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var decay = function decay(value, config) {
    var _start3 = function start(animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    };

    return maybeVectorAnim(value, config, decay) || {
      start: function start(callback) {
        _start3(value, config, callback);
      },
      stop: function stop() {
        value.stopAnimation();
      },
      reset: function reset() {
        value.resetAnimation();
      },
      _startNativeLoop: function _startNativeLoop(iterations) {
        var singleConfig = _objectSpread({}, config, {
          iterations: iterations
        });

        _start3(value, singleConfig);
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return config.useNativeDriver || false;
      }
    };
  };

  var sequence = function sequence(animations) {
    var current = 0;
    return {
      start: function start(callback) {
        var onComplete = function onComplete(result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }

          current++;

          if (current === animations.length) {
            callback && callback(result);
            return;
          }

          animations[current].start(onComplete);
        };

        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete);
        }
      },
      stop: function stop() {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
  };

  var parallel = function parallel(animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function start(callback) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }

        animations.forEach(function (animation, idx) {
          var cb = function cb(endResult) {
            hasEnded[idx] = true;
            doneCount++;

            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }

            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };

          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb);
          }
        });
      },
      stop: function stop() {
        animations.forEach(function (animation, idx) {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function reset() {
        animations.forEach(function (animation, idx) {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return false;
      }
    };
    return result;
  };

  var delay = function delay(time) {
    return timing(new AnimatedValue(0), {
      toValue: 0,
      delay: time,
      duration: 0
    });
  };

  var stagger = function stagger(time, animations) {
    return parallel(animations.map(function (animation, i) {
      return sequence([delay(time * i), animation]);
    }));
  };

  var loop = function loop(animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$iterations = _ref.iterations,
        iterations = _ref$iterations === undefined ? -1 : _ref$iterations;

    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function start(callback) {
        var restart = function restart() {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };

          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            animation.reset();
            animation.start(restart);
          }
        };

        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function stop() {
        isFinished = true;
        animation.stop();
      },
      reset: function reset() {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function _startNativeLoop() {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function _isUsingNativeDriver() {
        return animation._isUsingNativeDriver();
      }
    };
  };

  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof AnimatedEvent) {
      event.__addListener(listener);

      return event;
    } else {
      return function () {
        typeof event === 'function' && event.apply(undefined, arguments);
        listener.apply(undefined, arguments);
      };
    }
  }

  function unforkEvent(event, listener) {
    if (event && event instanceof AnimatedEvent) {
      event.__removeListener(listener);
    }
  }

  var event = function event(argMapping, config) {
    var animatedEvent = new AnimatedEvent(argMapping, config);

    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };

  module.exports = {
    Value: AnimatedValue,
    ValueXY: AnimatedValueXY,
    Interpolation: AnimatedInterpolation,
    Node: AnimatedNode,
    decay: decay,
    timing: timing,
    spring: spring,
    add: add,
    subtract: subtract,
    divide: divide,
    multiply: multiply,
    modulo: modulo,
    diffClamp: diffClamp,
    delay: delay,
    sequence: sequence,
    parallel: parallel,
    stagger: stagger,
    loop: loop,
    event: event,
    createAnimatedComponent: createAnimatedComponent,
    attachNativeEvent: attachNativeEvent,
    forkEvent: forkEvent,
    unforkEvent: unforkEvent,
    __PropsOnlyForTests: AnimatedProps
  };
},182,[48,183,191,192,193,185,194,195,186,196,199,200,184,201,202,204,206,209]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[2]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[3]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var _require = _$$_REQUIRE(_dependencyMap[3]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function attachNativeEvent(viewRef, eventName, argMapping) {
    var eventMappings = [];

    var traverse = function traverse(value, path) {
      if (value instanceof AnimatedValue) {
        value.__makeNative();

        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };

    invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = ReactNative.findNodeHandle(viewRef);
    eventMappings.forEach(function (mapping) {
      NativeAnimatedHelper.API.addAnimatedEventToView(viewTag, eventName, mapping);
    });
    return {
      detach: function detach() {
        eventMappings.forEach(function (mapping) {
          NativeAnimatedHelper.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
        });
      }
    };
  }

  var AnimatedEvent = function () {
    function AnimatedEvent(argMapping) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AnimatedEvent);

      this._listeners = [];
      this._argMapping = argMapping;

      if (config.listener) {
        this.__addListener(config.listener);
      }

      this._callListeners = this._callListeners.bind(this);
      this._attachedEvent = null;
      this.__isNative = shouldUseNativeDriver(config);
    }

    _createClass(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        invariant(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this = this;

        if (this.__isNative) {
          return this._callListeners;
        }

        return function () {
          for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          var traverse = function traverse(recMapping, recEvt, key) {
            if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
              recMapping.setValue(recEvt);
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
              }
            }
          };

          if (!_this.__isNative) {
            _this._argMapping.forEach(function (mapping, idx) {
              traverse(mapping, args[idx], 'arg' + idx);
            });
          }

          _this._callListeners.apply(_this, args);
        };
      }
    }, {
      key: "_callListeners",
      value: function _callListeners() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
          args[_key3] = arguments[_key3];
        }

        this._listeners.forEach(function (listener) {
          return listener.apply(undefined, args);
        });
      }
    }, {
      key: "_validateMapping",
      value: function _validateMapping() {
        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number') {
            invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
            return;
          }

          invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
          invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);

          for (var mappingKey in recMapping) {
            traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
          }
        };
      }
    }]);

    return AnimatedEvent;
  }();

  module.exports = {
    AnimatedEvent: AnimatedEvent,
    attachNativeEvent: attachNativeEvent
  };
},183,[21,22,184,187,83,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

  var InteractionManager = _$$_REQUIRE(_dependencyMap[9]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[10]);

  var NativeAnimatedAPI = NativeAnimatedHelper.API;
  var _uniqueId = 1;

  function _flush(rootNode) {
    var animatedStyles = new Set();

    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        animatedStyles.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }

    findAnimatedStyles(rootNode);
    animatedStyles.forEach(function (animatedStyle) {
      return animatedStyle.update();
    });
  }

  var AnimatedValue = function (_AnimatedWithChildren) {
    _inherits(AnimatedValue, _AnimatedWithChildren);

    function AnimatedValue(value) {
      var _this;

      _classCallCheck(this, AnimatedValue);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedValue).call(this));
      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      _this._listeners = {};
      return _this;
    }

    _createClass(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.stopAnimation();

        _get(_getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        _get(_getPrototypeOf(AnimatedValue.prototype), "__makeNative", this).call(this);

        if (Object.keys(this._listeners).length) {
          this._startListeningToNativeValueUpdates();
        }
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();

          this._animation = null;
        }

        this._updateValue(value, !this.__isNative);

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;

        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;

        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        this._listeners[id] = callback;

        if (this.__isNative) {
          this._startListeningToNativeValueUpdates();
        }

        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        delete this._listeners[id];

        if (this.__isNative && Object.keys(this._listeners).length === 0) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listeners = {};

        if (this.__isNative) {
          this._stopListeningForNativeValueUpdates();
        }
      }
    }, {
      key: "_startListeningToNativeValueUpdates",
      value: function _startListeningToNativeValueUpdates() {
        var _this2 = this;

        if (this.__nativeAnimatedValueListener) {
          return;
        }

        NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
        this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
          if (data.tag !== _this2.__getNativeTag()) {
            return;
          }

          _this2._updateValue(data.value, false);
        });
      }
    }, {
      key: "_stopListeningForNativeValueUpdates",
      value: function _stopListeningForNativeValueUpdates() {
        if (!this.__nativeAnimatedValueListener) {
          return;
        }

        this.__nativeAnimatedValueListener.remove();

        this.__nativeAnimatedValueListener = null;
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var _this3 = this;

        var handle = null;

        if (animation.__isInteraction) {
          handle = InteractionManager.createInteractionHandle();
        }

        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, function (value) {
          _this3._updateValue(value, true);
        }, function (result) {
          _this3._animation = null;

          if (handle !== null) {
            InteractionManager.clearInteractionHandle(handle);
          }

          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        this._value = value;

        if (flush) {
          _flush(this);
        }

        for (var _key in this._listeners) {
          this._listeners[_key]({
            value: this.__getValue()
          });
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset
        };
      }
    }]);

    return AnimatedValue;
  }(AnimatedWithChildren);

  module.exports = AnimatedValue;
},184,[21,22,34,37,38,40,185,186,188,189,187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var normalizeColor = _$$_REQUIRE(_dependencyMap[11]);

  var linear = function linear(t) {
    return t;
  };

  function createInterpolation(config) {
    if (config.outputRange && typeof config.outputRange[0] === 'string') {
      return createInterpolationFromStringOutputRange(config);
    }

    var outputRange = config.outputRange;
    checkInfiniteRange('outputRange', outputRange);
    var inputRange = config.inputRange;
    checkInfiniteRange('inputRange', inputRange);
    checkValidInputRange(inputRange);
    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');
    var easing = config.easing || linear;
    var extrapolateLeft = 'extend';

    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }

    var extrapolateRight = 'extend';

    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }

    return function (input) {
      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }

  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;

    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }

    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }

    if (outputMin === outputMax) {
      return outputMin;
    }

    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }

      return outputMax;
    }

    if (inputMin === -(1 / 0)) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }

    result = easing(result);

    if (outputMin === -(1 / 0)) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }

    return result;
  }

  function colorToRgba(input) {
    var int32Color = normalizeColor(input);

    if (int32Color === null) {
      return input;
    }

    int32Color = int32Color || 0;
    var r = (int32Color & 0xff000000) >>> 24;
    var g = (int32Color & 0x00ff0000) >>> 16;
    var b = (int32Color & 0x0000ff00) >>> 8;
    var a = (int32Color & 0x000000ff) / 255;
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
  }

  var stringShapeRegex = /[0-9\.-]+/g;

  function createInterpolationFromStringOutputRange(config) {
    var outputRange = config.outputRange;
    invariant(outputRange.length >= 2, 'Bad output range');
    outputRange = outputRange.map(colorToRgba);
    checkPattern(outputRange);
    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
      return [];
    });
    outputRange.forEach(function (value) {
      value.match(stringShapeRegex).forEach(function (number, i) {
        outputRanges[i].push(+number);
      });
    });
    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
      return createInterpolation(_objectSpread({}, config, {
        outputRange: outputRanges[i]
      }));
    });
    var shouldRound = isRgbOrRgba(outputRange[0]);
    return function (input) {
      var i = 0;
      return outputRange[0].replace(stringShapeRegex, function () {
        var val = +interpolations[i++](input);
        var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
        return String(rounded);
      });
    };
  }

  function isRgbOrRgba(range) {
    return typeof range === 'string' && range.startsWith('rgb');
  }

  function checkPattern(arr) {
    var pattern = arr[0].replace(stringShapeRegex, '');

    for (var i = 1; i < arr.length; ++i) {
      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
    }
  }

  function findRange(input, inputRange) {
    var i;

    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }

    return i - 1;
  }

  function checkValidInputRange(arr) {
    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');

    for (var i = 1; i < arr.length; ++i) {
      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);
    }
  }

  function checkInfiniteRange(name, arr) {
    invariant(arr.length >= 2, name + ' must have at least 2 elements');
    invariant(arr.length !== 2 || arr[0] !== -(1 / 0) || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
  }

  var AnimatedInterpolation = function (_AnimatedWithChildren) {
    _inherits(AnimatedInterpolation, _AnimatedWithChildren);

    function AnimatedInterpolation(parent, config) {
      var _this;

      _classCallCheck(this, AnimatedInterpolation);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedInterpolation).call(this));
      _this._parent = parent;
      _this._config = config;
      _this._interpolation = createInterpolation(config);
      return _this;
    }

    _createClass(AnimatedInterpolation, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._parent.__makeNative();

        _get(_getPrototypeOf(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();

        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._interpolation(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _get(_getPrototypeOf(AnimatedInterpolation.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__transformDataType",
      value: function __transformDataType(range) {
        return range.map(function (value) {
          if (typeof value !== 'string') {
            return value;
          }

          if (/deg$/.test(value)) {
            var degrees = parseFloat(value) || 0;
            var radians = degrees * Math.PI / 180.0;
            return radians;
          } else {
            return parseFloat(value) || 0;
          }
        });
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          inputRange: this._config.inputRange,
          outputRange: this.__transformDataType(this._config.outputRange),
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation'
        };
      }
    }]);

    return AnimatedInterpolation;
  }(AnimatedWithChildren);

  AnimatedInterpolation.__createInterpolation = createInterpolation;
  module.exports = AnimatedInterpolation;
},185,[21,22,34,37,38,40,48,186,188,187,6,61]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[2]);

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var AnimatedNode = function () {
    function AnimatedNode() {
      _classCallCheck(this, AnimatedNode);
    }

    _createClass(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this.__nativeTag != null) {
          NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          throw new Error('This node cannot be made a "native" animated node');
        }
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        NativeAnimatedHelper.assertNativeAnimatedModule();
        invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');

        if (this.__nativeTag == null) {
          var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
          NativeAnimatedHelper.API.createAnimatedNode(nativeTag, this.__getNativeConfig());
          this.__nativeTag = nativeTag;
        }

        return this.__nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }]);

    return AnimatedNode;
  }();

  module.exports = AnimatedNode;
},186,[21,22,187,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeAnimatedModule = _$$_REQUIRE(_dependencyMap[0]).NativeAnimatedModule;

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter;
  var API = {
    createAnimatedNode: function createAnimatedNode(tag, config) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.createAnimatedNode(tag, config);
    },
    startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation: function stopAnimation(animationId) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.stopAnimation(animationId);
    },
    setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    dropAnimatedNode: function dropAnimatedNode(tag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.dropAnimatedNode(tag);
    },
    addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      assertNativeAnimatedModule();
      NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  var STYLES_WHITELIST = {
    opacity: true,
    transform: true,
    borderRadius: true,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var TRANSFORM_WHITELIST = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    perspective: true
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };

  function addWhitelistedStyleProp(prop) {
    STYLES_WHITELIST[prop] = true;
  }

  function addWhitelistedTransformProp(prop) {
    TRANSFORM_WHITELIST[prop] = true;
  }

  function addWhitelistedInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }

  function validateTransform(configs) {
    configs.forEach(function (config) {
      if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
        throw new Error("Property '" + config.property + "' is not supported by native animated module");
      }
    });
  }

  function validateStyles(styles) {
    for (var key in styles) {
      if (!STYLES_WHITELIST.hasOwnProperty(key)) {
        throw new Error("Style property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function validateInterpolation(config) {
    for (var key in config) {
      if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
        throw new Error("Interpolation property '" + key + "' is not supported by native animated module");
      }
    }
  }

  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }

  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }

  function assertNativeAnimatedModule() {
    invariant(NativeAnimatedModule, 'Native animated module is not available');
  }

  var _warnedMissingNativeAnimated = false;

  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver && !NativeAnimatedModule) {
      if (!_warnedMissingNativeAnimated) {
        console.warn("Animated: `useNativeDriver` is not supported because the native animated module is missing. Falling back to JS-based animation. To resolve this, add `RCTAnimation` module to this app, or remove `useNativeDriver`. More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420");
        _warnedMissingNativeAnimated = true;
      }

      return false;
    }

    return config.useNativeDriver || false;
  }

  module.exports = {
    API: API,
    addWhitelistedStyleProp: addWhitelistedStyleProp,
    addWhitelistedTransformProp: addWhitelistedTransformProp,
    addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
    validateStyles: validateStyles,
    validateTransform: validateTransform,
    validateInterpolation: validateInterpolation,
    generateNewNodeTag: generateNewNodeTag,
    generateNewAnimationId: generateNewAnimationId,
    assertNativeAnimatedModule: assertNativeAnimatedModule,
    shouldUseNativeDriver: shouldUseNativeDriver,

    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
      }

      return nativeEventEmitter;
    }

  };
},187,[8,112,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[5]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedWithChildren = function (_AnimatedNode) {
    _inherits(AnimatedWithChildren, _AnimatedNode);

    function AnimatedWithChildren() {
      var _this;

      _classCallCheck(this, AnimatedWithChildren);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedWithChildren).call(this));
      _this._children = [];
      return _this;
    }

    _createClass(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _child = _ref;

            _child.__makeNative();

            NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), _child.__getNativeTag());
          }
        }
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }

        this._children.push(child);

        if (this.__isNative) {
          child.__makeNative();

          NativeAnimatedHelper.API.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        if (this.__isNative && child.__isNative) {
          NativeAnimatedHelper.API.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }

        this._children.splice(index, 1);

        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }]);

    return AnimatedWithChildren;
  }(AnimatedNode);

  module.exports = AnimatedWithChildren;
},188,[21,22,34,37,40,186,187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var Set = _$$_REQUIRE(_dependencyMap[2]);

  var TaskQueue = _$$_REQUIRE(_dependencyMap[3]);

  var infoLog = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[6]);

  var _emitter = new EventEmitter();

  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManager = {
    Events: keyMirror({
      interactionStart: true,
      interactionComplete: true
    }),
    runAfterInteractions: function runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(function (resolve) {
        _scheduleUpdate();

        if (task) {
          tasks.push(task);
        }

        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });

        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        done: function done() {
          if (promise.done) {
            return promise.done.apply(promise, arguments);
          } else {
            console.warn('Tried to call done when not supported by current Promise implementation.');
          }
        },
        cancel: function cancel() {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle: function createInteractionHandle() {
      DEBUG;

      _scheduleUpdate();

      var handle = ++_inc;

      _addInteractionSet.add(handle);

      return handle;
    },
    clearInteractionHandle: function clearInteractionHandle(handle) {
      DEBUG;
      invariant(!!handle, 'Must provide a handle to clear.');

      _scheduleUpdate();

      _addInteractionSet.delete(handle);

      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline: function setDeadline(deadline) {
      _deadline = deadline;
    }
  };

  var _interactionSet = new Set();

  var _addInteractionSet = new Set();

  var _deleteInteractionSet = new Set();

  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });

  var _nextUpdateHandle = 0;
  var _inc = 0;

  var _deadline = -1;

  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }

  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;

    _addInteractionSet.forEach(function (handle) {
      return _interactionSet.add(handle);
    });

    _deleteInteractionSet.forEach(function (handle) {
      return _interactionSet.delete(handle);
    });

    var nextInteractionCount = _interactionSet.size;

    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }

    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();

        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();

          break;
        }
      }
    }

    _addInteractionSet.clear();

    _deleteInteractionSet.clear();
  }

  module.exports = InteractionManager;
},189,[15,42,92,190,140,6,63]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var infoLog = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var DEBUG = false;

  var TaskQueue = function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;

      _classCallCheck(this, TaskQueue);

      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }

    _createClass(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        var _this = this;

        tasks.forEach(function (task) {
          return _this.enqueue(task);
        });
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(function (queue) {
          return _objectSpread({}, queue, {
            tasks: queue.tasks.filter(function (task) {
              return tasksToCancel.indexOf(task) === -1;
            })
          });
        }).filter(function (queue, idx) {
          return queue.tasks.length > 0 || idx === 0;
        });
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();

        if (queue.length) {
          var task = queue.shift();

          try {
            if (task.gen) {
              DEBUG;

              this._genPromise(task);
            } else if (task.run) {
              DEBUG;
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG;
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];

        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();

          DEBUG;
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        var _this2 = this;

        this._queueStack.push({
          tasks: [],
          popable: false
        });

        var stackIdx = this._queueStack.length - 1;
        DEBUG;
        DEBUG;
        task.gen().then(function () {
          DEBUG;
          _this2._queueStack[stackIdx].popable = true;
          _this2.hasTasksToProcess() && _this2._onMoreTasks();
        }).catch(function (ex) {
          ex.message = "TaskQueue: Error resolving Promise in task " + task.name + ": " + ex.message;
          throw ex;
        }).done();
      }
    }]);

    return TaskQueue;
  }();

  module.exports = TaskQueue;
},190,[48,21,22,140,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedAddition = function (_AnimatedWithChildren) {
    _inherits(AnimatedAddition, _AnimatedWithChildren);

    function AnimatedAddition(a, b) {
      var _this;

      _classCallCheck(this, AnimatedAddition);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedAddition).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedAddition.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedAddition.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedAddition;
  }(AnimatedWithChildren);

  module.exports = AnimatedAddition;
},191,[21,22,34,37,38,40,185,186,184,188]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedDiffClamp = function (_AnimatedWithChildren) {
    _inherits(AnimatedDiffClamp, _AnimatedWithChildren);

    function AnimatedDiffClamp(a, min, max) {
      var _this;

      _classCallCheck(this, AnimatedDiffClamp);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedDiffClamp).call(this));
      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }

    _createClass(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _get(_getPrototypeOf(AnimatedDiffClamp.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();

        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _get(_getPrototypeOf(AnimatedDiffClamp.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max
        };
      }
    }]);

    return AnimatedDiffClamp;
  }(AnimatedWithChildren);

  module.exports = AnimatedDiffClamp;
},192,[21,22,34,37,38,40,185,186,188]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedDivision = function (_AnimatedWithChildren) {
    _inherits(AnimatedDivision, _AnimatedWithChildren);

    function AnimatedDivision(a, b) {
      var _this;

      _classCallCheck(this, AnimatedDivision);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedDivision).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedDivision.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();

        var b = this._b.__getValue();

        if (b === 0) {
          console.error('Detected division by zero in AnimatedDivision');
        }

        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedDivision.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedDivision;
  }(AnimatedWithChildren);

  module.exports = AnimatedDivision;
},193,[21,22,34,37,38,40,185,186,184,188]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedModulo = function (_AnimatedWithChildren) {
    _inherits(AnimatedModulo, _AnimatedWithChildren);

    function AnimatedModulo(a, modulus) {
      var _this;

      _classCallCheck(this, AnimatedModulo);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedModulo).call(this));
      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }

    _createClass(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        _get(_getPrototypeOf(AnimatedModulo.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        _get(_getPrototypeOf(AnimatedModulo.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus
        };
      }
    }]);

    return AnimatedModulo;
  }(AnimatedWithChildren);

  module.exports = AnimatedModulo;
},194,[21,22,34,37,38,40,185,186,188]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedMultiplication = function (_AnimatedWithChildren) {
    _inherits(AnimatedMultiplication, _AnimatedWithChildren);

    function AnimatedMultiplication(a, b) {
      var _this;

      _classCallCheck(this, AnimatedMultiplication);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedMultiplication).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedMultiplication.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedMultiplication.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedMultiplication;
  }(AnimatedWithChildren);

  module.exports = AnimatedMultiplication;
},195,[21,22,34,37,38,40,185,186,184,188]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _get = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedStyle = _$$_REQUIRE(_dependencyMap[9]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[10]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[11]);

  var invariant = _$$_REQUIRE(_dependencyMap[12]);

  var AnimatedProps = function (_AnimatedNode) {
    _inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, callback) {
      var _this;

      _classCallCheck(this, AnimatedProps);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedProps).call(this));

      if (props.style) {
        props = _objectSpread({}, props, {
          style: new AnimatedStyle(props.style)
        });
      }

      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _createClass(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative || value instanceof AnimatedStyle) {
              props[key] = value.__getValue();
            }
          } else if (value instanceof AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }

        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            props[key] = value.__getAnimatedValue();
          }
        }

        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && this._animatedView) {
          this.__disconnectAnimatedView();
        }

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        _get(_getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        if (!this.__isNative) {
          this.__isNative = true;

          for (var key in this._props) {
            var value = this._props[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }

          if (this._animatedView) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;

        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        invariant(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
        invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
        NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var propsConfig = {};

        for (var propKey in this._props) {
          var value = this._props[propKey];

          if (value instanceof AnimatedNode) {
            propsConfig[propKey] = value.__getNativeTag();
          }
        }

        return {
          type: 'props',
          props: propsConfig
        };
      }
    }]);

    return AnimatedProps;
  }(AnimatedNode);

  module.exports = AnimatedProps;
},196,[48,21,22,34,37,38,40,183,186,197,187,83,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _get = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedTransform = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[10]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[11]);

  var AnimatedStyle = function (_AnimatedWithChildren) {
    _inherits(AnimatedStyle, _AnimatedWithChildren);

    function AnimatedStyle(style) {
      var _this;

      _classCallCheck(this, AnimatedStyle);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedStyle).call(this));
      style = flattenStyle(style) || {};

      if (style.transform) {
        style = _objectSpread({}, style, {
          transform: new AnimatedTransform(style.transform)
        });
      }

      _this._style = style;
      return _this;
    }

    _createClass(AnimatedStyle, [{
      key: "_walkStyleAndGetValues",
      value: function _walkStyleAndGetValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            if (!value.__isNative) {
              updatedStyle[key] = value.__getValue();
            }
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetValues(value);
          } else {
            updatedStyle[key] = value;
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._walkStyleAndGetValues(this._style);
      }
    }, {
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof AnimatedNode) {
            updatedStyle[key] = value.__getAnimatedValue();
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(this);
          }
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(this);
          }
        }

        _get(_getPrototypeOf(AnimatedStyle.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative() {
        for (var key in this._style) {
          var value = this._style[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }

        _get(_getPrototypeOf(AnimatedStyle.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var styleConfig = {};

        for (var styleKey in this._style) {
          if (this._style[styleKey] instanceof AnimatedNode) {
            styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
          }
        }

        NativeAnimatedHelper.validateStyles(styleConfig);
        return {
          type: 'style',
          style: styleConfig
        };
      }
    }]);

    return AnimatedStyle;
  }(AnimatedWithChildren);

  module.exports = AnimatedStyle;
},197,[48,21,22,34,37,38,40,186,198,188,187,79]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[7]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedTransform = function (_AnimatedWithChildren) {
    _inherits(AnimatedTransform, _AnimatedWithChildren);

    function AnimatedTransform(transforms) {
      var _this;

      _classCallCheck(this, AnimatedTransform);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedTransform).call(this));
      _this._transforms = transforms;
      return _this;
    }

    _createClass(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__makeNative();
            }
          }
        });

        _get(_getPrototypeOf(AnimatedTransform.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this._transforms.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              result[key] = value.__getAnimatedValue();
            } else {
              result[key] = value;
            }
          }

          return result;
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var _this2 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__addChild(_this2);
            }
          }
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this3 = this;

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              value.__removeChild(_this3);
            }
          }
        });

        _get(_getPrototypeOf(AnimatedTransform.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transConfigs = [];

        this._transforms.forEach(function (transform) {
          for (var key in transform) {
            var value = transform[key];

            if (value instanceof AnimatedNode) {
              transConfigs.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transConfigs.push({
                type: 'static',
                property: key,
                value: value
              });
            }
          }
        });

        NativeAnimatedHelper.validateTransform(transConfigs);
        return {
          type: 'transform',
          transforms: transConfigs
        };
      }
    }]);

    return AnimatedTransform;
  }(AnimatedWithChildren);

  module.exports = AnimatedTransform;
},198,[21,22,34,37,38,40,186,188,187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedInterpolation = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedSubtraction = function (_AnimatedWithChildren) {
    _inherits(AnimatedSubtraction, _AnimatedWithChildren);

    function AnimatedSubtraction(a, b) {
      var _this;

      _classCallCheck(this, AnimatedSubtraction);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedSubtraction).call(this));
      _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
      _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
      return _this;
    }

    _createClass(AnimatedSubtraction, [{
      key: "__makeNative",
      value: function __makeNative() {
        this._a.__makeNative();

        this._b.__makeNative();

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__makeNative", this).call(this);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);

        this._b.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);

        this._b.__removeChild(this);

        _get(_getPrototypeOf(AnimatedSubtraction.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'subtraction',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
        };
      }
    }]);

    return AnimatedSubtraction;
  }(AnimatedWithChildren);

  module.exports = AnimatedSubtraction;
},199,[21,22,34,37,38,40,185,186,184,188]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _get = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedNode = _$$_REQUIRE(_dependencyMap[8]);

  var _require = _$$_REQUIRE(_dependencyMap[9]),
      generateNewAnimationId = _require.generateNewAnimationId,
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var AnimatedTracking = function (_AnimatedNode) {
    _inherits(AnimatedTracking, _AnimatedNode);

    function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
      var _this;

      _classCallCheck(this, AnimatedTracking);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedTracking).call(this));
      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._useNativeDriver = shouldUseNativeDriver(animationConfig);
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _createClass(AnimatedTracking, [{
      key: "__makeNative",
      value: function __makeNative() {
        this.__isNative = true;

        this._parent.__makeNative();

        _get(_getPrototypeOf(AnimatedTracking.prototype), "__makeNative", this).call(this);

        this._value.__makeNative();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);

        if (this._useNativeDriver) {
          this.__makeNative();
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);

        _get(_getPrototypeOf(AnimatedTracking.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass(_objectSpread({}, this._animationConfig, {
          toValue: this._animationConfig.toValue.__getValue()
        })), this._callback);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var animation = new this._animationClass(_objectSpread({}, this._animationConfig, {
          toValue: undefined
        }));

        var animationConfig = animation.__getNativeAnimationConfig();

        return {
          type: 'tracking',
          animationId: generateNewAnimationId(),
          animationConfig: animationConfig,
          toValue: this._parent.__getNativeTag(),
          value: this._value.__getNativeTag()
        };
      }
    }]);

    return AnimatedTracking;
  }(AnimatedNode);

  module.exports = AnimatedTracking;
},200,[48,21,22,34,37,38,40,184,186,187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[6]);

  var invariant = _$$_REQUIRE(_dependencyMap[7]);

  var _uniqueId = 1;

  var AnimatedValueXY = function (_AnimatedWithChildren) {
    _inherits(AnimatedValueXY, _AnimatedWithChildren);

    function AnimatedValueXY(valueIn) {
      var _this;

      _classCallCheck(this, AnimatedValueXY);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedValueXY).call(this));
      var value = valueIn || {
        x: 0,
        y: 0
      };

      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new AnimatedValue(value.x);
        _this.y = new AnimatedValue(value.y);
      } else {
        invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, "AnimatedValueXY must be initialized with an object of numbers or AnimatedValues.");
        _this.x = value.x;
        _this.y = value.y;
      }

      _this._listeners = {};
      return _this;
    }

    _createClass(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback(_ref) {
          var number = _ref.value;
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }]);

    return AnimatedValueXY;
  }(AnimatedWithChildren);

  module.exports = AnimatedValueXY;
},201,[21,22,34,37,40,184,188,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var Animation = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var DecayAnimation = function (_Animation) {
    _inherits(DecayAnimation, _Animation);

    function DecayAnimation(config) {
      var _this;

      _classCallCheck(this, DecayAnimation);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DecayAnimation).call(this));
      _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
      _this._velocity = config.velocity;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      return _this;
    }

    _createClass(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        this.__active = true;
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._startTime = Date.now();

        if (this._useNativeDriver) {
          this.__startNativeAnimation(animatedValue);
        } else {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

        this._onUpdate(value);

        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._lastValue = value;

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(_getPrototypeOf(DecayAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return DecayAnimation;
  }(Animation);

  module.exports = DecayAnimation;
},202,[21,22,34,37,38,40,203,187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[2]);

  var Animation = function () {
    function Animation() {
      _classCallCheck(this, Animation);
    }

    _createClass(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {
        if (this.__nativeId) {
          NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
        }
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__debouncedOnEnd",
      value: function __debouncedOnEnd(result) {
        var onEnd = this.__onEnd;
        this.__onEnd = null;
        onEnd && onEnd(result);
      }
    }, {
      key: "__startNativeAnimation",
      value: function __startNativeAnimation(animatedValue) {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      }
    }]);

    return Animation;
  }();

  module.exports = Animation;
},203,[21,22,187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[7]);

  var Animation = _$$_REQUIRE(_dependencyMap[8]);

  var SpringConfig = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var _require = _$$_REQUIRE(_dependencyMap[11]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    _inherits(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      var _this;

      _classCallCheck(this, SpringAnimation);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SpringAnimation).call(this));
      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);
      _this._useNativeDriver = shouldUseNativeDriver(config);
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      invariant(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      invariant(_this._damping > 0, 'Damping value must be greater than 0');
      invariant(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    _createClass(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;
        this._lastTime = Date.now();
        this._frameTime = 0.0;

        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }

        var start = function start() {
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2.onUpdate();
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();

        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }

        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;

        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);

          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }

        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;

        this._onUpdate(position);

        if (!this.__active) {
          return;
        }

        var isOvershooting = false;

        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }

        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;

        var isDisplacement = true;

        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }

        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;

            this._onUpdate(this._toValue);
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(_getPrototypeOf(SpringAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return SpringAnimation;
  }(Animation);

  module.exports = SpringAnimation;
},204,[21,22,34,37,38,40,184,201,203,205,6,187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},205,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _get = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var AnimatedValue = _$$_REQUIRE(_dependencyMap[6]);

  var AnimatedValueXY = _$$_REQUIRE(_dependencyMap[7]);

  var Animation = _$$_REQUIRE(_dependencyMap[8]);

  var _require = _$$_REQUIRE(_dependencyMap[9]),
      shouldUseNativeDriver = _require.shouldUseNativeDriver;

  var _easeInOut;

  function easeInOut() {
    if (!_easeInOut) {
      var Easing = _$$_REQUIRE(_dependencyMap[10]);

      _easeInOut = Easing.inOut(Easing.ease);
    }

    return _easeInOut;
  }

  var TimingAnimation = function (_Animation) {
    _inherits(TimingAnimation, _Animation);

    function TimingAnimation(config) {
      var _this;

      _classCallCheck(this, TimingAnimation);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(TimingAnimation).call(this));
      _this._toValue = config.toValue;
      _this._easing = config.easing !== undefined ? config.easing : easeInOut();
      _this._duration = config.duration !== undefined ? config.duration : 500;
      _this._delay = config.delay !== undefined ? config.delay : 0;
      _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
      _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
      _this._useNativeDriver = shouldUseNativeDriver(config);
      return _this;
    }

    _createClass(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 16.666666666666668;
        var frames = [];

        for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
          frames.push(this._easing(dt / this._duration));
        }

        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames: frames,
          toValue: this._toValue,
          iterations: this.__iterations
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        var _this2 = this;

        this.__active = true;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this.__onEnd = onEnd;

        var start = function start() {
          if (_this2._duration === 0 && !_this2._useNativeDriver) {
            _this2._onUpdate(_this2._toValue);

            _this2.__debouncedOnEnd({
              finished: true
            });
          } else {
            _this2._startTime = Date.now();

            if (_this2._useNativeDriver) {
              _this2.__startNativeAnimation(animatedValue);
            } else {
              _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));
            }
          }
        };

        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();

        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }

          this.__debouncedOnEnd({
            finished: true
          });

          return;
        }

        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));

        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _get(_getPrototypeOf(TimingAnimation.prototype), "stop", this).call(this);

        this.__active = false;
        clearTimeout(this._timeout);
        global.cancelAnimationFrame(this._animationFrame);

        this.__debouncedOnEnd({
          finished: false
        });
      }
    }]);

    return TimingAnimation;
  }(Animation);

  module.exports = TimingAnimation;
},206,[21,22,34,37,38,40,184,201,203,187,207]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _ease;

  var Easing = function () {
    function Easing() {
      _classCallCheck(this, Easing);
    }

    _createClass(Easing, null, [{
      key: "step0",
      value: function step0(n) {
        return n > 0 ? 1 : 0;
      }
    }, {
      key: "step1",
      value: function step1(n) {
        return n >= 1 ? 1 : 0;
      }
    }, {
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        if (!_ease) {
          _ease = Easing.bezier(0.42, 0, 1, 1);
        }

        return _ease(t);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return t * t;
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return t * t * t;
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return Math.pow(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
        };
      }
    }, {
      key: "back",
      value: function back(s) {
        if (s === undefined) {
          s = 1.70158;
        }

        return function (t) {
          return t * t * ((s + 1) * t - s);
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        if (t < 0.36363636363636365) {
          return 7.5625 * t * t;
        }

        if (t < 0.7272727272727273) {
          t -= 0.5454545454545454;
          return 7.5625 * t * t + 0.75;
        }

        if (t < 0.9090909090909091) {
          t -= 0.8181818181818182;
          return 7.5625 * t * t + 0.9375;
        }

        t -= 0.9545454545454546;
        return 7.5625 * t * t + 0.984375;
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        var _bezier = _$$_REQUIRE(_dependencyMap[2]);

        return _bezier(x1, y1, x2, y2);
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return 1 - easing(1 - t);
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          if (t < 0.5) {
            return easing(t * 2) / 2;
          }

          return 1 - easing((1 - t) * 2) / 2;
        };
      }
    }]);

    return Easing;
  }();

  module.exports = Easing;
},207,[21,22,208]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 0.1;
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  module.exports = function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = 10;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  };
},208,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      AnimatedEvent = _require.AnimatedEvent;

  var AnimatedProps = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[10]);

  var invariant = _$$_REQUIRE(_dependencyMap[11]);

  function createAnimatedComponent(Component) {
    invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, "`createAnimatedComponent` does not support stateless functional components; use a class component instead.");

    var AnimatedComponent = function (_React$Component) {
      _inherits(AnimatedComponent, _React$Component);

      function AnimatedComponent(props) {
        var _this;

        _classCallCheck(this, AnimatedComponent);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedComponent).call(this, props));
        _this._invokeAnimatedPropsCallbackOnMount = false;
        _this._eventDetachers = [];

        _this._animatedPropsCallback = function () {
          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY || typeof _this._component.setNativeProps !== 'function') {
            _this.forceUpdate();
          } else if (!_this._propsAnimated.__isNative) {
            _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
          } else {
            throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
          }
        };

        _this._setComponentRef = _this._setComponentRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
        return _this;
      }

      _createClass(AnimatedComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "UNSAFE_componentWillMount",
        value: function UNSAFE_componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();
        }
      }, {
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var _this2 = this;

          var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

          var _loop = function _loop(key) {
            var prop = _this2.props[key];

            if (prop instanceof AnimatedEvent && prop.__isNative) {
              prop.__attach(scrollableNode, key);

              _this2._eventDetachers.push(function () {
                return prop.__detach(scrollableNode, key);
              });
            }
          };

          for (var key in this.props) {
            _loop(key);
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          this._eventDetachers.forEach(function (remove) {
            return remove();
          });

          this._eventDetachers = [];
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);
          oldPropsAnimated && oldPropsAnimated.__detach();
        }
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(newProps) {
          this._attachProps(newProps);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this._component !== this._prevComponent) {
            this._propsAnimated.setNativeView(this._component);
          }

          if (this._component !== this._prevComponent || prevProps !== this.props) {
            this._detachNativeEvents();

            this._attachNativeEvents();
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._propsAnimated.__getValue();

          return React.createElement(Component, _extends({}, props, {
            ref: this._setComponentRef,
            collapsable: this._propsAnimated.__isNative ? false : props.collapsable
          }));
        }
      }, {
        key: "_setComponentRef",
        value: function _setComponentRef(c) {
          this._prevComponent = this._component;
          this._component = c;
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this._component;
        }
      }]);

      return AnimatedComponent;
    }(React.Component);

    AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY = false;
    var propTypes = Component.propTypes;
    AnimatedComponent.propTypes = {
      style: function style(props, propName, componentName) {
        if (!propTypes) {
          return;
        }

        for (var key in ViewStylePropTypes) {
          if (!propTypes[key] && props[key] !== undefined) {
            console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
          }
        }
      }
    };
    return AnimatedComponent;
  }

  module.exports = createAnimatedComponent;
},209,[3,21,22,34,37,40,36,183,196,51,73,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _createClass = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[6]);

  var MetroListView = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var View = _$$_REQUIRE(_dependencyMap[9]);

  var VirtualizedList = _$$_REQUIRE(_dependencyMap[10]);

  var ListView = _$$_REQUIRE(_dependencyMap[11]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[12]);

  var invariant = _$$_REQUIRE(_dependencyMap[13]);

  var defaultProps = _objectSpread({}, VirtualizedList.defaultProps, {
    numColumns: 1
  });

  var FlatList = function (_React$PureComponent) {
    _inherits(FlatList, _React$PureComponent);

    _createClass(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }]);

    function FlatList(props) {
      var _this;

      _classCallCheck(this, FlatList);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FlatList).call(this, props));
      _this._hasWarnedLegacy = false;
      _this._virtualizedListPairs = [];

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._getItem = function (data, index) {
        var numColumns = _this.props.numColumns;

        if (numColumns > 1) {
          var ret = [];

          for (var kk = 0; kk < numColumns; kk++) {
            var _item = data[index * numColumns + kk];

            if (_item != null) {
              ret.push(_item);
            }
          }

          return ret;
        } else {
          return data[index];
        }
      };

      _this._getItemCount = function (data) {
        return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
      };

      _this._keyExtractor = function (items, index) {
        var _this$props = _this.props,
            keyExtractor = _this$props.keyExtractor,
            numColumns = _this$props.numColumns;

        if (numColumns > 1) {
          invariant(Array.isArray(items), "FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.", numColumns);
          return items.map(function (it, kk) {
            return keyExtractor(it, index * numColumns + kk);
          }).join(':');
        } else {
          return keyExtractor(items, index);
        }
      };

      _this._renderItem = function (info) {
        var _this$props2 = _this.props,
            renderItem = _this$props2.renderItem,
            numColumns = _this$props2.numColumns,
            columnWrapperStyle = _this$props2.columnWrapperStyle;

        if (numColumns > 1) {
          var _item2 = info.item,
              _index = info.index;
          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
          return React.createElement(View, {
            style: StyleSheet.compose(styles.row, columnWrapperStyle)
          }, _item2.map(function (it, kk) {
            var element = renderItem({
              item: it,
              index: _index * numColumns + kk,
              separators: info.separators
            });
            return element && React.cloneElement(element, {
              key: kk
            });
          }));
        } else {
          return renderItem(info);
        }
      };

      _this._checkProps(_this.props);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityConfig: pair.viewabilityConfig,
            onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)
        });
      }

      return _this;
    }

    _createClass(FlatList, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        invariant(prevProps.numColumns === this.props.numColumns, "Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component.");
        invariant(prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');
        invariant(prevProps.viewabilityConfig === this.props.viewabilityConfig, 'Changing viewabilityConfig on the fly is not supported');
        invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');

        this._checkProps(this.props);
      }
    }, {
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
            getItemCount = props.getItemCount,
            horizontal = props.horizontal,
            legacyImplementation = props.legacyImplementation,
            numColumns = props.numColumns,
            columnWrapperStyle = props.columnWrapperStyle,
            onViewableItemsChanged = props.onViewableItemsChanged,
            viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');

        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }

        if (legacyImplementation) {
          invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

          if (!this._hasWarnedLegacy) {
            console.warn("FlatList: Using legacyImplementation - some features not supported and performance may suffer");
            this._hasWarnedLegacy = true;
          }
        }

        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), "FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs.");
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var _this$props3 = this.props,
            numColumns = _this$props3.numColumns,
            keyExtractor = _this$props3.keyExtractor;
        v.item.forEach(function (item, ii) {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push(_objectSpread({}, v, {
            item: item,
            key: keyExtractor(item, index),
            index: index
          }));
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        var _this2 = this;

        return function (info) {
          var numColumns = _this2.props.numColumns;

          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var changed = [];
              var viewableItems = [];
              info.viewableItems.forEach(function (v) {
                return _this2._pushMultiColumnViewable(viewableItems, v);
              });
              info.changed.forEach(function (v) {
                return _this2._pushMultiColumnViewable(changed, v);
              });
              onViewableItemsChanged({
                viewableItems: viewableItems,
                changed: changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.legacyImplementation) {
          return React.createElement(MetroListView, _extends({}, this.props, {
            items: this.props.data,
            ref: this._captureRef
          }));
        } else {
          return React.createElement(VirtualizedList, _extends({}, this.props, {
            renderItem: this._renderItem,
            getItem: this._getItem,
            getItemCount: this._getItemCount,
            keyExtractor: this._keyExtractor,
            ref: this._captureRef,
            viewabilityConfigCallbackPairs: this._virtualizedListPairs
          }));
        }
      }
    }]);

    return FlatList;
  }(React.PureComponent);

  FlatList.defaultProps = defaultProps;
  var styles = StyleSheet.create({
    row: {
      flexDirection: 'row'
    }
  });
  module.exports = FlatList;
},210,[3,21,34,37,22,40,48,211,51,80,233,212,54,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var ListView = _$$_REQUIRE(_dependencyMap[6]);

  var React = _$$_REQUIRE(_dependencyMap[7]);

  var RefreshControl = _$$_REQUIRE(_dependencyMap[8]);

  var ScrollView = _$$_REQUIRE(_dependencyMap[9]);

  var invariant = _$$_REQUIRE(_dependencyMap[10]);

  var MetroListView = function (_React$Component) {
    _inherits(MetroListView, _React$Component);

    function MetroListView() {
      var _getPrototypeOf2,
          _this2 = this;

      var _this;

      _classCallCheck(this, MetroListView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MetroListView)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = _this._computeState(_this.props, {
        ds: new ListView.DataSource({
          rowHasChanged: function rowHasChanged(itemA, itemB) {
            return true;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged() {
            return true;
          },
          getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
            return _this.state.sectionHeaderData[sectionID];
          }
        }),
        sectionHeaderData: {}
      });

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this._renderFooter = function () {
        return React.createElement(_this2.props.FooterComponent, {
          key: "$footer"
        });
      };

      _this._renderRow = function (item, sectionID, rowID, highlightRow) {
        return _this.props.renderItem({
          item: item,
          index: rowID
        });
      };

      _this._renderSectionHeader = function (section, sectionID) {
        var renderSectionHeader = _this.props.renderSectionHeader;
        invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
        return renderSectionHeader({
          section: section
        });
      };

      _this._renderSeparator = function (sID, rID) {
        return React.createElement(_this2.props.SeparatorComponent, {
          key: sID + rID
        });
      };

      return _this;
    }

    _createClass(MetroListView, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        throw new Error('scrollToEnd not supported in legacy ListView.');
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        throw new Error('scrollToIndex not supported in legacy ListView.');
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        throw new Error('scrollToItem not supported in legacy ListView.');
      }
    }, {
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        throw new Error('scrollToLocation not supported in legacy ListView.');
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._listRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        var _this3 = this;

        this.setState(function (state) {
          return _this3._computeState(newProps, state);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(ListView, _extends({}, this.props, {
          dataSource: this.state.ds,
          ref: this._captureRef,
          renderRow: this._renderRow,
          renderFooter: this.props.FooterComponent && this._renderFooter,
          renderSectionHeader: this.props.sections && this._renderSectionHeader,
          renderSeparator: this.props.SeparatorComponent && this._renderSeparator
        }));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props, state) {
        var sectionHeaderData = {};

        if (props.sections) {
          invariant(!props.items, 'Cannot have both sections and items props.');
          var sections = {};
          props.sections.forEach(function (sectionIn, ii) {
            var sectionID = 's' + ii;
            sections[sectionID] = sectionIn.data;
            sectionHeaderData[sectionID] = sectionIn;
          });
          return {
            ds: state.ds.cloneWithRowsAndSections(sections),
            sectionHeaderData: sectionHeaderData
          };
        } else {
          invariant(!props.sections, 'Cannot have both sections and items props.');
          return {
            ds: state.ds.cloneWithRows(props.items),
            sectionHeaderData: sectionHeaderData
          };
        }
      }
    }]);

    return MetroListView;
  }(React.Component);

  MetroListView.defaultProps = {
    keyExtractor: function keyExtractor(item, index) {
      return item.key || String(index);
    },
    renderScrollComponent: function renderScrollComponent(props) {
      if (props.onRefresh) {
        return React.createElement(ScrollView, _extends({}, props, {
          refreshControl: React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: props.onRefresh
          })
        }));
      } else {
        return React.createElement(ScrollView, props);
      }
    }
  };
  module.exports = MetroListView;
},211,[3,21,22,34,37,40,212,51,232,216,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var InternalListViewType = _$$_REQUIRE(_dependencyMap[2]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[6]);

  var RCTScrollViewManager = _$$_REQUIRE(_dependencyMap[7]).ScrollViewManager;

  var ScrollView = _$$_REQUIRE(_dependencyMap[8]);

  var ScrollResponder = _$$_REQUIRE(_dependencyMap[9]);

  var StaticRenderer = _$$_REQUIRE(_dependencyMap[10]);

  var TimerMixin = _$$_REQUIRE(_dependencyMap[11]);

  var View = _$$_REQUIRE(_dependencyMap[12]);

  var cloneReferencedElement = _$$_REQUIRE(_dependencyMap[13]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[14]);

  var isEmpty = _$$_REQUIRE(_dependencyMap[15]);

  var merge = _$$_REQUIRE(_dependencyMap[16]);

  var DEFAULT_PAGE_SIZE = 1;
  var DEFAULT_INITIAL_ROWS = 10;
  var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
  var DEFAULT_END_REACHED_THRESHOLD = 1000;
  var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;
  var ListView = createReactClass({
    displayName: 'ListView',
    _childFrames: [],
    _sentEndForContentLength: null,
    _scrollComponent: null,
    _prevRenderedRowsCount: 0,
    _visibleRows: {},
    scrollProperties: {},
    mixins: [ScrollResponder.Mixin, TimerMixin],
    statics: {
      DataSource: ListViewDataSource
    },
    getMetrics: function getMetrics() {
      return {
        contentLength: this.scrollProperties.contentLength,
        totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
        renderedRows: this.state.curRenderedRowsCount,
        visibleRows: Object.keys(this._visibleRows).length
      };
    },
    getScrollResponder: function getScrollResponder() {
      if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
        return this._scrollComponent.getScrollResponder();
      }
    },
    getScrollableNode: function getScrollableNode() {
      if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
        return this._scrollComponent.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollComponent);
      }
    },
    scrollTo: function scrollTo() {
      if (this._scrollComponent && this._scrollComponent.scrollTo) {
        var _this$_scrollComponen;

        (_this$_scrollComponen = this._scrollComponent).scrollTo.apply(_this$_scrollComponen, arguments);
      }
    },
    scrollToEnd: function scrollToEnd(options) {
      if (this._scrollComponent) {
        if (this._scrollComponent.scrollToEnd) {
          this._scrollComponent.scrollToEnd(options);
        } else {
          console.warn("The scroll component used by the ListView does not support scrollToEnd. Check the renderScrollComponent prop of your ListView.");
        }
      }
    },
    flashScrollIndicators: function flashScrollIndicators() {
      if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
        this._scrollComponent.flashScrollIndicators();
      }
    },
    setNativeProps: function setNativeProps(props) {
      if (this._scrollComponent) {
        this._scrollComponent.setNativeProps(props);
      }
    },
    getDefaultProps: function getDefaultProps() {
      return {
        initialListSize: DEFAULT_INITIAL_ROWS,
        pageSize: DEFAULT_PAGE_SIZE,
        renderScrollComponent: function renderScrollComponent(props) {
          return React.createElement(ScrollView, props);
        },
        scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
        onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
        stickySectionHeadersEnabled: true,
        stickyHeaderIndices: []
      };
    },
    getInitialState: function getInitialState() {
      return {
        curRenderedRowsCount: this.props.initialListSize,
        highlightedRow: {}
      };
    },
    getInnerViewNode: function getInnerViewNode() {
      return this._scrollComponent && this._scrollComponent.getInnerViewNode();
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.scrollProperties = {
        visibleLength: null,
        contentLength: null,
        offset: 0
      };
      this._childFrames = [];
      this._visibleRows = {};
      this._prevRenderedRowsCount = 0;
      this._sentEndForContentLength = null;
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      this.requestAnimationFrame(function () {
        _this._measureAndUpdateScrollProps();
      });
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
        this.setState(function (state, props) {
          _this2._prevRenderedRowsCount = 0;
          return {
            curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
          };
        }, function () {
          return _this2._renderMoreRowsIfNeeded();
        });
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var _this3 = this;

      this.requestAnimationFrame(function () {
        _this3._measureAndUpdateScrollProps();
      });
    },
    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
      this.setState({
        highlightedRow: {
          sectionID: sectionID,
          rowID: rowID
        }
      });
    },
    render: function render() {
      var bodyComponents = [];
      var dataSource = this.props.dataSource;
      var allRowIDs = dataSource.rowIdentities;
      var rowCount = 0;
      var stickySectionHeaderIndices = [];
      var renderSectionHeader = this.props.renderSectionHeader;
      var header = this.props.renderHeader && this.props.renderHeader();
      var footer = this.props.renderFooter && this.props.renderFooter();
      var totalIndex = header ? 1 : 0;

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          if (this.props.enableEmptySections === undefined) {
            var warning = _$$_REQUIRE(_dependencyMap[17]);

            warning(false, "In next release empty section headers will be rendered. In this release you can use 'enableEmptySections' flag to render empty section headers.");
            continue;
          } else {
            var invariant = _$$_REQUIRE(_dependencyMap[18]);

            invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered. If empty section headers are not desirable their indices should be excluded from sectionIDs object. In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
          }
        }

        if (renderSectionHeader) {
          var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);

          if (element) {
            bodyComponents.push(React.cloneElement(element, {
              key: 's_' + sectionID
            }));

            if (this.props.stickySectionHeadersEnabled) {
              stickySectionHeaderIndices.push(totalIndex);
            }

            totalIndex++;
          }
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var comboID = sectionID + '_' + rowID;
          var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
          var row = React.createElement(StaticRenderer, {
            key: 'r_' + comboID,
            shouldUpdate: !!shouldUpdateRow,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted)
          });
          bodyComponents.push(row);
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
            var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);

            if (separator) {
              bodyComponents.push(React.createElement(View, {
                key: 's_' + comboID
              }, separator));
              totalIndex++;
            }
          }

          if (++rowCount === this.state.curRenderedRowsCount) {
            break;
          }
        }

        if (rowCount >= this.state.curRenderedRowsCount) {
          break;
        }
      }

      var _this$props = this.props,
          renderScrollComponent = _this$props.renderScrollComponent,
          props = _objectWithoutProperties(_this$props, ["renderScrollComponent"]);

      if (!props.scrollEventThrottle) {
        props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
      }

      if (props.removeClippedSubviews === undefined) {
        props.removeClippedSubviews = true;
      }

      _extends(props, {
        onScroll: this._onScroll,
        stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),
        onKeyboardWillShow: undefined,
        onKeyboardWillHide: undefined,
        onKeyboardDidShow: undefined,
        onKeyboardDidHide: undefined
      });

      return cloneReferencedElement(renderScrollComponent(props), {
        ref: this._setScrollComponentRef,
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
      }, header, bodyComponents, footer);
    },
    _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
      var scrollComponent = this.getScrollResponder();

      if (!scrollComponent || !scrollComponent.getInnerViewNode) {
        return;
      }

      RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
    },
    _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
      this._scrollComponent = scrollComponent;
    },
    _onContentSizeChange: function _onContentSizeChange(width, height) {
      var contentLength = !this.props.horizontal ? height : width;

      if (contentLength !== this.scrollProperties.contentLength) {
        this.scrollProperties.contentLength = contentLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _onLayout: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var visibleLength = !this.props.horizontal ? height : width;

      if (visibleLength !== this.scrollProperties.visibleLength) {
        this.scrollProperties.visibleLength = visibleLength;

        this._updateVisibleRows();

        this._renderMoreRowsIfNeeded();
      }

      this.props.onLayout && this.props.onLayout(event);
    },
    _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
      if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._sentEndForContentLength = this.scrollProperties.contentLength;
        this.props.onEndReached(event);
        return true;
      }

      return false;
    },
    _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
      if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
        this._maybeCallOnEndReached();

        return;
      }

      var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);

      if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
        this._pageInNewRows();
      }
    },
    _pageInNewRows: function _pageInNewRows() {
      var _this4 = this;

      this.setState(function (state, props) {
        var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
        _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
        return {
          curRenderedRowsCount: rowsToRender
        };
      }, function () {
        _this4._measureAndUpdateScrollProps();

        _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
      });
    },
    _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
      return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
    },
    _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
      var _this5 = this;

      if (!this.props.onChangeVisibleRows) {
        return;
      }

      if (updatedFrames) {
        updatedFrames.forEach(function (newFrame) {
          _this5._childFrames[newFrame.index] = merge(newFrame);
        });
      }

      var isVertical = !this.props.horizontal;
      var dataSource = this.props.dataSource;
      var visibleMin = this.scrollProperties.offset;
      var visibleMax = visibleMin + this.scrollProperties.visibleLength;
      var allRowIDs = dataSource.rowIdentities;
      var header = this.props.renderHeader && this.props.renderHeader();
      var totalIndex = header ? 1 : 0;
      var visibilityChanged = false;
      var changedRows = {};

      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var rowIDs = allRowIDs[sectionIdx];

        if (rowIDs.length === 0) {
          continue;
        }

        var sectionID = dataSource.sectionIdentities[sectionIdx];

        if (this.props.renderSectionHeader) {
          totalIndex++;
        }

        var visibleSection = this._visibleRows[sectionID];

        if (!visibleSection) {
          visibleSection = {};
        }

        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];
          var frame = this._childFrames[totalIndex];
          totalIndex++;

          if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
            totalIndex++;
          }

          if (!frame) {
            break;
          }

          var rowVisible = visibleSection[rowID];
          var min = isVertical ? frame.y : frame.x;
          var max = min + (isVertical ? frame.height : frame.width);

          if (!min && !max || min === max) {
            break;
          }

          if (min > visibleMax || max < visibleMin) {
            if (rowVisible) {
              visibilityChanged = true;
              delete visibleSection[rowID];

              if (!changedRows[sectionID]) {
                changedRows[sectionID] = {};
              }

              changedRows[sectionID][rowID] = false;
            }
          } else if (!rowVisible) {
            visibilityChanged = true;
            visibleSection[rowID] = true;

            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }

            changedRows[sectionID][rowID] = true;
          }
        }

        if (!isEmpty(visibleSection)) {
          this._visibleRows[sectionID] = visibleSection;
        } else if (this._visibleRows[sectionID]) {
          delete this._visibleRows[sectionID];
        }
      }

      visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
    },
    _onScroll: function _onScroll(e) {
      var isVertical = !this.props.horizontal;
      this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
      this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
      this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];

      this._updateVisibleRows(e.nativeEvent.updatedChildFrames);

      if (!this._maybeCallOnEndReached(e)) {
        this._renderMoreRowsIfNeeded();
      }

      if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
        this._sentEndForContentLength = null;
      }

      this.props.onScroll && this.props.onScroll(e);
    }
  });
  module.exports = ListView;
},212,[3,9,213,214,50,51,83,8,216,217,229,230,80,231,225,215,163,104,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[6]);

  var InternalListViewType = function (_React$Component) {
    "use strict";

    _inherits(InternalListViewType, _React$Component);

    function InternalListViewType() {
      _classCallCheck(this, InternalListViewType);

      return _possibleConstructorReturn(this, _getPrototypeOf(InternalListViewType).apply(this, arguments));
    }

    _createClass(InternalListViewType, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {}
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {}
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {}
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {}
    }, {
      key: "getMetrics",
      value: function getMetrics() {}
    }, {
      key: "scrollTo",
      value: function scrollTo() {}
    }, {
      key: "scrollToEnd",
      value: function scrollToEnd(options) {}
    }]);

    return InternalListViewType;
  }(React.Component);

  InternalListViewType.DataSource = ListViewDataSource;
  module.exports = InternalListViewType;
},213,[21,22,34,37,40,51,214]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var isEmpty = _$$_REQUIRE(_dependencyMap[4]);

  var warning = _$$_REQUIRE(_dependencyMap[5]);

  function defaultGetRowData(dataBlob, sectionID, rowID) {
    return dataBlob[sectionID][rowID];
  }

  function defaultGetSectionHeaderData(dataBlob, sectionID) {
    return dataBlob[sectionID];
  }

  var ListViewDataSource = function () {
    function ListViewDataSource(params) {
      _classCallCheck(this, ListViewDataSource);

      invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
      this._rowHasChanged = params.rowHasChanged;
      this._getRowData = params.getRowData || defaultGetRowData;
      this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
      this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;
      this._dataBlob = null;
      this._dirtyRows = [];
      this._dirtySections = [];
      this._cachedRowCount = 0;
      this.rowIdentities = [];
      this.sectionIdentities = [];
    }

    _createClass(ListViewDataSource, [{
      key: "cloneWithRows",
      value: function cloneWithRows(dataBlob, rowIdentities) {
        var rowIds = rowIdentities ? [_toConsumableArray(rowIdentities)] : null;

        if (!this._sectionHeaderHasChanged) {
          this._sectionHeaderHasChanged = function () {
            return false;
          };
        }

        return this.cloneWithRowsAndSections({
          s1: dataBlob
        }, ['s1'], rowIds);
      }
    }, {
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
        invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');
        var newSource = new ListViewDataSource({
          getRowData: this._getRowData,
          getSectionHeaderData: this._getSectionHeaderData,
          rowHasChanged: this._rowHasChanged,
          sectionHeaderHasChanged: this._sectionHeaderHasChanged
        });
        newSource._dataBlob = dataBlob;

        if (sectionIdentities) {
          newSource.sectionIdentities = sectionIdentities;
        } else {
          newSource.sectionIdentities = Object.keys(dataBlob);
        }

        if (rowIdentities) {
          newSource.rowIdentities = rowIdentities;
        } else {
          newSource.rowIdentities = [];
          newSource.sectionIdentities.forEach(function (sectionID) {
            newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
          });
        }

        newSource._cachedRowCount = countRows(newSource.rowIdentities);

        newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

        return newSource;
      }
    }, {
      key: "getRowCount",
      value: function getRowCount() {
        return this._cachedRowCount;
      }
    }, {
      key: "getRowAndSectionCount",
      value: function getRowAndSectionCount() {
        return this._cachedRowCount + this.sectionIdentities.length;
      }
    }, {
      key: "rowShouldUpdate",
      value: function rowShouldUpdate(sectionIndex, rowIndex) {
        var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
        return needsUpdate;
      }
    }, {
      key: "getRowData",
      value: function getRowData(sectionIndex, rowIndex) {
        var sectionID = this.sectionIdentities[sectionIndex];
        var rowID = this.rowIdentities[sectionIndex][rowIndex];
        warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
        return this._getRowData(this._dataBlob, sectionID, rowID);
      }
    }, {
      key: "getRowIDForFlatIndex",
      value: function getRowIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.rowIdentities[ii][accessIndex];
          }
        }

        return null;
      }
    }, {
      key: "getSectionIDForFlatIndex",
      value: function getSectionIDForFlatIndex(index) {
        var accessIndex = index;

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          if (accessIndex >= this.rowIdentities[ii].length) {
            accessIndex -= this.rowIdentities[ii].length;
          } else {
            return this.sectionIdentities[ii];
          }
        }

        return null;
      }
    }, {
      key: "getSectionLengths",
      value: function getSectionLengths() {
        var results = [];

        for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
          results.push(this.rowIdentities[ii].length);
        }

        return results;
      }
    }, {
      key: "sectionHeaderShouldUpdate",
      value: function sectionHeaderShouldUpdate(sectionIndex) {
        var needsUpdate = this._dirtySections[sectionIndex];
        warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
        return needsUpdate;
      }
    }, {
      key: "getSectionHeaderData",
      value: function getSectionHeaderData(sectionIndex) {
        if (!this._getSectionHeaderData) {
          return null;
        }

        var sectionID = this.sectionIdentities[sectionIndex];
        warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
        return this._getSectionHeaderData(this._dataBlob, sectionID);
      }
    }, {
      key: "_calculateDirtyArrays",
      value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
        var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
        var prevRowsHash = {};

        for (var ii = 0; ii < prevRowIDs.length; ii++) {
          var sectionID = prevSectionIDs[ii];
          warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
          prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
        }

        this._dirtySections = [];
        this._dirtyRows = [];
        var dirty;

        for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
          var sectionID = this.sectionIdentities[sIndex];
          dirty = !prevSectionsHash[sectionID];
          var sectionHeaderHasChanged = this._sectionHeaderHasChanged;

          if (!dirty && sectionHeaderHasChanged) {
            dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
          }

          this._dirtySections.push(!!dirty);

          this._dirtyRows[sIndex] = [];

          for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
            var rowID = this.rowIdentities[sIndex][rIndex];
            dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));

            this._dirtyRows[sIndex].push(!!dirty);
          }
        }
      }
    }]);

    return ListViewDataSource;
  }();

  function countRows(allRowIDs) {
    var totalRows = 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      totalRows += rowIDs.length;
    }

    return totalRows;
  }

  function keyedDictionaryFromArray(arr) {
    if (isEmpty(arr)) {
      return {};
    }

    var result = {};

    for (var ii = 0; ii < arr.length; ii++) {
      var _key = arr[ii];
      warning(!result[_key], 'Value appears more than once in array: ' + _key);
      result[_key] = true;
    }

    return result;
  }

  module.exports = ListViewDataSource;
},214,[17,21,22,6,215,104]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function isEmpty(obj) {
    if (Array.isArray(obj)) {
      return obj.length === 0;
    } else if (typeof obj === 'object') {
      for (var i in obj) {
        return false;
      }

      return true;
    } else {
      return !obj;
    }
  }

  module.exports = isEmpty;
},215,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[2]);

  var Platform = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

  var ScrollResponder = _$$_REQUIRE(_dependencyMap[6]);

  var ScrollViewStickyHeader = _$$_REQUIRE(_dependencyMap[7]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[8]);

  var View = _$$_REQUIRE(_dependencyMap[9]);

  var InternalScrollViewType = _$$_REQUIRE(_dependencyMap[10]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[11]);

  var dismissKeyboard = _$$_REQUIRE(_dependencyMap[12]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[13]);

  var invariant = _$$_REQUIRE(_dependencyMap[14]);

  var processDecelerationRate = _$$_REQUIRE(_dependencyMap[15]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[16]);

  var warning = _$$_REQUIRE(_dependencyMap[17]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[18]);

  var AndroidScrollView;
  var AndroidHorizontalScrollContentView;
  var AndroidHorizontalScrollView;
  var RCTScrollView;
  var RCTScrollContentView;
  {
    RCTScrollView = requireNativeComponent('RCTScrollView');
    RCTScrollContentView = requireNativeComponent('RCTScrollContentView');
  }
  var ScrollView = createReactClass({
    displayName: 'ScrollView',
    mixins: [ScrollResponder.Mixin],
    _scrollAnimatedValue: new AnimatedImplementation.Value(0),
    _scrollAnimatedValueAttachment: null,
    _stickyHeaderRefs: new Map(),
    _headerLayoutYs: new Map(),
    getInitialState: function getInitialState() {
      return _objectSpread({}, this.scrollResponderMixinGetInitialState(), {
        layoutHeight: null
      });
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._scrollAnimatedValue = new AnimatedImplementation.Value(this.props.contentOffset ? this.props.contentOffset.y : 0);

      this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    },
    componentDidMount: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    },
    componentDidUpdate: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    },
    componentWillUnmount: function componentWillUnmount() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    },
    setNativeProps: function setNativeProps(props) {
      this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
    },
    getScrollResponder: function getScrollResponder() {
      return this;
    },
    getScrollableNode: function getScrollableNode() {
      return ReactNative.findNodeHandle(this._scrollViewRef);
    },
    getInnerViewNode: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    },
    scrollTo: function scrollTo(y, x, animated) {
      if (typeof y === 'number') {
        console.warn("`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.");
      } else {
        var _ref = y || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      this.getScrollResponder().scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    },
    scrollToEnd: function scrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      this.getScrollResponder().scrollResponderScrollToEnd({
        animated: animated
      });
    },
    scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
      var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
      this.scrollTo({
        x: x,
        y: y,
        animated: false
      });
    },
    flashScrollIndicators: function flashScrollIndicators() {
      this.getScrollResponder().scrollResponderFlashScrollIndicators();
    },
    _getKeyForIndex: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    },
    _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    },
    _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    },
    _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
      if (!this.props.stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY(layoutY);
      }
    },
    _handleScroll: function _handleScroll(e) {
      this.scrollResponderHandleScroll(e);
    },
    _handleLayout: function _handleLayout(e) {
      if (this.props.invertStickyHeaders) {
        this.setState({
          layoutHeight: e.nativeEvent.layout.height
        });
      }

      if (this.props.onLayout) {
        this.props.onLayout(e);
      }
    },
    _handleContentOnLayout: function _handleContentOnLayout(e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
    },
    _scrollViewRef: null,
    _setScrollViewRef: function _setScrollViewRef(ref) {
      this._scrollViewRef = ref;
    },
    _innerViewRef: null,
    _setInnerViewRef: function _setInnerViewRef(ref) {
      this._innerViewRef = ref;
    },
    render: function render() {
      var _this = this;

      var ScrollViewClass;
      var ScrollContentContainerViewClass;
      {
        ScrollViewClass = RCTScrollView;
        ScrollContentContainerViewClass = RCTScrollContentView;
      }
      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
      var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
      var children = hasStickyHeaders ? childArray.map(function (child, index) {
        var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

        if (indexOfIndex > -1) {
          var key = child.key;
          var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
          return React.createElement(ScrollViewStickyHeader, {
            key: key,
            ref: function ref(_ref2) {
              return _this._setStickyHeaderRef(key, _ref2);
            },
            nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
            onLayout: function onLayout(event) {
              return _this._onStickyHeaderLayout(index, event, key);
            },
            scrollAnimatedValue: _this._scrollAnimatedValue,
            inverted: _this.props.invertStickyHeaders,
            scrollViewHeight: _this.state.layoutHeight
          }, child);
        } else {
          return child;
        }
      }) : this.props.children;
      var contentContainer = React.createElement(ScrollContentContainerViewClass, _extends({}, contentSizeChangeProps, {
        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews: this.props.removeClippedSubviews,
        collapsable: false
      }), children);
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;

      var props = _objectSpread({}, this.props, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this.scrollResponderHandleResponderGrant,
        onResponderReject: this.scrollResponderHandleResponderReject,
        onResponderRelease: this.scrollResponderHandleResponderRelease,
        onResponderTerminate: this.scrollResponderHandleTerminate,
        onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
        onScroll: this._handleScroll,
        onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this.scrollResponderHandleTouchEnd,
        onTouchMove: this.scrollResponderHandleTouchMove,
        onTouchStart: this.scrollResponderHandleTouchStart,
        onTouchCancel: this.scrollResponderHandleTouchCancel,
        scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames,
        pagingEnabled: this.props.pagingEnabled && this.props.snapToInterval == null && this.props.snapToOffsets == null
      });

      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate != null) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        {
          return React.createElement(ScrollViewClass, _extends({}, props, {
            ref: this._setScrollViewRef
          }), Platform.isTV ? null : refreshControl, contentContainer);
        }
      }

      return React.createElement(ScrollViewClass, _extends({}, props, {
        ref: this._setScrollViewRef
      }), contentContainer);
    }
  });
  var TypedScrollView = ScrollView;
  var styles = StyleSheet.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  module.exports = TypedScrollView;
},216,[3,48,182,50,51,83,217,223,54,80,224,225,221,79,6,228,146,104,152]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Dimensions = _$$_REQUIRE(_dependencyMap[0]);

  var FrameRateLogger = _$$_REQUIRE(_dependencyMap[1]);

  var Keyboard = _$$_REQUIRE(_dependencyMap[2]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[3]);

  var Subscribable = _$$_REQUIRE(_dependencyMap[4]);

  var TextInputState = _$$_REQUIRE(_dependencyMap[5]);

  var UIManager = _$$_REQUIRE(_dependencyMap[6]);

  var invariant = _$$_REQUIRE(_dependencyMap[7]);

  var nullthrows = _$$_REQUIRE(_dependencyMap[8]);

  var performanceNow = _$$_REQUIRE(_dependencyMap[9]);

  var warning = _$$_REQUIRE(_dependencyMap[10]);

  var _require = _$$_REQUIRE(_dependencyMap[11]),
      ScrollViewManager = _require.ScrollViewManager;

  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
  var ScrollResponderMixin = {
    mixins: [Subscribable.Mixin],
    scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
      return {
        isTouching: false,
        lastMomentumScrollBeginTime: 0,
        lastMomentumScrollEndTime: 0,
        observedScrollSinceBecomingResponder: false,
        becameResponderWhileAnimating: false
      };
    },
    scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
      return this.state.isTouching;
    },
    scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
        return true;
      }

      return false;
    },
    scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
      if (this.scrollResponderIsAnimating()) {
        return true;
      }

      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';

      if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !TextInputState.isTextInput(e.target)) {
        return true;
      }

      return false;
    },
    scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},
    scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
      return !this.state.observedScrollSinceBecomingResponder;
    },
    scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
      var nativeEvent = e.nativeEvent;
      this.state.isTouching = nativeEvent.touches.length !== 0;
      this.props.onTouchEnd && this.props.onTouchEnd(e);
    },
    scrollResponderHandleTouchCancel: function scrollResponderHandleTouchCancel(e) {
      this.state.isTouching = false;
      this.props.onTouchCancel && this.props.onTouchCancel(e);
    },
    scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
      this.props.onResponderRelease && this.props.onResponderRelease(e);
      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

      if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
        this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
        TextInputState.blurTextInput(currentlyFocusedTextInput);
      }
    },
    scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
      this.state.observedScrollSinceBecomingResponder = true;
      this.props.onScroll && this.props.onScroll(e);
    },
    scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
      this.state.observedScrollSinceBecomingResponder = false;
      this.props.onResponderGrant && this.props.onResponderGrant(e);
      this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
    },
    scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
      FrameRateLogger.beginScroll();
      this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
    },
    scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
      var velocity = e.nativeEvent.velocity;

      if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
        FrameRateLogger.endScroll();
      }

      this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
    },
    scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
      this.state.lastMomentumScrollBeginTime = performanceNow();
      this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
    },
    scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
      FrameRateLogger.endScroll();
      this.state.lastMomentumScrollEndTime = performanceNow();
      this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
    },
    scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
      this.state.isTouching = true;
      this.props.onTouchStart && this.props.onTouchStart(e);
    },
    scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
      this.props.onTouchMove && this.props.onTouchMove(e);
    },
    scrollResponderIsAnimating: function scrollResponderIsAnimating() {
      var now = performanceNow();
      var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
      return isAnimating;
    },
    scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
      return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
    },
    scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
      if (typeof x === 'number') {
        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
      } else {
        var _ref = x || {};

        x = _ref.x;
        y = _ref.y;
        animated = _ref.animated;
      }

      UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
    },
    scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
      var animated = (options && options.animated) !== false;
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
    },
    scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
      console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
      this.scrollResponderScrollTo({
        x: offsetX,
        y: offsetY,
        animated: false
      });
    },
    scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
      invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');

      if ('animated' in rect) {
        animated = rect.animated;
        delete rect.animated;
      } else if (typeof animated !== 'undefined') {
        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
      }

      ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
    },
    scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
      UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.flashScrollIndicators, []);
    },
    scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
      this.additionalScrollOffset = additionalOffset || 0;
      this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
      UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
    },
    scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
      var keyboardScreenY = Dimensions.get('window').height;

      if (this.keyboardWillOpenTo) {
        keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
      }

      var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

      if (this.preventNegativeScrollOffset) {
        scrollOffsetY = Math.max(0, scrollOffsetY);
      }

      this.scrollResponderScrollTo({
        x: 0,
        y: scrollOffsetY,
        animated: true
      });
      this.additionalOffset = 0;
      this.preventNegativeScrollOffset = false;
    },
    scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
      console.error('Error measuring text field: ', e);
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;
      warning(typeof keyboardShouldPersistTaps !== 'boolean', "'keyboardShouldPersistTaps={" + keyboardShouldPersistTaps + "}' is deprecated. " + ("Use 'keyboardShouldPersistTaps=\"" + (keyboardShouldPersistTaps ? 'always' : 'never') + "\"' instead"));
      this.keyboardWillOpenTo = null;
      this.additionalScrollOffset = 0;
      this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
      this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
      this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
      this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
    },
    scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
      this.keyboardWillOpenTo = e;
      this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
    },
    scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
    },
    scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
      if (e) {
        this.keyboardWillOpenTo = e;
      }

      this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
    },
    scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
      this.keyboardWillOpenTo = null;
      this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
    }
  };
  var ScrollResponder = {
    Mixin: ScrollResponderMixin
  };
  module.exports = ScrollResponder;
},217,[56,218,219,83,222,145,71,6,178,101,104,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var NativeModules = _$$_REQUIRE(_dependencyMap[0]);

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  var FrameRateLogger = {
    setGlobalOptions: function setGlobalOptions(options) {
      if (options.debug !== undefined) {
        invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
      }

      if (NativeModules.FrameRateLogger) {
        var optionsClone = {
          debug: !!options.debug,
          reportStackTraces: !!options.reportStackTraces
        };
        Object.freeze(optionsClone);
        Object.seal(optionsClone);
        NativeModules.FrameRateLogger.setGlobalOptions(optionsClone);
      }
    },
    setContext: function setContext(context) {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
    },
    beginScroll: function beginScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
    },
    endScroll: function endScroll() {
      NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
    }
  };
  module.exports = FrameRateLogger;
},218,[8,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var LayoutAnimation = _$$_REQUIRE(_dependencyMap[0]);

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  var KeyboardObserver = _$$_REQUIRE(_dependencyMap[3]).KeyboardObserver;

  var dismissKeyboard = _$$_REQUIRE(_dependencyMap[4]);

  var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);
  var Keyboard = {
    addListener: function addListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeListener: function removeListener(eventName, callback) {
      invariant(false, 'Dummy method used for documentation');
    },
    removeAllListeners: function removeAllListeners(eventName) {
      invariant(false, 'Dummy method used for documentation');
    },
    dismiss: function dismiss() {
      invariant(false, 'Dummy method used for documentation');
    },
    scheduleLayoutAnimation: function scheduleLayoutAnimation(event) {
      invariant(false, 'Dummy method used for documentation');
    }
  };
  Keyboard = KeyboardEventEmitter;
  Keyboard.dismiss = dismissKeyboard;

  Keyboard.scheduleLayoutAnimation = function (event) {
    var duration = event.duration,
        easing = event.easing;

    if (duration) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: easing && LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
  };

  module.exports = Keyboard;
},219,[220,6,112,8,221]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var UIManager = _$$_REQUIRE(_dependencyMap[1]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[2]);

  var checkPropTypes = PropTypes.checkPropTypes;
  var TypesEnum = {
    spring: true,
    linear: true,
    easeInEaseOut: true,
    easeIn: true,
    easeOut: true,
    keyboard: true
  };
  var Types = keyMirror(TypesEnum);
  var PropertiesEnum = {
    opacity: true,
    scaleX: true,
    scaleY: true,
    scaleXY: true
  };
  var Properties = keyMirror(PropertiesEnum);
  var animType = PropTypes.shape({
    duration: PropTypes.number,
    delay: PropTypes.number,
    springDamping: PropTypes.number,
    initialVelocity: PropTypes.number,
    type: PropTypes.oneOf(Object.keys(Types)).isRequired,
    property: PropTypes.oneOf(Object.keys(Properties))
  });
  var configType = PropTypes.shape({
    duration: PropTypes.number.isRequired,
    create: animType,
    update: animType,
    delete: animType
  });

  function checkConfig(config, location, name) {
    checkPropTypes({
      config: configType
    }, {
      config: config
    }, location, name);
  }

  function configureNext(config, onAnimationDidEnd) {
    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
  }

  function create(duration, type, creationProp) {
    return {
      duration: duration,
      create: {
        type: type,
        property: creationProp
      },
      update: {
        type: type
      },
      delete: {
        type: type,
        property: creationProp
      }
    };
  }

  var Presets = {
    easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
    linear: create(500, Types.linear, Properties.opacity),
    spring: {
      duration: 700,
      create: {
        type: Types.linear,
        property: Properties.opacity
      },
      update: {
        type: Types.spring,
        springDamping: 0.4
      },
      delete: {
        type: Types.linear,
        property: Properties.opacity
      }
    }
  };
  var LayoutAnimation = {
    configureNext: configureNext,
    create: create,
    Types: Types,
    Properties: Properties,
    checkConfig: checkConfig,
    Presets: Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring)
  };
  module.exports = LayoutAnimation;
},220,[65,71,63]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var TextInputState = _$$_REQUIRE(_dependencyMap[0]);

  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
  }

  module.exports = dismissKeyboard;
},221,[145]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Subscribable = {};
  Subscribable.Mixin = {
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._subscribableSubscriptions = [];
    },
    componentWillUnmount: function componentWillUnmount() {
      this._subscribableSubscriptions && this._subscribableSubscriptions.forEach(function (subscription) {
        return subscription.remove();
      });
      this._subscribableSubscriptions = null;
    },
    addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
      this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
    }
  };
  module.exports = Subscribable;
},222,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var AnimatedImplementation = _$$_REQUIRE(_dependencyMap[5]);

  var React = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var View = _$$_REQUIRE(_dependencyMap[8]);

  var AnimatedView = AnimatedImplementation.createAnimatedComponent(View);

  var ScrollViewStickyHeader = function (_React$Component) {
    _inherits(ScrollViewStickyHeader, _React$Component);

    function ScrollViewStickyHeader() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ScrollViewStickyHeader);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollViewStickyHeader)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        measured: false,
        layoutY: 0,
        layoutHeight: 0,
        nextHeaderLayoutY: _this.props.nextHeaderLayoutY
      };

      _this._onLayout = function (event) {
        _this.setState({
          measured: true,
          layoutY: event.nativeEvent.layout.y,
          layoutHeight: event.nativeEvent.layout.height
        });

        _this.props.onLayout(event);

        var child = React.Children.only(_this.props.children);

        if (child.props.onLayout) {
          child.props.onLayout(event);
        }
      };

      return _this;
    }

    _createClass(ScrollViewStickyHeader, [{
      key: "setNextHeaderY",
      value: function setNextHeaderY(y) {
        this.setState({
          nextHeaderLayoutY: y
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            inverted = _this$props.inverted,
            scrollViewHeight = _this$props.scrollViewHeight;
        var _this$state = this.state,
            measured = _this$state.measured,
            layoutHeight = _this$state.layoutHeight,
            layoutY = _this$state.layoutY,
            nextHeaderLayoutY = _this$state.nextHeaderLayoutY;
        var inputRange = [-1, 0];
        var outputRange = [0, 0];

        if (measured) {
          if (inverted) {
            if (scrollViewHeight != null) {
              var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;

              if (stickStartPoint > 0) {
                inputRange.push(stickStartPoint);
                outputRange.push(0);
                inputRange.push(stickStartPoint + 1);
                outputRange.push(1);
                var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;

                if (collisionPoint > stickStartPoint) {
                  inputRange.push(collisionPoint, collisionPoint + 1);
                  outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
                }
              }
            }
          } else {
            inputRange.push(layoutY);
            outputRange.push(0);

            var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;

            if (_collisionPoint >= layoutY) {
              inputRange.push(_collisionPoint, _collisionPoint + 1);
              outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
            } else {
              inputRange.push(layoutY + 1);
              outputRange.push(1);
            }
          }
        }

        var translateY = this.props.scrollAnimatedValue.interpolate({
          inputRange: inputRange,
          outputRange: outputRange
        });
        var child = React.Children.only(this.props.children);
        return React.createElement(AnimatedView, {
          collapsable: false,
          onLayout: this._onLayout,
          style: [child.props.style, styles.header, {
            transform: [{
              translateY: translateY
            }]
          }]
        }, React.cloneElement(child, {
          style: styles.fill,
          onLayout: undefined
        }));
      }
    }]);

    return ScrollViewStickyHeader;
  }(React.Component);

  var styles = StyleSheet.create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });
  module.exports = ScrollViewStickyHeader;
},223,[21,22,34,37,40,182,51,54,80]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

  var InternalScrollViewType = function (_ReactNative$NativeCo) {
    "use strict";

    _inherits(InternalScrollViewType, _ReactNative$NativeCo);

    function InternalScrollViewType() {
      _classCallCheck(this, InternalScrollViewType);

      return _possibleConstructorReturn(this, _getPrototypeOf(InternalScrollViewType).apply(this, arguments));
    }

    _createClass(InternalScrollViewType, [{
      key: "scrollTo",
      value: function scrollTo(y, x, animated) {}
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {}
    }, {
      key: "scrollToEnd",
      value: function scrollToEnd(options) {}
    }, {
      key: "scrollWithoutAnimationTo",
      value: function scrollWithoutAnimationTo() {
        var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {}
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {}
    }, {
      key: "getInnerViewNode",
      value: function getInnerViewNode() {}
    }, {
      key: "scrollResponderScrollNativeHandleToKeyboard",
      value: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {}
    }, {
      key: "scrollResponderScrollTo",
      value: function scrollResponderScrollTo(x, y, animated) {}
    }]);

    return InternalScrollViewType;
  }(ReactNative.NativeComponent);

  module.exports = InternalScrollViewType;
},224,[21,22,34,37,40,83]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  var factory = _$$_REQUIRE(_dependencyMap[1]);

  if (typeof React === 'undefined') {
    throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");
  }

  var ReactNoopUpdateQueue = new React.Component().updater;
  module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
},225,[51,226]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _assign = _$$_REQUIRE(_dependencyMap[0]);

  var emptyObject = _$$_REQUIRE(_dependencyMap[1]);

  var _invariant = _$$_REQUIRE(_dependencyMap[2]);

  var MIXINS_KEY = 'mixins';

  function identity(fn) {
    return fn;
  }

  var ReactPropTypeLocationNames;
  {
    ReactPropTypeLocationNames = {};
  }

  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    var injectedMixins = [];
    var ReactClassInterface = {
      mixins: 'DEFINE_MANY',
      statics: 'DEFINE_MANY',
      propTypes: 'DEFINE_MANY',
      contextTypes: 'DEFINE_MANY',
      childContextTypes: 'DEFINE_MANY',
      getDefaultProps: 'DEFINE_MANY_MERGED',
      getInitialState: 'DEFINE_MANY_MERGED',
      getChildContext: 'DEFINE_MANY_MERGED',
      render: 'DEFINE_ONCE',
      componentWillMount: 'DEFINE_MANY',
      componentDidMount: 'DEFINE_MANY',
      componentWillReceiveProps: 'DEFINE_MANY',
      shouldComponentUpdate: 'DEFINE_ONCE',
      componentWillUpdate: 'DEFINE_MANY',
      componentDidUpdate: 'DEFINE_MANY',
      componentWillUnmount: 'DEFINE_MANY',
      UNSAFE_componentWillMount: 'DEFINE_MANY',
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
      updateComponent: 'OVERRIDE_BASE'
    };
    var ReactClassStaticInterface = {
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
    var RESERVED_SPEC_KEYS = {
      displayName: function displayName(Constructor, _displayName) {
        Constructor.displayName = _displayName;
      },
      mixins: function mixins(Constructor, _mixins) {
        if (_mixins) {
          for (var i = 0; i < _mixins.length; i++) {
            mixSpecIntoComponent(Constructor, _mixins[i]);
          }
        }
      },
      childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
        Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
      },
      contextTypes: function contextTypes(Constructor, _contextTypes) {
        Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
      },
      getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
        } else {
          Constructor.getDefaultProps = _getDefaultProps;
        }
      },
      propTypes: function propTypes(Constructor, _propTypes) {
        Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
      },
      statics: function statics(Constructor, _statics) {
        mixStaticSpecIntoComponent(Constructor, _statics);
      },
      autobind: function autobind() {}
    };

    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {}
      }
    }

    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

      if (ReactClassMixin.hasOwnProperty(name)) {
        _invariant(specPolicy === 'OVERRIDE_BASE', "ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.", name);
      }

      if (isAlreadyDefined) {
        _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', "ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);
      }
    }

    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        return;
      }

      _invariant(typeof spec !== 'function', "ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object.");

      _invariant(!isValidElement(spec), "ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");

      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;

      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }

      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }

        if (name === MIXINS_KEY) {
          continue;
        }

        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);

        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];

              _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), "ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.", specPolicy, name);

              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;
            }
          }
        }
      }
    }

    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }

      for (var name in statics) {
        var property = statics[name];

        if (!statics.hasOwnProperty(name)) {
          continue;
        }

        var isReserved = name in RESERVED_SPEC_KEYS;

        _invariant(!isReserved, "ReactClass: You are attempting to define a reserved property, `%s`, that shouldn't be on the \"statics\" key. Define it as an instance property instead; it will still be accessible on the constructor.", name);

        var isAlreadyDefined = name in Constructor;

        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

          _invariant(specPolicy === 'DEFINE_MANY_MERGED', "ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.", name);

          Constructor[name] = createMergedResultFunction(Constructor[name], property);
          return;
        }

        Constructor[name] = property;
      }
    }

    function mergeIntoWithNoDuplicateKeys(one, two) {
      _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          _invariant(one[key] === undefined, "mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.", key);

          one[key] = two[key];
        }
      }

      return one;
    }

    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);

        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }

        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }

    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }

    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);
      return boundMethod;
    }

    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;

      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }

    var IsMountedPreMixin = {
      componentDidMount: function componentDidMount() {
        this.__isMounted = true;
      }
    };
    var IsMountedPostMixin = {
      componentWillUnmount: function componentWillUnmount() {
        this.__isMounted = false;
      }
    };
    var ReactClassMixin = {
      replaceState: function replaceState(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
      isMounted: function isMounted() {
        return !!this.__isMounted;
      }
    };

    var ReactClassComponent = function ReactClassComponent() {};

    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

    function createClass(spec) {
      var Constructor = identity(function (props, context, updater) {
        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }

        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
        this.state = null;
        var initialState = this.getInitialState ? this.getInitialState() : null;

        _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);

      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }

      _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }

      return Constructor;
    }

    return createClass;
  }

  module.exports = factory;
},226,[53,227,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var emptyObject = {};
  module.exports = emptyObject;
},227,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      return 0.998;
    } else if (decelerationRate === 'fast') {
      return 0.99;
    }

    return decelerationRate;
  }

  module.exports = processDecelerationRate;
},228,[50]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var StaticRenderer = function (_React$Component) {
    _inherits(StaticRenderer, _React$Component);

    function StaticRenderer() {
      _classCallCheck(this, StaticRenderer);

      return _possibleConstructorReturn(this, _getPrototypeOf(StaticRenderer).apply(this, arguments));
    }

    _createClass(StaticRenderer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.render();
      }
    }]);

    return StaticRenderer;
  }(React.Component);

  StaticRenderer.propTypes = {
    shouldUpdate: PropTypes.bool.isRequired,
    render: PropTypes.func.isRequired
  };
  module.exports = StaticRenderer;
},229,[21,22,34,37,40,51,65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var GLOBAL = typeof window === 'undefined' ? global : window;

  var setter = function setter(_setter, _clearer, array) {
    return function (callback, delta) {
      var id = _setter(function () {
        _clearer.call(this, id);

        callback.apply(this, arguments);
      }.bind(this), delta);

      if (!this[array]) {
        this[array] = [id];
      } else {
        this[array].push(id);
      }

      return id;
    };
  };

  var clearer = function clearer(_clearer, array) {
    return function (id) {
      if (this[array]) {
        var index = this[array].indexOf(id);

        if (index !== -1) {
          this[array].splice(index, 1);
        }
      }

      _clearer(id);
    };
  };

  var _timeouts = 'TimerMixin_timeouts';

  var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);

  var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

  var _intervals = 'TimerMixin_intervals';

  var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);

  var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

  var _immediates = 'TimerMixin_immediates';

  var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);

  var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

  var _rafs = 'TimerMixin_rafs';

  var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);

  var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

  var TimerMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this[_timeouts] && this[_timeouts].forEach(function (id) {
        GLOBAL.clearTimeout(id);
      });
      this[_timeouts] = null;
      this[_intervals] && this[_intervals].forEach(function (id) {
        GLOBAL.clearInterval(id);
      });
      this[_intervals] = null;
      this[_immediates] && this[_immediates].forEach(function (id) {
        GLOBAL.clearImmediate(id);
      });
      this[_immediates] = null;
      this[_rafs] && this[_rafs].forEach(function (id) {
        GLOBAL.cancelAnimationFrame(id);
      });
      this[_rafs] = null;
    },
    setTimeout: _setTimeout,
    clearTimeout: _clearTimeout,
    setInterval: _setInterval,
    clearInterval: _clearInterval,
    setImmediate: _setImmediate,
    clearImmediate: _clearImmediate,
    requestAnimationFrame: _requestAnimationFrame,
    cancelAnimationFrame: _cancelAnimationFrame
  };
  module.exports = TimerMixin;
},230,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  function cloneReferencedElement(element, config) {
    var cloneRef = config.ref;
    var originalRef = element.ref;

    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    if (originalRef == null || cloneRef == null) {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    if (typeof originalRef !== 'function') {
      return React.cloneElement.apply(React, [element, config].concat(children));
    }

    return React.cloneElement.apply(React, [element, _objectSpread({}, config, {
      ref: function ref(component) {
        cloneRef(component);
        originalRef(component);
      }
    })].concat(children));
  }

  module.exports = cloneReferencedElement;
},231,[48,51]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var Platform = _$$_REQUIRE(_dependencyMap[6]);

  var React = _$$_REQUIRE(_dependencyMap[7]);

  var _require = _$$_REQUIRE(_dependencyMap[8]),
      NativeComponent = _require.NativeComponent;

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[9]);

  var nullthrows = _$$_REQUIRE(_dependencyMap[10]);

  {
    var RefreshLayoutConsts = {
      SIZE: {}
    };
  }
  var NativeRefreshControl = requireNativeComponent('RCTRefreshControl');

  var RefreshControl = function (_React$Component) {
    _inherits(RefreshControl, _React$Component);

    function RefreshControl() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, RefreshControl);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RefreshControl)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._nativeRef = null;
      _this._lastNativeRefreshing = false;

      _this._onRefresh = function () {
        _this._lastNativeRefreshing = true;
        _this.props.onRefresh && _this.props.onRefresh();

        _this.forceUpdate();
      };

      return _this;
    }

    _createClass(RefreshControl, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativeRefreshing = this.props.refreshing;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.refreshing !== prevProps.refreshing) {
          this._lastNativeRefreshing = this.props.refreshing;
        } else if (this.props.refreshing !== this._lastNativeRefreshing) {
          nullthrows(this._nativeRef).setNativeProps({
            refreshing: this.props.refreshing
          });
          this._lastNativeRefreshing = this.props.refreshing;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(NativeRefreshControl, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._nativeRef = _ref;
          },
          onRefresh: this._onRefresh
        }));
      }
    }]);

    return RefreshControl;
  }(React.Component);

  RefreshControl.SIZE = RefreshLayoutConsts.SIZE;
  module.exports = RefreshControl;
},232,[3,21,22,34,37,40,50,51,83,146,178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[2]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _createClass = _$$_REQUIRE(_dependencyMap[6]);

  var _inherits = _$$_REQUIRE(_dependencyMap[7]);

  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[8]);

  var Batchinator = _$$_REQUIRE(_dependencyMap[9]);

  var FillRateHelper = _$$_REQUIRE(_dependencyMap[10]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var React = _$$_REQUIRE(_dependencyMap[12]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[13]);

  var RefreshControl = _$$_REQUIRE(_dependencyMap[14]);

  var ScrollView = _$$_REQUIRE(_dependencyMap[15]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[16]);

  var UIManager = _$$_REQUIRE(_dependencyMap[17]);

  var View = _$$_REQUIRE(_dependencyMap[18]);

  var ViewabilityHelper = _$$_REQUIRE(_dependencyMap[19]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[20]);

  var infoLog = _$$_REQUIRE(_dependencyMap[21]);

  var invariant = _$$_REQUIRE(_dependencyMap[22]);

  var warning = _$$_REQUIRE(_dependencyMap[23]);

  var _require = _$$_REQUIRE(_dependencyMap[24]),
      computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

  var _usedIndexForKey = false;
  var _keylessItemComponentName = '';

  var VirtualizedList = function (_React$PureComponent) {
    _inherits(VirtualizedList, _React$PureComponent);

    _createClass(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;

        var frame = this._getFrameMetricsApprox(veryLast);

        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _this$props = this.props,
            data = _this$props.data,
            horizontal = _this$props.horizontal,
            getItemCount = _this$props.getItemCount,
            getItemLayout = _this$props.getItemLayout,
            onScrollToIndexFailed = _this$props.onScrollToIndexFailed;
        var animated = params.animated,
            index = params.index,
            viewOffset = params.viewOffset,
            viewPosition = params.viewPosition;
        invariant(index >= 0 && index < getItemCount(data), "scrollToIndex out of range: " + index + " vs " + (getItemCount(data) - 1));

        if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
          invariant(!!onScrollToIndexFailed, "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, otherwise there is no way to know the location of offscreen indices or handle failures.");
          onScrollToIndexFailed({
            averageItemLength: this._averageCellLength,
            highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
            index: index
          });
          return;
        }

        var frame = this._getFrameMetricsApprox(index);

        var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

        this._scrollRef.scrollTo(horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _this$props2 = this.props,
            data = _this$props2.data,
            getItem = _this$props2.getItem,
            getItemCount = _this$props2.getItemCount;
        var itemCount = getItemCount(data);

        for (var _index = 0; _index < itemCount; _index++) {
          if (getItem(data, _index) === item) {
            this.scrollToIndex(_objectSpread({}, params, {
              index: _index
            }));
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
            offset = params.offset;

        this._scrollRef.scrollTo(this.props.horizontal ? {
          x: offset,
          animated: animated
        } : {
          y: offset,
          animated: animated
        });
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref.recordInteraction();
        });

        this._viewabilityTuples.forEach(function (t) {
          t.viewabilityHelper.recordInteraction();
        });

        this._updateViewableItems(this.props.data);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return ReactNative.findNodeHandle(this._scrollRef);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: {
            getScrollMetrics: this._getScrollMetrics,
            horizontal: this.props.horizontal,
            getOutermostParentListRef: this._getOutermostParentListRef,
            getNestedChildState: this._getNestedChildState,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          }
        };
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context.virtualizedCell && this.context.virtualizedCell.cellKey || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }]);

    function VirtualizedList(_props, context) {
      var _this;

      _classCallCheck(this, VirtualizedList);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(VirtualizedList).call(this, _props, context));

      _this._getScrollMetrics = function () {
        return _this._scrollMetrics;
      };

      _this._getOutermostParentListRef = function () {
        if (_this._isNestedWithSameOrientation()) {
          return _this.context.virtualizedList.getOutermostParentListRef();
        } else {
          return _assertThisInitialized(_assertThisInitialized(_this));
        }
      };

      _this._getNestedChildState = function (key) {
        var existingChildData = _this._nestedChildLists.get(key);

        return existingChildData && existingChildData.state;
      };

      _this._registerAsNestedChild = function (childList) {
        var childListsInCell = _this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
        childListsInCell.add(childList.key);

        _this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);

        var existingChildData = _this._nestedChildLists.get(childList.key);

        invariant(!(existingChildData && existingChildData.ref !== null), "A VirtualizedList contains a cell which itself contains more than one VirtualizedList of the same orientation as the parent list. You must pass a unique listKey prop to each sibling list.");

        _this._nestedChildLists.set(childList.key, {
          ref: childList.ref,
          state: null
        });

        if (_this._hasInteracted) {
          childList.ref.recordInteraction();
        }
      };

      _this._unregisterAsNestedChild = function (childList) {
        _this._nestedChildLists.set(childList.key, {
          ref: null,
          state: childList.state
        });
      };

      _this._onUpdateSeparators = function (keys, newProps) {
        keys.forEach(function (key) {
          var ref = key != null && _this._cellRefs[key];
          ref && ref.updateSeparatorProps(newProps);
        });
      };

      _this._averageCellLength = 0;
      _this._cellKeysToChildListKeys = new Map();
      _this._cellRefs = {};
      _this._frames = {};
      _this._footerLength = 0;
      _this._hasDataChangedSinceEndReached = true;
      _this._hasInteracted = false;
      _this._hasMore = false;
      _this._hasWarned = {};
      _this._highestMeasuredFrameIndex = 0;
      _this._headerLength = 0;
      _this._indicesToKeys = new Map();
      _this._hasDoneInitialScroll = false;
      _this._nestedChildLists = new Map();
      _this._offsetFromParentVirtualizedList = 0;
      _this._prevParentOffset = 0;
      _this._scrollMetrics = {
        contentLength: 0,
        dOffset: 0,
        dt: 10,
        offset: 0,
        timestamp: 0,
        velocity: 0,
        visibleLength: 0
      };
      _this._scrollRef = null;
      _this._sentEndForContentLength = 0;
      _this._totalCellLength = 0;
      _this._totalCellsMeasured = 0;
      _this._viewabilityTuples = [];

      _this._captureScrollRef = function (ref) {
        _this._scrollRef = ref;
      };

      _this._defaultRenderScrollComponent = function (props) {
        var onRefresh = props.onRefresh;

        if (_this._isNestedWithSameOrientation()) {
          return React.createElement(View, props);
        } else if (onRefresh) {
          invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
          return React.createElement(ScrollView, _extends({}, props, {
            refreshControl: props.refreshControl == null ? React.createElement(RefreshControl, {
              refreshing: props.refreshing,
              onRefresh: onRefresh,
              progressViewOffset: props.progressViewOffset
            }) : props.refreshControl
          }));
        } else {
          return React.createElement(ScrollView, props);
        }
      };

      _this._onCellUnmount = function (cellKey) {
        var curr = _this._frames[cellKey];

        if (curr) {
          _this._frames[cellKey] = _objectSpread({}, curr, {
            inLayout: false
          });
        }
      };

      _this._onLayout = function (e) {
        if (_this._isNestedWithSameOrientation()) {
          _this.measureLayoutRelativeToContainingList();
        } else {
          _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
        }

        _this.props.onLayout && _this.props.onLayout(e);

        _this._scheduleCellsToRenderUpdate();

        _this._maybeCallOnEndReached();
      };

      _this._onLayoutEmpty = function (e) {
        _this.props.onLayout && _this.props.onLayout(e);
      };

      _this._onLayoutFooter = function (e) {
        _this._footerLength = _this._selectLength(e.nativeEvent.layout);
      };

      _this._onLayoutHeader = function (e) {
        _this._headerLength = _this._selectLength(e.nativeEvent.layout);
      };

      _this._onContentSizeChange = function (width, height) {
        if (width > 0 && height > 0 && _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 && !_this._hasDoneInitialScroll) {
          _this.scrollToIndex({
            animated: false,
            index: _this.props.initialScrollIndex
          });

          _this._hasDoneInitialScroll = true;
        }

        if (_this.props.onContentSizeChange) {
          _this.props.onContentSizeChange(width, height);
        }

        _this._scrollMetrics.contentLength = _this._selectLength({
          height: height,
          width: width
        });

        _this._scheduleCellsToRenderUpdate();

        _this._maybeCallOnEndReached();
      };

      _this._convertParentScrollMetrics = function (metrics) {
        var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
        var visibleLength = metrics.visibleLength;
        var dOffset = offset - _this._scrollMetrics.offset;
        var contentLength = _this._scrollMetrics.contentLength;
        return {
          visibleLength: visibleLength,
          contentLength: contentLength,
          offset: offset,
          dOffset: dOffset
        };
      };

      _this._onScroll = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref._onScroll(e);
        });

        if (_this.props.onScroll) {
          _this.props.onScroll(e);
        }

        var timestamp = e.timeStamp;

        var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);

        var contentLength = _this._selectLength(e.nativeEvent.contentSize);

        var offset = _this._selectOffset(e.nativeEvent.contentOffset);

        var dOffset = offset - _this._scrollMetrics.offset;

        if (_this._isNestedWithSameOrientation()) {
          if (_this._scrollMetrics.contentLength === 0) {
            return;
          }

          var _this$_convertParentS = _this._convertParentScrollMetrics({
            visibleLength: visibleLength,
            offset: offset
          });

          visibleLength = _this$_convertParentS.visibleLength;
          contentLength = _this$_convertParentS.contentLength;
          offset = _this$_convertParentS.offset;
          dOffset = _this$_convertParentS.dOffset;
        }

        var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
        var velocity = dOffset / dt;

        if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
          infoLog("VirtualizedList: You have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.", {
            dt: dt,
            prevDt: _this._scrollMetrics.dt,
            contentLength: contentLength
          });
          _this._hasWarned.perf = true;
        }

        _this._scrollMetrics = {
          contentLength: contentLength,
          dt: dt,
          dOffset: dOffset,
          offset: offset,
          timestamp: timestamp,
          velocity: velocity,
          visibleLength: visibleLength
        };

        _this._updateViewableItems(_this.props.data);

        if (!_this.props) {
          return;
        }

        _this._maybeCallOnEndReached();

        if (velocity !== 0) {
          _this._fillRateHelper.activate();
        }

        _this._computeBlankness();

        _this._scheduleCellsToRenderUpdate();
      };

      _this._onScrollBeginDrag = function (e) {
        _this._nestedChildLists.forEach(function (childList) {
          childList.ref && childList.ref._onScrollBeginDrag(e);
        });

        _this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.recordInteraction();
        });

        _this._hasInteracted = true;
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
      };

      _this._onScrollEndDrag = function (e) {
        var velocity = e.nativeEvent.velocity;

        if (velocity) {
          _this._scrollMetrics.velocity = _this._selectOffset(velocity);
        }

        _this._computeBlankness();

        _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
      };

      _this._onMomentumScrollEnd = function (e) {
        _this._scrollMetrics.velocity = 0;

        _this._computeBlankness();

        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
      };

      _this._updateCellsToRender = function () {
        var _this$props3 = _this.props,
            data = _this$props3.data,
            getItemCount = _this$props3.getItemCount,
            onEndReachedThreshold = _this$props3.onEndReachedThreshold;

        var isVirtualizationDisabled = _this._isVirtualizationDisabled();

        _this._updateViewableItems(data);

        if (!data) {
          return;
        }

        _this.setState(function (state) {
          var newState;

          if (!isVirtualizationDisabled) {
            if (_this._scrollMetrics.visibleLength) {
              if (!_this.props.initialScrollIndex || _this._scrollMetrics.offset) {
                newState = computeWindowedRenderLimits(_this.props, state, _this._getFrameMetricsApprox, _this._scrollMetrics);
              }
            }
          } else {
            var _this$_scrollMetrics = _this._scrollMetrics,
                contentLength = _this$_scrollMetrics.contentLength,
                offset = _this$_scrollMetrics.offset,
                visibleLength = _this$_scrollMetrics.visibleLength;
            var distanceFromEnd = contentLength - visibleLength - offset;
            var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? _this.props.maxToRenderPerBatch : 0;
            newState = {
              first: 0,
              last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
            };
          }

          if (newState && _this._nestedChildLists.size > 0) {
            var newFirst = newState.first;
            var newLast = newState.last;

            for (var ii = newFirst; ii <= newLast; ii++) {
              var cellKeyForIndex = _this._indicesToKeys.get(ii);

              var childListKeys = cellKeyForIndex && _this._cellKeysToChildListKeys.get(cellKeyForIndex);

              if (!childListKeys) {
                continue;
              }

              var someChildHasMore = false;

              for (var _iterator = childListKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();;) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var _childKey = _ref;

                var childList = _this._nestedChildLists.get(_childKey);

                if (childList && childList.ref && childList.ref.hasMore()) {
                  someChildHasMore = true;
                  break;
                }
              }

              if (someChildHasMore) {
                newState.last = ii;
                break;
              }
            }
          }

          return newState;
        });
      };

      _this._createViewToken = function (index, isViewable) {
        var _this$props4 = _this.props,
            data = _this$props4.data,
            getItem = _this$props4.getItem,
            keyExtractor = _this$props4.keyExtractor;
        var item = getItem(data, index);
        return {
          index: index,
          item: item,
          key: keyExtractor(item, index),
          isViewable: isViewable
        };
      };

      _this._getFrameMetricsApprox = function (index) {
        var frame = _this._getFrameMetrics(index);

        if (frame && frame.index === index) {
          return frame;
        } else {
          var getItemLayout = _this.props.getItemLayout;
          invariant(!getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
          return {
            length: _this._averageCellLength,
            offset: _this._averageCellLength * index
          };
        }
      };

      _this._getFrameMetrics = function (index) {
        var _this$props5 = _this.props,
            data = _this$props5.data,
            getItem = _this$props5.getItem,
            getItemCount = _this$props5.getItemCount,
            getItemLayout = _this$props5.getItemLayout,
            keyExtractor = _this$props5.keyExtractor;
        invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
        var item = getItem(data, index);

        var frame = item && _this._frames[keyExtractor(item, index)];

        if (!frame || frame.index !== index) {
          if (getItemLayout) {
            frame = getItemLayout(data, index);
          }
        }

        return frame;
      };

      invariant(!_props.onScroll || !_props.onScroll.__isNative, "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent to support native onScroll events with useNativeDriver");
      invariant(_props.windowSize > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
      _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
      _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);

      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
          return {
            viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
            onViewableItemsChanged: pair.onViewableItemsChanged
          };
        });
      } else if (_this.props.onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new ViewabilityHelper(_this.props.viewabilityConfig),
          onViewableItemsChanged: _this.props.onViewableItemsChanged
        });
      }

      var initialState = {
        first: _this.props.initialScrollIndex || 0,
        last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
      };

      if (_this._isNestedWithSameOrientation()) {
        var storedState = _this.context.virtualizedList.getNestedChildState(_this.props.listKey || _this._getCellKey());

        if (storedState) {
          initialState = storedState;
          _this.state = storedState;
          _this._frames = storedState.frames;
        }
      }

      _this.state = initialState;
      return _this;
    }

    _createClass(VirtualizedList, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.registerAsNestedChild({
            cellKey: this._getCellKey(),
            key: this.props.listKey || this._getCellKey(),
            ref: this
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.virtualizedList.unregisterAsNestedChild({
            key: this.props.listKey || this._getCellKey(),
            state: {
              first: this.state.first,
              last: this.state.last,
              frames: this._frames
            }
          });
        }

        this._updateViewableItems(null);

        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.dispose();
        });

        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;

        var _this$props6 = this.props,
            CellRendererComponent = _this$props6.CellRendererComponent,
            ItemSeparatorComponent = _this$props6.ItemSeparatorComponent,
            data = _this$props6.data,
            getItem = _this$props6.getItem,
            getItemCount = _this$props6.getItemCount,
            horizontal = _this$props6.horizontal,
            keyExtractor = _this$props6.keyExtractor;
        var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey;
        last = Math.min(end, last);

        var _loop = function _loop(ii) {
          var item = getItem(data, ii);
          var key = keyExtractor(item, ii);

          _this2._indicesToKeys.set(ii, key);

          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }

          cells.push(React.createElement(CellRenderer, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            cellKey: key,
            fillRateHelper: _this2._fillRateHelper,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            key: key,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onLayout: function onLayout(e) {
              return _this2._onCellLayout(e, key, ii);
            },
            onUnmount: _this2._onCellUnmount,
            parentProps: _this2.props,
            ref: function ref(_ref2) {
              _this2._cellRefs[key] = _ref2;
            }
          }));
          prevCellKey = key;
        };

        for (var ii = first; ii <= last; ii++) {
          _loop(ii);
        }
      }
    }, {
      key: "_isVirtualizationDisabled",
      value: function _isVirtualizationDisabled() {
        return this.props.disableVirtualization;
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context.virtualizedList;
        return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var _this$props7 = this.props,
            ListEmptyComponent = _this$props7.ListEmptyComponent,
            ListFooterComponent = _this$props7.ListFooterComponent,
            ListHeaderComponent = _this$props7.ListHeaderComponent;
        var _this$props8 = this.props,
            data = _this$props8.data,
            horizontal = _this$props8.horizontal;

        var isVirtualizationDisabled = this._isVirtualizationDisabled();

        var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];

        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }

          var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, null);
          cells.push(React.createElement(VirtualizedCellWrapper, {
            cellKey: this._getCellKey() + '-header',
            key: "$header"
          }, React.createElement(View, {
            onLayout: this._onLayoutHeader,
            style: StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle)
          }, element)));
        }

        var itemCount = this.props.getItemCount(data);

        if (itemCount > 0) {
          _usedIndexForKey = false;
          _keylessItemComponentName = '';
          var spacerKey = !horizontal ? 'height' : 'width';
          var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
          var _this$state = this.state,
              first = _this$state.first,
              last = _this$state.last;

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

          var firstAfterInitial = Math.max(lastInitialIndex + 1, first);

          if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {
            var insertedStickySpacer = false;

            if (stickyIndicesFromProps.size > 0) {
              var stickyOffset = ListHeaderComponent ? 1 : 0;

              for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
                if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                  var initBlock = this._getFrameMetricsApprox(lastInitialIndex);

                  var stickyBlock = this._getFrameMetricsApprox(ii);

                  var leadSpace = stickyBlock.offset - initBlock.offset;
                  cells.push(React.createElement(View, {
                    key: "$sticky_lead",
                    style: _defineProperty({}, spacerKey, leadSpace)
                  }));

                  this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                  var trailSpace = this._getFrameMetricsApprox(first).offset - (stickyBlock.offset + stickyBlock.length);
                  cells.push(React.createElement(View, {
                    key: "$sticky_trail",
                    style: _defineProperty({}, spacerKey, trailSpace)
                  }));
                  insertedStickySpacer = true;
                  break;
                }
              }
            }

            if (!insertedStickySpacer) {
              var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);

              var firstSpace = this._getFrameMetricsApprox(first).offset - (_initBlock.offset + _initBlock.length);

              cells.push(React.createElement(View, {
                key: "$lead_spacer",
                style: _defineProperty({}, spacerKey, firstSpace)
              }));
            }
          }

          this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last, inversionStyle);

          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn("VirtualizedList: missing keys for items, make sure to specify a key property on each item or provide a custom keyExtractor.", _keylessItemComponentName);
            this._hasWarned.keys = true;
          }

          if (!isVirtualizationDisabled && last < itemCount - 1) {
            var lastFrame = this._getFrameMetricsApprox(last);

            var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

            var endFrame = this._getFrameMetricsApprox(end);

            var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
            cells.push(React.createElement(View, {
              key: "$tail_spacer",
              style: _defineProperty({}, spacerKey, tailSpacerLength)
            }));
          }
        } else if (ListEmptyComponent) {
          var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, null);

          cells.push(React.cloneElement(_element, {
            key: '$empty',
            onLayout: function onLayout(event) {
              _this3._onLayoutEmpty(event);

              if (_element.props.onLayout) {
                _element.props.onLayout(event);
              }
            },
            style: [_element.props.style, inversionStyle]
          }));
        }

        if (ListFooterComponent) {
          var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, null);

          cells.push(React.createElement(VirtualizedCellWrapper, {
            cellKey: this._getCellKey() + '-footer',
            key: "$footer"
          }, React.createElement(View, {
            onLayout: this._onLayoutFooter,
            style: StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle)
          }, _element2)));
        }

        var scrollProps = _objectSpread({}, this.props, {
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle,
          invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
          stickyHeaderIndices: stickyHeaderIndices
        });

        if (inversionStyle) {
          scrollProps.style = [inversionStyle, this.props.style];
        }

        this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
        var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
          ref: this._captureScrollRef
        }, cells);

        if (this.props.debug) {
          return React.createElement(View, {
            style: {
              flex: 1
            }
          }, ret, this._renderDebugOverlay());
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props9 = this.props,
            data = _this$props9.data,
            extraData = _this$props9.extraData;

        if (data !== prevProps.data || extraData !== prevProps.extraData) {
          this._hasDataChangedSinceEndReached = true;

          this._viewabilityTuples.forEach(function (tuple) {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }

        this._scheduleCellsToRenderUpdate();
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
      }
    }, {
      key: "_onCellLayout",
      value: function _onCellLayout(e, cellKey, index) {
        var layout = e.nativeEvent.layout;
        var next = {
          offset: this._selectOffset(layout),
          length: this._selectLength(layout),
          index: index,
          inLayout: true
        };
        var curr = this._frames[cellKey];

        if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
          this._totalCellLength += next.length - (curr ? curr.length : 0);
          this._totalCellsMeasured += curr ? 0 : 1;
          this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
          this._frames[cellKey] = next;
          this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);

          this._scheduleCellsToRenderUpdate();
        } else {
          this._frames[cellKey].inLayout = true;
        }

        var childListKeys = this._cellKeysToChildListKeys.get(cellKey);

        if (childListKeys) {
          for (var _iterator2 = childListKeys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref7;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref7 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref7 = _i2.value;
            }

            var _childKey2 = _ref7;

            var childList = this._nestedChildLists.get(_childKey2);

            childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
          }
        }

        this._computeBlankness();
      }
    }, {
      key: "measureLayoutRelativeToContainingList",
      value: function measureLayoutRelativeToContainingList() {
        var _this4 = this;

        UIManager.measureLayout(ReactNative.findNodeHandle(this), ReactNative.findNodeHandle(this.context.virtualizedList.getOutermostParentListRef()), function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's offset from its containing VirtualizedList.");
        }, function (x, y, width, height) {
          _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
            x: x,
            y: y
          });
          _this4._scrollMetrics.contentLength = _this4._selectLength({
            width: width,
            height: height
          });

          var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.virtualizedList.getScrollMetrics());

          _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
          _this4._scrollMetrics.offset = scrollMetrics.offset;
        });
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);

        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._getFrameMetricsApprox(ii);

          if (frame.inLayout) {
            framesInLayout.push(frame);
          }
        }

        var windowTop = this._getFrameMetricsApprox(this.state.first).offset;

        var frameLast = this._getFrameMetricsApprox(this.state.last);

        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        var baseStyle = {
          position: 'absolute',
          top: 0,
          right: 0
        };
        return React.createElement(View, {
          style: _objectSpread({}, baseStyle, {
            bottom: 0,
            width: 20,
            borderColor: 'blue',
            borderWidth: 1
          })
        }, framesInLayout.map(function (f, ii) {
          return React.createElement(View, {
            key: 'f' + ii,
            style: _objectSpread({}, baseStyle, {
              left: 0,
              top: f.offset * normalize,
              height: f.length * normalize,
              backgroundColor: 'orange'
            })
          });
        }), React.createElement(View, {
          style: _objectSpread({}, baseStyle, {
            left: 0,
            top: windowTop * normalize,
            height: windowLen * normalize,
            borderColor: 'green',
            borderWidth: 2
          })
        }), React.createElement(View, {
          style: _objectSpread({}, baseStyle, {
            left: 0,
            top: visTop * normalize,
            height: visLen * normalize,
            borderColor: 'red',
            borderWidth: 2
          })
        }));
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !this.props.horizontal ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(metrics) {
        return !this.props.horizontal ? metrics.y : metrics.x;
      }
    }, {
      key: "_maybeCallOnEndReached",
      value: function _maybeCallOnEndReached() {
        var _this$props10 = this.props,
            data = _this$props10.data,
            getItemCount = _this$props10.getItemCount,
            onEndReached = _this$props10.onEndReached,
            onEndReachedThreshold = _this$props10.onEndReachedThreshold;
        var _this$_scrollMetrics2 = this._scrollMetrics,
            contentLength = _this$_scrollMetrics2.contentLength,
            visibleLength = _this$_scrollMetrics2.visibleLength,
            offset = _this$_scrollMetrics2.offset;
        var distanceFromEnd = contentLength - visibleLength - offset;

        if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
          this._hasDataChangedSinceEndReached = false;
          this._sentEndForContentLength = this._scrollMetrics.contentLength;
          onEndReached({
            distanceFromEnd: distanceFromEnd
          });
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        var _this$state2 = this.state,
            first = _this$state2.first,
            last = _this$state2.last;
        var _this$_scrollMetrics3 = this._scrollMetrics,
            offset = _this$_scrollMetrics3.offset,
            visibleLength = _this$_scrollMetrics3.visibleLength,
            velocity = _this$_scrollMetrics3.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;
        var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;

        if (first > 0) {
          var distTop = offset - this._getFrameMetricsApprox(first).offset;

          hiPri = hiPri || distTop < 0 || velocity < -2 && distTop < scrollingThreshold;
        }

        if (last < itemCount - 1) {
          var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
          hiPri = hiPri || distBottom < 0 || velocity > 2 && distBottom < scrollingThreshold;
        }

        if (hiPri && this._averageCellLength) {
          this._updateCellsToRenderBatcher.dispose({
            abort: true
          });

          this._updateCellsToRender();

          return;
        } else {
          this._updateCellsToRenderBatcher.schedule();
        }
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(data) {
        var _this5 = this;

        var getItemCount = this.props.getItemCount;

        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.onUpdate(getItemCount(data), _this5._scrollMetrics.offset, _this5._scrollMetrics.visibleLength, _this5._getFrameMetrics, _this5._createViewToken, tuple.onViewableItemsChanged, _this5.state);
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(newProps, prevState) {
        var data = newProps.data,
            extraData = newProps.extraData,
            getItemCount = newProps.getItemCount,
            maxToRenderPerBatch = newProps.maxToRenderPerBatch;
        return {
          first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
          last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
        };
      }
    }]);

    return VirtualizedList;
  }(React.PureComponent);

  VirtualizedList.defaultProps = {
    disableVirtualization: false,
    horizontal: false,
    initialNumToRender: 10,
    keyExtractor: function keyExtractor(item, index) {
      if (item.key != null) {
        return item.key;
      }

      _usedIndexForKey = true;

      if (item.type && item.type.displayName) {
        _keylessItemComponentName = item.type.displayName;
      }

      return String(index);
    },
    maxToRenderPerBatch: 10,
    onEndReachedThreshold: 2,
    scrollEventThrottle: 50,
    updateCellsBatchingPeriod: 50,
    windowSize: 21
  };
  VirtualizedList.contextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    }),
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      getNestedChildState: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  };
  VirtualizedList.childContextTypes = {
    virtualizedList: PropTypes.shape({
      getScrollMetrics: PropTypes.func,
      horizontal: PropTypes.bool,
      getOutermostParentListRef: PropTypes.func,
      getNestedChildState: PropTypes.func,
      registerAsNestedChild: PropTypes.func,
      unregisterAsNestedChild: PropTypes.func
    })
  };

  var CellRenderer = function (_React$Component) {
    _inherits(CellRenderer, _React$Component);

    function CellRenderer() {
      var _getPrototypeOf2;

      var _this6;

      _classCallCheck(this, CellRenderer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this6 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CellRenderer)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this6.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this6.props.item
        }
      };
      _this6._separators = {
        highlight: function highlight() {
          var _this6$props = _this6.props,
              cellKey = _this6$props.cellKey,
              prevCellKey = _this6$props.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: function unhighlight() {
          var _this6$props2 = _this6.props,
              cellKey = _this6$props2.cellKey,
              prevCellKey = _this6$props2.prevCellKey;

          _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this6$props3 = _this6.props,
              cellKey = _this6$props3.cellKey,
              prevCellKey = _this6$props3.prevCellKey;

          _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      };
      return _this6;
    }

    _createClass(CellRenderer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: _objectSpread({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props11 = this.props,
            CellRendererComponent = _this$props11.CellRendererComponent,
            ItemSeparatorComponent = _this$props11.ItemSeparatorComponent,
            fillRateHelper = _this$props11.fillRateHelper,
            horizontal = _this$props11.horizontal,
            item = _this$props11.item,
            index = _this$props11.index,
            inversionStyle = _this$props11.inversionStyle,
            parentProps = _this$props11.parentProps;
        var renderItem = parentProps.renderItem,
            getItemLayout = parentProps.getItemLayout;
        invariant(renderItem, 'no renderItem!');
        var element = renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
        var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;
        var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, this.state.separatorProps);
        var cellStyle = inversionStyle ? horizontal ? [{
          flexDirection: 'row-reverse'
        }, inversionStyle] : [{
          flexDirection: 'column-reverse'
        }, inversionStyle] : horizontal ? [{
          flexDirection: 'row'
        }, inversionStyle] : inversionStyle;

        if (!CellRendererComponent) {
          return React.createElement(View, {
            style: cellStyle,
            onLayout: onLayout
          }, element, itemSeparator);
        }

        return React.createElement(CellRendererComponent, _extends({}, this.props, {
          style: cellStyle,
          onLayout: onLayout
        }), element, itemSeparator);
      }
    }]);

    return CellRenderer;
  }(React.Component);

  CellRenderer.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  };

  var VirtualizedCellWrapper = function (_React$Component2) {
    _inherits(VirtualizedCellWrapper, _React$Component2);

    function VirtualizedCellWrapper() {
      _classCallCheck(this, VirtualizedCellWrapper);

      return _possibleConstructorReturn(this, _getPrototypeOf(VirtualizedCellWrapper).apply(this, arguments));
    }

    _createClass(VirtualizedCellWrapper, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedCell: {
            cellKey: this.props.cellKey
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);

    return VirtualizedCellWrapper;
  }(React.Component);

  VirtualizedCellWrapper.childContextTypes = {
    virtualizedCell: PropTypes.shape({
      cellKey: PropTypes.string
    })
  };
  var styles = StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    }
  });
  module.exports = VirtualizedList;
},233,[49,3,48,21,34,37,22,40,36,234,235,65,51,83,232,216,54,71,80,236,79,140,6,104,237]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var InteractionManager = _$$_REQUIRE(_dependencyMap[2]);

  var Batchinator = function () {
    function Batchinator(callback, delayMS) {
      _classCallCheck(this, Batchinator);

      this._delay = delayMS;
      this._callback = callback;
    }

    _createClass(Batchinator, [{
      key: "dispose",
      value: function dispose() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          abort: false
        };

        if (this._taskHandle) {
          this._taskHandle.cancel();

          if (!options.abort) {
            this._callback();
          }

          this._taskHandle = null;
        }
      }
    }, {
      key: "schedule",
      value: function schedule() {
        var _this = this;

        if (this._taskHandle) {
          return;
        }

        var timeoutHandle = setTimeout(function () {
          _this._taskHandle = InteractionManager.runAfterInteractions(function () {
            _this._taskHandle = null;

            _this._callback();
          });
        }, this._delay);
        this._taskHandle = {
          cancel: function cancel() {
            return clearTimeout(timeoutHandle);
          }
        };
      }
    }]);

    return Batchinator;
  }();

  module.exports = Batchinator;
},234,[21,22,189]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var performanceNow = _$$_REQUIRE(_dependencyMap[3]);

  var warning = _$$_REQUIRE(_dependencyMap[4]);

  var Info = function Info() {
    _classCallCheck(this, Info);

    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  };

  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;
  var _sampleRate = null;

  var FillRateHelper = function () {
    _createClass(FillRateHelper, null, [{
      key: "addListener",
      value: function addListener(callback) {
        warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');

        _listeners.push(callback);

        return {
          remove: function remove() {
            _listeners = _listeners.filter(function (listener) {
              return callback !== listener;
            });
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);

    function FillRateHelper(getFrameMetrics) {
      _classCallCheck(this, FillRateHelper);

      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._getFrameMetrics = getFrameMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();

      this._resetData();
    }

    _createClass(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG;
          this._samplesStartTime = performanceNow();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }

        var start = this._samplesStartTime;

        if (start == null) {
          DEBUG;
          return;
        }

        if (this._info.sample_count < _minSampleCount) {
          this._resetData();

          return;
        }

        var total_time_spent = performanceNow() - start;

        var info = _objectSpread({}, this._info, {
          total_time_spent: total_time_spent
        });

        _listeners.forEach(function (listener) {
          return listener(info);
        });

        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, state, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
          return 0;
        }

        var dOffset = scrollMetrics.dOffset,
            offset = scrollMetrics.offset,
            velocity = scrollMetrics.velocity,
            visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = performanceNow();

        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }

        this._anyBlankStartTime = null;

        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }

        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = state.first;

        var firstFrame = this._getFrameMetrics(first);

        while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
          firstFrame = this._getFrameMetrics(first);
          first++;
        }

        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }

        var blankBottom = 0;
        var last = state.last;

        var lastFrame = this._getFrameMetrics(last);

        while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
          lastFrame = this._getFrameMetrics(last);
          last--;
        }

        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }

        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;

        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;

          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }

        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }]);

    return FillRateHelper;
  }();

  module.exports = FillRateHelper;
},235,[48,22,21,101,104]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var ViewabilityHelper = function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };

      _classCallCheck(this, ViewabilityHelper);

      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }

    _createClass(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
        var _this$_config = this._config,
            itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,
            viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];

        if (itemCount === 0) {
          return viewableIndices;
        }

        var firstVisible = -1;

        var _ref = renderRange || {
          first: 0,
          last: itemCount - 1
        },
            first = _ref.first,
            last = _ref.last;

        invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({
          renderRange: renderRange,
          itemCount: itemCount
        }));

        for (var idx = first; idx <= last; idx++) {
          var metrics = getFrameMetrics(idx);

          if (!metrics) {
            continue;
          }

          var top = metrics.offset - scrollOffset;
          var bottom = top + metrics.length;

          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;

            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }

        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var _this = this;

        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
          return;
        }

        var viewableIndices = [];

        if (itemCount) {
          viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
        }

        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
          return v === viewableIndices[ii];
        })) {
          return;
        }

        this._viewableIndices = viewableIndices;

        if (this._config.minimumViewTime) {
          var handle = setTimeout(function () {
            _this._timers.delete(handle);

            _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);

          this._timers.add(handle);
        } else {
          this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        var _this2 = this;

        viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
          return _this2._viewableIndices.includes(ii);
        });
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
          var viewable = createViewToken(ii, true);
          return [viewable.key, viewable];
        }));
        var changed = [];

        for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref4;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref4 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref4 = _i.value;
          }

          var _ref8 = _ref4;

          var _ref3 = _slicedToArray(_ref8, 2);

          var _key2 = _ref3[0];
          var _viewable2 = _ref3[1];

          if (!prevItems.has(_key2)) {
            changed.push(_viewable2);
          }
        }

        for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref7;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref7 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref7 = _i2.value;
          }

          var _ref9 = _ref7;

          var _ref6 = _slicedToArray(_ref9, 2);

          var _key3 = _ref6[0];
          var _viewable3 = _ref6[1];

          if (!nextItems.has(_key3)) {
            changed.push(_objectSpread({}, _viewable3, {
              isViewable: false
            }));
          }
        }

        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed: changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);

    return ViewabilityHelper;
  }();

  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);

      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }

  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }

  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }

  module.exports = ViewabilityHelper;
},236,[48,11,21,22,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
    var out = [];
    var outLength = 0;

    for (var ii = 0; ii < itemCount; ii++) {
      var frame = getFrameMetrics(ii);
      var trailingOffset = frame.offset + frame.length;

      for (var kk = 0; kk < offsets.length; kk++) {
        if (out[kk] == null && trailingOffset >= offsets[kk]) {
          out[kk] = ii;
          outLength++;

          if (kk === offsets.length - 1) {
            invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));
            return out;
          }
        }
      }
    }

    return out;
  }

  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }

  function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
    var data = props.data,
        getItemCount = props.getItemCount,
        maxToRenderPerBatch = props.maxToRenderPerBatch,
        windowSize = props.windowSize;
    var itemCount = getItemCount(data);

    if (itemCount === 0) {
      return prev;
    }

    var offset = scrollMetrics.offset,
        velocity = scrollMetrics.velocity,
        visibleLength = scrollMetrics.visibleLength;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - 0.5 * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;

    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }

    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
        _elementsThatOverlapO2 = _slicedToArray(_elementsThatOverlapO, 4),
        overscanFirst = _elementsThatOverlapO2[0],
        first = _elementsThatOverlapO2[1],
        last = _elementsThatOverlapO2[2],
        overscanLast = _elementsThatOverlapO2[3];

    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first: first,
      last: last
    };
    var newCellCount = newRangeCount(prev, visible);

    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }

      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = first <= prev.first || first > prev.last;
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastWillAddMore = last >= prev.last || last < prev.first;
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);

      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }

      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }

        first--;
      }

      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }

        last++;
      }
    }

    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first: first,
        last: last,
        itemCount: itemCount,
        overscanFirst: overscanFirst,
        overscanLast: overscanLast,
        visible: visible
      }));
    }

    return {
      first: first,
      last: last
    };
  }

  var VirtualizeUtils = {
    computeWindowedRenderLimits: computeWindowedRenderLimits,
    elementsThatOverlapOffsets: elementsThatOverlapOffsets,
    newRangeCount: newRangeCount
  };
  module.exports = VirtualizeUtils;
},237,[11,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var ImageProps = _$$_REQUIRE(_dependencyMap[1]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[4]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[5]);

  var flattenStyle = _$$_REQUIRE(_dependencyMap[6]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[7]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[8]);

  var ImageViewManager = NativeModules.ImageViewManager;
  var RCTImageView = requireNativeComponent('RCTImageView');

  function getSize(uri, success, failure) {
    ImageViewManager.getSize(uri, success, failure || function () {
      console.warn('Failed to get size for image: ' + uri);
    });
  }

  function prefetch(url) {
    return ImageViewManager.prefetchImage(url);
  }

  var Image = function Image(props, forwardedRef) {
    var source = resolveAssetSource(props.source) || {
      uri: undefined,
      width: undefined,
      height: undefined
    };
    var sources;
    var style;

    if (Array.isArray(source)) {
      style = flattenStyle([styles.base, props.style]) || {};
      sources = source;
    } else {
      var _width = source.width,
          _height = source.height,
          uri = source.uri;
      style = flattenStyle([{
        width: _width,
        height: _height
      }, styles.base, props.style]) || {};
      sources = [source];

      if (uri === '') {
        console.warn('source.uri should not be an empty string');
      }
    }

    var resizeMode = props.resizeMode || style.resizeMode || 'cover';
    var tintColor = style.tintColor;

    if (props.src != null) {
      console.warn('The <Image> component requires a `source` property rather than `src`.');
    }

    if (props.children != null) {
      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }

    return React.createElement(RCTImageView, _extends({}, props, {
      ref: forwardedRef,
      style: style,
      resizeMode: resizeMode,
      tintColor: tintColor,
      source: sources
    }));
  };

  Image = React.forwardRef(Image);
  Image.getSize = getSize;
  Image.prefetch = prefetch;
  Image.resolveAssetSource = resolveAssetSource;
  Image.propTypes = ImageProps;
  var styles = StyleSheet.create({
    base: {
      overflow: 'hidden'
    }
  });
  module.exports = Image;
},238,[3,239,8,51,83,54,79,146,152]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[0]);

  var ImageSourcePropType = _$$_REQUIRE(_dependencyMap[1]);

  var ImageStylePropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var StyleSheetPropType = _$$_REQUIRE(_dependencyMap[4]);

  module.exports = {
    style: StyleSheetPropType(ImageStylePropTypes),
    source: ImageSourcePropType,
    defaultSource: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      width: PropTypes.number,
      height: PropTypes.number,
      scale: PropTypes.number
    }), PropTypes.number]),
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    blurRadius: PropTypes.number,
    capInsets: EdgeInsetsPropType,
    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),
    resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'repeat', 'center']),
    testID: PropTypes.string,
    onLayout: PropTypes.func,
    onLoadStart: PropTypes.func,
    onProgress: PropTypes.func,
    onError: PropTypes.func,
    onPartialLoad: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func
  };
},239,[169,240,59,65,170]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var ImageURISourcePropType = PropTypes.shape({
    uri: PropTypes.string,
    bundle: PropTypes.string,
    method: PropTypes.string,
    headers: PropTypes.objectOf(PropTypes.string),
    body: PropTypes.string,
    cache: PropTypes.oneOf(['default', 'reload', 'force-cache', 'only-if-cached']),
    width: PropTypes.number,
    height: PropTypes.number,
    scale: PropTypes.number
  });
  var ImageSourcePropType = PropTypes.oneOfType([ImageURISourcePropType, PropTypes.number, PropTypes.arrayOf(ImageURISourcePropType)]);
  module.exports = ImageSourcePropType;
},240,[65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[6]);

  var MetroListView = _$$_REQUIRE(_dependencyMap[7]);

  var Platform = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var ScrollView = _$$_REQUIRE(_dependencyMap[10]);

  var VirtualizedSectionList = _$$_REQUIRE(_dependencyMap[11]);

  var defaultProps = _objectSpread({}, VirtualizedSectionList.defaultProps, {
    stickySectionHeadersEnabled: true
  });

  var SectionList = function (_React$PureComponent) {
    _inherits(SectionList, _React$PureComponent);

    function SectionList() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, SectionList);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SectionList)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._captureRef = function (ref) {
        _this._wrapperListRef = ref;
      };

      return _this;
    }

    _createClass(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        this._wrapperListRef.scrollToLocation(params);
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
        return React.createElement(List, _extends({}, this.props, {
          ref: this._captureRef
        }));
      }
    }]);

    return SectionList;
  }(React.PureComponent);

  SectionList.defaultProps = defaultProps;
  module.exports = SectionList;
},241,[3,21,22,34,37,40,48,211,50,51,216,242]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _createClass = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var View = _$$_REQUIRE(_dependencyMap[9]);

  var VirtualizedList = _$$_REQUIRE(_dependencyMap[10]);

  var invariant = _$$_REQUIRE(_dependencyMap[11]);

  var VirtualizedSectionList = function (_React$PureComponent) {
    _inherits(VirtualizedSectionList, _React$PureComponent);

    _createClass(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex + 1;

        for (var ii = 0; ii < params.sectionIndex; ii++) {
          index += this.props.sections[ii].data.length + 2;
        }

        var toIndexParams = _objectSpread({}, params, {
          index: index
        });

        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }]);

    function VirtualizedSectionList(props, context) {
      var _this;

      _classCallCheck(this, VirtualizedSectionList);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(VirtualizedSectionList).call(this, props, context));

      _this._keyExtractor = function (item, index) {
        var info = _this._subExtractor(index);

        return info && info.key || String(index);
      };

      _this._convertViewable = function (viewable) {
        invariant(viewable.index != null, 'Received a broken ViewToken');

        var info = _this._subExtractor(viewable.index);

        if (!info) {
          return null;
        }

        var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
        return _objectSpread({}, viewable, {
          index: info.index,
          key: keyExtractor(viewable.item, info.index),
          section: info.section
        });
      };

      _this._onViewableItemsChanged = function (_ref) {
        var viewableItems = _ref.viewableItems,
            changed = _ref.changed;

        if (_this.props.onViewableItemsChanged) {
          _this.props.onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _assertThisInitialized(_assertThisInitialized(_this))).filter(Boolean),
            changed: changed.map(_this._convertViewable, _assertThisInitialized(_assertThisInitialized(_this))).filter(Boolean)
          });
        }
      };

      _this._renderItem = function (_ref2) {
        var item = _ref2.item,
            index = _ref2.index;

        var info = _this._subExtractor(index);

        if (!info) {
          return null;
        }

        var infoIndex = info.index;

        if (infoIndex == null) {
          var section = info.section;

          if (info.header === true) {
            var renderSectionHeader = _this.props.renderSectionHeader;
            return renderSectionHeader ? renderSectionHeader({
              section: section
            }) : null;
          } else {
            var renderSectionFooter = _this.props.renderSectionFooter;
            return renderSectionFooter ? renderSectionFooter({
              section: section
            }) : null;
          }
        } else {
          var renderItem = info.section.renderItem || _this.props.renderItem;

          var SeparatorComponent = _this._getSeparatorComponent(index, info);

          invariant(renderItem, 'no renderItem!');
          return React.createElement(ItemWithSeparator, {
            SeparatorComponent: SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            onUpdateSeparator: _this._onUpdateSeparator,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            ref: function ref(_ref3) {
              _this._cellRefs[info.key] = _ref3;
            },
            renderItem: renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection
          });
        }
      };

      _this._onUpdateSeparator = function (key, newProps) {
        var ref = _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      };

      _this._cellRefs = {};

      _this._captureRef = function (ref) {
        _this._listRef = ref;
      };

      _this.state = _this._computeState(props);
      return _this;
    }

    _createClass(VirtualizedSectionList, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        this.setState(this._computeState(nextProps));
      }
    }, {
      key: "_computeState",
      value: function _computeState(props) {
        var offset = props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = [];
        var itemCount = props.sections.reduce(function (v, section) {
          stickyHeaderIndices.push(v + offset);
          return v + section.data.length + 2;
        }, 0);
        return {
          childProps: _objectSpread({}, props, {
            renderItem: this._renderItem,
            ItemSeparatorComponent: undefined,
            data: props.sections,
            getItemCount: function getItemCount() {
              return itemCount;
            },
            getItem: getItem,
            keyExtractor: this._keyExtractor,
            onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
            stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
          })
        };
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(VirtualizedList, _extends({}, this.state.childProps, {
          ref: this._captureRef
        }));
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var defaultKeyExtractor = this.props.keyExtractor;

        for (var ii = 0; ii < this.props.sections.length; ii++) {
          var section = this.props.sections[ii];
          var key = section.key || String(ii);
          itemIndex -= 1;

          if (itemIndex >= section.data.length + 1) {
            itemIndex -= section.data.length + 1;
          } else if (itemIndex === -1) {
            return {
              section: section,
              key: key + ':header',
              index: null,
              header: true,
              trailingSection: this.props.sections[ii + 1]
            };
          } else if (itemIndex === section.data.length) {
            return {
              section: section,
              key: key + ':footer',
              index: null,
              header: false,
              trailingSection: this.props.sections[ii + 1]
            };
          } else {
            var keyExtractor = section.keyExtractor || defaultKeyExtractor;
            return {
              section: section,
              key: key + ':' + keyExtractor(section.data[itemIndex], itemIndex),
              index: itemIndex,
              leadingItem: section.data[itemIndex - 1],
              leadingSection: this.props.sections[ii - 1],
              trailingItem: section.data[itemIndex + 1],
              trailingSection: this.props.sections[ii + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info) {
        info = info || this._subExtractor(index);

        if (!info) {
          return null;
        }

        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
        var isLastItemInSection = info.index === info.section.data.length - 1;

        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }

        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }

        return null;
      }
    }]);

    return VirtualizedSectionList;
  }(React.PureComponent);

  VirtualizedSectionList.defaultProps = _objectSpread({}, VirtualizedList.defaultProps, {
    data: []
  });

  var ItemWithSeparator = function (_React$Component) {
    _inherits(ItemWithSeparator, _React$Component);

    function ItemWithSeparator() {
      var _getPrototypeOf2;

      var _this2;

      _classCallCheck(this, ItemWithSeparator);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ItemWithSeparator)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this2.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this2.props.item,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.trailingItem,
          trailingSection: _this2.props.trailingSection
        },
        leadingSeparatorProps: {
          highlighted: false,
          leadingItem: _this2.props.leadingItem,
          leadingSection: _this2.props.leadingSection,
          section: _this2.props.section,
          trailingItem: _this2.props.item,
          trailingSection: _this2.props.trailingSection
        }
      };
      _this2._separators = {
        highlight: function highlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: true
            });
          });
        },
        unhighlight: function unhighlight() {
          ['leading', 'trailing'].forEach(function (s) {
            return _this2._separators.updateProps(s, {
              highlighted: false
            });
          });
        },
        updateProps: function updateProps(select, newProps) {
          var _this2$props = _this2.props,
              LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
              cellKey = _this2$props.cellKey,
              prevCellKey = _this2$props.prevCellKey;

          if (select === 'leading' && LeadingSeparatorComponent != null) {
            _this2.setState(function (state) {
              return {
                leadingSeparatorProps: _objectSpread({}, state.leadingSeparatorProps, newProps)
              };
            });
          } else {
            _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
          }
        }
      };
      return _this2;
    }

    _createClass(ItemWithSeparator, [{
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(function (state) {
          return {
            separatorProps: _objectSpread({}, state.separatorProps, newProps)
          };
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            LeadingSeparatorComponent = _this$props.LeadingSeparatorComponent,
            SeparatorComponent = _this$props.SeparatorComponent,
            item = _this$props.item,
            index = _this$props.index,
            section = _this$props.section;
        var element = this.props.renderItem({
          item: item,
          index: index,
          section: section,
          separators: this._separators
        });
        var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, this.state.leadingSeparatorProps);
        var separator = SeparatorComponent && React.createElement(SeparatorComponent, this.state.separatorProps);
        return leadingSeparator || separator ? React.createElement(View, null, leadingSeparator, element, separator) : element;
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        return {
          separatorProps: _objectSpread({}, prevState.separatorProps, {
            leadingItem: props.item,
            leadingSection: props.leadingSection,
            section: props.section,
            trailingItem: props.trailingItem,
            trailingSection: props.trailingSection
          }),
          leadingSeparatorProps: _objectSpread({}, prevState.leadingSeparatorProps, {
            leadingItem: props.leadingItem,
            leadingSection: props.leadingSection,
            section: props.section,
            trailingItem: props.item,
            trailingSection: props.trailingSection
          })
        };
      }
    }]);

    return ItemWithSeparator;
  }(React.Component);

  function getItem(sections, index) {
    if (!sections) {
      return null;
    }

    var itemIdx = index - 1;

    for (var ii = 0; ii < sections.length; ii++) {
      if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
        return sections[ii];
      } else if (itemIdx < sections[ii].data.length) {
        return sections[ii].data[itemIdx];
      } else {
        itemIdx -= sections[ii].data.length + 2;
      }
    }

    return null;
  }

  module.exports = VirtualizedSectionList;
},242,[3,48,21,34,37,22,40,36,51,80,233,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  module.exports = NativeMethodsMixin;
},243,[83]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var EdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var TimerMixin = _$$_REQUIRE(_dependencyMap[3]);

  var Touchable = _$$_REQUIRE(_dependencyMap[4]);

  var View = _$$_REQUIRE(_dependencyMap[5]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[6]);

  var ensurePositiveDelayProps = _$$_REQUIRE(_dependencyMap[7]);

  var warning = _$$_REQUIRE(_dependencyMap[8]);

  var _require = _$$_REQUIRE(_dependencyMap[9]),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityRoles = _require.AccessibilityRoles,
      AccessibilityStates = _require.AccessibilityStates,
      AccessibilityTraits = _require.AccessibilityTraits;

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableWithoutFeedback = createReactClass({
    displayName: 'TouchableWithoutFeedback',
    mixins: [TimerMixin, Touchable.Mixin],
    propTypes: {
      accessible: PropTypes.bool,
      accessibilityLabel: PropTypes.node,
      accessibilityHint: PropTypes.string,
      accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
      accessibilityRole: PropTypes.oneOf(AccessibilityRoles),
      accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(AccessibilityStates)),
      accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
      onFocus: PropTypes.func,
      onBlur: PropTypes.func,
      disabled: PropTypes.bool,
      onPress: PropTypes.func,
      onPressIn: PropTypes.func,
      onPressOut: PropTypes.func,
      onLayout: PropTypes.func,
      onLongPress: PropTypes.func,
      nativeID: PropTypes.string,
      testID: PropTypes.string,
      delayPressIn: PropTypes.number,
      delayPressOut: PropTypes.number,
      delayLongPress: PropTypes.number,
      pressRetentionOffset: EdgeInsetsPropType,
      hitSlop: EdgeInsetsPropType
    },
    getInitialState: function getInitialState() {
      return this.touchableGetInitialState();
    },
    componentDidMount: function componentDidMount() {
      ensurePositiveDelayProps(this.props);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut || 0;
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      var children = child.props.children;

      if (Touchable.TOUCH_TARGET_DEBUG && child.type === View) {
        children = React.Children.toArray(children);
        children.push(Touchable.renderDebugView({
          color: 'red',
          hitSlop: this.props.hitSlop
        }));
      }

      return React.cloneElement(child, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        accessibilityTraits: this.props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        children: children
      });
    }
  });
  module.exports = TouchableWithoutFeedback;
},244,[169,51,65,230,172,80,225,245,104,246]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
    invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
  };

  module.exports = ensurePositiveDelayProps;
},245,[6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
    AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked'],
    AccessibilityRoles: ['none', 'button', 'link', 'search', 'image', 'keyboardkey', 'text', 'adjustable', 'imagebutton', 'header', 'summary'],
    AccessibilityStates: ['selected', 'disabled']
  };
},246,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},247,[248]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[6]);

  var UnimplementedView = function (_React$Component) {
    _inherits(UnimplementedView, _React$Component);

    function UnimplementedView() {
      _classCallCheck(this, UnimplementedView);

      return _possibleConstructorReturn(this, _getPrototypeOf(UnimplementedView).apply(this, arguments));
    }

    _createClass(UnimplementedView, [{
      key: "setNativeProps",
      value: function setNativeProps() {}
    }, {
      key: "render",
      value: function render() {
        var View = _$$_REQUIRE(_dependencyMap[7]);

        return React.createElement(View, {
          style: [styles.unimplementedView, this.props.style]
        }, this.props.children);
      }
    }]);

    return UnimplementedView;
  }(React.Component);

  var styles = StyleSheet.create({
    unimplementedView: {}
  });
  module.exports = UnimplementedView;
},248,[21,22,34,37,40,51,54,80]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var invariant = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var View = _$$_REQUIRE(_dependencyMap[8]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[9]);

  var RCTDatePickerIOS = requireNativeComponent('RCTDatePicker');

  var DatePickerIOS = function (_React$Component) {
    _inherits(DatePickerIOS, _React$Component);

    function DatePickerIOS() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, DatePickerIOS);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DatePickerIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._picker = null;

      _this._onChange = function (event) {
        var nativeTimeStamp = event.nativeEvent.timestamp;
        _this.props.onDateChange && _this.props.onDateChange(new Date(nativeTimeStamp));
        _this.props.onChange && _this.props.onChange(event);
      };

      return _this;
    }

    _createClass(DatePickerIOS, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.props.date) {
          var propsTimeStamp = this.props.date.getTime();

          if (this._picker) {
            this._picker.setNativeProps({
              date: propsTimeStamp
            });
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        invariant(props.date || props.initialDate, 'A selected date or initial date should be specified.');
        return React.createElement(View, {
          style: props.style
        }, React.createElement(RCTDatePickerIOS, {
          ref: function ref(picker) {
            _this2._picker = picker;
          },
          style: styles.datePickerIOS,
          date: props.date ? props.date.getTime() : props.initialDate ? props.initialDate.getTime() : undefined,
          locale: props.locale ? props.locale : undefined,
          maximumDate: props.maximumDate ? props.maximumDate.getTime() : undefined,
          minimumDate: props.minimumDate ? props.minimumDate.getTime() : undefined,
          mode: props.mode,
          minuteInterval: props.minuteInterval,
          timeZoneOffsetInMinutes: props.timeZoneOffsetInMinutes,
          onChange: this._onChange,
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return true;
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            return false;
          }
        }));
      }
    }]);

    return DatePickerIOS;
  }(React.Component);

  DatePickerIOS.DefaultProps = {
    mode: 'datetime'
  };
  var styles = StyleSheet.create({
    datePickerIOS: {
      height: 216
    }
  });
  module.exports = DatePickerIOS;
},249,[21,22,34,37,40,51,6,54,80,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},250,[248]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var Image = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[9]);

  var View = _$$_REQUIRE(_dependencyMap[10]);

  var ensureComponentIsNative = _$$_REQUIRE(_dependencyMap[11]);

  var ImageBackground = function (_React$Component) {
    _inherits(ImageBackground, _React$Component);

    function ImageBackground() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ImageBackground);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ImageBackground)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._viewRef = null;

      _this._captureRef = function (ref) {
        _this._viewRef = ref;
      };

      return _this;
    }

    _createClass(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;

        if (viewRef) {
          ensureComponentIsNative(viewRef);
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            style = _this$props.style,
            imageStyle = _this$props.imageStyle,
            imageRef = _this$props.imageRef,
            props = _objectWithoutProperties(_this$props, ["children", "style", "imageStyle", "imageRef"]);

        return React.createElement(View, {
          accessibilityIgnoresInvertColors: true,
          style: style,
          ref: this._captureRef
        }, React.createElement(Image, _extends({}, props, {
          style: [StyleSheet.absoluteFill, {
            width: style.width,
            height: style.height
          }, imageStyle],
          ref: imageRef
        })), children);
      }
    }]);

    return ImageBackground;
  }(React.Component);

  module.exports = ImageBackground;
},251,[3,9,21,22,34,37,40,238,51,54,80,252]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var ensureComponentIsNative = function ensureComponentIsNative(component) {
    invariant(component && typeof component.setNativeProps === 'function', "Touchable child must either be native or forward setNativeProps to a native component");
  };

  module.exports = ensureComponentIsNative;
},252,[6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var RCTImageEditingManager = _$$_REQUIRE(_dependencyMap[2]).ImageEditingManager;

  var ImageEditor = function () {
    function ImageEditor() {
      _classCallCheck(this, ImageEditor);
    }

    _createClass(ImageEditor, null, [{
      key: "cropImage",
      value: function cropImage(uri, cropData, success, failure) {
        RCTImageEditingManager.cropImage(uri, cropData, success, failure);
      }
    }]);

    return ImageEditor;
  }();

  module.exports = ImageEditor;
},253,[21,22,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var RCTImageStoreManager = _$$_REQUIRE(_dependencyMap[2]).ImageStoreManager;

  var ImageStore = function () {
    function ImageStore() {
      _classCallCheck(this, ImageStore);
    }

    _createClass(ImageStore, null, [{
      key: "hasImageForTag",
      value: function hasImageForTag(uri, callback) {
        if (RCTImageStoreManager.hasImageForTag) {
          RCTImageStoreManager.hasImageForTag(uri, callback);
        } else {
          console.warn('hasImageForTag() not implemented');
        }
      }
    }, {
      key: "removeImageForTag",
      value: function removeImageForTag(uri) {
        if (RCTImageStoreManager.removeImageForTag) {
          RCTImageStoreManager.removeImageForTag(uri);
        } else {
          console.warn('removeImageForTag() not implemented');
        }
      }
    }, {
      key: "addImageFromBase64",
      value: function addImageFromBase64(base64ImageData, success, failure) {
        RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
      }
    }, {
      key: "getBase64ForTag",
      value: function getBase64ForTag(uri, success, failure) {
        RCTImageStoreManager.getBase64ForTag(uri, success, failure);
      }
    }]);

    return ImageStore;
  }();

  module.exports = ImageStore;
},254,[21,22,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[5]);

  var React = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[8]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[9]);

  var RCTInputAccessoryView = requireNativeComponent('RCTInputAccessoryView');

  var InputAccessoryView = function (_React$Component) {
    _inherits(InputAccessoryView, _React$Component);

    function InputAccessoryView() {
      _classCallCheck(this, InputAccessoryView);

      return _possibleConstructorReturn(this, _getPrototypeOf(InputAccessoryView).apply(this, arguments));
    }

    _createClass(InputAccessoryView, [{
      key: "render",
      value: function render() {
        console.warn('<InputAccessoryView> is not supported on Android yet.');

        if (React.Children.count(this.props.children) === 0) {
          return null;
        }

        return React.createElement(RCTInputAccessoryView, {
          style: [this.props.style, styles.container],
          nativeID: this.props.nativeID,
          backgroundColor: this.props.backgroundColor
        }, this.props.children);
      }
    }]);

    return InputAccessoryView;
  }(React.Component);

  var styles = StyleSheet.create({
    container: {
      position: 'absolute'
    }
  });
  module.exports = InputAccessoryView;
},255,[21,22,34,37,40,60,51,54,256,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var React = _$$_REQUIRE(_dependencyMap[1]);

  var EdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[2]);

  var PlatformViewPropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[4]);

  var StyleSheetPropType = _$$_REQUIRE(_dependencyMap[5]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var _require = _$$_REQUIRE(_dependencyMap[7]),
      AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
      AccessibilityTraits = _require.AccessibilityTraits,
      AccessibilityRoles = _require.AccessibilityRoles,
      AccessibilityStates = _require.AccessibilityStates;

  var stylePropType = StyleSheetPropType(ViewStylePropTypes);
  module.exports = _objectSpread({
    accessible: PropTypes.bool,
    accessibilityLabel: PropTypes.node,
    accessibilityHint: PropTypes.string,
    accessibilityActions: PropTypes.arrayOf(PropTypes.string),
    accessibilityIgnoresInvertColors: PropTypes.bool,
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityRole: PropTypes.oneOf(AccessibilityRoles),
    accessibilityStates: PropTypes.arrayOf(PropTypes.oneOf(AccessibilityStates)),
    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),
    accessibilityViewIsModal: PropTypes.bool,
    accessibilityElementsHidden: PropTypes.bool,
    onAccessibilityAction: PropTypes.func,
    onAccessibilityTap: PropTypes.func,
    onMagicTap: PropTypes.func,
    testID: PropTypes.string,
    nativeID: PropTypes.string,
    onResponderGrant: PropTypes.func,
    onResponderMove: PropTypes.func,
    onResponderReject: PropTypes.func,
    onResponderRelease: PropTypes.func,
    onResponderTerminate: PropTypes.func,
    onResponderTerminationRequest: PropTypes.func,
    onStartShouldSetResponder: PropTypes.func,
    onStartShouldSetResponderCapture: PropTypes.func,
    onMoveShouldSetResponder: PropTypes.func,
    onMoveShouldSetResponderCapture: PropTypes.func,
    hitSlop: EdgeInsetsPropType,
    onLayout: PropTypes.func,
    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,
    removeClippedSubviews: PropTypes.bool,
    renderToHardwareTextureAndroid: PropTypes.bool,
    shouldRasterizeIOS: PropTypes.bool,
    collapsable: PropTypes.bool,
    needsOffscreenAlphaCompositing: PropTypes.bool
  }, PlatformViewPropTypes);
},256,[48,51,169,257,65,170,73,246]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var TVViewPropTypes = {};

  if (Platform.isTV || false) {
    TVViewPropTypes = _$$_REQUIRE(_dependencyMap[1]);
  }

  module.exports = TVViewPropTypes;
},257,[50,258]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var TVViewPropTypes = {
    isTVSelectable: PropTypes.bool,
    hasTVPreferredFocus: PropTypes.bool,
    tvParallaxProperties: PropTypes.object,
    tvParallaxShiftDistanceX: PropTypes.number,
    tvParallaxShiftDistanceY: PropTypes.number,
    tvParallaxTiltAngle: PropTypes.number,
    tvParallaxMagnification: PropTypes.number
  };
  module.exports = TVViewPropTypes;
},258,[65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var Keyboard = _$$_REQUIRE(_dependencyMap[7]);

  var LayoutAnimation = _$$_REQUIRE(_dependencyMap[8]);

  var Platform = _$$_REQUIRE(_dependencyMap[9]);

  var React = _$$_REQUIRE(_dependencyMap[10]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[11]);

  var View = _$$_REQUIRE(_dependencyMap[12]);

  var viewRef = 'VIEW';

  var KeyboardAvoidingView = function (_React$Component) {
    _inherits(KeyboardAvoidingView, _React$Component);

    function KeyboardAvoidingView() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, KeyboardAvoidingView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(KeyboardAvoidingView)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._frame = null;
      _this._subscriptions = [];
      _this.state = {
        bottom: 0
      };

      _this._onKeyboardChange = function (event) {
        if (event == null) {
          _this.setState({
            bottom: 0
          });

          return;
        }

        var duration = event.duration,
            easing = event.easing,
            endCoordinates = event.endCoordinates;

        var height = _this._relativeKeyboardHeight(endCoordinates);

        if (_this.state.bottom === height) {
          return;
        }

        if (duration && easing) {
          LayoutAnimation.configureNext({
            duration: duration,
            update: {
              duration: duration,
              type: LayoutAnimation.Types[easing] || 'keyboard'
            }
          });
        }

        _this.setState({
          bottom: height
        });
      };

      _this._onLayout = function (event) {
        _this._frame = event.nativeEvent.layout;
      };

      return _this;
    }

    _createClass(KeyboardAvoidingView, [{
      key: "_relativeKeyboardHeight",
      value: function _relativeKeyboardHeight(keyboardFrame) {
        var frame = this._frame;

        if (!frame || !keyboardFrame) {
          return 0;
        }

        var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
        return Math.max(frame.y + frame.height - keyboardY, 0);
      }
    }, {
      key: "UNSAFE_componentWillUpdate",
      value: function UNSAFE_componentWillUpdate(nextProps, nextState) {
        if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
          nextState.bottom = 0;
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        {
          this._subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._subscriptions.forEach(function (subscription) {
          subscription.remove();
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            behavior = _this$props.behavior,
            children = _this$props.children,
            contentContainerStyle = _this$props.contentContainerStyle,
            enabled = _this$props.enabled,
            keyboardVerticalOffset = _this$props.keyboardVerticalOffset,
            style = _this$props.style,
            props = _objectWithoutProperties(_this$props, ["behavior", "children", "contentContainerStyle", "enabled", "keyboardVerticalOffset", "style"]);

        var bottomHeight = enabled ? this.state.bottom : 0;

        switch (behavior) {
          case 'height':
            var heightStyle;

            if (this._frame != null) {
              heightStyle = {
                height: this._frame.height - bottomHeight,
                flex: 0
              };
            }

            return React.createElement(View, _extends({
              ref: viewRef,
              style: StyleSheet.compose(style, heightStyle),
              onLayout: this._onLayout
            }, props), children);

          case 'position':
            return React.createElement(View, _extends({
              ref: viewRef,
              style: style,
              onLayout: this._onLayout
            }, props), React.createElement(View, {
              style: StyleSheet.compose(contentContainerStyle, {
                bottom: bottomHeight
              })
            }, children));

          case 'padding':
            return React.createElement(View, _extends({
              ref: viewRef,
              style: StyleSheet.compose(style, {
                paddingBottom: bottomHeight
              }),
              onLayout: this._onLayout
            }, props), children);

          default:
            return React.createElement(View, _extends({
              ref: viewRef,
              onLayout: this._onLayout,
              style: style
            }, props), children);
        }
      }
    }]);

    return KeyboardAvoidingView;
  }(React.Component);

  KeyboardAvoidingView.defaultProps = {
    enabled: true,
    keyboardVerticalOffset: 0
  };
  module.exports = KeyboardAvoidingView;
},259,[3,9,21,22,34,37,40,219,220,50,51,54,80]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[9]);

  var View = _$$_REQUIRE(_dependencyMap[10]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[12]);

  var RCTMaskedView = requireNativeComponent('RCTMaskedView');

  var MaskedViewIOS = function (_React$Component) {
    "use strict";

    _inherits(MaskedViewIOS, _React$Component);

    function MaskedViewIOS() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, MaskedViewIOS);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MaskedViewIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._hasWarnedInvalidRenderMask = false;
      return _this;
    }

    _createClass(MaskedViewIOS, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            maskElement = _this$props.maskElement,
            children = _this$props.children,
            otherViewProps = _objectWithoutProperties(_this$props, ["maskElement", "children"]);

        if (!React.isValidElement(maskElement)) {
          if (!this._hasWarnedInvalidRenderMask) {
            console.warn("MaskedView: Invalid `maskElement` prop was passed to MaskedView. Expected a React Element. No mask will render.");
            this._hasWarnedInvalidRenderMask = true;
          }

          return React.createElement(View, otherViewProps, children);
        }

        return React.createElement(RCTMaskedView, otherViewProps, React.createElement(View, {
          pointerEvents: "none",
          style: StyleSheet.absoluteFill
        }, maskElement), children);
      }
    }]);

    return MaskedViewIOS;
  }(React.Component);

  MaskedViewIOS.propTypes = _objectSpread({}, ViewPropTypes, {
    maskElement: PropTypes.element.isRequired
  });
  module.exports = MaskedViewIOS;
},260,[48,9,21,22,34,37,40,65,51,54,80,256,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var _container;

  var AppContainer = _$$_REQUIRE(_dependencyMap[6]);

  var I18nManager = _$$_REQUIRE(_dependencyMap[7]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[8]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[9]);

  var Platform = _$$_REQUIRE(_dependencyMap[10]);

  var React = _$$_REQUIRE(_dependencyMap[11]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[12]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[13]);

  var View = _$$_REQUIRE(_dependencyMap[14]);

  var deprecatedPropType = _$$_REQUIRE(_dependencyMap[15]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[16]);

  var RCTModalHostView = requireNativeComponent('RCTModalHostView');
  var ModalEventEmitter = NativeModules.ModalManager ? new NativeEventEmitter(NativeModules.ModalManager) : null;
  var uniqueModalIdentifier = 0;

  var Modal = function (_React$Component) {
    _inherits(Modal, _React$Component);

    function Modal(props) {
      var _this;

      _classCallCheck(this, Modal);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, props));

      Modal._confirmProps(props);

      _this._identifier = uniqueModalIdentifier++;
      return _this;
    }

    _createClass(Modal, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          virtualizedList: null
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (ModalEventEmitter) {
          this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {
            if (event.modalID === _this2._identifier && _this2.props.onDismiss) {
              _this2.props.onDismiss();
            }
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        Modal._confirmProps(nextProps);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.props.visible === false) {
          return null;
        }

        var containerStyles = {
          backgroundColor: this.props.transparent ? 'transparent' : 'white'
        };
        var animationType = this.props.animationType;

        if (!animationType) {
          animationType = 'none';

          if (this.props.animated) {
            animationType = 'slide';
          }
        }

        var presentationStyle = this.props.presentationStyle;

        if (!presentationStyle) {
          presentationStyle = 'fullScreen';

          if (this.props.transparent) {
            presentationStyle = 'overFullScreen';
          }
        }

        var innerChildren = this.props.children;
        return React.createElement(RCTModalHostView, {
          animationType: animationType,
          presentationStyle: presentationStyle,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          identifier: this._identifier,
          style: styles.modal,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange
        }, React.createElement(View, {
          style: [styles.container, containerStyles]
        }, innerChildren));
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }], [{
      key: "_confirmProps",
      value: function _confirmProps(props) {
        if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
          console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
        }
      }
    }]);

    return Modal;
  }(React.Component);

  Modal.propTypes = {
    animationType: PropTypes.oneOf(['none', 'slide', 'fade']),
    presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),
    transparent: PropTypes.bool,
    hardwareAccelerated: PropTypes.bool,
    visible: PropTypes.bool,
    onRequestClose: Platform.isTV || false ? PropTypes.func.isRequired : PropTypes.func,
    onShow: PropTypes.func,
    onDismiss: PropTypes.func,
    animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),
    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),
    onOrientationChange: PropTypes.func
  };
  Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  };
  Modal.contextTypes = {
    rootTag: PropTypes.number
  };
  Modal.childContextTypes = {
    virtualizedList: PropTypes.object
  };
  var side = I18nManager.isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: (_container = {
      position: 'absolute'
    }, _defineProperty(_container, side, 0), _defineProperty(_container, "top", 0), _container)
  });
  module.exports = Modal;
},261,[49,21,22,34,37,40,262,263,112,8,50,51,65,54,80,70,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var EmitterSubscription = _$$_REQUIRE(_dependencyMap[5]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var View = _$$_REQUIRE(_dependencyMap[11]);

  var AppContainer = function (_React$Component) {
    _inherits(AppContainer, _React$Component);

    function AppContainer() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AppContainer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AppContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        inspector: null,
        mainKey: 1
      };
      _this._subscription = null;
      return _this;
    }

    _createClass(AppContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          rootTag: this.props.rootTag
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscription != null) {
          this._subscription.remove();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var yellowBox = null;
        var innerView = React.createElement(View, {
          collapsable: !this.state.inspector,
          key: this.state.mainKey,
          pointerEvents: "box-none",
          style: styles.appContainer,
          ref: function ref(_ref) {
            _this3._mainRef = _ref;
          }
        }, this.props.children);
        var Wrapper = this.props.WrapperComponent;

        if (Wrapper != null) {
          innerView = React.createElement(Wrapper, null, innerView);
        }

        return React.createElement(View, {
          style: styles.appContainer,
          pointerEvents: "box-none"
        }, innerView, yellowBox, this.state.inspector);
      }
    }]);

    return AppContainer;
  }(React.Component);

  AppContainer.childContextTypes = {
    rootTag: PropTypes.number
  };
  var styles = StyleSheet.create({
    appContainer: {
      flex: 1
    }
  });
  module.exports = AppContainer;
},262,[21,22,34,37,40,43,65,33,51,83,54,80]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var I18nManager = _$$_REQUIRE(_dependencyMap[0]).I18nManager || {
    isRTL: false,
    doLeftAndRightSwapInRTL: true,
    allowRTL: function allowRTL() {},
    forceRTL: function forceRTL() {},
    swapLeftAndRightInRTL: function swapLeftAndRightInRTL() {}
  };
  module.exports = I18nManager;
},263,[8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[7]);

  var Image = _$$_REQUIRE(_dependencyMap[8]);

  var RCTNavigatorManager = _$$_REQUIRE(_dependencyMap[9]).NavigatorManager;

  var React = _$$_REQUIRE(_dependencyMap[10]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[12]);

  var StaticContainer = _$$_REQUIRE(_dependencyMap[13]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[14]);

  var TVEventHandler = _$$_REQUIRE(_dependencyMap[15]);

  var View = _$$_REQUIRE(_dependencyMap[16]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[17]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[18]);

  var invariant = _$$_REQUIRE(_dependencyMap[19]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[20]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[21]);

  var TRANSITIONER_REF = 'transitionerRef';
  var __uid = 0;

  function getuid() {
    return __uid++;
  }

  var NavigatorTransitionerIOS = function (_React$Component) {
    _inherits(NavigatorTransitionerIOS, _React$Component);

    function NavigatorTransitionerIOS() {
      _classCallCheck(this, NavigatorTransitionerIOS);

      return _possibleConstructorReturn(this, _getPrototypeOf(NavigatorTransitionerIOS).apply(this, arguments));
    }

    _createClass(NavigatorTransitionerIOS, [{
      key: "requestSchedulingNavigation",
      value: function requestSchedulingNavigation(cb) {
        RCTNavigatorManager.requestSchedulingJavaScriptNavigation(ReactNative.findNodeHandle(this), cb);
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(RCTNavigator, this.props);
      }
    }]);

    return NavigatorTransitionerIOS;
  }(React.Component);

  var SystemIconLabels = {
    done: true,
    cancel: true,
    edit: true,
    save: true,
    add: true,
    compose: true,
    reply: true,
    action: true,
    organize: true,
    bookmarks: true,
    search: true,
    refresh: true,
    stop: true,
    camera: true,
    trash: true,
    play: true,
    pause: true,
    rewind: true,
    'fast-forward': true,
    undo: true,
    redo: true,
    'page-curl': true
  };
  var SystemIcons = keyMirror(SystemIconLabels);
  var NavigatorIOS = createReactClass({
    displayName: 'NavigatorIOS',
    propTypes: {
      initialRoute: PropTypes.shape({
        component: PropTypes.func.isRequired,
        title: PropTypes.string.isRequired,
        titleImage: Image.propTypes.source,
        passProps: PropTypes.object,
        backButtonIcon: Image.propTypes.source,
        backButtonTitle: PropTypes.string,
        leftButtonIcon: Image.propTypes.source,
        leftButtonTitle: PropTypes.string,
        leftButtonSystemIcon: PropTypes.oneOf(Object.keys(SystemIcons)),
        onLeftButtonPress: PropTypes.func,
        rightButtonIcon: Image.propTypes.source,
        rightButtonTitle: PropTypes.string,
        rightButtonSystemIcon: PropTypes.oneOf(Object.keys(SystemIcons)),
        onRightButtonPress: PropTypes.func,
        wrapperStyle: ViewPropTypes.style,
        navigationBarHidden: PropTypes.bool,
        shadowHidden: PropTypes.bool,
        tintColor: PropTypes.string,
        barTintColor: PropTypes.string,
        barStyle: PropTypes.oneOf(['default', 'black']),
        titleTextColor: PropTypes.string,
        translucent: PropTypes.bool
      }).isRequired,
      navigationBarHidden: PropTypes.bool,
      shadowHidden: PropTypes.bool,
      itemWrapperStyle: ViewPropTypes.style,
      tintColor: PropTypes.string,
      barTintColor: PropTypes.string,
      barStyle: PropTypes.oneOf(['default', 'black']),
      titleTextColor: PropTypes.string,
      translucent: PropTypes.bool,
      interactivePopGestureEnabled: PropTypes.bool
    },
    navigator: undefined,
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this.navigator = {
        push: this.push,
        pop: this.pop,
        popN: this.popN,
        replace: this.replace,
        replaceAtIndex: this.replaceAtIndex,
        replacePrevious: this.replacePrevious,
        replacePreviousAndPop: this.replacePreviousAndPop,
        resetTo: this.resetTo,
        popToRoute: this.popToRoute,
        popToTop: this.popToTop
      };
    },
    componentDidMount: function componentDidMount() {
      this._enableTVEventHandler();
    },
    componentWillUnmount: function componentWillUnmount() {
      this._disableTVEventHandler();
    },
    getDefaultProps: function getDefaultProps() {
      return {
        translucent: true
      };
    },
    getInitialState: function getInitialState() {
      return {
        idStack: [getuid()],
        routeStack: [this.props.initialRoute],
        requestedTopOfStack: 0,
        observedTopOfStack: 0,
        progress: 1,
        fromIndex: 0,
        toIndex: 0,
        makingNavigatorRequest: false,
        updatingAllIndicesAtOrBeyond: 0
      };
    },
    _toFocusOnNavigationComplete: undefined,
    _handleFocusRequest: function _handleFocusRequest(item) {
      if (this.state.makingNavigatorRequest) {
        this._toFocusOnNavigationComplete = item;
      } else {
        this._getFocusEmitter().emit('focus', item);
      }
    },
    _focusEmitter: undefined,
    _getFocusEmitter: function _getFocusEmitter() {
      var focusEmitter = this._focusEmitter;

      if (!focusEmitter) {
        focusEmitter = new EventEmitter();
        this._focusEmitter = focusEmitter;
      }

      return focusEmitter;
    },
    getChildContext: function getChildContext() {
      return {
        onFocusRequested: this._handleFocusRequest,
        focusEmitter: this._getFocusEmitter()
      };
    },
    childContextTypes: {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    },
    _tryLockNavigator: function _tryLockNavigator(cb) {
      this.refs[TRANSITIONER_REF].requestSchedulingNavigation(function (acquiredLock) {
        return acquiredLock && cb();
      });
    },
    _handleNavigatorStackChanged: function _handleNavigatorStackChanged(e) {
      var newObservedTopOfStack = e.nativeEvent.stackLength - 1;
      invariant(newObservedTopOfStack <= this.state.requestedTopOfStack, 'No navigator item should be pushed without JS knowing about it %s %s', newObservedTopOfStack, this.state.requestedTopOfStack);
      var wasWaitingForConfirmation = this.state.requestedTopOfStack !== this.state.observedTopOfStack;

      if (wasWaitingForConfirmation) {
        invariant(newObservedTopOfStack === this.state.requestedTopOfStack, "If waiting for observedTopOfStack to reach requestedTopOfStack, the only valid observedTopOfStack should be requestedTopOfStack.");
      }

      var nextState = {
        observedTopOfStack: newObservedTopOfStack,
        makingNavigatorRequest: false,
        updatingAllIndicesAtOrBeyond: null,
        progress: 1,
        toIndex: newObservedTopOfStack,
        fromIndex: newObservedTopOfStack
      };
      this.setState(nextState, this._eliminateUnneededChildren);
    },
    _eliminateUnneededChildren: function _eliminateUnneededChildren() {
      var updatingAllIndicesAtOrBeyond = this.state.routeStack.length > this.state.observedTopOfStack + 1 ? this.state.observedTopOfStack + 1 : null;
      this.setState({
        idStack: this.state.idStack.slice(0, this.state.observedTopOfStack + 1),
        routeStack: this.state.routeStack.slice(0, this.state.observedTopOfStack + 1),
        requestedTopOfStack: this.state.observedTopOfStack,
        makingNavigatorRequest: true,
        updatingAllIndicesAtOrBeyond: updatingAllIndicesAtOrBeyond
      });
    },
    push: function push(route) {
      var _this = this;

      invariant(!!route, 'Must supply route to push');

      if (this.state.requestedTopOfStack === this.state.observedTopOfStack) {
        this._tryLockNavigator(function () {
          var nextStack = _this.state.routeStack.concat([route]);

          var nextIDStack = _this.state.idStack.concat([getuid()]);

          _this.setState({
            idStack: nextIDStack,
            routeStack: nextStack,
            requestedTopOfStack: nextStack.length - 1,
            makingNavigatorRequest: true,
            updatingAllIndicesAtOrBeyond: nextStack.length - 1
          });
        });
      }
    },
    popN: function popN(n) {
      var _this2 = this;

      if (n === 0) {
        return;
      }

      if (this.state.requestedTopOfStack === this.state.observedTopOfStack) {
        if (this.state.requestedTopOfStack > 0) {
          this._tryLockNavigator(function () {
            var newRequestedTopOfStack = _this2.state.requestedTopOfStack - n;
            invariant(newRequestedTopOfStack >= 0, 'Cannot pop below 0');

            _this2.setState({
              requestedTopOfStack: newRequestedTopOfStack,
              makingNavigatorRequest: true,
              updatingAllIndicesAtOrBeyond: _this2.state.requestedTopOfStack - n
            });
          });
        }
      }
    },
    pop: function pop() {
      this.popN(1);
    },
    replaceAtIndex: function replaceAtIndex(route, index) {
      invariant(!!route, 'Must supply route to replace');

      if (index < 0) {
        index += this.state.routeStack.length;
      }

      if (this.state.routeStack.length <= index) {
        return;
      }

      var nextIDStack = this.state.idStack.slice();
      var nextRouteStack = this.state.routeStack.slice();
      nextIDStack[index] = getuid();
      nextRouteStack[index] = route;
      this.setState({
        idStack: nextIDStack,
        routeStack: nextRouteStack,
        makingNavigatorRequest: false,
        updatingAllIndicesAtOrBeyond: index
      });
    },
    replace: function replace(route) {
      this.replaceAtIndex(route, -1);
    },
    replacePrevious: function replacePrevious(route) {
      this.replaceAtIndex(route, -2);
    },
    popToTop: function popToTop() {
      this.popToRoute(this.state.routeStack[0]);
    },
    popToRoute: function popToRoute(route) {
      var indexOfRoute = this.state.routeStack.indexOf(route);
      invariant(indexOfRoute !== -1, "Calling pop to route for a route that doesn't exist!");
      var numToPop = this.state.routeStack.length - indexOfRoute - 1;
      this.popN(numToPop);
    },
    replacePreviousAndPop: function replacePreviousAndPop(route) {
      var _this3 = this;

      if (this.state.requestedTopOfStack !== this.state.observedTopOfStack) {
        return;
      }

      if (this.state.routeStack.length < 2) {
        return;
      }

      this._tryLockNavigator(function () {
        _this3.replacePrevious(route);

        _this3.setState({
          requestedTopOfStack: _this3.state.requestedTopOfStack - 1,
          makingNavigatorRequest: true
        });
      });
    },
    resetTo: function resetTo(route) {
      invariant(!!route, 'Must supply route to push');

      if (this.state.requestedTopOfStack !== this.state.observedTopOfStack) {
        return;
      }

      this.replaceAtIndex(route, 0);
      this.popToRoute(route);
    },
    _handleNavigationComplete: function _handleNavigationComplete(e) {
      e.stopPropagation();

      if (this._toFocusOnNavigationComplete) {
        this._getFocusEmitter().emit('focus', this._toFocusOnNavigationComplete);

        this._toFocusOnNavigationComplete = null;
      }

      this._handleNavigatorStackChanged(e);
    },
    _routeToStackItem: function _routeToStackItem(routeArg, i) {
      var component = routeArg.component,
          wrapperStyle = routeArg.wrapperStyle,
          passProps = routeArg.passProps,
          route = _objectWithoutProperties(routeArg, ["component", "wrapperStyle", "passProps"]);

      var _this$props = this.props,
          itemWrapperStyle = _this$props.itemWrapperStyle,
          props = _objectWithoutProperties(_this$props, ["itemWrapperStyle"]);

      var shouldUpdateChild = this.state.updatingAllIndicesAtOrBeyond != null && this.state.updatingAllIndicesAtOrBeyond >= i;
      var Component = component;
      return React.createElement(StaticContainer, {
        key: 'nav' + i,
        shouldUpdate: shouldUpdateChild
      }, React.createElement(RCTNavigatorItem, _extends({}, props, route, {
        style: [styles.stackItem, itemWrapperStyle, wrapperStyle]
      }), React.createElement(Component, _extends({
        navigator: this.navigator,
        route: route
      }, passProps))));
    },
    _renderNavigationStackItems: function _renderNavigationStackItems() {
      var shouldRecurseToNavigator = this.state.makingNavigatorRequest || this.state.updatingAllIndicesAtOrBeyond !== null;
      var items = shouldRecurseToNavigator ? this.state.routeStack.map(this._routeToStackItem) : null;
      return React.createElement(StaticContainer, {
        shouldUpdate: shouldRecurseToNavigator
      }, React.createElement(NavigatorTransitionerIOS, {
        ref: TRANSITIONER_REF,
        style: styles.transitioner,
        vertical: this.props.vertical,
        requestedTopOfStack: this.state.requestedTopOfStack,
        onNavigationComplete: this._handleNavigationComplete,
        interactivePopGestureEnabled: this.props.interactivePopGestureEnabled
      }, items));
    },
    _tvEventHandler: undefined,
    _enableTVEventHandler: function _enableTVEventHandler() {
      this._tvEventHandler = new TVEventHandler();

      this._tvEventHandler.enable(this, function (cmp, evt) {
        if (evt && evt.eventType === 'menu') {
          cmp.pop();
        }
      });
    },
    _disableTVEventHandler: function _disableTVEventHandler() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();

        delete this._tvEventHandler;
      }
    },
    render: function render() {
      return React.createElement(View, {
        style: this.props.style
      }, this._renderNavigationStackItems());
    }
  });
  var styles = StyleSheet.create({
    stackItem: {
      backgroundColor: 'white',
      overflow: 'hidden',
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    transitioner: {
      flex: 1
    }
  });
  var RCTNavigator = requireNativeComponent('RCTNavigator');
  var RCTNavigatorItem = requireNativeComponent('RCTNavItem');
  module.exports = NavigatorIOS;
},264,[3,9,21,22,34,37,40,42,238,8,51,65,83,265,54,176,80,256,225,6,146,63]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var StaticContainer = function (_React$Component) {
    _inherits(StaticContainer, _React$Component);

    function StaticContainer() {
      _classCallCheck(this, StaticContainer);

      return _possibleConstructorReturn(this, _getPrototypeOf(StaticContainer).apply(this, arguments));
    }

    _createClass(StaticContainer, [{
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate(nextProps) {
        return !!nextProps.shouldUpdate;
      }
    }, {
      key: "render",
      value: function render() {
        var child = this.props.children;
        return child === null || child === false ? null : React.Children.only(child);
      }
    }]);

    return StaticContainer;
  }(React.Component);

  module.exports = StaticContainer;
},265,[21,22,34,37,40,51]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[5]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[6]);

  var PickerIOS = _$$_REQUIRE(_dependencyMap[7]);

  var PickerAndroid = _$$_REQUIRE(_dependencyMap[8]);

  var Platform = _$$_REQUIRE(_dependencyMap[9]);

  var React = _$$_REQUIRE(_dependencyMap[10]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var StyleSheetPropType = _$$_REQUIRE(_dependencyMap[12]);

  var TextStylePropTypes = _$$_REQUIRE(_dependencyMap[13]);

  var UnimplementedView = _$$_REQUIRE(_dependencyMap[14]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[15]);

  var ViewStylePropTypes = _$$_REQUIRE(_dependencyMap[16]);

  var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
  var pickerStyleType = StyleSheetPropType(_objectSpread({}, ViewStylePropTypes, {
    color: ColorPropType
  }));
  var MODE_DIALOG = 'dialog';
  var MODE_DROPDOWN = 'dropdown';

  var PickerItem = function (_React$Component) {
    _inherits(PickerItem, _React$Component);

    function PickerItem() {
      _classCallCheck(this, PickerItem);

      return _possibleConstructorReturn(this, _getPrototypeOf(PickerItem).apply(this, arguments));
    }

    _createClass(PickerItem, [{
      key: "render",
      value: function render() {
        throw null;
      }
    }]);

    return PickerItem;
  }(React.Component);

  PickerItem.propTypes = {
    label: PropTypes.string.isRequired,
    value: PropTypes.any,
    color: ColorPropType,
    testID: PropTypes.string
  };

  var Picker = function (_React$Component2) {
    _inherits(Picker, _React$Component2);

    function Picker() {
      _classCallCheck(this, Picker);

      return _possibleConstructorReturn(this, _getPrototypeOf(Picker).apply(this, arguments));
    }

    _createClass(Picker, [{
      key: "render",
      value: function render() {
        {
          return React.createElement(PickerIOS, this.props, this.props.children);
        }
      }
    }]);

    return Picker;
  }(React.Component);

  Picker.MODE_DIALOG = MODE_DIALOG;
  Picker.MODE_DROPDOWN = MODE_DROPDOWN;
  Picker.Item = PickerItem;
  Picker.defaultProps = {
    mode: MODE_DIALOG
  };
  Picker.propTypes = _objectSpread({}, ViewPropTypes, {
    style: pickerStyleType,
    selectedValue: PropTypes.any,
    onValueChange: PropTypes.func,
    enabled: PropTypes.bool,
    mode: PropTypes.oneOf(['dialog', 'dropdown']),
    itemStyle: itemStylePropType,
    prompt: PropTypes.string,
    testID: PropTypes.string
  });
  module.exports = Picker;
},266,[21,22,34,37,40,48,60,267,268,50,51,65,170,72,248,256,73]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var View = _$$_REQUIRE(_dependencyMap[8]);

  var processColor = _$$_REQUIRE(_dependencyMap[9]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[10]);

  var RCTPickerIOS = requireNativeComponent('RCTPicker');

  var PickerIOSItem = function PickerIOSItem(props) {
    return null;
  };

  var PickerIOS = function (_React$Component) {
    _inherits(PickerIOS, _React$Component);

    function PickerIOS() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, PickerIOS);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PickerIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._picker = null;
      _this.state = {
        selectedIndex: 0,
        items: []
      };

      _this._onChange = function (event) {
        if (_this.props.onChange) {
          _this.props.onChange(event);
        }

        if (_this.props.onValueChange) {
          _this.props.onValueChange(event.nativeEvent.newValue, event.nativeEvent.newIndex);
        }

        if (_this._picker && _this.state.selectedIndex !== event.nativeEvent.newIndex) {
          _this._picker.setNativeProps({
            selectedIndex: _this.state.selectedIndex
          });
        }
      };

      return _this;
    }

    _createClass(PickerIOS, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(View, {
          style: this.props.style
        }, React.createElement(RCTPickerIOS, {
          ref: function ref(picker) {
            _this2._picker = picker;
          },
          style: [styles.pickerIOS, this.props.itemStyle],
          items: this.state.items,
          selectedIndex: this.state.selectedIndex,
          onChange: this._onChange,
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            return true;
          },
          onResponderTerminationRequest: function onResponderTerminationRequest() {
            return false;
          }
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props) {
        var selectedIndex = 0;
        var items = [];
        React.Children.toArray(props.children).forEach(function (child, index) {
          if (child.props.value === props.selectedValue) {
            selectedIndex = index;
          }

          items.push({
            value: child.props.value,
            label: child.props.label,
            textColor: processColor(child.props.color)
          });
        });
        return {
          selectedIndex: selectedIndex,
          items: items
        };
      }
    }]);

    return PickerIOS;
  }(React.Component);

  PickerIOS.Item = PickerIOSItem;
  var styles = StyleSheet.create({
    pickerIOS: {
      height: 216
    }
  });
  module.exports = PickerIOS;
},267,[21,22,34,37,40,51,83,54,80,74,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},268,[248]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},269,[248]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var Image = _$$_REQUIRE(_dependencyMap[2]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[3]);

  var React = _$$_REQUIRE(_dependencyMap[4]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[5]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[8]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[9]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[10]);

  var RCTProgressView = requireNativeComponent('RCTProgressView');
  var ProgressViewIOS = createReactClass({
    displayName: 'ProgressViewIOS',
    mixins: [NativeMethodsMixin],
    propTypes: _objectSpread({}, ViewPropTypes, {
      progressViewStyle: PropTypes.oneOf(['default', 'bar']),
      progress: PropTypes.number,
      progressTintColor: PropTypes.string,
      trackTintColor: PropTypes.string,
      progressImage: Image.propTypes.source,
      trackImage: Image.propTypes.source
    }),
    render: function render() {
      return React.createElement(RCTProgressView, _extends({}, this.props, {
        style: [styles.progressView, this.props.style]
      }));
    }
  });
  var styles = StyleSheet.create({
    progressView: {
      height: 2
    }
  });
  module.exports = ProgressViewIOS;
},270,[3,48,238,243,51,83,65,54,256,225,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var React = _$$_REQUIRE(_dependencyMap[6]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[8]);

  var RCTSafeAreaView = requireNativeComponent('RCTSafeAreaView');

  var SafeAreaView = function (_React$Component) {
    "use strict";

    _inherits(SafeAreaView, _React$Component);

    function SafeAreaView() {
      _classCallCheck(this, SafeAreaView);

      return _possibleConstructorReturn(this, _getPrototypeOf(SafeAreaView).apply(this, arguments));
    }

    _createClass(SafeAreaView, [{
      key: "render",
      value: function render() {
        return React.createElement(RCTSafeAreaView, this.props);
      }
    }]);

    return SafeAreaView;
  }(React.Component);

  SafeAreaView.propTypes = _objectSpread({}, ViewPropTypes);
  module.exports = SafeAreaView;
},271,[48,21,22,34,37,40,51,256,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[4]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[5]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[6]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[8]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[9]);

  var RCTSegmentedControl = requireNativeComponent('RCTSegmentedControl');
  var SEGMENTED_CONTROL_REFERENCE = 'segmentedcontrol';
  var SegmentedControlIOS = createReactClass({
    displayName: 'SegmentedControlIOS',
    mixins: [NativeMethodsMixin],
    propTypes: _objectSpread({}, ViewPropTypes, {
      values: PropTypes.arrayOf(PropTypes.string),
      selectedIndex: PropTypes.number,
      onValueChange: PropTypes.func,
      onChange: PropTypes.func,
      enabled: PropTypes.bool,
      tintColor: PropTypes.string,
      momentary: PropTypes.bool
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        values: [],
        enabled: true
      };
    },
    _onChange: function _onChange(event) {
      this.props.onChange && this.props.onChange(event);
      this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
    },
    render: function render() {
      return React.createElement(RCTSegmentedControl, _extends({}, this.props, {
        ref: SEGMENTED_CONTROL_REFERENCE,
        style: [styles.segmentedControl, this.props.style],
        onChange: this._onChange
      }));
    }
  });
  var styles = StyleSheet.create({
    segmentedControl: {
      height: 28
    }
  });
  module.exports = SegmentedControlIOS;
},272,[3,48,243,51,83,65,54,256,225,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[1]);

  var Platform = _$$_REQUIRE(_dependencyMap[2]);

  var React = _$$_REQUIRE(_dependencyMap[3]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[4]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[5]);

  var RCTSlider = requireNativeComponent('RCTSlider');

  var Slider = function Slider(props, forwardedRef) {
    var style = StyleSheet.compose(styles.slider, props.style);

    var onValueChange = props.onValueChange && function (event) {
      var userEvent = true;
      props.onValueChange && userEvent && props.onValueChange(event.nativeEvent.value);
    };

    var onChange = onValueChange;

    var onSlidingComplete = props.onSlidingComplete && function (event) {
      props.onSlidingComplete && props.onSlidingComplete(event.nativeEvent.value);
    };

    return React.createElement(RCTSlider, _extends({}, props, {
      ref: forwardedRef,
      style: style,
      onChange: onChange,
      onSlidingComplete: onSlidingComplete,
      onValueChange: onValueChange,
      enabled: !props.disabled,
      onStartShouldSetResponder: function onStartShouldSetResponder() {
        return true;
      },
      onResponderTerminationRequest: function onResponderTerminationRequest() {
        return false;
      }
    }));
  };

  var SliderWithRef = React.forwardRef(Slider);
  SliderWithRef.defaultProps = {
    disabled: false,
    value: 0,
    minimumValue: 0,
    maximumValue: 1,
    step: 0
  };
  var styles;
  {
    styles = StyleSheet.create({
      slider: {
        height: 40
      }
    });
  }
  module.exports = SliderWithRef;
},273,[3,83,50,51,54,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var React = _$$_REQUIRE(_dependencyMap[7]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[8]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[9]);

  var _require = _$$_REQUIRE(_dependencyMap[10]),
      TestModule = _require.TestModule;

  var UIManager = _$$_REQUIRE(_dependencyMap[11]);

  var View = _$$_REQUIRE(_dependencyMap[12]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[13]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[14]);

  var RCTSnapshot = UIManager.RCTSnapshot ? requireNativeComponent('RCTSnapshot') : View;

  var SnapshotViewIOS = function (_React$Component) {
    _inherits(SnapshotViewIOS, _React$Component);

    function SnapshotViewIOS() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, SnapshotViewIOS);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SnapshotViewIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.onDefaultAction = function (event) {
        TestModule.verifySnapshot(TestModule.markTestPassed);
      };

      return _this;
    }

    _createClass(SnapshotViewIOS, [{
      key: "render",
      value: function render() {
        var testIdentifier = this.props.testIdentifier || 'test';
        var onSnapshotReady = this.props.onSnapshotReady || this.onDefaultAction;
        return React.createElement(RCTSnapshot, _extends({
          style: style.snapshot
        }, this.props, {
          onSnapshotReady: onSnapshotReady,
          testIdentifier: testIdentifier
        }));
      }
    }]);

    return SnapshotViewIOS;
  }(React.Component);

  SnapshotViewIOS.propTypes = _objectSpread({}, ViewPropTypes, {
    onSnapshotReady: PropTypes.func,
    testIdentifier: PropTypes.string
  });
  var style = StyleSheet.create({
    snapshot: {
      flex: 1
    }
  });
  module.exports = SnapshotViewIOS;
},274,[48,3,21,22,34,37,40,51,65,54,8,71,80,256,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var SwitchNativeComponent = _$$_REQUIRE(_dependencyMap[7]);

  var Platform = _$$_REQUIRE(_dependencyMap[8]);

  var React = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var Switch = function (_React$Component) {
    _inherits(Switch, _React$Component);

    function Switch() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Switch);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Switch)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._handleChange = function (event) {
        if (_this._nativeSwitchRef == null) {
          return;
        }

        var value = _this.props.value === true;
        {
          _this._nativeSwitchRef.setNativeProps({
            value: value
          });
        }

        if (_this.props.onChange != null) {
          _this.props.onChange(event);
        }

        if (_this.props.onValueChange != null) {
          _this.props.onValueChange(event.nativeEvent.value);
        }
      };

      _this._handleSwitchNativeComponentRef = function (ref) {
        _this._nativeSwitchRef = ref;
      };

      return _this;
    }

    _createClass(Switch, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            disabled = _this$props.disabled,
            ios_backgroundColor = _this$props.ios_backgroundColor,
            onChange = _this$props.onChange,
            onValueChange = _this$props.onValueChange,
            style = _this$props.style,
            thumbColor = _this$props.thumbColor,
            trackColor = _this$props.trackColor,
            value = _this$props.value,
            props = _objectWithoutProperties(_this$props, ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"]);

        var _thumbColor = thumbColor;

        var _trackColorForFalse = trackColor == null ? undefined : trackColor.false;

        var _trackColorForTrue = trackColor == null ? undefined : trackColor.true;

        var _ref = props,
            thumbTintColor = _ref.thumbTintColor,
            tintColor = _ref.tintColor,
            onTintColor = _ref.onTintColor;

        if (thumbTintColor != null) {
          _thumbColor = thumbTintColor;
        }

        if (tintColor != null) {
          _trackColorForFalse = tintColor;
        }

        if (onTintColor != null) {
          _trackColorForTrue = onTintColor;
        }

        var platformProps = {
          disabled: disabled,
          onTintColor: _trackColorForTrue,
          style: StyleSheet.compose({
            height: 31,
            width: 51
          }, StyleSheet.compose(style, ios_backgroundColor == null ? null : {
            backgroundColor: ios_backgroundColor,
            borderRadius: 16
          })),
          thumbTintColor: _thumbColor,
          tintColor: _trackColorForFalse,
          value: value === true
        };
        return React.createElement(SwitchNativeComponent, _extends({}, props, platformProps, {
          onChange: this._handleChange,
          onResponderTerminationRequest: returnsFalse,
          onStartShouldSetResponder: returnsTrue,
          ref: this._handleSwitchNativeComponentRef
        }));
      }
    }]);

    return Switch;
  }(React.Component);

  var returnsFalse = function returnsFalse() {
    return false;
  };

  var returnsTrue = function returnsTrue() {
    return true;
  };

  module.exports = Switch;
},275,[3,9,21,22,34,37,40,276,50,51,54]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[1]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[2]);

  var SwitchNativeComponent = requireNativeComponent('RCTSwitch');
  module.exports = SwitchNativeComponent;
},276,[50,83,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var _extends = _$$_REQUIRE(_dependencyMap[5]);

  var React = _$$_REQUIRE(_dependencyMap[6]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[8]);

  var Platform = _$$_REQUIRE(_dependencyMap[9]);

  var processColor = _$$_REQUIRE(_dependencyMap[10]);

  var StatusBarManager = _$$_REQUIRE(_dependencyMap[11]).StatusBarManager;

  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce(function (prev, cur) {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }

      return prev;
    }, _extends({}, defaultValues));
  }

  function createStackEntry(props) {
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated: props.animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated: props.animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated: props.animated,
        transition: props.showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }

  var StatusBar = function (_React$Component) {
    _inherits(StatusBar, _React$Component);

    function StatusBar() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, StatusBar);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StatusBar)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._stackEntry = null;

      _this._updatePropsStack = function () {
        clearImmediate(StatusBar._updateImmediate);
        StatusBar._updateImmediate = setImmediate(function () {
          var oldProps = StatusBar._currentValues;
          var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);
          {
            if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
              StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
            }

            if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
              StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
            }

            if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
              StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
            }
          }
          StatusBar._currentValues = mergedProps;
        });
      };

      return _this;
    }

    _createClass(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = createStackEntry(this.props);

        StatusBar._propsStack.push(this._stackEntry);

        this._updatePropsStack();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        StatusBar._propsStack.splice(index, 1);

        this._updatePropsStack();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var index = StatusBar._propsStack.indexOf(this._stackEntry);

        this._stackEntry = createStackEntry(this.props);
        StatusBar._propsStack[index] = this._stackEntry;

        this._updatePropsStack();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;
        {
          StatusBarManager.setHidden(hidden, animation);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;
        {
          StatusBarManager.setStyle(style, animated);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        StatusBarManager.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }
        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        StatusBarManager.setColor(processColor(color), animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }
        StatusBar._defaultProps.translucent = translucent;
        StatusBarManager.setTranslucent(translucent);
      }
    }]);

    return StatusBar;
  }(React.Component);

  StatusBar._propsStack = [];
  StatusBar._defaultProps = createStackEntry({
    animated: false,
    showHideTransition: 'fade',
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  });
  StatusBar._updateImmediate = null;
  StatusBar._currentValues = null;
  StatusBar.currentHeight = StatusBarManager.HEIGHT;
  StatusBar.propTypes = {
    hidden: PropTypes.bool,
    animated: PropTypes.bool,
    backgroundColor: ColorPropType,
    translucent: PropTypes.bool,
    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),
    networkActivityIndicatorVisible: PropTypes.bool,
    showHideTransition: PropTypes.oneOf(['fade', 'slide'])
  };
  StatusBar.defaultProps = {
    animated: false,
    showHideTransition: 'fade'
  };
  module.exports = StatusBar;
},277,[21,22,34,37,40,3,51,65,60,50,74,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[2]);

  var _createClass = _$$_REQUIRE(_dependencyMap[3]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5]);

  var _inherits = _$$_REQUIRE(_dependencyMap[6]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var SwipeableRow = _$$_REQUIRE(_dependencyMap[9]);

  var FlatList = _$$_REQUIRE(_dependencyMap[10]);

  var SwipeableFlatList = function (_React$Component) {
    _inherits(SwipeableFlatList, _React$Component);

    function SwipeableFlatList(props, context) {
      var _this;

      _classCallCheck(this, SwipeableFlatList);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SwipeableFlatList).call(this, props, context));
      _this._flatListRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.state.openRowKey) {
          _this.setState({
            openRowKey: null
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderItem = function (info) {
        var slideoutView = _this.props.renderQuickActions(info);

        var key = _this.props.keyExtractor(info.item, info.index);

        if (!slideoutView) {
          return _this.props.renderItem(info);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = true;
        }

        return React.createElement(SwipeableRow, {
          slideoutView: slideoutView,
          isOpen: key === _this.state.openRowKey,
          maxSwipeDistance: _this._getMaxSwipeDistance(info),
          onOpen: function onOpen() {
            return _this._onOpen(key);
          },
          onClose: function onClose() {
            return _this._onClose(key);
          },
          shouldBounceOnMount: shouldBounceOnMount,
          onSwipeEnd: _this._setListViewScrollable,
          onSwipeStart: _this._setListViewNotScrollable
        }, _this.props.renderItem(info));
      };

      _this._setListViewScrollable = function () {
        _this._setListViewScrollableTo(true);
      };

      _this._setListViewNotScrollable = function () {
        _this._setListViewScrollableTo(false);
      };

      _this.state = {
        openRowKey: null
      };
      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      return _this;
    }

    _createClass(SwipeableFlatList, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(FlatList, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._flatListRef = _ref;
          },
          onScroll: this._onScroll,
          renderItem: this._renderItem,
          extraData: this.state
        }));
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(info) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(info);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_setListViewScrollableTo",
      value: function _setListViewScrollableTo(value) {
        if (this._flatListRef) {
          this._flatListRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(key) {
        this.setState({
          openRowKey: key
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(key) {
        this.setState({
          openRowKey: null
        });
      }
    }]);

    return SwipeableFlatList;
  }(React.Component);

  SwipeableFlatList.propTypes = _objectSpread({}, FlatList.propTypes, {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderQuickActions: PropTypes.func.isRequired
  });
  SwipeableFlatList.defaultProps = _objectSpread({}, FlatList.defaultProps, {
    bounceFirstRowOnMount: true,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  });
  module.exports = SwipeableFlatList;
},278,[48,3,21,22,34,37,40,65,51,279,210]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var Animated = _$$_REQUIRE(_dependencyMap[5]);

  var I18nManager = _$$_REQUIRE(_dependencyMap[6]);

  var PanResponder = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[9]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[10]);

  var TimerMixin = _$$_REQUIRE(_dependencyMap[11]);

  var View = _$$_REQUIRE(_dependencyMap[12]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[13]);

  var emptyFunction = _$$_REQUIRE(_dependencyMap[14]);

  var IS_RTL = I18nManager.isRTL;
  var CLOSED_LEFT_POSITION = 0;
  var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;
  var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;
  var SLOW_SPEED_SWIPE_FACTOR = 4;
  var SWIPE_DURATION = 300;
  var ON_MOUNT_BOUNCE_DELAY = 700;
  var ON_MOUNT_BOUNCE_DURATION = 400;
  var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
  var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;
  var RIGHT_SWIPE_THRESHOLD = 120;
  var SwipeableRow = createReactClass({
    displayName: 'SwipeableRow',
    _panResponder: {},
    _previousLeft: CLOSED_LEFT_POSITION,
    mixins: [TimerMixin],
    propTypes: {
      children: PropTypes.any,
      isOpen: PropTypes.bool,
      preventSwipeRight: PropTypes.bool,
      maxSwipeDistance: PropTypes.number.isRequired,
      onOpen: PropTypes.func.isRequired,
      onClose: PropTypes.func.isRequired,
      onSwipeEnd: PropTypes.func.isRequired,
      onSwipeStart: PropTypes.func.isRequired,
      shouldBounceOnMount: PropTypes.bool,
      slideoutView: PropTypes.node.isRequired,
      swipeThreshold: PropTypes.number.isRequired
    },
    getInitialState: function getInitialState() {
      return {
        currentLeft: new Animated.Value(this._previousLeft),
        isSwipeableViewRendered: false,
        rowHeight: null
      };
    },
    getDefaultProps: function getDefaultProps() {
      return {
        isOpen: false,
        preventSwipeRight: false,
        maxSwipeDistance: 0,
        onOpen: emptyFunction,
        onClose: emptyFunction,
        onSwipeEnd: emptyFunction,
        onSwipeStart: emptyFunction,
        swipeThreshold: 30
      };
    },
    UNSAFE_componentWillMount: function UNSAFE_componentWillMount() {
      this._panResponder = PanResponder.create({
        onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
        onPanResponderGrant: this._handlePanResponderGrant,
        onPanResponderMove: this._handlePanResponderMove,
        onPanResponderRelease: this._handlePanResponderEnd,
        onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
        onPanResponderTerminate: this._handlePanResponderEnd,
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
          return false;
        }
      });
    },
    componentDidMount: function componentDidMount() {
      var _this = this;

      if (this.props.shouldBounceOnMount) {
        this.setTimeout(function () {
          _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
        }, ON_MOUNT_BOUNCE_DELAY);
      }
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.isOpen && !nextProps.isOpen) {
        this._animateToClosedPosition();
      }
    },
    render: function render() {
      var slideOutView;

      if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
        slideOutView = React.createElement(View, {
          style: [styles.slideOutContainer, {
            height: this.state.rowHeight
          }]
        }, this.props.slideoutView);
      }

      var swipeableView = React.createElement(Animated.View, {
        onLayout: this._onSwipeableViewLayout,
        style: {
          transform: [{
            translateX: this.state.currentLeft
          }]
        }
      }, this.props.children);
      return React.createElement(View, this._panResponder.panHandlers, slideOutView, swipeableView);
    },
    close: function close() {
      this.props.onClose();

      this._animateToClosedPosition();
    },
    _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
      this.setState({
        isSwipeableViewRendered: true,
        rowHeight: event.nativeEvent.layout.height
      });
    },
    _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
      return gestureState.dy < 10 && this._isValidSwipe(gestureState);
    },
    _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
    _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
      if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
        return;
      }

      this.props.onSwipeStart();

      if (this._isSwipingRightFromClosed(gestureState)) {
        this._swipeSlowSpeed(gestureState);
      } else {
        this._swipeFullSpeed(gestureState);
      }
    },
    _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
    },
    _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
    },
    _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
      this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
    },
    _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
      var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
      return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
    },
    _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
      return false;
    },
    _animateTo: function _animateTo(toValue) {
      var _this2 = this;

      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;
      Animated.timing(this.state.currentLeft, {
        duration: duration,
        toValue: toValue,
        useNativeDriver: true
      }).start(function () {
        _this2._previousLeft = toValue;
        callback();
      });
    },
    _animateToOpenPosition: function _animateToOpenPosition() {
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance);
    },
    _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
      speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
      var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
      var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;

      this._animateTo(-maxSwipeDistance, duration);
    },
    _animateToClosedPosition: function _animateToClosedPosition() {
      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

      this._animateTo(CLOSED_LEFT_POSITION, duration);
    },
    _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
      this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    },
    _animateBounceBack: function _animateBounceBack(duration) {
      var swipeBounceBackDistance = IS_RTL ? -30 : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;

      this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
    },
    _isValidSwipe: function _isValidSwipe(gestureState) {
      if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
        return false;
      }

      return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
    },
    _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
      return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
    },
    _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
      var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;

      if (this._isSwipingRightFromClosed(gestureState)) {
        this.props.onOpen();

        this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
      } else if (this._shouldAnimateRemainder(gestureState)) {
        if (horizontalDistance < 0) {
          this.props.onOpen();

          this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
        } else {
          this.props.onClose();

          this._animateToClosedPosition();
        }
      } else {
        if (this._previousLeft === CLOSED_LEFT_POSITION) {
          this._animateToClosedPosition();
        } else {
          this._animateToOpenPosition();
        }
      }

      this.props.onSwipeEnd();
    }
  });

  var TypedSwipeableRow = function (_React$Component) {
    _inherits(TypedSwipeableRow, _React$Component);

    function TypedSwipeableRow() {
      _classCallCheck(this, TypedSwipeableRow);

      return _possibleConstructorReturn(this, _getPrototypeOf(TypedSwipeableRow).apply(this, arguments));
    }

    _createClass(TypedSwipeableRow, [{
      key: "close",
      value: function close() {}
    }]);

    return TypedSwipeableRow;
  }(React.Component);

  var styles = StyleSheet.create({
    slideOutContainer: {
      bottom: 0,
      left: 0,
      position: 'absolute',
      right: 0,
      top: 0
    }
  });
  module.exports = SwipeableRow;
},279,[21,22,34,37,40,181,263,280,51,65,54,230,80,225,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var InteractionManager = _$$_REQUIRE(_dependencyMap[0]);

  var TouchHistoryMath = _$$_REQUIRE(_dependencyMap[1]);

  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState: function _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create: function create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random()
      };

      PanResponder._initializeGestureState(gestureState);

      var panHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder(e) {
          return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
        },
        onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
          return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
          if (e.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }

          gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
        },
        onResponderGrant: function onResponderGrant(e) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }

          gestureState.x0 = currentCentroidX(e.touchHistory);
          gestureState.y0 = currentCentroidY(e.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;

          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(e, gestureState);
          }

          return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
        },
        onResponderReject: function onResponderReject(e) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
        },
        onResponderRelease: function onResponderRelease(e) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart: function onResponderStart(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;

          if (config.onPanResponderStart) {
            config.onPanResponderStart(e, gestureState);
          }
        },
        onResponderMove: function onResponderMove(e) {
          var touchHistory = e.touchHistory;

          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }

          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);

          if (config.onPanResponderMove) {
            config.onPanResponderMove(e, gestureState);
          }
        },
        onResponderEnd: function onResponderEnd(e) {
          var touchHistory = e.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
        },
        onResponderTerminate: function onResponderTerminate(e) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);

          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest(e) {
          return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
        }
      };
      return {
        panHandlers: panHandlers,
        getInteractionHandle: function getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };

  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }

    if (callback) {
      callback(event, gestureState);
    }
  }

  module.exports = PanResponder;
},280,[189,281]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank;
      var total = 0;
      var count = 0;
      var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

      if (oneTouchData !== null) {
        if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
          total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
          count = 1;
        }
      } else {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrack = touchBank[i];

          if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
            var toAdd = undefined;

            if (ofCurrent && isXAxis) {
              toAdd = touchTrack.currentPageX;
            } else if (ofCurrent && !isXAxis) {
              toAdd = touchTrack.currentPageY;
            } else if (!ofCurrent && isXAxis) {
              toAdd = touchTrack.previousPageX;
            } else {
              toAdd = touchTrack.previousPageY;
            }

            total += toAdd;
            count++;
          }
        }
      }

      return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
  };
  module.exports = TouchHistoryMath;
},281,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _createClass = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var ListView = _$$_REQUIRE(_dependencyMap[6]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[7]);

  var React = _$$_REQUIRE(_dependencyMap[8]);

  var SwipeableListViewDataSource = _$$_REQUIRE(_dependencyMap[9]);

  var SwipeableRow = _$$_REQUIRE(_dependencyMap[10]);

  var SwipeableListView = function (_React$Component) {
    _inherits(SwipeableListView, _React$Component);

    _createClass(SwipeableListView, null, [{
      key: "getNewDataSource",
      value: function getNewDataSource() {
        return new SwipeableListViewDataSource({
          getRowData: function getRowData(data, sectionID, rowID) {
            return data[sectionID][rowID];
          },
          getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
            return data[sectionID];
          },
          rowHasChanged: function rowHasChanged(row1, row2) {
            return row1 !== row2;
          },
          sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
            return s1 !== s2;
          }
        });
      }
    }]);

    function SwipeableListView(props, context) {
      var _this;

      _classCallCheck(this, SwipeableListView);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SwipeableListView).call(this, props, context));
      _this._listViewRef = null;
      _this._shouldBounceFirstRowOnMount = false;

      _this._onScroll = function (e) {
        if (_this.props.dataSource.getOpenRowID()) {
          _this.setState({
            dataSource: _this.state.dataSource.setOpenRowID(null)
          });
        }

        _this.props.onScroll && _this.props.onScroll(e);
      };

      _this._renderRow = function (rowData, sectionID, rowID) {
        var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

        if (!slideoutView) {
          return _this.props.renderRow(rowData, sectionID, rowID);
        }

        var shouldBounceOnMount = false;

        if (_this._shouldBounceFirstRowOnMount) {
          _this._shouldBounceFirstRowOnMount = false;
          shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
        }

        return React.createElement(SwipeableRow, {
          slideoutView: slideoutView,
          isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
          maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
          key: rowID,
          onOpen: function onOpen() {
            return _this._onOpen(rowData.id);
          },
          onClose: function onClose() {
            return _this._onClose(rowData.id);
          },
          onSwipeEnd: function onSwipeEnd() {
            return _this._setListViewScrollable(true);
          },
          onSwipeStart: function onSwipeStart() {
            return _this._setListViewScrollable(false);
          },
          shouldBounceOnMount: shouldBounceOnMount
        }, _this.props.renderRow(rowData, sectionID, rowID));
      };

      _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
      _this.state = {
        dataSource: _this.props.dataSource
      };
      return _this;
    }

    _createClass(SwipeableListView, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
          this.setState({
            dataSource: nextProps.dataSource
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return React.createElement(ListView, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this2._listViewRef = _ref;
          },
          dataSource: this.state.dataSource.getDataSource(),
          onScroll: this._onScroll,
          renderRow: this._renderRow
        }));
      }
    }, {
      key: "_setListViewScrollable",
      value: function _setListViewScrollable(value) {
        if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
          this._listViewRef.setNativeProps({
            scrollEnabled: value
          });
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
          return this._listViewRef.getScrollResponder();
        }
      }
    }, {
      key: "_getMaxSwipeDistance",
      value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
        if (typeof this.props.maxSwipeDistance === 'function') {
          return this.props.maxSwipeDistance(rowData, sectionID, rowID);
        }

        return this.props.maxSwipeDistance;
      }
    }, {
      key: "_onOpen",
      value: function _onOpen(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(rowID)
        });
      }
    }, {
      key: "_onClose",
      value: function _onClose(rowID) {
        this.setState({
          dataSource: this.state.dataSource.setOpenRowID(null)
        });
      }
    }]);

    return SwipeableListView;
  }(React.Component);

  SwipeableListView.propTypes = {
    bounceFirstRowOnMount: PropTypes.bool.isRequired,
    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,
    maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,
    renderRow: PropTypes.func.isRequired,
    renderQuickActions: PropTypes.func.isRequired
  };
  SwipeableListView.defaultProps = {
    bounceFirstRowOnMount: false,
    renderQuickActions: function renderQuickActions() {
      return null;
    }
  };
  module.exports = SwipeableListView;
},282,[3,21,34,37,22,40,212,65,51,283,279]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var ListViewDataSource = _$$_REQUIRE(_dependencyMap[2]);

  var SwipeableListViewDataSource = function () {
    function SwipeableListViewDataSource(params) {
      var _this = this;

      _classCallCheck(this, SwipeableListViewDataSource);

      this._dataSource = new ListViewDataSource({
        getRowData: params.getRowData,
        getSectionHeaderData: params.getSectionHeaderData,
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
        },
        sectionHeaderHasChanged: params.sectionHeaderHasChanged
      });
    }

    _createClass(SwipeableListViewDataSource, [{
      key: "cloneWithRowsAndSections",
      value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
        this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);
        this._dataBlob = dataBlob;
        this.rowIdentities = this._dataSource.rowIdentities;
        this.sectionIdentities = this._dataSource.sectionIdentities;
        return this;
      }
    }, {
      key: "getDataSource",
      value: function getDataSource() {
        return this._dataSource;
      }
    }, {
      key: "getOpenRowID",
      value: function getOpenRowID() {
        return this._openRowID;
      }
    }, {
      key: "getFirstRowID",
      value: function getFirstRowID() {
        if (this.rowIdentities) {
          return this.rowIdentities[0] && this.rowIdentities[0][0];
        }

        return Object.keys(this._dataBlob)[0];
      }
    }, {
      key: "getLastRowID",
      value: function getLastRowID() {
        if (this.rowIdentities && this.rowIdentities.length) {
          var lastSection = this.rowIdentities[this.rowIdentities.length - 1];

          if (lastSection && lastSection.length) {
            return lastSection[lastSection.length - 1];
          }
        }

        return Object.keys(this._dataBlob)[this._dataBlob.length - 1];
      }
    }, {
      key: "setOpenRowID",
      value: function setOpenRowID(rowID) {
        this._previousOpenRowID = this._openRowID;
        this._openRowID = rowID;
        this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);
        return this;
      }
    }]);

    return SwipeableListViewDataSource;
  }();

  module.exports = SwipeableListViewDataSource;
},283,[21,22,214]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4]);

  var _inherits = _$$_REQUIRE(_dependencyMap[5]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[6]);

  var React = _$$_REQUIRE(_dependencyMap[7]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[8]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[9]);

  var TabBarItemIOS = _$$_REQUIRE(_dependencyMap[10]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[12]);

  var RCTTabBar = requireNativeComponent('RCTTabBar');

  var TabBarIOS = function (_React$Component) {
    _inherits(TabBarIOS, _React$Component);

    function TabBarIOS() {
      _classCallCheck(this, TabBarIOS);

      return _possibleConstructorReturn(this, _getPrototypeOf(TabBarIOS).apply(this, arguments));
    }

    _createClass(TabBarIOS, [{
      key: "render",
      value: function render() {
        return React.createElement(RCTTabBar, {
          style: [styles.tabGroup, this.props.style],
          unselectedTintColor: this.props.unselectedTintColor,
          unselectedItemTintColor: this.props.unselectedItemTintColor,
          tintColor: this.props.tintColor,
          barTintColor: this.props.barTintColor,
          barStyle: this.props.barStyle,
          itemPositioning: this.props.itemPositioning,
          translucent: this.props.translucent !== false
        }, this.props.children);
      }
    }]);

    return TabBarIOS;
  }(React.Component);

  TabBarIOS.Item = TabBarItemIOS;
  TabBarIOS.propTypes = _objectSpread({}, ViewPropTypes, {
    style: ViewPropTypes.style,
    unselectedTintColor: ColorPropType,
    tintColor: ColorPropType,
    unselectedItemTintColor: ColorPropType,
    barTintColor: ColorPropType,
    barStyle: PropTypes.oneOf(['default', 'black']),
    translucent: PropTypes.bool,
    itemPositioning: PropTypes.oneOf(['fill', 'center', 'auto'])
  });
  var styles = StyleSheet.create({
    tabGroup: {
      flex: 1
    }
  });
  module.exports = TabBarIOS;
},284,[48,21,22,34,37,40,60,51,65,54,285,256,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[2]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[3]);

  var _createClass = _$$_REQUIRE(_dependencyMap[4]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[5]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[6]);

  var _inherits = _$$_REQUIRE(_dependencyMap[7]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[8]);

  var Image = _$$_REQUIRE(_dependencyMap[9]);

  var React = _$$_REQUIRE(_dependencyMap[10]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var StaticContainer = _$$_REQUIRE(_dependencyMap[12]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[13]);

  var View = _$$_REQUIRE(_dependencyMap[14]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[15]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[16]);

  var TabBarItemIOS = function (_React$Component) {
    _inherits(TabBarItemIOS, _React$Component);

    function TabBarItemIOS() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, TabBarItemIOS);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabBarItemIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        hasBeenSelected: false
      };
      return _this;
    }

    _createClass(TabBarItemIOS, [{
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        if (this.props.selected) {
          this.setState({
            hasBeenSelected: true
          });
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.state.hasBeenSelected || nextProps.selected) {
          this.setState({
            hasBeenSelected: true
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            children = _this$props.children,
            props = _objectWithoutProperties(_this$props, ["style", "children"]);

        if (this.state.hasBeenSelected) {
          var tabContents = React.createElement(StaticContainer, {
            shouldUpdate: this.props.selected
          }, children);
        } else {
          var tabContents = React.createElement(View, null);
        }

        return React.createElement(RCTTabBarItem, _extends({}, props, {
          style: [styles.tab, style]
        }), tabContents);
      }
    }]);

    return TabBarItemIOS;
  }(React.Component);

  TabBarItemIOS.propTypes = _objectSpread({}, ViewPropTypes, {
    badge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    badgeColor: ColorPropType,
    systemIcon: PropTypes.oneOf(['bookmarks', 'contacts', 'downloads', 'favorites', 'featured', 'history', 'more', 'most-recent', 'most-viewed', 'recents', 'search', 'top-rated']),
    icon: Image.propTypes.source,
    selectedIcon: Image.propTypes.source,
    onPress: PropTypes.func,
    renderAsOriginal: PropTypes.bool,
    selected: PropTypes.bool,
    style: ViewPropTypes.style,
    title: PropTypes.string,
    isTVSelectable: PropTypes.bool
  });
  var styles = StyleSheet.create({
    tab: {
      position: 'absolute',
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
  var RCTTabBarItem = requireNativeComponent('RCTTabBarItem');
  module.exports = TabBarItemIOS;
},285,[48,3,9,21,22,34,37,40,60,238,51,65,265,54,80,256,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var _extends = _$$_REQUIRE(_dependencyMap[5]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[6]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[7]);

  var DocumentSelectionState = _$$_REQUIRE(_dependencyMap[8]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[9]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[10]);

  var Platform = _$$_REQUIRE(_dependencyMap[11]);

  var React = _$$_REQUIRE(_dependencyMap[12]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[13]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[14]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[15]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[16]);

  var Text = _$$_REQUIRE(_dependencyMap[17]);

  var TextAncestor = _$$_REQUIRE(_dependencyMap[18]);

  var TextInputState = _$$_REQUIRE(_dependencyMap[19]);

  var TimerMixin = _$$_REQUIRE(_dependencyMap[20]);

  var TouchableWithoutFeedback = _$$_REQUIRE(_dependencyMap[21]);

  var UIManager = _$$_REQUIRE(_dependencyMap[22]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[23]);

  var emptyFunction = _$$_REQUIRE(_dependencyMap[24]);

  var invariant = _$$_REQUIRE(_dependencyMap[25]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[26]);

  var warning = _$$_REQUIRE(_dependencyMap[27]);

  var AndroidTextInput;
  var RCTMultilineTextInputView;
  var RCTSinglelineTextInputView;
  {
    RCTMultilineTextInputView = requireNativeComponent('RCTMultilineTextInputView');
    RCTSinglelineTextInputView = requireNativeComponent('RCTSinglelineTextInputView');
  }
  var onlyMultiline = {
    onTextInput: true,
    children: true
  };
  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];
  var TextInput = createReactClass({
    displayName: 'TextInput',
    statics: {
      State: {
        currentlyFocusedField: TextInputState.currentlyFocusedField,
        focusTextInput: TextInputState.focusTextInput,
        blurTextInput: TextInputState.blurTextInput
      }
    },
    propTypes: _objectSpread({}, ViewPropTypes, {
      autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),
      autoCorrect: PropTypes.bool,
      spellCheck: PropTypes.bool,
      autoFocus: PropTypes.bool,
      allowFontScaling: PropTypes.bool,
      editable: PropTypes.bool,
      keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
      keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),
      returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
      returnKeyLabel: PropTypes.string,
      maxLength: PropTypes.number,
      numberOfLines: PropTypes.number,
      disableFullscreenUI: PropTypes.bool,
      enablesReturnKeyAutomatically: PropTypes.bool,
      multiline: PropTypes.bool,
      textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
      onBlur: PropTypes.func,
      onFocus: PropTypes.func,
      onChange: PropTypes.func,
      onChangeText: PropTypes.func,
      onContentSizeChange: PropTypes.func,
      onTextInput: PropTypes.func,
      onEndEditing: PropTypes.func,
      onSelectionChange: PropTypes.func,
      onSubmitEditing: PropTypes.func,
      onKeyPress: PropTypes.func,
      onLayout: PropTypes.func,
      onScroll: PropTypes.func,
      placeholder: PropTypes.string,
      placeholderTextColor: ColorPropType,
      scrollEnabled: PropTypes.bool,
      secureTextEntry: PropTypes.bool,
      selectionColor: ColorPropType,
      selectionState: PropTypes.instanceOf(DocumentSelectionState),
      selection: PropTypes.shape({
        start: PropTypes.number.isRequired,
        end: PropTypes.number
      }),
      value: PropTypes.string,
      defaultValue: PropTypes.string,
      clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
      clearTextOnFocus: PropTypes.bool,
      selectTextOnFocus: PropTypes.bool,
      blurOnSubmit: PropTypes.bool,
      style: Text.propTypes.style,
      underlineColorAndroid: ColorPropType,
      inlineImageLeft: PropTypes.string,
      inlineImagePadding: PropTypes.number,
      dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
      caretHidden: PropTypes.bool,
      contextMenuHidden: PropTypes.bool,
      inputAccessoryViewID: PropTypes.string,
      textContentType: PropTypes.oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password'])
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        allowFontScaling: true,
        underlineColorAndroid: 'transparent'
      };
    },
    mixins: [NativeMethodsMixin, TimerMixin],
    isFocused: function isFocused() {
      return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
    },
    _inputRef: undefined,
    _focusSubscription: undefined,
    _lastNativeText: undefined,
    _lastNativeSelection: undefined,
    componentDidMount: function componentDidMount() {
      var _this = this;

      this._lastNativeText = this.props.value;
      var tag = ReactNative.findNodeHandle(this._inputRef);

      if (tag != null) {
        TextInputState.registerInput(tag);
      }

      if (this.context.focusEmitter) {
        this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
          if (_this === el) {
            _this.requestAnimationFrame(_this.focus);
          } else if (_this.isFocused()) {
            _this.blur();
          }
        });

        if (this.props.autoFocus) {
          this.context.onFocusRequested(this);
        }
      } else {
        if (this.props.autoFocus) {
          this.requestAnimationFrame(this.focus);
        }
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      this._focusSubscription && this._focusSubscription.remove();

      if (this.isFocused()) {
        this.blur();
      }

      var tag = ReactNative.findNodeHandle(this._inputRef);

      if (tag != null) {
        TextInputState.unregisterInput(tag);
      }
    },
    contextTypes: {
      onFocusRequested: PropTypes.func,
      focusEmitter: PropTypes.instanceOf(EventEmitter)
    },
    clear: function clear() {
      this.setNativeProps({
        text: ''
      });
    },
    render: function render() {
      var textInput;
      {
        textInput = UIManager.RCTVirtualText ? this._renderIOS() : this._renderIOSLegacy();
      }
      return React.createElement(TextAncestor.Provider, {
        value: true
      }, textInput);
    },
    _getText: function _getText() {
      return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
    },
    _setNativeRef: function _setNativeRef(ref) {
      this._inputRef = ref;
    },
    _renderIOSLegacy: function _renderIOSLegacy() {
      var textContainer;

      var props = _extends({}, this.props);

      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      if (!props.multiline) {
        textContainer = React.createElement(RCTSinglelineTextInputView, _extends({
          ref: this._setNativeRef
        }, props, {
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onSelectionChange: this._onSelectionChange,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText()
        }));
      } else {
        var children = props.children;
        var childCount = 0;
        React.Children.forEach(children, function () {
          return ++childCount;
        });
        invariant(!(props.value && childCount), 'Cannot specify both value and children.');

        if (childCount >= 1) {
          children = React.createElement(Text, {
            style: props.style,
            allowFontScaling: props.allowFontScaling
          }, children);
        }

        if (props.inputView) {
          children = [children, props.inputView];
        }

        props.style.unshift(styles.multilineInput);
        textContainer = React.createElement(RCTMultilineTextInputView, _extends({
          ref: this._setNativeRef
        }, props, {
          children: children,
          onFocus: this._onFocus,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onContentSizeChange: this.props.onContentSizeChange,
          onSelectionChange: this._onSelectionChange,
          onTextInput: this._onTextInput,
          onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
          text: this._getText(),
          dataDetectorTypes: this.props.dataDetectorTypes,
          onScroll: this._onScroll
        }));
      }

      return React.createElement(TouchableWithoutFeedback, {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: true,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityRole: props.accessibilityRole,
        accessibilityStates: props.accessibilityStates,
        nativeID: this.props.nativeID,
        testID: props.testID
      }, textContainer);
    },
    _renderIOS: function _renderIOS() {
      var props = _extends({}, this.props);

      props.style = [this.props.style];

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var RCTTextInputView = props.multiline ? RCTMultilineTextInputView : RCTSinglelineTextInputView;

      if (props.multiline) {
        props.style.unshift(styles.multilineInput);
      }

      var textContainer = React.createElement(RCTTextInputView, _extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll
      }));
      return React.createElement(TouchableWithoutFeedback, {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: true,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityRole: props.accessibilityRole,
        accessibilityStates: props.accessibilityStates,
        nativeID: this.props.nativeID,
        testID: props.testID
      }, textContainer);
    },
    _renderAndroid: function _renderAndroid() {
      var props = _extends({}, this.props);

      props.style = [this.props.style];
      props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];
      var children = this.props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');

      if (childCount > 1) {
        children = React.createElement(Text, null, children);
      }

      if (props.selection && props.selection.end == null) {
        props.selection = {
          start: props.selection.start,
          end: props.selection.start
        };
      }

      var textContainer = React.createElement(AndroidTextInput, _extends({
        ref: this._setNativeRef
      }, props, {
        mostRecentEventCount: 0,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        text: this._getText(),
        children: children,
        disableFullscreenUI: this.props.disableFullscreenUI,
        textBreakStrategy: this.props.textBreakStrategy,
        onScroll: this._onScroll
      }));
      return React.createElement(TouchableWithoutFeedback, {
        onLayout: props.onLayout,
        onPress: this._onPress,
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        nativeID: this.props.nativeID,
        testID: this.props.testID
      }, textContainer);
    },
    _onFocus: function _onFocus(event) {
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.focus();
      }
    },
    _onPress: function _onPress(event) {
      if (this.props.editable || this.props.editable === undefined) {
        this.focus();
      }
    },
    _onChange: function _onChange(event) {
      if (this._inputRef) {
        this._inputRef.setNativeProps({
          mostRecentEventCount: event.nativeEvent.eventCount
        });
      }

      var text = event.nativeEvent.text;
      this.props.onChange && this.props.onChange(event);
      this.props.onChangeText && this.props.onChangeText(text);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeText = text;
      this.forceUpdate();
    },
    _onSelectionChange: function _onSelectionChange(event) {
      this.props.onSelectionChange && this.props.onSelectionChange(event);

      if (!this._inputRef) {
        return;
      }

      this._lastNativeSelection = event.nativeEvent.selection;

      if (this.props.selection || this.props.selectionState) {
        this.forceUpdate();
      }
    },
    componentDidUpdate: function componentDidUpdate() {
      var nativeProps = {};

      if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
        nativeProps.text = this.props.value;
      }

      var selection = this.props.selection;

      if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
        nativeProps.selection = this.props.selection;
      }

      if (Object.keys(nativeProps).length > 0 && this._inputRef) {
        this._inputRef.setNativeProps(nativeProps);
      }

      if (this.props.selectionState && selection) {
        this.props.selectionState.update(selection.start, selection.end);
      }
    },
    _onBlur: function _onBlur(event) {
      this.blur();

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }

      if (this.props.selectionState) {
        this.props.selectionState.blur();
      }
    },
    _onTextInput: function _onTextInput(event) {
      this.props.onTextInput && this.props.onTextInput(event);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event);
    }
  });

  var InternalTextInputType = function (_ReactNative$NativeCo) {
    _inherits(InternalTextInputType, _ReactNative$NativeCo);

    function InternalTextInputType() {
      _classCallCheck(this, InternalTextInputType);

      return _possibleConstructorReturn(this, _getPrototypeOf(InternalTextInputType).apply(this, arguments));
    }

    _createClass(InternalTextInputType, [{
      key: "clear",
      value: function clear() {}
    }, {
      key: "isFocused",
      value: function isFocused() {}
    }]);

    return InternalTextInputType;
  }(ReactNative.NativeComponent);

  var TypedTextInput = TextInput;
  var styles = StyleSheet.create({
    multilineInput: {
      paddingTop: 5
    }
  });
  module.exports = TypedTextInput;
},286,[21,22,34,37,40,3,48,60,287,42,243,50,51,225,65,83,54,167,81,145,230,244,71,256,46,6,146,104]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var mixInEventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  var DocumentSelectionState = function () {
    function DocumentSelectionState(anchor, focus) {
      _classCallCheck(this, DocumentSelectionState);

      this._anchorOffset = anchor;
      this._focusOffset = focus;
      this._hasFocus = false;
    }

    _createClass(DocumentSelectionState, [{
      key: "update",
      value: function update(anchor, focus) {
        if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
          this._anchorOffset = anchor;
          this._focusOffset = focus;
          this.emit('update');
        }
      }
    }, {
      key: "constrainLength",
      value: function constrainLength(maxLength) {
        this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
      }
    }, {
      key: "focus",
      value: function focus() {
        if (!this._hasFocus) {
          this._hasFocus = true;
          this.emit('focus');
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        if (this._hasFocus) {
          this._hasFocus = false;
          this.emit('blur');
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        return this._hasFocus;
      }
    }, {
      key: "isCollapsed",
      value: function isCollapsed() {
        return this._anchorOffset === this._focusOffset;
      }
    }, {
      key: "isBackward",
      value: function isBackward() {
        return this._anchorOffset > this._focusOffset;
      }
    }, {
      key: "getAnchorOffset",
      value: function getAnchorOffset() {
        return this._hasFocus ? this._anchorOffset : null;
      }
    }, {
      key: "getFocusOffset",
      value: function getFocusOffset() {
        return this._hasFocus ? this._focusOffset : null;
      }
    }, {
      key: "getStartOffset",
      value: function getStartOffset() {
        return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "getEndOffset",
      value: function getEndOffset() {
        return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
      }
    }, {
      key: "overlaps",
      value: function overlaps(start, end) {
        return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
      }
    }]);

    return DocumentSelectionState;
  }();

  mixInEventEmitter(DocumentSelectionState, {
    blur: true,
    focus: true,
    update: true
  });
  module.exports = DocumentSelectionState;
},287,[21,22,288]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var EventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var EventEmitterWithHolding = _$$_REQUIRE(_dependencyMap[2]);

  var EventHolder = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var keyOf = _$$_REQUIRE(_dependencyMap[5]);

  var TYPES_KEY = keyOf({
    __types: true
  });

  function mixInEventEmitter(cls, types) {
    invariant(types, 'Must supply set of valid event types');
    var target = cls.prototype || cls;
    invariant(!target.__eventEmitter, 'An active emitter is already mixed in');
    var ctor = cls.constructor;

    if (ctor) {
      invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
    }

    if (target.hasOwnProperty(TYPES_KEY)) {
      _extends(target.__types, types);
    } else if (target.__types) {
      target.__types = _extends({}, target.__types, types);
    } else {
      target.__types = types;
    }

    _extends(target, EventEmitterMixin);
  }

  var EventEmitterMixin = {
    emit: function emit(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
    },
    emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
      return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
    },
    addListener: function addListener(eventType, listener, context) {
      return this.__getEventEmitter().addListener(eventType, listener, context);
    },
    once: function once(eventType, listener, context) {
      return this.__getEventEmitter().once(eventType, listener, context);
    },
    addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
      return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
    },
    addListenerMap: function addListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
      return this.__getEventEmitter().addListenerMap(listenerMap, context);
    },
    removeAllListeners: function removeAllListeners() {
      this.__getEventEmitter().removeAllListeners();
    },
    removeCurrentListener: function removeCurrentListener() {
      this.__getEventEmitter().removeCurrentListener();
    },
    releaseHeldEventType: function releaseHeldEventType(eventType) {
      this.__getEventEmitter().releaseHeldEventType(eventType);
    },
    __getEventEmitter: function __getEventEmitter() {
      if (!this.__eventEmitter) {
        var emitter = new EventEmitter();
        var holder = new EventHolder();
        this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
      }

      return this.__eventEmitter;
    }
  };
  module.exports = mixInEventEmitter;
},288,[3,42,289,290,6,291]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var EventEmitterWithHolding = function () {
    function EventEmitterWithHolding(emitter, holder) {
      _classCallCheck(this, EventEmitterWithHolding);

      this._emitter = emitter;
      this._eventHolder = holder;
      this._currentEventToken = null;
      this._emittingHeldEvents = false;
    }

    _createClass(EventEmitterWithHolding, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener, context);
      }
    }, {
      key: "once",
      value: function once(eventType, listener, context) {
        return this._emitter.once(eventType, listener, context);
      }
    }, {
      key: "addRetroactiveListener",
      value: function addRetroactiveListener(eventType, listener, context) {
        var subscription = this._emitter.addListener(eventType, listener, context);

        this._emittingHeldEvents = true;

        this._eventHolder.emitToListener(eventType, listener, context);

        this._emittingHeldEvents = false;
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "removeCurrentListener",
      value: function removeCurrentListener() {
        this._emitter.removeCurrentListener();
      }
    }, {
      key: "listeners",
      value: function listeners(eventType) {
        return this._emitter.listeners(eventType);
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var _this$_emitter;

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        (_this$_emitter = this._emitter).emit.apply(_this$_emitter, [eventType].concat(args));
      }
    }, {
      key: "emitAndHold",
      value: function emitAndHold(eventType) {
        var _this$_eventHolder, _this$_emitter2;

        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        this._currentEventToken = (_this$_eventHolder = this._eventHolder).holdEvent.apply(_this$_eventHolder, [eventType].concat(args));

        (_this$_emitter2 = this._emitter).emit.apply(_this$_emitter2, [eventType].concat(args));

        this._currentEventToken = null;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        if (this._currentEventToken) {
          this._eventHolder.releaseEvent(this._currentEventToken);
        } else if (this._emittingHeldEvents) {
          this._eventHolder.releaseCurrentEvent();
        }
      }
    }, {
      key: "releaseHeldEventType",
      value: function releaseHeldEventType(eventType) {
        this._eventHolder.releaseEventType(eventType);
      }
    }]);

    return EventEmitterWithHolding;
  }();

  module.exports = EventEmitterWithHolding;
},289,[21,22]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var EventHolder = function () {
    function EventHolder() {
      _classCallCheck(this, EventHolder);

      this._heldEvents = {};
      this._currentEventKey = null;
    }

    _createClass(EventHolder, [{
      key: "holdEvent",
      value: function holdEvent(eventType) {
        this._heldEvents[eventType] = this._heldEvents[eventType] || [];
        var eventsOfType = this._heldEvents[eventType];
        var key = {
          eventType: eventType,
          index: eventsOfType.length
        };

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        eventsOfType.push(args);
        return key;
      }
    }, {
      key: "emitToListener",
      value: function emitToListener(eventType, listener, context) {
        var _this = this;

        var eventsOfType = this._heldEvents[eventType];

        if (!eventsOfType) {
          return;
        }

        var origEventKey = this._currentEventKey;
        eventsOfType.forEach(function (eventHeld, index) {
          if (!eventHeld) {
            return;
          }

          _this._currentEventKey = {
            eventType: eventType,
            index: index
          };
          listener.apply(context, eventHeld);
        });
        this._currentEventKey = origEventKey;
      }
    }, {
      key: "releaseCurrentEvent",
      value: function releaseCurrentEvent() {
        invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
        this._currentEventKey && this.releaseEvent(this._currentEventKey);
      }
    }, {
      key: "releaseEvent",
      value: function releaseEvent(token) {
        delete this._heldEvents[token.eventType][token.index];
      }
    }, {
      key: "releaseEventType",
      value: function releaseEventType(type) {
        this._heldEvents[type] = [];
      }
    }]);

    return EventHolder;
  }();

  module.exports = EventHolder;
},290,[21,22,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var keyOf = function keyOf(oneKeyObj) {
    var key;

    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }

      return key;
    }

    return null;
  };

  module.exports = keyOf;
},291,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var warning = _$$_REQUIRE(_dependencyMap[0]);

  var ToastAndroid = {
    show: function show(message, duration) {
      warning(false, 'ToastAndroid is not supported on this platform.');
    }
  };
  module.exports = ToastAndroid;
},292,[104]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},293,[248]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var ColorPropType = _$$_REQUIRE(_dependencyMap[1]);

  var NativeMethodsMixin = _$$_REQUIRE(_dependencyMap[2]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[3]);

  var Platform = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var ReactNativeViewAttributes = _$$_REQUIRE(_dependencyMap[6]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[7]);

  var Touchable = _$$_REQUIRE(_dependencyMap[8]);

  var TouchableWithoutFeedback = _$$_REQUIRE(_dependencyMap[9]);

  var View = _$$_REQUIRE(_dependencyMap[10]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var createReactClass = _$$_REQUIRE(_dependencyMap[12]);

  var ensurePositiveDelayProps = _$$_REQUIRE(_dependencyMap[13]);

  var DEFAULT_PROPS = {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  };
  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };
  var TouchableHighlight = createReactClass({
    displayName: 'TouchableHighlight',
    propTypes: _objectSpread({}, TouchableWithoutFeedback.propTypes, {
      activeOpacity: PropTypes.number,
      underlayColor: ColorPropType,
      style: ViewPropTypes.style,
      onShowUnderlay: PropTypes.func,
      onHideUnderlay: PropTypes.func,
      hasTVPreferredFocus: PropTypes.bool,
      tvParallaxProperties: PropTypes.object,
      testOnly_pressed: PropTypes.bool
    }),
    mixins: [NativeMethodsMixin, Touchable.Mixin],
    getDefaultProps: function getDefaultProps() {
      return DEFAULT_PROPS;
    },
    getInitialState: function getInitialState() {
      this._isMounted = false;

      if (this.props.testOnly_pressed) {
        return _objectSpread({}, this.touchableGetInitialState(), {
          extraChildStyle: {
            opacity: this.props.activeOpacity
          },
          extraUnderlayStyle: {
            backgroundColor: this.props.underlayColor
          }
        });
      } else {
        return _objectSpread({}, this.touchableGetInitialState(), {
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
      }
    },
    componentDidMount: function componentDidMount() {
      this._isMounted = true;
      ensurePositiveDelayProps(this.props);
    },
    componentWillUnmount: function componentWillUnmount() {
      this._isMounted = false;
      clearTimeout(this._hideTimeout);
    },
    UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
      ensurePositiveDelayProps(nextProps);
    },
    viewConfig: {
      uiViewClassName: 'RCTView',
      validAttributes: ReactNativeViewAttributes.RCTView
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      this._showUnderlay();

      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      if (!this._hideTimeout) {
        this._hideUnderlay();
      }

      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandlePress: function touchableHandlePress(e) {
      clearTimeout(this._hideTimeout);

      if (!Platform.isTV) {
        this._showUnderlay();

        this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut);
      }

      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut;
    },
    _showUnderlay: function _showUnderlay() {
      if (!this._isMounted || !this._hasPressHandler()) {
        return;
      }

      this.setState({
        extraChildStyle: {
          opacity: this.props.activeOpacity
        },
        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor
        }
      });
      this.props.onShowUnderlay && this.props.onShowUnderlay();
    },
    _hideUnderlay: function _hideUnderlay() {
      clearTimeout(this._hideTimeout);
      this._hideTimeout = null;

      if (this.props.testOnly_pressed) {
        return;
      }

      if (this._hasPressHandler()) {
        this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });
        this.props.onHideUnderlay && this.props.onHideUnderlay();
      }
    },
    _hasPressHandler: function _hasPressHandler() {
      return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
    },
    render: function render() {
      var child = React.Children.only(this.props.children);
      return React.createElement(View, {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityStates: this.props.accessibilityStates,
        style: StyleSheet.compose(this.props.style, this.state.extraUnderlayStyle),
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        nativeID: this.props.nativeID,
        testID: this.props.testID
      }, React.cloneElement(child, {
        style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)
      }), Touchable.renderDebugView({
        color: 'green',
        hitSlop: this.props.hitSlop
      }));
    }
  });
  module.exports = TouchableHighlight;
},294,[48,60,243,65,50,51,162,54,172,244,80,256,225,245]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},295,[248]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _extends = _$$_REQUIRE(_dependencyMap[1]);

  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[2]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[3]);

  var _createClass = _$$_REQUIRE(_dependencyMap[4]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[5]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[6]);

  var _inherits = _$$_REQUIRE(_dependencyMap[7]);

  var ActivityIndicator = _$$_REQUIRE(_dependencyMap[8]);

  var EdgeInsetsPropType = _$$_REQUIRE(_dependencyMap[9]);

  var Linking = _$$_REQUIRE(_dependencyMap[10]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[11]);

  var React = _$$_REQUIRE(_dependencyMap[12]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[13]);

  var ScrollView = _$$_REQUIRE(_dependencyMap[14]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[15]);

  var Text = _$$_REQUIRE(_dependencyMap[16]);

  var UIManager = _$$_REQUIRE(_dependencyMap[17]);

  var View = _$$_REQUIRE(_dependencyMap[18]);

  var ViewPropTypes = _$$_REQUIRE(_dependencyMap[19]);

  var WebViewShared = _$$_REQUIRE(_dependencyMap[20]);

  var deprecatedPropType = _$$_REQUIRE(_dependencyMap[21]);

  var invariant = _$$_REQUIRE(_dependencyMap[22]);

  var keyMirror = _$$_REQUIRE(_dependencyMap[23]);

  var processDecelerationRate = _$$_REQUIRE(_dependencyMap[24]);

  var requireNativeComponent = _$$_REQUIRE(_dependencyMap[25]);

  var resolveAssetSource = _$$_REQUIRE(_dependencyMap[26]);

  var RCTWebViewManager = _$$_REQUIRE(_dependencyMap[27]).WebViewManager;

  var RCTWKWebViewManager = _$$_REQUIRE(_dependencyMap[27]).WKWebViewManager;

  var BGWASH = 'rgba(255,255,255,0.8)';
  var RCT_WEBVIEW_REF = 'webview';
  var WebViewState = keyMirror({
    IDLE: null,
    LOADING: null,
    ERROR: null
  });
  var NavigationType = keyMirror({
    click: true,
    formsubmit: true,
    backforward: true,
    reload: true,
    formresubmit: true,
    other: true
  });
  var JSNavigationScheme = 'react-js-navigation';
  var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'trackingNumber', 'flightNumber', 'lookupSuggestion', 'none', 'all'];

  var defaultRenderLoading = function defaultRenderLoading() {
    return React.createElement(View, {
      style: styles.loadingView
    }, React.createElement(ActivityIndicator, null));
  };

  var defaultRenderError = function defaultRenderError(errorDomain, errorCode, errorDesc) {
    return React.createElement(View, {
      style: styles.errorContainer
    }, React.createElement(Text, {
      style: styles.errorTextTitle
    }, "Error loading page"), React.createElement(Text, {
      style: styles.errorText
    }, 'Domain: ' + errorDomain), React.createElement(Text, {
      style: styles.errorText
    }, 'Error Code: ' + errorCode), React.createElement(Text, {
      style: styles.errorText
    }, 'Description: ' + errorDesc));
  };

  var WebView = function (_React$Component) {
    _inherits(WebView, _React$Component);

    function WebView() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, WebView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WebView)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        viewState: WebViewState.IDLE,
        lastErrorEvent: null,
        startInLoadingState: true
      };

      _this.goForward = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this._getCommands().goForward, null);
      };

      _this.goBack = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this._getCommands().goBack, null);
      };

      _this.reload = function () {
        _this.setState({
          viewState: WebViewState.LOADING
        });

        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this._getCommands().reload, null);
      };

      _this.stopLoading = function () {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this._getCommands().stopLoading, null);
      };

      _this.postMessage = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this._getCommands().postMessage, [String(data)]);
      };

      _this.injectJavaScript = function (data) {
        UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), _this._getCommands().injectJavaScript, [data]);
      };

      _this._updateNavigationState = function (event) {
        if (_this.props.onNavigationStateChange) {
          _this.props.onNavigationStateChange(event.nativeEvent);
        }
      };

      _this.getWebViewHandle = function () {
        return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
      };

      _this._onLoadingStart = function (event) {
        var onLoadStart = _this.props.onLoadStart;
        onLoadStart && onLoadStart(event);

        _this._updateNavigationState(event);
      };

      _this._onLoadingError = function (event) {
        event.persist();
        var _this$props = _this.props,
            onError = _this$props.onError,
            onLoadEnd = _this$props.onLoadEnd;
        onError && onError(event);
        onLoadEnd && onLoadEnd(event);
        console.warn('Encountered an error loading page', event.nativeEvent);

        _this.setState({
          lastErrorEvent: event.nativeEvent,
          viewState: WebViewState.ERROR
        });
      };

      _this._onLoadingFinish = function (event) {
        var _this$props2 = _this.props,
            onLoad = _this$props2.onLoad,
            onLoadEnd = _this$props2.onLoadEnd;
        onLoad && onLoad(event);
        onLoadEnd && onLoadEnd(event);

        _this.setState({
          viewState: WebViewState.IDLE
        });

        _this._updateNavigationState(event);
      };

      _this._onMessage = function (event) {
        var onMessage = _this.props.onMessage;
        onMessage && onMessage(event);
      };

      return _this;
    }

    _createClass(WebView, [{
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        if (this.props.startInLoadingState) {
          this.setState({
            viewState: WebViewState.LOADING
          });
        }

        if (this.props.useWebKit === true && this.props.scalesPageToFit !== undefined) {
          console.warn('The scalesPageToFit property is not supported when useWebKit = true');
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var otherView = null;
        var scalesPageToFit;

        if (this.props.useWebKit) {
          scalesPageToFit = this.props.scalesPageToFit;
        } else {
          var _this$props$scalesPag = this.props.scalesPageToFit;
          scalesPageToFit = _this$props$scalesPag === undefined ? true : _this$props$scalesPag;
        }

        if (this.state.viewState === WebViewState.LOADING) {
          otherView = (this.props.renderLoading || defaultRenderLoading)();
        } else if (this.state.viewState === WebViewState.ERROR) {
          var errorEvent = this.state.lastErrorEvent;
          invariant(errorEvent != null, 'lastErrorEvent expected to be non-null');
          otherView = (this.props.renderError || defaultRenderError)(errorEvent.domain, errorEvent.code, errorEvent.description);
        } else if (this.state.viewState !== WebViewState.IDLE) {
          console.error('RCTWebView invalid state encountered: ' + this.state.loading);
        }

        var webViewStyles = [styles.container, styles.webView, this.props.style];

        if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
          webViewStyles.push(styles.hidden);
        }

        var nativeConfig = this.props.nativeConfig || {};
        var viewManager = nativeConfig.viewManager;

        if (this.props.useWebKit) {
          viewManager = viewManager || RCTWKWebViewManager;
        } else {
          viewManager = viewManager || RCTWebViewManager;
        }

        var compiledWhitelist = ['about:blank'].concat(_toConsumableArray(this.props.originWhitelist || [])).map(WebViewShared.originWhitelistToRegex);

        var onShouldStartLoadWithRequest = function onShouldStartLoadWithRequest(event) {
          var shouldStart = true;
          var url = event.nativeEvent.url;
          var origin = WebViewShared.extractOrigin(url);
          var passesWhitelist = compiledWhitelist.some(function (x) {
            return new RegExp(x).test(origin);
          });
          shouldStart = shouldStart && passesWhitelist;

          if (!passesWhitelist) {
            Linking.openURL(url);
          }

          if (_this2.props.onShouldStartLoadWithRequest) {
            shouldStart = shouldStart && _this2.props.onShouldStartLoadWithRequest(event.nativeEvent);
          }

          viewManager.startLoadWithResult(!!shouldStart, event.nativeEvent.lockIdentifier);
        };

        var decelerationRate = processDecelerationRate(this.props.decelerationRate);
        var source = this.props.source || {};

        if (this.props.html) {
          source.html = this.props.html;
        } else if (this.props.url) {
          source.uri = this.props.url;
        }

        var messagingEnabled = typeof this.props.onMessage === 'function';
        var NativeWebView = nativeConfig.component;

        if (this.props.useWebKit) {
          NativeWebView = NativeWebView || RCTWKWebView;
        } else {
          NativeWebView = NativeWebView || RCTWebView;
        }

        var webView = React.createElement(NativeWebView, _extends({
          ref: RCT_WEBVIEW_REF,
          key: "webViewKey",
          style: webViewStyles,
          source: resolveAssetSource(source),
          injectedJavaScript: this.props.injectedJavaScript,
          bounces: this.props.bounces,
          scrollEnabled: this.props.scrollEnabled,
          decelerationRate: decelerationRate,
          contentInset: this.props.contentInset,
          automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
          onLoadingStart: this._onLoadingStart,
          onLoadingFinish: this._onLoadingFinish,
          onLoadingError: this._onLoadingError,
          messagingEnabled: messagingEnabled,
          onMessage: this._onMessage,
          onShouldStartLoadWithRequest: onShouldStartLoadWithRequest,
          scalesPageToFit: scalesPageToFit,
          allowsInlineMediaPlayback: this.props.allowsInlineMediaPlayback,
          mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
          dataDetectorTypes: this.props.dataDetectorTypes
        }, nativeConfig.props));
        return React.createElement(View, {
          style: styles.container
        }, webView, otherView);
      }
    }, {
      key: "_getCommands",
      value: function _getCommands() {
        if (!this.props.useWebKit) {
          return UIManager.RCTWebView.Commands;
        }

        return UIManager.RCTWKWebView.Commands;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (!(prevProps.useWebKit && this.props.useWebKit)) {
          return;
        }

        this._showRedboxOnPropChanges(prevProps, 'allowsInlineMediaPlayback');

        this._showRedboxOnPropChanges(prevProps, 'mediaPlaybackRequiresUserAction');

        this._showRedboxOnPropChanges(prevProps, 'dataDetectorTypes');

        if (this.props.scalesPageToFit !== undefined) {
          console.warn('The scalesPageToFit property is not supported when useWebKit = true');
        }
      }
    }, {
      key: "_showRedboxOnPropChanges",
      value: function _showRedboxOnPropChanges(prevProps, propName) {
        if (this.props[propName] !== prevProps[propName]) {
          console.error("Changes to property " + propName + " do nothing after the initial render.");
        }
      }
    }]);

    return WebView;
  }(React.Component);

  WebView.JSNavigationScheme = JSNavigationScheme;
  WebView.NavigationType = NavigationType;
  WebView.propTypes = _objectSpread({}, ViewPropTypes, {
    html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),
    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      method: PropTypes.string,
      headers: PropTypes.object,
      body: PropTypes.string
    }), PropTypes.shape({
      html: PropTypes.string,
      baseUrl: PropTypes.string
    }), PropTypes.number]),
    useWebKit: PropTypes.bool,
    renderError: PropTypes.func,
    renderLoading: PropTypes.func,
    onLoad: PropTypes.func,
    onLoadEnd: PropTypes.func,
    onLoadStart: PropTypes.func,
    onError: PropTypes.func,
    bounces: PropTypes.bool,
    decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),
    scrollEnabled: PropTypes.bool,
    automaticallyAdjustContentInsets: PropTypes.bool,
    contentInset: EdgeInsetsPropType,
    onNavigationStateChange: PropTypes.func,
    onMessage: PropTypes.func,
    startInLoadingState: PropTypes.bool,
    style: ViewPropTypes.style,
    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),
    javaScriptEnabled: PropTypes.bool,
    thirdPartyCookiesEnabled: PropTypes.bool,
    domStorageEnabled: PropTypes.bool,
    injectedJavaScript: PropTypes.string,
    userAgent: PropTypes.string,
    scalesPageToFit: PropTypes.bool,
    onShouldStartLoadWithRequest: PropTypes.func,
    allowsInlineMediaPlayback: PropTypes.bool,
    mediaPlaybackRequiresUserAction: PropTypes.bool,
    originWhitelist: PropTypes.arrayOf(PropTypes.string),
    injectJavaScript: PropTypes.func,
    mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),
    nativeConfig: PropTypes.shape({
      component: PropTypes.any,
      props: PropTypes.object,
      viewManager: PropTypes.object
    })
  });
  WebView.defaultProps = {
    originWhitelist: WebViewShared.defaultOriginWhitelist
  };
  var RCTWebView = requireNativeComponent('RCTWebView', WebView, WebView.extraNativeComponentConfig);
  var RCTWKWebView = requireNativeComponent('RCTWKWebView', WebView, WebView.extraNativeComponentConfig);
  var styles = StyleSheet.create({
    container: {
      flex: 1
    },
    errorContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: BGWASH
    },
    errorText: {
      fontSize: 14,
      textAlign: 'center',
      marginBottom: 2
    },
    errorTextTitle: {
      fontSize: 15,
      fontWeight: '500',
      marginBottom: 10
    },
    hidden: {
      height: 0,
      flex: 0
    },
    loadingView: {
      backgroundColor: BGWASH,
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      height: 100
    },
    webView: {
      backgroundColor: '#ffffff'
    }
  });
  module.exports = WebView;
},296,[48,3,17,21,22,34,37,40,47,169,297,65,51,83,216,54,167,71,80,256,298,70,6,63,228,146,152,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[5]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[6]);

  var Platform = _$$_REQUIRE(_dependencyMap[7]);

  var invariant = _$$_REQUIRE(_dependencyMap[8]);

  var LinkingManager = NativeModules.LinkingManager;

  var Linking = function (_NativeEventEmitter) {
    _inherits(Linking, _NativeEventEmitter);

    function Linking() {
      _classCallCheck(this, Linking);

      return _possibleConstructorReturn(this, _getPrototypeOf(Linking).call(this, LinkingManager));
    }

    _createClass(Linking, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        this.addListener(type, handler);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        this.removeListener(type, handler);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);

        return LinkingManager.openURL(url);
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);

        return LinkingManager.canOpenURL(url);
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return LinkingManager.getInitialURL();
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        invariant(url, 'Invalid URL: cannot be empty');
      }
    }]);

    return Linking;
  }(NativeEventEmitter);

  module.exports = new Linking();
},297,[21,22,34,37,40,112,8,50,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var escapeStringRegexp = _$$_REQUIRE(_dependencyMap[0]);

  var WebViewShared = {
    defaultOriginWhitelist: ['http://*', 'https://*'],
    extractOrigin: function extractOrigin(url) {
      var result = /^[A-Za-z0-9]+:(\/\/)?[^/]*/.exec(url);
      return result === null ? null : result[0];
    },
    originWhitelistToRegex: function originWhitelistToRegex(originWhitelist) {
      return escapeStringRegexp(originWhitelist).replace(/\\\*/g, '.*');
    }
  };
  module.exports = WebViewShared;
},298,[299]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

  module.exports = function (str) {
    if (typeof str !== 'string') {
      throw new TypeError('Expected a string');
    }

    return str.replace(matchOperatorsRe, '\\$&');
  };
},299,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var RCTActionSheetManager = _$$_REQUIRE(_dependencyMap[1]).ActionSheetManager;

  var invariant = _$$_REQUIRE(_dependencyMap[2]);

  var processColor = _$$_REQUIRE(_dependencyMap[3]);

  var ActionSheetIOS = {
    showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTActionSheetManager.showActionSheetWithOptions(_objectSpread({}, options, {
        tintColor: processColor(options.tintColor)
      }), callback);
    },
    showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      RCTActionSheetManager.showShareActionSheetWithOptions(_objectSpread({}, options, {
        tintColor: processColor(options.tintColor)
      }), failureCallback, successCallback);
    }
  };
  module.exports = ActionSheetIOS;
},300,[48,8,6,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[1]);

  var BugReporting = _$$_REQUIRE(_dependencyMap[2]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[3]);

  var ReactNative = _$$_REQUIRE(_dependencyMap[4]);

  var SceneTracker = _$$_REQUIRE(_dependencyMap[5]);

  var infoLog = _$$_REQUIRE(_dependencyMap[6]);

  var invariant = _$$_REQUIRE(_dependencyMap[7]);

  var renderApplication = _$$_REQUIRE(_dependencyMap[8]);

  var runnables = {};
  var runCount = 1;
  var sections = {};
  var tasks = new Map();

  var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
    return component();
  };

  var wrapperComponentProvider;
  var AppRegistry = {
    setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    registerConfig: function registerConfig(config) {
      config.forEach(function (appConfig) {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          invariant(appConfig.component != null, "AppRegistry.registerConfig(...): Every config is expected to set either `run` or `component`, but `%s` has neither.", appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent: function registerComponent(appKey, componentProvider, section) {
      runnables[appKey] = {
        componentProvider: componentProvider,
        run: function run(appParameters) {
          renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.fabric);
        }
      };

      if (section) {
        sections[appKey] = runnables[appKey];
      }

      return appKey;
    },
    registerRunnable: function registerRunnable(appKey, run) {
      runnables[appKey] = {
        run: run
      };
      return appKey;
    },
    registerSection: function registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys: function getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys: function getSectionKeys() {
      return Object.keys(sections);
    },
    getSections: function getSections() {
      return _objectSpread({}, sections);
    },
    getRunnable: function getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry: function getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: _objectSpread({}, runnables)
      };
    },
    setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication: function runApplication(appKey, appParameters) {
      var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(false) + ', development-level warning are ' + 'OFF' + ', performance optimizations are ' + 'ON';
      infoLog(msg);
      BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
        return msg;
      });
      invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + "Hint: This error often happens when you're running the packager " + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + "folder and run 'npm start').\n\n" + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');
      SceneTracker.setActiveScene({
        name: appKey
      });
      runnables[appKey].run(appParameters);
    },
    unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
      ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
    },
    registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
      if (tasks.has(taskKey)) {
        console.warn("registerHeadlessTask called multiple times for same key '" + taskKey + "'");
      }

      tasks.set(taskKey, task);
    },
    startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = tasks.get(taskKey);

      if (!taskProvider) {
        throw new Error("No task registered for key " + taskKey);
      }

      taskProvider()(data).then(function () {
        return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      }).catch(function (reason) {
        console.error(reason);
        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
      });
    }
  };
  BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);
  module.exports = AppRegistry;
},301,[48,15,302,8,83,304,140,6,305]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[3]);

  var Map = _$$_REQUIRE(_dependencyMap[4]);

  var infoLog = _$$_REQUIRE(_dependencyMap[5]);

  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', function () {
      return _$$_REQUIRE(_dependencyMap[6])();
    });
  }

  var BugReporting = function () {
    function BugReporting() {
      _classCallCheck(this, BugReporting);
    }

    _createClass(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }

        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();

        if (source.has(key)) {
          console.warn("BugReporting.add* called multiple times for same key '" + key + "'");
        }

        source.set(key, callback);
        return {
          remove: function remove() {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};

        for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref3 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref3 = _i.value;
          }

          var _ref7 = _ref3;

          var _ref2 = _slicedToArray(_ref7, 2);

          var _key3 = _ref2[0];
          var _callback2 = _ref2[1];
          extraData[_key3] = _callback2();
        }

        var fileData = {};

        for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref6;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref6 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref6 = _i2.value;
          }

          var _ref8 = _ref6;

          var _ref5 = _slicedToArray(_ref8, 2);

          var _key4 = _ref5[0];
          var _callback3 = _ref5[1];
          fileData[_key4] = _callback3();
        }

        infoLog('BugReporting extraData:', extraData);

        var BugReportingNativeModule = _$$_REQUIRE(_dependencyMap[7]).BugReporting;

        BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

        var RedBoxNativeModule = _$$_REQUIRE(_dependencyMap[7]).RedBox;

        RedBoxNativeModule && RedBoxNativeModule.setExtraData && RedBoxNativeModule.setExtraData(extraData, 'From BugReporting.js');
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);

    return BugReporting;
  }();

  BugReporting._extraSources = new Map();
  BugReporting._fileSources = new Map();
  BugReporting._subscription = null;
  BugReporting._redboxSubscription = null;
  module.exports = BugReporting;
},302,[11,21,22,33,88,140,303,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }

  function getReactTree() {
    return "React tree dumps have been temporarily disabled while React is upgraded to Fiber.";
  }

  module.exports = dumpReactTree;
},303,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene: function setActiveScene(scene) {
      _activeScene = scene;

      _listeners.forEach(function (listener) {
        return listener(_activeScene);
      });
    },
    getActiveScene: function getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
      _listeners.push(callback);

      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  };
  module.exports = SceneTracker;
},304,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var AppContainer = _$$_REQUIRE(_dependencyMap[1]);

  var React = _$$_REQUIRE(_dependencyMap[2]);

  var ReactFabricIndicator = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  _$$_REQUIRE(_dependencyMap[5]);

  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, fabric, showFabricIndicator) {
    invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var renderable = React.createElement(AppContainer, {
      rootTag: rootTag,
      WrapperComponent: WrapperComponent
    }, React.createElement(RootComponent, _extends({}, initialProps, {
      rootTag: rootTag
    })), fabric === true && showFabricIndicator === true ? React.createElement(ReactFabricIndicator, null) : null);

    if (RootComponent.prototype != null && RootComponent.prototype.unstable_isAsyncReactComponent === true) {
      var AsyncMode = React.unstable_AsyncMode;
      renderable = React.createElement(AsyncMode, null, renderable);
    }

    if (fabric) {
      _$$_REQUIRE(_dependencyMap[6]).render(renderable, rootTag);
    } else {
      _$$_REQUIRE(_dependencyMap[7]).render(renderable, rootTag);
    }
  }

  module.exports = renderApplication;
},305,[3,262,51,306,6,307,308,83]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var React = _$$_REQUIRE(_dependencyMap[0]);

  var StyleSheet = _$$_REQUIRE(_dependencyMap[1]);

  var Text = _$$_REQUIRE(_dependencyMap[2]);

  var View = _$$_REQUIRE(_dependencyMap[3]);

  function ReactFabricIndicator() {
    return React.createElement(View, {
      style: styles.container
    }, React.createElement(Text, {
      style: styles.text
    }, "FABRIC"));
  }

  var styles = StyleSheet.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: 'rgba(0,0,0, 0.25)',
      position: 'absolute',
      top: 0,
      right: 0,
      padding: 2
    },
    text: {
      fontSize: 6,
      color: '#ffffff'
    }
  });
  module.exports = ReactFabricIndicator;
},306,[51,54,167,80]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Platform = _$$_REQUIRE(_dependencyMap[0]);

  var TVEventHandler = _$$_REQUIRE(_dependencyMap[1]);

  function emptyFunction() {}

  var BackHandler;

  if (Platform.isTV) {
    var _tvEventHandler = new TVEventHandler();

    var _backPressSubscriptions = new Set();

    _tvEventHandler.enable(this, function (cmp, evt) {
      if (evt && evt.eventType === 'menu') {
        var invokeDefault = true;
        var subscriptions = Array.from(_backPressSubscriptions.values()).reverse();

        for (var i = 0; i < subscriptions.length; ++i) {
          if (subscriptions[i]()) {
            invokeDefault = false;
            break;
          }
        }

        if (invokeDefault) {
          BackHandler.exitApp();
        }
      }
    });

    BackHandler = {
      exitApp: emptyFunction,
      addEventListener: function addEventListener(eventName, handler) {
        _backPressSubscriptions.add(handler);

        return {
          remove: function remove() {
            return BackHandler.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        _backPressSubscriptions.delete(handler);
      }
    };
  } else {
    BackHandler = {
      exitApp: emptyFunction,
      addEventListener: function addEventListener() {
        return {
          remove: emptyFunction
        };
      },
      removeEventListener: emptyFunction
    };
  }

  module.exports = BackHandler;
},307,[50,176]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BatchedBridge = _$$_REQUIRE(_dependencyMap[0]);

  var ReactFabric;
  {
    ReactFabric = _$$_REQUIRE(_dependencyMap[1]);
  }
  BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);
  module.exports = ReactFabric;
},308,[15,309]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  _$$_REQUIRE(_dependencyMap[1]);

  var ReactNativeViewConfigRegistry = _$$_REQUIRE(_dependencyMap[2]),
      UIManager = _$$_REQUIRE(_dependencyMap[3]),
      React = _$$_REQUIRE(_dependencyMap[4]),
      deepDiffer = _$$_REQUIRE(_dependencyMap[5]),
      flattenStyle = _$$_REQUIRE(_dependencyMap[6]),
      TextInputState = _$$_REQUIRE(_dependencyMap[7]),
      FabricUIManager = _$$_REQUIRE(_dependencyMap[8]);

  var ExceptionsManager = _$$_REQUIRE(_dependencyMap[9]);

  function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      condition = undefined;
      if (undefined === format) condition = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
        var args = [a, b, c, d, e, f],
            argIndex = 0;
        condition = Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        condition.name = "Invariant Violation";
      }
      condition.framesToPop = 1;
      throw condition;
    }
  }

  function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var hasError = false,
      caughtError = null,
      hasRethrowError = false,
      rethrowError = null,
      reporter = {
    onError: function onError(error) {
      hasError = true;
      caughtError = error;
    }
  };

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl.apply(reporter, arguments);
  }

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
      } else invariant(false, "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."), error = undefined;

      hasRethrowError || (hasRethrowError = true, rethrowError = error);
    }
  }

  var eventPluginOrder = null,
      namesToPlugins = {};

  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
          pluginIndex = eventPluginOrder.indexOf(pluginName);
      invariant(-1 < pluginIndex, "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.", pluginName);

      if (!plugins[pluginIndex]) {
        invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.", pluginName);
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;

        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName],
              pluginModule$jscomp$0 = pluginModule,
              eventName$jscomp$0 = eventName;
          invariant(!eventNameDispatchConfigs.hasOwnProperty(eventName$jscomp$0), "EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.", eventName$jscomp$0);
          eventNameDispatchConfigs[eventName$jscomp$0] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) {
              phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule$jscomp$0, eventName$jscomp$0);
            }

            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule$jscomp$0, eventName$jscomp$0), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;

          invariant(JSCompiler_inline_result, "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
        }
      }
    }
  }

  function publishRegistrationName(registrationName, pluginModule) {
    invariant(!registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
    registrationNameModules[registrationName] = pluginModule;
  }

  var plugins = [],
      eventNameDispatchConfigs = {},
      registrationNameModules = {},
      getFiberCurrentPropsFromNode = null,
      getInstanceFromNode = null,
      getNodeFromInstance = null;

  function executeDispatch(event, simulated, listener, inst) {
    simulated = event.type || "unknown-event";
    event.currentTarget = getNodeFromInstance(inst);
    invokeGuardedCallbackAndCatchFirstError(simulated, listener, undefined, event);
    event.currentTarget = null;
  }

  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }

  function accumulateInto(current, next) {
    invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined.");
    if (null == current) return next;

    if (Array.isArray(current)) {
      if (Array.isArray(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }

    return Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }

  var eventQueue = null;

  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
          dispatchInstances = e._dispatchInstances;
      if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) {
        executeDispatch(e, false, dispatchListeners[i], dispatchInstances[i]);
      } else dispatchListeners && executeDispatch(e, false, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }

  var injection = {
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
      invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false,
          pluginName;

      for (pluginName in injectedNamesToPlugins) {
        if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          var pluginModule = injectedNamesToPlugins[pluginName];
          namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = true);
        }
      }

      isOrderingDirty && recomputePluginOrdering();
    }
  };

  function getListener(inst, registrationName) {
    var listener = inst.stateNode;
    if (!listener) return null;
    var props = getFiberCurrentPropsFromNode(listener);
    if (!props) return null;
    listener = props[registrationName];

    a: switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
        inst = !props;
        break a;

      default:
        inst = false;
    }

    if (inst) return null;
    invariant(!listener || "function" === typeof listener, "Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    return listener;
  }

  function getParent(inst) {
    do {
      inst = inst.return;
    } while (inst && 7 !== inst.tag);

    return inst ? inst : null;
  }

  function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
      path.push(inst), inst = getParent(inst);
    }

    for (inst = path.length; 0 < inst--;) {
      fn(path[inst], "captured", arg);
    }

    for (inst = 0; inst < path.length; inst++) {
      fn(path[inst], "bubbled", arg);
    }
  }

  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }

  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }

  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent(targetInst) : null;
      traverseTwoPhase(targetInst, accumulateDirectionalDispatches, event);
    }
  }

  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;

      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  }

  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    dispatchConfig = this.constructor.Interface;

    for (var propName in dispatchConfig) {
      dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    }

    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function persist() {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function destructor() {
      var Interface = this.constructor.Interface,
          propName;

      for (propName in Interface) {
        this[propName] = null;
      }

      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });

  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function currentTarget() {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };

  SyntheticEvent.extend = function (Interface) {
    function E() {}

    function Class() {
      return Super.apply(this, arguments);
    }

    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();

    _extends(prototype, Class.prototype);

    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = _extends({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };

  addEventPoolingTo(SyntheticEvent);

  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }

    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }

  function releasePooledEvent(event) {
    invariant(event instanceof this, "Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }

  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }

  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function touchHistory() {
      return null;
    }
  });

  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }

  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }

  var startDependencies = ["topTouchStart"],
      moveDependencies = ["topTouchMove"],
      endDependencies = ["topTouchCancel", "topTouchEnd"],
      touchBank = [],
      touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
  };

  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }

  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    invariant(null != _ref, "Touch object is missing identifier.");
    return _ref;
  }

  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }

  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\nTouch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\nTouch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
  }

  function printTouch(touch) {
    return JSON.stringify({
      identifier: touch.identifier,
      pageX: touch.pageX,
      pageY: touch.pageY,
      timestamp: timestampForTouch(touch)
    });
  }

  function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, 20));
    20 < touchBank.length && (printed += " (original size: " + touchBank.length + ")");
    return printed;
  }

  var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
      if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) {
        if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      }
    },
    touchHistory: touchHistory
  };

  function accumulate(current, next) {
    invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined.");
    return null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
  }

  var responderInst = null,
      trackedTouchCount = 0;

  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }

  var eventTypes$1 = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  },
      ResponderEventPlugin = {
    _getResponder: function _getResponder() {
      return responderInst;
    },
    eventTypes: eventTypes$1,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
      ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

      if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
        var JSCompiler_temp = isStartish(topLevelType) ? eventTypes$1.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes$1.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes$1.selectionChangeShouldSetResponder : eventTypes$1.scrollShouldSetResponder;
        if (responderInst) b: {
          var JSCompiler_temp$jscomp$0 = responderInst;

          for (var depthA = 0, tempA = JSCompiler_temp$jscomp$0; tempA; tempA = getParent(tempA)) {
            depthA++;
          }

          tempA = 0;

          for (var tempB = targetInst; tempB; tempB = getParent(tempB)) {
            tempA++;
          }

          for (; 0 < depthA - tempA;) {
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0), depthA--;
          }

          for (; 0 < tempA - depthA;) {
            targetInst = getParent(targetInst), tempA--;
          }

          for (; depthA--;) {
            if (JSCompiler_temp$jscomp$0 === targetInst || JSCompiler_temp$jscomp$0 === targetInst.alternate) break b;
            JSCompiler_temp$jscomp$0 = getParent(JSCompiler_temp$jscomp$0);
            targetInst = getParent(targetInst);
          }

          JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = targetInst;
        targetInst = JSCompiler_temp$jscomp$0 === responderInst;
        JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp, JSCompiler_temp$jscomp$0, nativeEvent, nativeEventTarget);
        JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory;
        targetInst ? forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateTwoPhaseDispatchesSingle);

        b: {
          JSCompiler_temp = JSCompiler_temp$jscomp$0._dispatchListeners;
          targetInst = JSCompiler_temp$jscomp$0._dispatchInstances;
          if (Array.isArray(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !JSCompiler_temp$jscomp$0.isPropagationStopped(); depthA++) {
            if (JSCompiler_temp[depthA](JSCompiler_temp$jscomp$0, targetInst[depthA])) {
              JSCompiler_temp = targetInst[depthA];
              break b;
            }
          } else if (JSCompiler_temp && JSCompiler_temp(JSCompiler_temp$jscomp$0, targetInst)) {
            JSCompiler_temp = targetInst;
            break b;
          }
          JSCompiler_temp = null;
        }

        JSCompiler_temp$jscomp$0._dispatchInstances = null;
        JSCompiler_temp$jscomp$0._dispatchListeners = null;
        JSCompiler_temp$jscomp$0.isPersistent() || JSCompiler_temp$jscomp$0.constructor.release(JSCompiler_temp$jscomp$0);
        JSCompiler_temp && JSCompiler_temp !== responderInst ? (JSCompiler_temp$jscomp$0 = undefined, targetInst = ResponderSyntheticEvent.getPooled(eventTypes$1.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), targetInst.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(targetInst, accumulateDirectDispatchesSingle), depthA = true === executeDirectDispatch(targetInst), responderInst ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes$1.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), tempB = !tempA._dispatchListeners || executeDirectDispatch(tempA), tempA.isPersistent() || tempA.constructor.release(tempA), tempB ? (tempA = ResponderSyntheticEvent.getPooled(eventTypes$1.responderTerminate, responderInst, nativeEvent, nativeEventTarget), tempA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(tempA, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [targetInst, tempA]), changeResponder(JSCompiler_temp, depthA)) : (JSCompiler_temp = ResponderSyntheticEvent.getPooled(eventTypes$1.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), JSCompiler_temp.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp, accumulateDirectDispatchesSingle), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, JSCompiler_temp))) : (JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, targetInst), changeResponder(JSCompiler_temp, depthA)), JSCompiler_temp = JSCompiler_temp$jscomp$0) : JSCompiler_temp = null;
      } else JSCompiler_temp = null;

      JSCompiler_temp$jscomp$0 = responderInst && isStartish(topLevelType);
      targetInst = responderInst && isMoveish(topLevelType);
      depthA = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
      if (JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0 ? eventTypes$1.responderStart : targetInst ? eventTypes$1.responderMove : depthA ? eventTypes$1.responderEnd : null) JSCompiler_temp$jscomp$0 = ResponderSyntheticEvent.getPooled(JSCompiler_temp$jscomp$0, responderInst, nativeEvent, nativeEventTarget), JSCompiler_temp$jscomp$0.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(JSCompiler_temp$jscomp$0, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, JSCompiler_temp$jscomp$0);
      JSCompiler_temp$jscomp$0 = responderInst && "topTouchCancel" === topLevelType;
      if (topLevelType = responderInst && !JSCompiler_temp$jscomp$0 && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
        if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (targetInst = 0; targetInst < topLevelType.length; targetInst++) {
          if (depthA = topLevelType[targetInst].target, null !== depthA && undefined !== depthA && 0 !== depthA) {
            tempA = getInstanceFromNode(depthA);

            b: {
              for (depthA = responderInst; tempA;) {
                if (depthA === tempA || depthA === tempA.alternate) {
                  depthA = true;
                  break b;
                }

                tempA = getParent(tempA);
              }

              depthA = false;
            }

            if (depthA) {
              topLevelType = false;
              break a;
            }
          }
        }
        topLevelType = true;
      }
      if (topLevelType = JSCompiler_temp$jscomp$0 ? eventTypes$1.responderTerminate : topLevelType ? eventTypes$1.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle), JSCompiler_temp = accumulate(JSCompiler_temp, nativeEvent), changeResponder(null);
      return JSCompiler_temp;
    },
    GlobalResponderHandler: null,
    injection: {
      injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
        ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
      }
    }
  },
      customBubblingEventTypes$1 = ReactNativeViewConfigRegistry.customBubblingEventTypes,
      customDirectEventTypes$1 = ReactNativeViewConfigRegistry.customDirectEventTypes,
      ReactNativeBridgeEventPlugin = {
    eventTypes: ReactNativeViewConfigRegistry.eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (null == targetInst) return null;
      var bubbleDispatchConfig = customBubblingEventTypes$1[topLevelType],
          directDispatchConfig = customDirectEventTypes$1[topLevelType];
      invariant(bubbleDispatchConfig || directDispatchConfig, 'Unsupported top level event type "%s" dispatched', topLevelType);
      topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      if (bubbleDispatchConfig) forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
      return topLevelType;
    }
  };
  injection.injectEventPluginOrder(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  injection.injectEventPluginsByName({
    ResponderEventPlugin: ResponderEventPlugin,
    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
  });

  function getInstanceFromInstance(instanceHandle) {
    return instanceHandle;
  }

  getFiberCurrentPropsFromNode = function getFiberCurrentPropsFromNode(inst) {
    return inst.canonical.currentProps;
  };

  getInstanceFromNode = getInstanceFromInstance;

  getNodeFromInstance = function getNodeFromInstance(inst) {
    inst = inst.stateNode.canonical._nativeTag;
    invariant(inst, "All native instances should have a tag.");
    return inst;
  };

  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function onChange(from, to, blockNativeResponder) {
      null !== to ? UIManager.setJSResponder(to.stateNode.canonical._nativeTag, blockNativeResponder) : UIManager.clearJSResponder();
    }
  });
  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
      hasSymbol = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for"),
      REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 60103,
      REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 60106,
      REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 60107,
      REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 60108,
      REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 60114,
      REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 60109,
      REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 60110,
      REACT_ASYNC_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.async_mode") : 60111,
      REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 60112,
      REACT_PLACEHOLDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.placeholder") : 60113,
      MAYBE_ITERATOR_SYMBOL = "function" === typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");

  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }

  function getComponentName(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.displayName || type.name || null;
    if ("string" === typeof type) return type;

    switch (type) {
      case REACT_ASYNC_MODE_TYPE:
        return "AsyncMode";

      case REACT_FRAGMENT_TYPE:
        return "Fragment";

      case REACT_PORTAL_TYPE:
        return "Portal";

      case REACT_PROFILER_TYPE:
        return "Profiler";

      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";

      case REACT_PLACEHOLDER_TYPE:
        return "Placeholder";
    }

    if ("object" === typeof type) {
      switch (type.$$typeof) {
        case REACT_CONTEXT_TYPE:
          return "Context.Consumer";

        case REACT_PROVIDER_TYPE:
          return "Context.Provider";

        case REACT_FORWARD_REF_TYPE:
          return type = type.render, type = type.displayName || type.name || "", "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef";
      }

      if ("function" === typeof type.then && (type = 1 === type._reactStatus ? type._reactResult : null)) return getComponentName(type);
    }

    return null;
  }

  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
      node = node.return;
    } else {
      if (0 !== (node.effectTag & 2)) return 1;

      for (; node.return;) {
        if (node = node.return, 0 !== (node.effectTag & 2)) return 1;
      }
    }
    return 5 === node.tag ? 2 : 3;
  }

  function assertIsMounted(fiber) {
    invariant(2 === isFiberMountedImpl(fiber), "Unable to find node on an unmounted component.");
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) return alternate = isFiberMountedImpl(fiber), invariant(3 !== alternate, "Unable to find node on an unmounted component."), 1 === alternate ? null : fiber;

    for (var a = fiber, b = alternate;;) {
      var parentA = a.return,
          parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) break;

      if (parentA.child === parentB.child) {
        for (var child = parentA.child; child;) {
          if (child === a) return assertIsMounted(parentA), fiber;
          if (child === b) return assertIsMounted(parentA), alternate;
          child = child.sibling;
        }

        invariant(false, "Unable to find node on an unmounted component.");
      }

      if (a.return !== b.return) a = parentA, b = parentB;else {
        child = false;

        for (var _child = parentA.child; _child;) {
          if (_child === a) {
            child = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            child = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!child) {
          for (_child = parentB.child; _child;) {
            if (_child === a) {
              child = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              child = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          invariant(child, "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      invariant(a.alternate === b, "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }

    invariant(5 === a.tag, "Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }

  function findCurrentHostFiber(parent) {
    parent = findCurrentFiberUsingSlowPath(parent);
    if (!parent) return null;

    for (var node = parent;;) {
      if (7 === node.tag || 8 === node.tag) return node;
      if (node.child) node.child.return = node, node = node.child;else {
        if (node === parent) break;

        for (; !node.sibling;) {
          if (!node.return || node.return === parent) return null;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return null;
  }

  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }

  var emptyObject = {},
      removedKeys = null,
      removedKeyCount = 0;

  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && 0 < removedKeyCount) for (i in removedKeys) {
      if (removedKeys[i]) {
        var nextProp = node[i];

        if (undefined !== nextProp) {
          var attributeConfig = validAttributes[i];

          if (attributeConfig) {
            "function" === typeof nextProp && (nextProp = true);
            "undefined" === typeof nextProp && (nextProp = null);
            if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
            removedKeys[i] = false;
            removedKeyCount--;
          }
        }
      }
    }
  }

  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);

    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
          i;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      }

      for (; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      for (; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    return Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, flattenStyle(nextProp), validAttributes);
  }

  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);

    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }

    return updatePayload;
  }

  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);

    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }

    return updatePayload;
  }

  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;

    for (propKey in nextProps) {
      if (attributeConfig = validAttributes[propKey]) {
        var prevProp = prevProps[propKey];
        var nextProp = nextProps[propKey];
        "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
        "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
        removedKeys && (removedKeys[propKey] = false);
        if (updatePayload && undefined !== updatePayload[propKey]) {
          if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
            if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
          }
        } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) ("object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp)) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
          if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : "object" !== typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
      }
    }

    for (var _propKey in prevProps) {
      undefined === nextProps[_propKey] && (!(attributeConfig = validAttributes[_propKey]) || updatePayload && undefined !== updatePayload[_propKey] || (prevProp = prevProps[_propKey], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[_propKey] = null, removedKeys || (removedKeys = {}), removedKeys[_propKey] || (removedKeys[_propKey] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    }

    return updatePayload;
  }

  var now$1 = "object" === typeof performance && "function" === typeof performance.now ? function () {
    return performance.now();
  } : function () {
    return Date.now();
  },
      scheduledCallback = null,
      frameDeadline = 0,
      frameDeadlineObject = {
    timeRemaining: function timeRemaining() {
      return frameDeadline - now$1();
    },
    didTimeout: false
  };

  function setTimeoutCallback() {
    frameDeadline = now$1() + 5;
    var callback = scheduledCallback;
    scheduledCallback = null;
    null !== callback && callback(frameDeadlineObject);
  }

  var restoreTarget = null,
      restoreQueue = null;

  function restoreStateOfTarget(target) {
    if (target = getInstanceFromNode(target)) {
      invariant(false, "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      var props = getFiberCurrentPropsFromNode(target.stateNode);
      null(target.stateNode, target.type, props);
    }
  }

  function _batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }

  function _flushInteractiveUpdatesImpl() {}

  var isBatching = false;

  function batchedUpdates(fn, bookkeeping) {
    if (isBatching) return fn(bookkeeping);
    isBatching = true;

    try {
      return _batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      if (isBatching = false, null !== restoreTarget || null !== restoreQueue) if (_flushInteractiveUpdatesImpl(), restoreTarget && (bookkeeping = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(bookkeeping), fn)) for (bookkeeping = 0; bookkeeping < fn.length; bookkeeping++) {
        restoreStateOfTarget(fn[bookkeeping]);
      }
    }
  }

  function dispatchEvent(target, topLevelType, nativeEvent) {
    batchedUpdates(function () {
      var events = nativeEvent.target;

      for (var events$jscomp$0 = null, i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, events)) && (events$jscomp$0 = accumulateInto(events$jscomp$0, possiblePlugin));
      }

      events = events$jscomp$0;
      null !== events && (eventQueue = accumulateInto(eventQueue, events));
      events = eventQueue;
      eventQueue = null;
      if (events && (forEachAccumulated(events, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."), hasRethrowError)) throw events = rethrowError, hasRethrowError = false, rethrowError = null, events;
    });
  }

  function shim$1() {
    invariant(false, "The current renderer does not support hyration. This error is likely caused by a bug in React. Please file an issue.");
  }

  var nextReactTag = 2;
  FabricUIManager.registerEventHandler && FabricUIManager.registerEventHandler(dispatchEvent);

  var ReactFabricHostComponent = function () {
    function ReactFabricHostComponent(tag, viewConfig, props) {
      if (!(this instanceof ReactFabricHostComponent)) throw new TypeError("Cannot call a class as a function");
      this._nativeTag = tag;
      this.viewConfig = viewConfig;
      this.currentProps = props;
    }

    ReactFabricHostComponent.prototype.blur = function () {
      TextInputState.blurTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.focus = function () {
      TextInputState.focusTextInput(this._nativeTag);
    };

    ReactFabricHostComponent.prototype.measure = function (callback) {
      UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureInWindow = function (callback) {
      UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
    };

    ReactFabricHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
      UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
    };

    ReactFabricHostComponent.prototype.setNativeProps = function (nativeProps) {
      nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
      null != nativeProps && UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
    };

    return ReactFabricHostComponent;
  }();

  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    invariant(hostContext.isInAParentText, "Text strings must be rendered within a <Text> component.");
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
      node: FabricUIManager.createNode(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      }, internalInstanceHandle)
    };
  }

  var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

  function getStackByFiberInDevAndProd(workInProgress) {
    var info = "";

    do {
      a: switch (workInProgress.tag) {
        case 4:
        case 0:
        case 1:
        case 2:
        case 3:
        case 7:
        case 10:
          var owner = workInProgress._debugOwner,
              source = workInProgress._debugSource,
              name = getComponentName(workInProgress.type);
          var JSCompiler_inline_result = null;
          owner && (JSCompiler_inline_result = getComponentName(owner.type));
          owner = name;
          name = "";
          source ? name = " (at " + source.fileName.replace(BEFORE_SLASH_RE, "") + ":" + source.lineNumber + ")" : JSCompiler_inline_result && (name = " (created by " + JSCompiler_inline_result + ")");
          JSCompiler_inline_result = "\n    in " + (owner || "Unknown") + name;
          break a;

        default:
          JSCompiler_inline_result = "";
      }

      info += JSCompiler_inline_result;
      workInProgress = workInProgress.return;
    } while (workInProgress);

    return info;
  }

  new Set();
  var valueStack = [],
      index = -1;

  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }

  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }

  var emptyContextObject = {},
      contextStackCursor = {
    current: emptyContextObject
  },
      didPerformWorkStackCursor = {
    current: false
  },
      previousContext = emptyContextObject;

  function getMaskedContext(workInProgress, unmaskedContext) {
    var contextTypes = workInProgress.type.contextTypes;
    if (!contextTypes) return emptyContextObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {},
        key;

    for (key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
    return context;
  }

  function isContextProvider(type) {
    type = type.childContextTypes;
    return null !== type && undefined !== type;
  }

  function popContext(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(contextStackCursor.current === emptyContextObject, "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }

  function processChildContext(fiber, type, parentContext) {
    var instance = fiber.stateNode;
    fiber = type.childContextTypes;
    if ("function" !== typeof instance.getChildContext) return parentContext;
    instance = instance.getChildContext();

    for (var contextKey in instance) {
      invariant(contextKey in fiber, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || "Unknown", contextKey);
    }

    return _extends({}, parentContext, instance);
  }

  function pushContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
    previousContext = contextStackCursor.current;
    push(contextStackCursor, instance, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
    didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }

  var onCommitFiberRoot = null,
      onCommitFiberUnmount = null;

  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {}
    };
  }

  function injectInternals(internals) {
    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled || !hook.supportsFiber) return true;

    try {
      var rendererID = hook.inject(internals);
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {}

    return true;
  }

  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.firstContextDependency = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.effectTag = 0;
    this.lastEffect = this.firstEffect = this.nextEffect = null;
    this.childExpirationTime = this.expirationTime = 0;
    this.alternate = null;
  }

  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }

  function createWorkInProgress(current, pendingProps, expirationTime) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = new FiberNode(current.tag, pendingProps, current.key, current.mode), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.effectTag = 0, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null);
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = pendingProps !== current.pendingProps ? expirationTime : current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.firstContextDependency = current.firstContextDependency;
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    return workInProgress;
  }

  function createFiberFromElement(element, mode, expirationTime) {
    var type = element.type,
        key = element.key;
    element = element.props;
    var fiberTag = undefined;
    if ("function" === typeof type) fiberTag = shouldConstruct(type) ? 2 : 4;else if ("string" === typeof type) fiberTag = 7;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(element.children, mode, expirationTime, key);

      case REACT_ASYNC_MODE_TYPE:
        fiberTag = 10;
        mode |= 3;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = 10;
        mode |= 2;
        break;

      case REACT_PROFILER_TYPE:
        return type = new FiberNode(15, element, key, mode | 4), type.type = REACT_PROFILER_TYPE, type.expirationTime = expirationTime, type;

      case REACT_PLACEHOLDER_TYPE:
        fiberTag = 16;
        break;

      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
            fiberTag = 12;
            break a;

          case REACT_CONTEXT_TYPE:
            fiberTag = 11;
            break a;

          case REACT_FORWARD_REF_TYPE:
            fiberTag = 13;
            break a;

          default:
            if ("function" === typeof type.then) {
              fiberTag = 4;
              break a;
            }

        }
        invariant(false, "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, "");
    }
    mode = new FiberNode(fiberTag, element, key, mode);
    mode.type = type;
    mode.expirationTime = expirationTime;
    return mode;
  }

  function createFiberFromFragment(elements, mode, expirationTime, key) {
    elements = new FiberNode(9, elements, key, mode);
    elements.expirationTime = expirationTime;
    return elements;
  }

  function createFiberFromText(content, mode, expirationTime) {
    content = new FiberNode(8, content, null, mode);
    content.expirationTime = expirationTime;
    return content;
  }

  function createFiberFromPortal(portal, mode, expirationTime) {
    mode = new FiberNode(6, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.expirationTime = expirationTime;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }

  function markPendingPriorityLevel(root, expirationTime) {
    root.didError = false;
    var earliestPendingTime = root.earliestPendingTime;
    0 === earliestPendingTime ? root.earliestPendingTime = root.latestPendingTime = expirationTime : earliestPendingTime > expirationTime ? root.earliestPendingTime = expirationTime : root.latestPendingTime < expirationTime && (root.latestPendingTime = expirationTime);
    findNextExpirationTimeToWorkOn(expirationTime, root);
  }

  function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
    var earliestSuspendedTime = root.earliestSuspendedTime,
        latestSuspendedTime = root.latestSuspendedTime,
        earliestPendingTime = root.earliestPendingTime,
        latestPingedTime = root.latestPingedTime;
    earliestPendingTime = 0 !== earliestPendingTime ? earliestPendingTime : latestPingedTime;
    0 === earliestPendingTime && (0 === completedExpirationTime || latestSuspendedTime > completedExpirationTime) && (earliestPendingTime = latestSuspendedTime);
    completedExpirationTime = earliestPendingTime;
    0 !== completedExpirationTime && 0 !== earliestSuspendedTime && earliestSuspendedTime < completedExpirationTime && (completedExpirationTime = earliestSuspendedTime);
    root.nextExpirationTimeToWorkOn = earliestPendingTime;
    root.expirationTime = completedExpirationTime;
  }

  var hasForceUpdate = false;

  function createUpdateQueue(baseState) {
    return {
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function cloneUpdateQueue(currentQueue) {
    return {
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
  }

  function createUpdate(expirationTime) {
    return {
      expirationTime: expirationTime,
      tag: 0,
      payload: null,
      callback: null,
      next: null,
      nextEffect: null
    };
  }

  function appendUpdateToQueue(queue, update) {
    null === queue.lastUpdate ? queue.firstUpdate = queue.lastUpdate = update : (queue.lastUpdate.next = update, queue.lastUpdate = update);
  }

  function enqueueUpdate(fiber, update) {
    var alternate = fiber.alternate;

    if (null === alternate) {
      var queue1 = fiber.updateQueue;
      var queue2 = null;
      null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState));
    } else queue1 = fiber.updateQueue, queue2 = alternate.updateQueue, null === queue1 ? null === queue2 ? (queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState), queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState)) : queue1 = fiber.updateQueue = cloneUpdateQueue(queue2) : null === queue2 && (queue2 = alternate.updateQueue = cloneUpdateQueue(queue1));

    null === queue2 || queue1 === queue2 ? appendUpdateToQueue(queue1, update) : null === queue1.lastUpdate || null === queue2.lastUpdate ? (appendUpdateToQueue(queue1, update), appendUpdateToQueue(queue2, update)) : (appendUpdateToQueue(queue1, update), queue2.lastUpdate = update);
  }

  function enqueueCapturedUpdate(workInProgress, update) {
    var workInProgressQueue = workInProgress.updateQueue;
    workInProgressQueue = null === workInProgressQueue ? workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState) : ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    null === workInProgressQueue.lastCapturedUpdate ? workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update : (workInProgressQueue.lastCapturedUpdate.next = update, workInProgressQueue.lastCapturedUpdate = update);
  }

  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    null !== current && queue === current.updateQueue && (queue = workInProgress.updateQueue = cloneUpdateQueue(queue));
    return queue;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case 1:
        return workInProgress = update.payload, "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;

      case 3:
        workInProgress.effectTag = workInProgress.effectTag & -1025 | 64;

      case 0:
        workInProgress = update.payload;
        nextProps = "function" === typeof workInProgress ? workInProgress.call(instance, prevState, nextProps) : workInProgress;
        if (null === nextProps || undefined === nextProps) break;
        return _extends({}, prevState, nextProps);

      case 2:
        hasForceUpdate = true;
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

    for (var newBaseState = queue.baseState, newFirstUpdate = null, newExpirationTime = 0, update = queue.firstUpdate, resultState = newBaseState; null !== update;) {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime > renderExpirationTime) {
        if (null === newFirstUpdate && (newFirstUpdate = update, newBaseState = resultState), 0 === newExpirationTime || newExpirationTime > updateExpirationTime) newExpirationTime = updateExpirationTime;
      } else resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastEffect ? queue.firstEffect = queue.lastEffect = update : (queue.lastEffect.nextEffect = update, queue.lastEffect = update));

      update = update.next;
    }

    updateExpirationTime = null;

    for (update = queue.firstCapturedUpdate; null !== update;) {
      var _updateExpirationTime = update.expirationTime;

      if (_updateExpirationTime > renderExpirationTime) {
        if (null === updateExpirationTime && (updateExpirationTime = update, null === newFirstUpdate && (newBaseState = resultState)), 0 === newExpirationTime || newExpirationTime > _updateExpirationTime) newExpirationTime = _updateExpirationTime;
      } else resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance), null !== update.callback && (workInProgress.effectTag |= 32, update.nextEffect = null, null === queue.lastCapturedEffect ? queue.firstCapturedEffect = queue.lastCapturedEffect = update : (queue.lastCapturedEffect.nextEffect = update, queue.lastCapturedEffect = update));

      update = update.next;
    }

    null === newFirstUpdate && (queue.lastUpdate = null);
    null === updateExpirationTime ? queue.lastCapturedUpdate = null : workInProgress.effectTag |= 32;
    null === newFirstUpdate && null === updateExpirationTime && (newBaseState = resultState);
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = updateExpirationTime;
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = resultState;
  }

  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    null !== finishedQueue.firstCapturedUpdate && (null !== finishedQueue.lastUpdate && (finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate, finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate), finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null);
    commitUpdateEffects(finishedQueue.firstEffect, instance);
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
  }

  function commitUpdateEffects(effect, instance) {
    for (; null !== effect;) {
      var _callback3 = effect.callback;

      if (null !== _callback3) {
        effect.callback = null;
        var context = instance;
        invariant("function" === typeof _callback3, "Invalid argument passed as callback. Expected a function. Instead received: %s", _callback3);

        _callback3.call(context);
      }

      effect = effect.nextEffect;
    }
  }

  function createCapturedValue(value, source) {
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  var valueCursor = {
    current: null
  },
      currentlyRenderingFiber = null,
      lastContextDependency = null,
      lastContextWithAllBitsObserved = null;

  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;
    push(valueCursor, context._currentValue2, providerFiber);
    context._currentValue2 = nextValue;
  }

  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    providerFiber.type._context._currentValue2 = currentValue;
  }

  function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextWithAllBitsObserved = lastContextDependency = null;
    workInProgress.firstContextDependency = null;
  }

  function readContext(context, observedBits) {
    if (lastContextWithAllBitsObserved !== context && false !== observedBits && 0 !== observedBits) {
      if ("number" !== typeof observedBits || 1073741823 === observedBits) lastContextWithAllBitsObserved = context, observedBits = 1073741823;
      observedBits = {
        context: context,
        observedBits: observedBits,
        next: null
      };
      null === lastContextDependency ? (invariant(null !== currentlyRenderingFiber, "Context.unstable_read(): Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps."), currentlyRenderingFiber.firstContextDependency = lastContextDependency = observedBits) : lastContextDependency = lastContextDependency.next = observedBits;
    }

    return context._currentValue2;
  }

  var NO_CONTEXT = {},
      contextStackCursor$1 = {
    current: NO_CONTEXT
  },
      contextFiberStackCursor = {
    current: NO_CONTEXT
  },
      rootInstanceStackCursor = {
    current: NO_CONTEXT
  };

  function requiredContext(c) {
    invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
    return c;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, {
      isInAParentText: false
    }, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function pushHostContext(fiber) {
    requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = fiber.type;
    nextContext = "AndroidTextInput" === nextContext || "RCTMultilineTextInputView" === nextContext || "RCTSinglelineTextInputView" === nextContext || "RCTText" === nextContext || "RCTVirtualText" === nextContext;
    nextContext = context.isInAParentText !== nextContext ? {
      isInAParentText: nextContext
    } : context;
    context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
  }

  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function is(x, y) {
    return x === y ? 0 !== x || 0 !== y || 1 / x === 1 / y : x !== x && y !== y;
  }

  function shallowEqual(objA, objB) {
    if (is(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
        keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;

    for (keysB = 0; keysB < keysA.length; keysB++) {
      if (!hasOwnProperty.call(objB, keysA[keysB]) || !is(objA[keysA[keysB]], objB[keysA[keysB]])) return false;
    }

    return true;
  }

  var emptyRefsObject = new React.Component().refs;

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : _extends({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    nextProps = workInProgress.updateQueue;
    null !== nextProps && 0 === workInProgress.expirationTime && (nextProps.baseState = getDerivedStateFromProps);
  }

  var classComponentUpdater = {
    isMounted: function isMounted(component) {
      return (component = component._reactInternalFiber) ? 2 === isFiberMountedImpl(component) : false;
    },
    enqueueSetState: function enqueueSetState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    },
    enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    },
    enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
      inst = inst._reactInternalFiber;
      var currentTime = requestCurrentTime();
      currentTime = computeExpirationForFiber(currentTime, inst);
      var update = createUpdate(currentTime);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      enqueueUpdate(inst, update);
      scheduleWork(inst, currentTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextLegacyContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextLegacyContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextLegacyContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }

  function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
    var instance = workInProgress.stateNode,
        unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
    unmaskedContext = workInProgress.updateQueue;
    null !== unmaskedContext && (processUpdateQueue(workInProgress, unmaskedContext, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState);
    unmaskedContext = ctor.getDerivedStateFromProps;
    "function" === typeof unmaskedContext && (applyDerivedStateFromProps(workInProgress, ctor, unmaskedContext, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), unmaskedContext = workInProgress.updateQueue, null !== unmaskedContext && (processUpdateQueue(workInProgress, unmaskedContext, newProps, instance, renderExpirationTime), instance.state = workInProgress.memoizedState));
    "function" === typeof instance.componentDidMount && (workInProgress.effectTag |= 4);
  }

  var isArray$1 = Array.isArray;

  function coerceRef(returnFiber, current$$1, element) {
    returnFiber = element.ref;

    if (null !== returnFiber && "function" !== typeof returnFiber && "object" !== typeof returnFiber) {
      if (element._owner) {
        element = element._owner;
        var inst = undefined;
        element && (invariant(2 === element.tag || 3 === element.tag, "Stateless function components cannot have refs."), inst = element.stateNode);
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.", returnFiber);
        var stringRef = "" + returnFiber;
        if (null !== current$$1 && null !== current$$1.ref && "function" === typeof current$$1.ref && current$$1.ref._stringRef === stringRef) return current$$1.ref;

        current$$1 = function current$$1(value) {
          var refs = inst.refs;
          refs === emptyRefsObject && (refs = inst.refs = {});
          null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };

        current$$1._stringRef = stringRef;
        return current$$1;
      }

      invariant("string" === typeof returnFiber, "Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
      invariant(element._owner, "Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.", returnFiber);
    }

    return returnFiber;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    "textarea" !== returnFiber.type && invariant(false, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
  }

  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var last = returnFiber.lastEffect;
        null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        childToDelete.nextEffect = null;
        childToDelete.effectTag = 8;
      }
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;

      for (; null !== currentFirstChild;) {
        deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      for (returnFiber = new Map(); null !== currentFirstChild;) {
        null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      }

      return returnFiber;
    }

    function useFiber(fiber, pendingProps, expirationTime) {
      fiber = createWorkInProgress(fiber, pendingProps, expirationTime);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.effectTag = 2, lastPlacedIndex) : newIndex;
      newFiber.effectTag = 2;
      return lastPlacedIndex;
    }

    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = 2);
      return newFiber;
    }

    function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
      if (null === current$$1 || 8 !== current$$1.tag) return current$$1 = createFiberFromText(textContent, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, textContent, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateElement(returnFiber, current$$1, element, expirationTime) {
      if (null !== current$$1 && current$$1.type === element.type) return expirationTime = useFiber(current$$1, element.props, expirationTime), expirationTime.ref = coerceRef(returnFiber, current$$1, element), expirationTime.return = returnFiber, expirationTime;
      expirationTime = createFiberFromElement(element, returnFiber.mode, expirationTime);
      expirationTime.ref = coerceRef(returnFiber, current$$1, element);
      expirationTime.return = returnFiber;
      return expirationTime;
    }

    function updatePortal(returnFiber, current$$1, portal, expirationTime) {
      if (null === current$$1 || 6 !== current$$1.tag || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) return current$$1 = createFiberFromPortal(portal, returnFiber.mode, expirationTime), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, portal.children || [], expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
      if (null === current$$1 || 9 !== current$$1.tag) return current$$1 = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key), current$$1.return = returnFiber, current$$1;
      current$$1 = useFiber(current$$1, fragment, expirationTime);
      current$$1.return = returnFiber;
      return current$$1;
    }

    function createChild(returnFiber, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, null, newChild), expirationTime.return = returnFiber, expirationTime;

          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime), newChild.return = returnFiber, newChild;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null), newChild.return = returnFiber, newChild;
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild || "number" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key) : updateElement(returnFiber, oldFiber, newChild, expirationTime) : null;

          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, expirationTime) : null;
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if ("string" === typeof newChild || "number" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, expirationTime);

      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild.type === REACT_FRAGMENT_TYPE ? updateFragment(returnFiber, existingChildren, newChild.props.children, expirationTime, newChild.key) : updateElement(returnFiber, existingChildren, newChild, expirationTime);

          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, expirationTime);
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, expirationTime, null);
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      return null;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;

      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) {
          if (oldFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)) currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber;
        }

        return resultingFirstChild;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
        if (nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], expirationTime)) shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber;
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      var iteratorFn = getIteratorFn(newChildrenIterable);
      invariant("function" === typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
      newChildrenIterable = iteratorFn.call(newChildrenIterable);
      invariant(null != newChildrenIterable, "An iterable object provided no iterator.");

      for (var previousNewFiber = iteratorFn = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildrenIterable.next(); null !== oldFiber && !step.done; newIdx++, step = newChildrenIterable.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

        if (null === newFiber) {
          oldFiber || (oldFiber = nextOldFiber);
          break;
        }

        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? iteratorFn = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), iteratorFn;

      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildrenIterable.next()) {
          step = createChild(returnFiber, step.value, expirationTime), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
        }

        return iteratorFn;
      }

      for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildrenIterable.next()) {
        step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, expirationTime), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? iteratorFn = step : previousNewFiber.sibling = step, previousNewFiber = step);
      }

      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return iteratorFn;
    }

    return function (returnFiber, currentFirstChild, newChild, expirationTime) {
      var isUnkeyedTopLevelFragment = "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key;
      isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
      var isObject = "object" === typeof newChild && null !== newChild;
      if (isObject) switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          a: {
            isObject = newChild.key;

            for (isUnkeyedTopLevelFragment = currentFirstChild; null !== isUnkeyedTopLevelFragment;) {
              if (isUnkeyedTopLevelFragment.key === isObject) {
                if (9 === isUnkeyedTopLevelFragment.tag ? newChild.type === REACT_FRAGMENT_TYPE : isUnkeyedTopLevelFragment.type === newChild.type) {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment.sibling);
                  currentFirstChild = useFiber(isUnkeyedTopLevelFragment, newChild.type === REACT_FRAGMENT_TYPE ? newChild.props.children : newChild.props, expirationTime);
                  currentFirstChild.ref = coerceRef(returnFiber, isUnkeyedTopLevelFragment, newChild);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, isUnkeyedTopLevelFragment);
                  break;
                }
              } else deleteChild(returnFiber, isUnkeyedTopLevelFragment);
              isUnkeyedTopLevelFragment = isUnkeyedTopLevelFragment.sibling;
            }

            newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, expirationTime, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (expirationTime = createFiberFromElement(newChild, returnFiber.mode, expirationTime), expirationTime.ref = coerceRef(returnFiber, currentFirstChild, newChild), expirationTime.return = returnFiber, returnFiber = expirationTime);
          }

          return placeSingleChild(returnFiber);

        case REACT_PORTAL_TYPE:
          a: {
            for (isUnkeyedTopLevelFragment = newChild.key; null !== currentFirstChild;) {
              if (currentFirstChild.key === isUnkeyedTopLevelFragment) {
                if (6 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  currentFirstChild = useFiber(currentFirstChild, newChild.children || [], expirationTime);
                  currentFirstChild.return = returnFiber;
                  returnFiber = currentFirstChild;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              } else deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }

            currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            currentFirstChild.return = returnFiber;
            returnFiber = currentFirstChild;
          }

          return placeSingleChild(returnFiber);
      }
      if ("string" === typeof newChild || "number" === typeof newChild) return newChild = "" + newChild, null !== currentFirstChild && 8 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, expirationTime), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), placeSingleChild(returnFiber);
      if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      isObject && throwOnInvalidObjectType(returnFiber, newChild);
      if ("undefined" === typeof newChild && !isUnkeyedTopLevelFragment) switch (returnFiber.tag) {
        case 2:
        case 3:
        case 0:
          expirationTime = returnFiber.type, invariant(false, "%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.", expirationTime.displayName || expirationTime.name || "Component");
      }
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    };
  }

  var reconcileChildFibers = ChildReconciler(true),
      mountChildFibers = ChildReconciler(false),
      hydrationParentFiber = null,
      nextHydratableInstance = null,
      isHydrating = false;

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case 7:
        return nextInstance = shim$1(nextInstance, fiber.type, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      case 8:
        return nextInstance = shim$1(nextInstance, fiber.pendingProps), null !== nextInstance ? (fiber.stateNode = nextInstance, true) : false;

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber$jscomp$0) {
    if (isHydrating) {
      var nextInstance = nextHydratableInstance;

      if (nextInstance) {
        var firstAttemptedInstance = nextInstance;

        if (!tryHydrate(fiber$jscomp$0, nextInstance)) {
          nextInstance = shim$1(firstAttemptedInstance);

          if (!nextInstance || !tryHydrate(fiber$jscomp$0, nextInstance)) {
            fiber$jscomp$0.effectTag |= 2;
            isHydrating = false;
            hydrationParentFiber = fiber$jscomp$0;
            return;
          }

          var returnFiber = hydrationParentFiber,
              fiber = new FiberNode(7, null, null, 0);
          fiber.type = "DELETED";
          fiber.stateNode = firstAttemptedInstance;
          fiber.return = returnFiber;
          fiber.effectTag = 8;
          null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = fiber, returnFiber.lastEffect = fiber) : returnFiber.firstEffect = returnFiber.lastEffect = fiber;
        }

        hydrationParentFiber = fiber$jscomp$0;
        nextHydratableInstance = shim$1(nextInstance);
      } else fiber$jscomp$0.effectTag |= 2, isHydrating = false, hydrationParentFiber = fiber$jscomp$0;
    }
  }

  function readLazyComponentType(thenable) {
    switch (thenable._reactStatus) {
      case 1:
        return thenable._reactResult;

      case 2:
        throw thenable._reactResult;

      case 0:
        throw thenable;

      default:
        throw thenable._reactStatus = 0, thenable.then(function (resolvedValue) {
          if (0 === thenable._reactStatus) {
            thenable._reactStatus = 1;

            if ("object" === typeof resolvedValue && null !== resolvedValue) {
              var defaultExport = resolvedValue.default;
              resolvedValue = undefined !== defaultExport && null !== defaultExport ? defaultExport : resolvedValue;
            }

            thenable._reactResult = resolvedValue;
          }
        }, function (error) {
          0 === thenable._reactStatus && (thenable._reactStatus = 2, thenable._reactResult = error);
        }), thenable;
    }
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

  function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
    workInProgress.child = null === current$$1 ? mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime) : reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }

  function updateForwardRef(current$$1, workInProgress, type, nextProps, renderExpirationTime) {
    type = type.render;
    var ref = workInProgress.ref;
    if (!didPerformWorkStackCursor.current && workInProgress.memoizedProps === nextProps && ref === (null !== current$$1 ? current$$1.ref : null)) return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    type = type(nextProps, ref);
    reconcileChildren(current$$1, workInProgress, type, renderExpirationTime);
    workInProgress.memoizedProps = nextProps;
    return workInProgress.child;
  }

  function markRef(current$$1, workInProgress) {
    var ref = workInProgress.ref;
    if (null === current$$1 && null !== ref || null !== current$$1 && current$$1.ref !== ref) workInProgress.effectTag |= 128;
  }

  function updateFunctionalComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    var unmaskedContext = isContextProvider(Component) ? previousContext : contextStackCursor.current;
    unmaskedContext = getMaskedContext(workInProgress, unmaskedContext);
    prepareToReadContext(workInProgress, renderExpirationTime);
    Component = Component(nextProps, unmaskedContext);
    workInProgress.effectTag |= 1;
    reconcileChildren(current$$1, workInProgress, Component, renderExpirationTime);
    workInProgress.memoizedProps = nextProps;
    return workInProgress.child;
  }

  function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
    if (isContextProvider(Component)) {
      var hasContext = true;
      pushContextProvider(workInProgress);
    } else hasContext = false;

    prepareToReadContext(workInProgress, renderExpirationTime);
    if (null === current$$1) {
      if (null === workInProgress.stateNode) {
        var unmaskedContext = isContextProvider(Component) ? previousContext : contextStackCursor.current,
            contextTypes = Component.contextTypes,
            isContextConsumer = null !== contextTypes && undefined !== contextTypes;
        contextTypes = isContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        var instance = new Component(nextProps, contextTypes);
        workInProgress.memoizedState = null !== instance.state && undefined !== instance.state ? instance.state : null;
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        instance._reactInternalFiber = workInProgress;
        isContextConsumer && (isContextConsumer = workInProgress.stateNode, isContextConsumer.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, isContextConsumer.__reactInternalMemoizedMaskedChildContext = contextTypes);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        nextProps = true;
      } else {
        unmaskedContext = workInProgress.stateNode;
        contextTypes = workInProgress.memoizedProps;
        unmaskedContext.props = contextTypes;
        var oldContext = unmaskedContext.context;
        isContextConsumer = isContextProvider(Component) ? previousContext : contextStackCursor.current;
        isContextConsumer = getMaskedContext(workInProgress, isContextConsumer);
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;
        (instance = "function" === typeof getDerivedStateFromProps || "function" === typeof unmaskedContext.getSnapshotBeforeUpdate) || "function" !== typeof unmaskedContext.UNSAFE_componentWillReceiveProps && "function" !== typeof unmaskedContext.componentWillReceiveProps || (contextTypes !== nextProps || oldContext !== isContextConsumer) && callComponentWillReceiveProps(workInProgress, unmaskedContext, nextProps, isContextConsumer);
        hasForceUpdate = false;
        var oldState = workInProgress.memoizedState;
        oldContext = unmaskedContext.state = oldState;
        var updateQueue = workInProgress.updateQueue;
        null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, unmaskedContext, renderExpirationTime), oldContext = workInProgress.memoizedState);
        contextTypes !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (contextTypes = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextTypes, nextProps, oldState, oldContext, isContextConsumer)) ? (instance || "function" !== typeof unmaskedContext.UNSAFE_componentWillMount && "function" !== typeof unmaskedContext.componentWillMount || ("function" === typeof unmaskedContext.componentWillMount && unmaskedContext.componentWillMount(), "function" === typeof unmaskedContext.UNSAFE_componentWillMount && unmaskedContext.UNSAFE_componentWillMount()), "function" === typeof unmaskedContext.componentDidMount && (workInProgress.effectTag |= 4)) : ("function" === typeof unmaskedContext.componentDidMount && (workInProgress.effectTag |= 4), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), unmaskedContext.props = nextProps, unmaskedContext.state = oldContext, unmaskedContext.context = isContextConsumer, nextProps = contextTypes) : ("function" === typeof unmaskedContext.componentDidMount && (workInProgress.effectTag |= 4), nextProps = false);
      }
    } else unmaskedContext = workInProgress.stateNode, contextTypes = workInProgress.memoizedProps, unmaskedContext.props = contextTypes, oldContext = unmaskedContext.context, isContextConsumer = isContextProvider(Component) ? previousContext : contextStackCursor.current, isContextConsumer = getMaskedContext(workInProgress, isContextConsumer), getDerivedStateFromProps = Component.getDerivedStateFromProps, (instance = "function" === typeof getDerivedStateFromProps || "function" === typeof unmaskedContext.getSnapshotBeforeUpdate) || "function" !== typeof unmaskedContext.UNSAFE_componentWillReceiveProps && "function" !== typeof unmaskedContext.componentWillReceiveProps || (contextTypes !== nextProps || oldContext !== isContextConsumer) && callComponentWillReceiveProps(workInProgress, unmaskedContext, nextProps, isContextConsumer), hasForceUpdate = false, oldContext = workInProgress.memoizedState, oldState = unmaskedContext.state = oldContext, updateQueue = workInProgress.updateQueue, null !== updateQueue && (processUpdateQueue(workInProgress, updateQueue, nextProps, unmaskedContext, renderExpirationTime), oldState = workInProgress.memoizedState), contextTypes !== nextProps || oldContext !== oldState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldState = workInProgress.memoizedState), (getDerivedStateFromProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextTypes, nextProps, oldContext, oldState, isContextConsumer)) ? (instance || "function" !== typeof unmaskedContext.UNSAFE_componentWillUpdate && "function" !== typeof unmaskedContext.componentWillUpdate || ("function" === typeof unmaskedContext.componentWillUpdate && unmaskedContext.componentWillUpdate(nextProps, oldState, isContextConsumer), "function" === typeof unmaskedContext.UNSAFE_componentWillUpdate && unmaskedContext.UNSAFE_componentWillUpdate(nextProps, oldState, isContextConsumer)), "function" === typeof unmaskedContext.componentDidUpdate && (workInProgress.effectTag |= 4), "function" === typeof unmaskedContext.getSnapshotBeforeUpdate && (workInProgress.effectTag |= 256)) : ("function" !== typeof unmaskedContext.componentDidUpdate || contextTypes === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof unmaskedContext.getSnapshotBeforeUpdate || contextTypes === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldState), unmaskedContext.props = nextProps, unmaskedContext.state = oldState, unmaskedContext.context = isContextConsumer, nextProps = getDerivedStateFromProps) : ("function" !== typeof unmaskedContext.componentDidUpdate || contextTypes === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 4), "function" !== typeof unmaskedContext.getSnapshotBeforeUpdate || contextTypes === current$$1.memoizedProps && oldContext === current$$1.memoizedState || (workInProgress.effectTag |= 256), nextProps = false);
    return finishClassComponent(current$$1, workInProgress, Component, nextProps, hasContext, renderExpirationTime);
  }

  function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
    markRef(current$$1, workInProgress);
    var didCaptureError = 0 !== (workInProgress.effectTag & 64);
    if (!shouldUpdate && !didCaptureError) return hasContext && invalidateContextProvider(workInProgress, Component, false), bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    shouldUpdate = workInProgress.stateNode;
    ReactCurrentOwner$3.current = workInProgress;
    var nextChildren = didCaptureError ? null : shouldUpdate.render();
    workInProgress.effectTag |= 1;
    null !== current$$1 && didCaptureError && (reconcileChildren(current$$1, workInProgress, null, renderExpirationTime), workInProgress.child = null);
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    workInProgress.memoizedState = shouldUpdate.state;
    workInProgress.memoizedProps = shouldUpdate.props;
    hasContext && invalidateContextProvider(workInProgress, Component, true);
    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, false);
    pushHostContainer(workInProgress, root.containerInfo);
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      baseProps = _extends({}, baseProps);
      Component = Component.defaultProps;

      for (var propName in Component) {
        undefined === baseProps[propName] && (baseProps[propName] = Component[propName]);
      }
    }

    return baseProps;
  }

  function mountIndeterminateComponent(current$$1, workInProgress, Component, renderExpirationTime) {
    invariant(null === current$$1, "An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.");
    var props = workInProgress.pendingProps;

    if ("object" === typeof Component && null !== Component && "function" === typeof Component.then) {
      Component = readLazyComponentType(Component);
      var JSCompiler_inline_result = Component;
      JSCompiler_inline_result = "function" === typeof JSCompiler_inline_result ? shouldConstruct(JSCompiler_inline_result) ? 3 : 1 : undefined !== JSCompiler_inline_result && null !== JSCompiler_inline_result && JSCompiler_inline_result.$$typeof ? 14 : 4;
      JSCompiler_inline_result = workInProgress.tag = JSCompiler_inline_result;
      var resolvedProps = resolveDefaultProps(Component, props);

      switch (JSCompiler_inline_result) {
        case 1:
          return updateFunctionalComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);

        case 3:
          return updateClassComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);

        case 14:
          return updateForwardRef(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);

        default:
          invariant(false, "Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.", Component);
      }
    }

    JSCompiler_inline_result = getMaskedContext(workInProgress, contextStackCursor.current);
    prepareToReadContext(workInProgress, renderExpirationTime);
    JSCompiler_inline_result = Component(props, JSCompiler_inline_result);
    workInProgress.effectTag |= 1;

    if ("object" === typeof JSCompiler_inline_result && null !== JSCompiler_inline_result && "function" === typeof JSCompiler_inline_result.render && undefined === JSCompiler_inline_result.$$typeof) {
      workInProgress.tag = 2;
      isContextProvider(Component) ? (resolvedProps = true, pushContextProvider(workInProgress)) : resolvedProps = false;
      workInProgress.memoizedState = null !== JSCompiler_inline_result.state && undefined !== JSCompiler_inline_result.state ? JSCompiler_inline_result.state : null;
      var getDerivedStateFromProps = Component.getDerivedStateFromProps;
      "function" === typeof getDerivedStateFromProps && applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
      JSCompiler_inline_result.updater = classComponentUpdater;
      workInProgress.stateNode = JSCompiler_inline_result;
      JSCompiler_inline_result._reactInternalFiber = workInProgress;
      mountClassInstance(workInProgress, Component, props, renderExpirationTime);
      return finishClassComponent(current$$1, workInProgress, Component, true, resolvedProps, renderExpirationTime);
    }

    workInProgress.tag = 0;
    reconcileChildren(current$$1, workInProgress, JSCompiler_inline_result, renderExpirationTime);
    workInProgress.memoizedProps = props;
    return workInProgress.child;
  }

  function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
    null !== current$$1 && (workInProgress.firstContextDependency = current$$1.firstContextDependency);
    var childExpirationTime = workInProgress.childExpirationTime;
    if (0 === childExpirationTime || childExpirationTime > renderExpirationTime) return null;
    invariant(null === current$$1 || workInProgress.child === current$$1.child, "Resuming work not yet implemented.");

    if (null !== workInProgress.child) {
      current$$1 = workInProgress.child;
      renderExpirationTime = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime);
      workInProgress.child = renderExpirationTime;

      for (renderExpirationTime.return = workInProgress; null !== current$$1.sibling;) {
        current$$1 = current$$1.sibling, renderExpirationTime = renderExpirationTime.sibling = createWorkInProgress(current$$1, current$$1.pendingProps, current$$1.expirationTime), renderExpirationTime.return = workInProgress;
      }

      renderExpirationTime.sibling = null;
    }

    return workInProgress.child;
  }

  function beginWork(current$$1, workInProgress, renderExpirationTime) {
    var updateExpirationTime = workInProgress.expirationTime;

    if (!didPerformWorkStackCursor.current && (0 === updateExpirationTime || updateExpirationTime > renderExpirationTime)) {
      switch (workInProgress.tag) {
        case 5:
          pushHostRootContext(workInProgress);
          break;

        case 7:
          pushHostContext(workInProgress);
          break;

        case 2:
          isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
          break;

        case 3:
          isContextProvider(workInProgress.type._reactResult) && pushContextProvider(workInProgress);
          break;

        case 6:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case 12:
          pushProvider(workInProgress, workInProgress.memoizedProps.value);
      }

      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }

    workInProgress.expirationTime = 0;

    switch (workInProgress.tag) {
      case 4:
        return mountIndeterminateComponent(current$$1, workInProgress, workInProgress.type, renderExpirationTime);

      case 0:
        return updateFunctionalComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, renderExpirationTime);

      case 1:
        var _Component5 = workInProgress.type._reactResult;
        updateExpirationTime = workInProgress.pendingProps;
        current$$1 = updateFunctionalComponent(current$$1, workInProgress, _Component5, resolveDefaultProps(_Component5, updateExpirationTime), renderExpirationTime);
        workInProgress.memoizedProps = updateExpirationTime;
        return current$$1;

      case 2:
        return updateClassComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, renderExpirationTime);

      case 3:
        return _Component5 = workInProgress.type._reactResult, updateExpirationTime = workInProgress.pendingProps, current$$1 = updateClassComponent(current$$1, workInProgress, _Component5, resolveDefaultProps(_Component5, updateExpirationTime), renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, current$$1;

      case 5:
        return pushHostRootContext(workInProgress), updateExpirationTime = workInProgress.updateQueue, invariant(null !== updateExpirationTime, "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."), _Component5 = workInProgress.memoizedState, _Component5 = null !== _Component5 ? _Component5.element : null, processUpdateQueue(workInProgress, updateExpirationTime, workInProgress.pendingProps, null, renderExpirationTime), updateExpirationTime = workInProgress.memoizedState.element, updateExpirationTime === _Component5 ? workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) : (reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress = workInProgress.child), workInProgress;

      case 7:
        return pushHostContext(workInProgress), null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), updateExpirationTime = workInProgress.pendingProps, _Component5 = updateExpirationTime.children, markRef(current$$1, workInProgress), reconcileChildren(current$$1, workInProgress, _Component5, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress = workInProgress.child, workInProgress;

      case 8:
        return null === current$$1 && tryToClaimNextHydratableInstance(workInProgress), workInProgress.memoizedProps = workInProgress.pendingProps, null;

      case 16:
        return null;

      case 6:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), updateExpirationTime = workInProgress.pendingProps, null === current$$1 ? workInProgress.child = reconcileChildFibers(workInProgress, null, updateExpirationTime, renderExpirationTime) : reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      case 13:
        return updateForwardRef(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, renderExpirationTime);

      case 14:
        return _Component5 = workInProgress.type._reactResult, updateExpirationTime = workInProgress.pendingProps, current$$1 = updateForwardRef(current$$1, workInProgress, _Component5, resolveDefaultProps(_Component5, updateExpirationTime), renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, current$$1;

      case 9:
        return updateExpirationTime = workInProgress.pendingProps, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      case 10:
        return updateExpirationTime = workInProgress.pendingProps.children, reconcileChildren(current$$1, workInProgress, updateExpirationTime, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      case 15:
        return updateExpirationTime = workInProgress.pendingProps, reconcileChildren(current$$1, workInProgress, updateExpirationTime.children, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      case 12:
        a: {
          updateExpirationTime = workInProgress.type._context;
          _Component5 = workInProgress.pendingProps;
          var oldProps = workInProgress.memoizedProps,
              newValue = _Component5.value;
          workInProgress.memoizedProps = _Component5;
          pushProvider(workInProgress, newValue);

          if (null !== oldProps) {
            var oldValue = oldProps.value;
            newValue = oldValue === newValue && (0 !== oldValue || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue ? 0 : ("function" === typeof updateExpirationTime._calculateChangedBits ? updateExpirationTime._calculateChangedBits(oldValue, newValue) : 1073741823) | 0;

            if (0 === newValue) {
              if (oldProps.children === _Component5.children && !didPerformWorkStackCursor.current) {
                workInProgress = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
                break a;
              }
            } else for (oldProps = workInProgress.child, null !== oldProps && (oldProps.return = workInProgress); null !== oldProps;) {
              oldValue = oldProps.firstContextDependency;

              if (null !== oldValue) {
                do {
                  if (oldValue.context === updateExpirationTime && 0 !== (oldValue.observedBits & newValue)) {
                    if (2 === oldProps.tag || 3 === oldProps.tag) {
                      var nextFiber = createUpdate(renderExpirationTime);
                      nextFiber.tag = 2;
                      enqueueUpdate(oldProps, nextFiber);
                    }

                    if (0 === oldProps.expirationTime || oldProps.expirationTime > renderExpirationTime) oldProps.expirationTime = renderExpirationTime;
                    nextFiber = oldProps.alternate;
                    null !== nextFiber && (0 === nextFiber.expirationTime || nextFiber.expirationTime > renderExpirationTime) && (nextFiber.expirationTime = renderExpirationTime);

                    for (var node = oldProps.return; null !== node;) {
                      nextFiber = node.alternate;
                      if (0 === node.childExpirationTime || node.childExpirationTime > renderExpirationTime) node.childExpirationTime = renderExpirationTime, null !== nextFiber && (0 === nextFiber.childExpirationTime || nextFiber.childExpirationTime > renderExpirationTime) && (nextFiber.childExpirationTime = renderExpirationTime);else if (null !== nextFiber && (0 === nextFiber.childExpirationTime || nextFiber.childExpirationTime > renderExpirationTime)) nextFiber.childExpirationTime = renderExpirationTime;else break;
                      node = node.return;
                    }
                  }

                  nextFiber = oldProps.child;
                  oldValue = oldValue.next;
                } while (null !== oldValue);
              } else nextFiber = 12 === oldProps.tag ? oldProps.type === workInProgress.type ? null : oldProps.child : oldProps.child;

              if (null !== nextFiber) nextFiber.return = oldProps;else for (nextFiber = oldProps; null !== nextFiber;) {
                if (nextFiber === workInProgress) {
                  nextFiber = null;
                  break;
                }

                oldProps = nextFiber.sibling;

                if (null !== oldProps) {
                  oldProps.return = nextFiber.return;
                  nextFiber = oldProps;
                  break;
                }

                nextFiber = nextFiber.return;
              }
              oldProps = nextFiber;
            }
          }

          reconcileChildren(current$$1, workInProgress, _Component5.children, renderExpirationTime);
          workInProgress = workInProgress.child;
        }

        return workInProgress;

      case 11:
        return newValue = workInProgress.type, updateExpirationTime = workInProgress.pendingProps, _Component5 = updateExpirationTime.children, prepareToReadContext(workInProgress, renderExpirationTime), newValue = readContext(newValue, updateExpirationTime.unstable_observedBits), _Component5 = _Component5(newValue), workInProgress.effectTag |= 1, reconcileChildren(current$$1, workInProgress, _Component5, renderExpirationTime), workInProgress.memoizedProps = updateExpirationTime, workInProgress.child;

      default:
        invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  function appendAllChildren(parent, workInProgress) {
    for (var node = workInProgress.child; null !== node;) {
      if (7 === node.tag || 8 === node.tag) FabricUIManager.appendChild(parent.node, node.stateNode.node);else if (6 !== node.tag && null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;

      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  var updateHostContainer = undefined,
      updateHostComponent$1 = undefined,
      updateHostText$1 = undefined;

  updateHostContainer = function updateHostContainer(workInProgress) {
    var portalOrRoot = workInProgress.stateNode;

    if (null !== workInProgress.firstEffect) {
      var container = portalOrRoot.containerInfo,
          newChildSet = FabricUIManager.createChildSet(container);

      a: for (var node = workInProgress.child; null !== node;) {
        if (7 === node.tag || 8 === node.tag) FabricUIManager.appendChildToSet(newChildSet, node.stateNode.node);else if (6 !== node.tag && null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === workInProgress) break a;

        for (; null === node.sibling;) {
          if (null === node.return || node.return === workInProgress) break a;
          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }

      portalOrRoot.pendingChildren = newChildSet;
      workInProgress.effectTag |= 4;
      FabricUIManager.completeRoot(container, newChildSet);
    }
  };

  updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps) {
    type = current.stateNode;
    var oldProps = current.memoizedProps;
    if ((current = null === workInProgress.firstEffect) && oldProps === newProps) workInProgress.stateNode = type;else {
      var recyclableInstance = workInProgress.stateNode;
      requiredContext(contextStackCursor$1.current);
      var updatePayload = null;
      oldProps !== newProps && (oldProps = diffProperties(null, oldProps, newProps, recyclableInstance.canonical.viewConfig.validAttributes), recyclableInstance.canonical.currentProps = newProps, updatePayload = oldProps);
      current && null === updatePayload ? workInProgress.stateNode = type : (newProps = updatePayload, recyclableInstance = type.node, type = {
        node: current ? null !== newProps ? FabricUIManager.cloneNodeWithNewProps(recyclableInstance, newProps) : FabricUIManager.cloneNode(recyclableInstance) : null !== newProps ? FabricUIManager.cloneNodeWithNewChildrenAndProps(recyclableInstance, newProps) : FabricUIManager.cloneNodeWithNewChildren(recyclableInstance),
        canonical: type.canonical
      }, workInProgress.stateNode = type, current ? workInProgress.effectTag |= 4 : appendAllChildren(type, workInProgress));
    }
  };

  updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
    oldText !== newText && (current = requiredContext(rootInstanceStackCursor.current), oldText = requiredContext(contextStackCursor$1.current), workInProgress.stateNode = createTextInstance(newText, current, oldText, workInProgress), workInProgress.effectTag |= 4);
  };

  function logCapturedError(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error;

    if (error instanceof Error) {
      capturedError = error.message;
      var name = error.name;

      try {
        error.message = (capturedError ? name + ": " + capturedError : name) + "\n\nThis error is located at:" + componentStack;
      } catch (e) {}
    } else error = "string" === typeof error ? Error(error + "\n\nThis error is located at:" + componentStack) : Error("Unspecified error at:" + componentStack);

    ExceptionsManager.handleException(error, false);
  }

  function logError(boundary, errorInfo) {
    var source = errorInfo.source,
        stack = errorInfo.stack;
    null === stack && null !== source && (stack = getStackByFiberInDevAndProd(source));
    errorInfo = {
      componentName: null !== source ? getComponentName(source.type) : null,
      componentStack: null !== stack ? stack : "",
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
    null !== boundary && 2 === boundary.tag && (errorInfo.errorBoundary = boundary.stateNode, errorInfo.errorBoundaryName = getComponentName(boundary.type), errorInfo.errorBoundaryFound = true, errorInfo.willRetry = true);

    try {
      logCapturedError(errorInfo);
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }

  function safelyDetachRef(current$$1) {
    var ref = current$$1.ref;
    if (null !== ref) if ("function" === typeof ref) try {
      ref(null);
    } catch (refError) {
      captureCommitPhaseError(current$$1, refError);
    } else ref.current = null;
  }

  function commitWork(current$$1, finishedWork) {
    switch (finishedWork.tag) {
      case 2:
      case 3:
        break;

      case 7:
        break;

      case 8:
        break;

      case 5:
      case 6:
        break;

      default:
        invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
  }

  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime);
    expirationTime.tag = 3;
    expirationTime.payload = {
      element: null
    };
    var error = errorInfo.value;

    expirationTime.callback = function () {
      onUncaughtError(error);
      logError(fiber, errorInfo);
    };

    return expirationTime;
  }

  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    expirationTime = createUpdate(expirationTime);
    expirationTime.tag = 3;
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (expirationTime.callback = function () {
      null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this);
      var error = errorInfo.value,
          stack = errorInfo.stack;
      logError(fiber, errorInfo);
      this.componentDidCatch(error, {
        componentStack: null !== stack ? stack : ""
      });
    });
    return expirationTime;
  }

  function unwindWork(workInProgress) {
    switch (workInProgress.tag) {
      case 2:
        isContextProvider(workInProgress.type) && popContext(workInProgress);
        var effectTag = workInProgress.effectTag;
        return effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

      case 3:
        return isContextProvider(workInProgress.type._reactResult) && popContext(workInProgress), effectTag = workInProgress.effectTag, effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

      case 5:
        return popHostContainer(workInProgress), popTopLevelContextObject(workInProgress), effectTag = workInProgress.effectTag, invariant(0 === (effectTag & 64), "The root failed to unmount after an error. This is likely a bug in React. Please file an issue."), workInProgress.effectTag = effectTag & -1025 | 64, workInProgress;

      case 7:
        return popHostContext(workInProgress), null;

      case 16:
        return effectTag = workInProgress.effectTag, effectTag & 1024 ? (workInProgress.effectTag = effectTag & -1025 | 64, workInProgress) : null;

      case 6:
        return popHostContainer(workInProgress), null;

      case 12:
        return popProvider(workInProgress), null;

      default:
        return null;
    }
  }

  var Dispatcher = {
    readContext: readContext
  },
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      isWorking = false,
      nextUnitOfWork = null,
      nextRoot = null,
      nextRenderExpirationTime = 0,
      nextRenderDidError = false,
      nextEffect = null,
      isCommitting$1 = false,
      legacyErrorBoundariesThatAlreadyFailed = null;

  function resetStack() {
    if (null !== nextUnitOfWork) for (var interruptedWork = nextUnitOfWork.return; null !== interruptedWork;) {
      var interruptedWork$jscomp$0 = interruptedWork;

      switch (interruptedWork$jscomp$0.tag) {
        case 2:
          var childContextTypes = interruptedWork$jscomp$0.type.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork$jscomp$0);
          break;

        case 3:
          childContextTypes = interruptedWork$jscomp$0.type._reactResult.childContextTypes;
          null !== childContextTypes && undefined !== childContextTypes && popContext(interruptedWork$jscomp$0);
          break;

        case 5:
          popHostContainer(interruptedWork$jscomp$0);
          popTopLevelContextObject(interruptedWork$jscomp$0);
          break;

        case 7:
          popHostContext(interruptedWork$jscomp$0);
          break;

        case 6:
          popHostContainer(interruptedWork$jscomp$0);
          break;

        case 12:
          popProvider(interruptedWork$jscomp$0);
      }

      interruptedWork = interruptedWork.return;
    }
    nextRoot = null;
    nextRenderExpirationTime = 0;
    nextRenderDidError = false;
    nextUnitOfWork = null;
  }

  function completeUnitOfWork(workInProgress) {
    for (;;) {
      var current$$1 = workInProgress.alternate,
          returnFiber = workInProgress.return,
          siblingFiber = workInProgress.sibling;

      if (0 === (workInProgress.effectTag & 512)) {
        var current = current$$1;
        current$$1 = workInProgress;
        var instance = current$$1.pendingProps;

        switch (current$$1.tag) {
          case 0:
          case 1:
            break;

          case 2:
            isContextProvider(current$$1.type) && popContext(current$$1);
            break;

          case 3:
            isContextProvider(current$$1.type._reactResult) && popContext(current$$1);
            break;

          case 5:
            popHostContainer(current$$1);
            popTopLevelContextObject(current$$1);
            instance = current$$1.stateNode;
            instance.pendingContext && (instance.context = instance.pendingContext, instance.pendingContext = null);
            if (null === current || null === current.child) current$$1.effectTag &= -3;
            updateHostContainer(current$$1);
            break;

          case 7:
            popHostContext(current$$1);
            var rootContainerInstance = requiredContext(rootInstanceStackCursor.current),
                type = current$$1.type;
            if (null !== current && null != current$$1.stateNode) updateHostComponent$1(current, current$$1, type, instance, rootContainerInstance), current.ref !== current$$1.ref && (current$$1.effectTag |= 128);else if (instance) {
              var currentHostContext = requiredContext(contextStackCursor$1.current),
                  internalInstanceHandle = current$$1;
              current = nextReactTag;
              nextReactTag += 2;
              var viewConfig = ReactNativeViewConfigRegistry.get(type);
              invariant("RCTView" !== type || !currentHostContext.isInAParentText, "Nesting of <View> within <Text> is not currently supported.");
              type = diffProperties(null, emptyObject, instance, viewConfig.validAttributes);
              rootContainerInstance = FabricUIManager.createNode(current, viewConfig.uiViewClassName, rootContainerInstance, type, internalInstanceHandle);
              instance = new ReactFabricHostComponent(current, viewConfig, instance);
              instance = {
                node: rootContainerInstance,
                canonical: instance
              };
              appendAllChildren(instance, current$$1);
              current$$1.stateNode = instance;
              null !== current$$1.ref && (current$$1.effectTag |= 128);
            } else invariant(null !== current$$1.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            break;

          case 8:
            current && null != current$$1.stateNode ? updateHostText$1(current, current$$1, current.memoizedProps, instance) : ("string" !== typeof instance && invariant(null !== current$$1.stateNode, "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."), rootContainerInstance = requiredContext(rootInstanceStackCursor.current), current = requiredContext(contextStackCursor$1.current), current$$1.stateNode = createTextInstance(instance, rootContainerInstance, current, current$$1));
            break;

          case 13:
          case 14:
            break;

          case 16:
            break;

          case 9:
            break;

          case 10:
            break;

          case 15:
            break;

          case 6:
            popHostContainer(current$$1);
            updateHostContainer(current$$1);
            break;

          case 12:
            popProvider(current$$1);
            break;

          case 11:
            break;

          case 4:
            invariant(false, "An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.");

          default:
            invariant(false, "Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.");
        }

        current$$1 = nextUnitOfWork = null;
        instance = workInProgress;

        if (1073741823 === nextRenderExpirationTime || 1073741823 !== instance.childExpirationTime) {
          rootContainerInstance = 0;

          for (current = instance.child; null !== current;) {
            viewConfig = current.expirationTime;
            type = current.childExpirationTime;
            if (0 === rootContainerInstance || 0 !== viewConfig && viewConfig < rootContainerInstance) rootContainerInstance = viewConfig;
            if (0 === rootContainerInstance || 0 !== type && type < rootContainerInstance) rootContainerInstance = type;
            current = current.sibling;
          }

          instance.childExpirationTime = rootContainerInstance;
        }

        if (null !== current$$1) return current$$1;
        null !== returnFiber && 0 === (returnFiber.effectTag & 512) && (null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress.firstEffect), returnFiber.lastEffect = workInProgress.lastEffect), 1 < workInProgress.effectTag && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress : returnFiber.firstEffect = workInProgress, returnFiber.lastEffect = workInProgress));
      } else {
        workInProgress = unwindWork(workInProgress, nextRenderExpirationTime);
        if (null !== workInProgress) return workInProgress.effectTag &= 511, workInProgress;
        null !== returnFiber && (returnFiber.firstEffect = returnFiber.lastEffect = null, returnFiber.effectTag |= 512);
      }

      if (null !== siblingFiber) return siblingFiber;
      if (null !== returnFiber) workInProgress = returnFiber;else break;
    }

    return null;
  }

  function performUnitOfWork(workInProgress) {
    var next = beginWork(workInProgress.alternate, workInProgress, nextRenderExpirationTime);
    null === next && (next = completeUnitOfWork(workInProgress));
    ReactCurrentOwner$2.current = null;
    return next;
  }

  function renderRoot(root, isYieldy, isExpired) {
    invariant(!isWorking, "renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
    isWorking = true;
    ReactCurrentOwner$2.currentDispatcher = Dispatcher;
    var expirationTime = root.nextExpirationTimeToWorkOn;
    if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || null === nextUnitOfWork) resetStack(), nextRoot = root, nextRenderExpirationTime = expirationTime, nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime), root.pendingCommitExpirationTime = 0;
    var didFatal = false;

    do {
      try {
        if (isYieldy) for (; null !== nextUnitOfWork && !shouldYield();) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        } else for (; null !== nextUnitOfWork;) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      } catch (thrownValue) {
        if (null === nextUnitOfWork) didFatal = true, onUncaughtError(thrownValue);else {
          invariant(null !== nextUnitOfWork, "Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.");
          var sourceFiber = nextUnitOfWork,
              returnFiber = sourceFiber.return;
          if (null === returnFiber) didFatal = true, onUncaughtError(thrownValue);else {
            a: {
              var returnFiber$jscomp$0 = returnFiber,
                  sourceFiber$jscomp$0 = sourceFiber,
                  value = thrownValue;
              returnFiber = nextRenderExpirationTime;
              sourceFiber$jscomp$0.effectTag |= 512;
              sourceFiber$jscomp$0.firstEffect = sourceFiber$jscomp$0.lastEffect = null;
              nextRenderDidError = true;
              value = createCapturedValue(value, sourceFiber$jscomp$0);

              do {
                switch (returnFiber$jscomp$0.tag) {
                  case 5:
                    returnFiber$jscomp$0.effectTag |= 1024;
                    returnFiber$jscomp$0.expirationTime = returnFiber;
                    returnFiber = createRootErrorUpdate(returnFiber$jscomp$0, value, returnFiber);
                    enqueueCapturedUpdate(returnFiber$jscomp$0, returnFiber);
                    break a;

                  case 2:
                  case 3:
                    sourceFiber$jscomp$0 = value;
                    var instance = returnFiber$jscomp$0.stateNode;

                    if (0 === (returnFiber$jscomp$0.effectTag & 64) && null !== instance && "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                      returnFiber$jscomp$0.effectTag |= 1024;
                      returnFiber$jscomp$0.expirationTime = returnFiber;
                      returnFiber = createClassErrorUpdate(returnFiber$jscomp$0, sourceFiber$jscomp$0, returnFiber);
                      enqueueCapturedUpdate(returnFiber$jscomp$0, returnFiber);
                      break a;
                    }

                }

                returnFiber$jscomp$0 = returnFiber$jscomp$0.return;
              } while (null !== returnFiber$jscomp$0);
            }

            nextUnitOfWork = completeUnitOfWork(sourceFiber);
            continue;
          }
        }
      }

      break;
    } while (1);

    isWorking = false;
    lastContextWithAllBitsObserved = lastContextDependency = currentlyRenderingFiber = ReactCurrentOwner$2.currentDispatcher = null;
    if (didFatal) nextRoot = null, root.finishedWork = null;else if (null !== nextUnitOfWork) root.finishedWork = null;else {
      isYieldy = root.current.alternate;
      invariant(null !== isYieldy, "Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.");
      nextRoot = null;

      if (nextRenderDidError) {
        didFatal = root.latestPendingTime;
        sourceFiber = root.latestSuspendedTime;
        returnFiber = root.latestPingedTime;

        if (0 !== didFatal && didFatal > expirationTime || 0 !== sourceFiber && sourceFiber > expirationTime || 0 !== returnFiber && returnFiber > expirationTime) {
          root.didError = false;
          isExpired = root.latestPingedTime;
          0 !== isExpired && isExpired <= expirationTime && (root.latestPingedTime = 0);
          isExpired = root.earliestPendingTime;
          isYieldy = root.latestPendingTime;
          isExpired === expirationTime ? root.earliestPendingTime = isYieldy === expirationTime ? root.latestPendingTime = 0 : isYieldy : isYieldy === expirationTime && (root.latestPendingTime = isExpired);
          isExpired = root.earliestSuspendedTime;
          isYieldy = root.latestSuspendedTime;
          0 === isExpired ? root.earliestSuspendedTime = root.latestSuspendedTime = expirationTime : isExpired > expirationTime ? root.earliestSuspendedTime = expirationTime : isYieldy < expirationTime && (root.latestSuspendedTime = expirationTime);
          findNextExpirationTimeToWorkOn(expirationTime, root);
          root.expirationTime = root.expirationTime;
          return;
        }

        if (!root.didError && !isExpired) {
          root.didError = true;
          root.nextExpirationTimeToWorkOn = expirationTime;
          root.expirationTime = 1;
          return;
        }
      }

      root.pendingCommitExpirationTime = expirationTime;
      root.finishedWork = isYieldy;
    }
  }

  function captureCommitPhaseError(fiber, error) {
    var JSCompiler_inline_result;

    a: {
      invariant(!isWorking || isCommitting$1, "dispatch: Cannot dispatch during the render phase.");

      for (JSCompiler_inline_result = fiber.return; null !== JSCompiler_inline_result;) {
        switch (JSCompiler_inline_result.tag) {
          case 2:
          case 3:
            var instance = JSCompiler_inline_result.stateNode;

            if ("function" === typeof JSCompiler_inline_result.type.getDerivedStateFromCatch || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
              fiber = createCapturedValue(error, fiber);
              fiber = createClassErrorUpdate(JSCompiler_inline_result, fiber, 1);
              enqueueUpdate(JSCompiler_inline_result, fiber);
              scheduleWork(JSCompiler_inline_result, 1);
              JSCompiler_inline_result = undefined;
              break a;
            }

            break;

          case 5:
            fiber = createCapturedValue(error, fiber);
            fiber = createRootErrorUpdate(JSCompiler_inline_result, fiber, 1);
            enqueueUpdate(JSCompiler_inline_result, fiber);
            scheduleWork(JSCompiler_inline_result, 1);
            JSCompiler_inline_result = undefined;
            break a;
        }

        JSCompiler_inline_result = JSCompiler_inline_result.return;
      }

      5 === fiber.tag && (JSCompiler_inline_result = createCapturedValue(error, fiber), JSCompiler_inline_result = createRootErrorUpdate(fiber, JSCompiler_inline_result, 1), enqueueUpdate(fiber, JSCompiler_inline_result), scheduleWork(fiber, 1));
      JSCompiler_inline_result = undefined;
    }

    return JSCompiler_inline_result;
  }

  function computeExpirationForFiber(currentTime, fiber) {
    isWorking ? currentTime = isCommitting$1 ? 1 : nextRenderExpirationTime : fiber.mode & 1 ? (currentTime = isBatchingInteractiveUpdates ? 2 + 10 * (((currentTime - 2 + 15) / 10 | 0) + 1) : 2 + 25 * (((currentTime - 2 + 500) / 25 | 0) + 1), null !== nextRoot && currentTime === nextRenderExpirationTime && (currentTime += 1)) : currentTime = 1;
    isBatchingInteractiveUpdates && (0 === lowestPriorityPendingInteractiveExpirationTime || currentTime > lowestPriorityPendingInteractiveExpirationTime) && (lowestPriorityPendingInteractiveExpirationTime = currentTime);
    return currentTime;
  }

  function scheduleWork(fiber, expirationTime) {
    a: {
      if (0 === fiber.expirationTime || fiber.expirationTime > expirationTime) fiber.expirationTime = expirationTime;
      var alternate = fiber.alternate;
      null !== alternate && (0 === alternate.expirationTime || alternate.expirationTime > expirationTime) && (alternate.expirationTime = expirationTime);
      var node = fiber.return;
      if (null === node && 5 === fiber.tag) fiber = fiber.stateNode;else {
        for (; null !== node;) {
          alternate = node.alternate;
          if (0 === node.childExpirationTime || node.childExpirationTime > expirationTime) node.childExpirationTime = expirationTime;
          null !== alternate && (0 === alternate.childExpirationTime || alternate.childExpirationTime > expirationTime) && (alternate.childExpirationTime = expirationTime);

          if (null === node.return && 5 === node.tag) {
            fiber = node.stateNode;
            break a;
          }

          node = node.return;
        }

        fiber = null;
      }
    }

    if (null !== fiber) {
      !isWorking && 0 !== nextRenderExpirationTime && expirationTime < nextRenderExpirationTime && resetStack();
      markPendingPriorityLevel(fiber, expirationTime);

      if (!isWorking || isCommitting$1 || nextRoot !== fiber) {
        expirationTime = fiber;
        fiber = fiber.expirationTime;
        if (null === expirationTime.nextScheduledRoot) expirationTime.expirationTime = fiber, null === lastScheduledRoot ? (firstScheduledRoot = lastScheduledRoot = expirationTime, expirationTime.nextScheduledRoot = expirationTime) : (lastScheduledRoot = lastScheduledRoot.nextScheduledRoot = expirationTime, lastScheduledRoot.nextScheduledRoot = firstScheduledRoot);else if (alternate = expirationTime.expirationTime, 0 === alternate || fiber < alternate) expirationTime.expirationTime = fiber;
        isRendering || (isBatchingUpdates ? isUnbatchingUpdates && (nextFlushedRoot = expirationTime, nextFlushedExpirationTime = 1, performWorkOnRoot(expirationTime, 1, true)) : 1 === fiber ? performWork(1, null) : scheduleCallbackWithExpirationTime(expirationTime, fiber));
      }

      nestedUpdateCount > NESTED_UPDATE_LIMIT && (nestedUpdateCount = 0, invariant(false, "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."));
    }
  }

  var firstScheduledRoot = null,
      lastScheduledRoot = null,
      callbackExpirationTime = 0,
      callbackID = undefined,
      isRendering = false,
      nextFlushedRoot = null,
      nextFlushedExpirationTime = 0,
      lowestPriorityPendingInteractiveExpirationTime = 0,
      deadlineDidExpire = false,
      hasUnhandledError = false,
      unhandledError = null,
      deadline = null,
      isBatchingUpdates = false,
      isUnbatchingUpdates = false,
      isBatchingInteractiveUpdates = false,
      completedBatches = null,
      originalStartTimeMs = now$1(),
      currentRendererTime = (originalStartTimeMs / 10 | 0) + 2,
      currentSchedulerTime = currentRendererTime,
      NESTED_UPDATE_LIMIT = 50,
      nestedUpdateCount = 0,
      lastCommittedRootDuringThisBatch = null,
      timeHeuristicForUnitOfWork = 1;

  function recomputeCurrentRendererTime() {
    currentRendererTime = ((now$1() - originalStartTimeMs) / 10 | 0) + 2;
  }

  function scheduleCallbackWithExpirationTime(root, expirationTime) {
    if (0 !== callbackExpirationTime) {
      if (expirationTime > callbackExpirationTime) return;
      null !== callbackID && (root = callbackID, scheduledCallback = null, clearTimeout(root));
    }

    callbackExpirationTime = expirationTime;
    now$1();
    scheduledCallback = performAsyncWork;
    callbackID = setTimeout(setTimeoutCallback, 1);
  }

  function requestCurrentTime() {
    if (isRendering) return currentSchedulerTime;
    findHighestPriorityRoot();
    if (0 === nextFlushedExpirationTime || 1073741823 === nextFlushedExpirationTime) recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime;
    return currentSchedulerTime;
  }

  function findHighestPriorityRoot() {
    var highestPriorityWork = 0,
        highestPriorityRoot = null;
    if (null !== lastScheduledRoot) for (var previousScheduledRoot = lastScheduledRoot, root = firstScheduledRoot; null !== root;) {
      var remainingExpirationTime = root.expirationTime;

      if (0 === remainingExpirationTime) {
        invariant(null !== previousScheduledRoot && null !== lastScheduledRoot, "Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.");

        if (root === root.nextScheduledRoot) {
          firstScheduledRoot = lastScheduledRoot = root.nextScheduledRoot = null;
          break;
        } else if (root === firstScheduledRoot) firstScheduledRoot = remainingExpirationTime = root.nextScheduledRoot, lastScheduledRoot.nextScheduledRoot = remainingExpirationTime, root.nextScheduledRoot = null;else if (root === lastScheduledRoot) {
          lastScheduledRoot = previousScheduledRoot;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
          root.nextScheduledRoot = null;
          break;
        } else previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot, root.nextScheduledRoot = null;

        root = previousScheduledRoot.nextScheduledRoot;
      } else {
        if (0 === highestPriorityWork || remainingExpirationTime < highestPriorityWork) highestPriorityWork = remainingExpirationTime, highestPriorityRoot = root;
        if (root === lastScheduledRoot) break;
        if (1 === highestPriorityWork) break;
        previousScheduledRoot = root;
        root = root.nextScheduledRoot;
      }
    }
    nextFlushedRoot = highestPriorityRoot;
    nextFlushedExpirationTime = highestPriorityWork;
  }

  function performAsyncWork(dl) {
    if (dl.didTimeout && null !== firstScheduledRoot) {
      recomputeCurrentRendererTime();
      var root = firstScheduledRoot;

      do {
        var expirationTime = root.expirationTime;
        0 !== expirationTime && currentRendererTime >= expirationTime && (root.nextExpirationTimeToWorkOn = currentRendererTime);
        root = root.nextScheduledRoot;
      } while (root !== firstScheduledRoot);
    }

    performWork(0, dl);
  }

  function performWork(minExpirationTime, dl) {
    deadline = dl;
    findHighestPriorityRoot();
    if (null !== deadline) for (recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || currentRendererTime >= nextFlushedExpirationTime);) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime >= nextFlushedExpirationTime), findHighestPriorityRoot(), recomputeCurrentRendererTime(), currentSchedulerTime = currentRendererTime;
    } else for (; null !== nextFlushedRoot && 0 !== nextFlushedExpirationTime && (0 === minExpirationTime || minExpirationTime >= nextFlushedExpirationTime);) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, true), findHighestPriorityRoot();
    }
    null !== deadline && (callbackExpirationTime = 0, callbackID = null);
    0 !== nextFlushedExpirationTime && scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
    deadline = null;
    deadlineDidExpire = false;
    nestedUpdateCount = 0;
    lastCommittedRootDuringThisBatch = null;
    if (null !== completedBatches) for (minExpirationTime = completedBatches, completedBatches = null, dl = 0; dl < minExpirationTime.length; dl++) {
      var batch = minExpirationTime[dl];

      try {
        batch._onComplete();
      } catch (error) {
        hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
      }
    }
    if (hasUnhandledError) throw minExpirationTime = unhandledError, unhandledError = null, hasUnhandledError = false, minExpirationTime;
  }

  function performWorkOnRoot(root, expirationTime, isExpired) {
    invariant(!isRendering, "performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.");
    isRendering = true;

    if (null === deadline || isExpired) {
      var finishedWork = root.finishedWork;
      null !== finishedWork ? completeRoot$1(root, finishedWork, expirationTime) : (root.finishedWork = null, renderRoot(root, false, isExpired), finishedWork = root.finishedWork, null !== finishedWork && completeRoot$1(root, finishedWork, expirationTime));
    } else finishedWork = root.finishedWork, null !== finishedWork ? completeRoot$1(root, finishedWork, expirationTime) : (root.finishedWork = null, renderRoot(root, true, isExpired), finishedWork = root.finishedWork, null !== finishedWork && (shouldYield() ? root.finishedWork = finishedWork : completeRoot$1(root, finishedWork, expirationTime)));

    isRendering = false;
  }

  function completeRoot$1(root, finishedWork$jscomp$0, expirationTime) {
    var firstBatch = root.firstBatch;

    if (null !== firstBatch && firstBatch._expirationTime <= expirationTime && (null === completedBatches ? completedBatches = [firstBatch] : completedBatches.push(firstBatch), firstBatch._defer)) {
      root.finishedWork = finishedWork$jscomp$0;
      root.expirationTime = 0;
      return;
    }

    root.finishedWork = null;
    root === lastCommittedRootDuringThisBatch ? nestedUpdateCount++ : (lastCommittedRootDuringThisBatch = root, nestedUpdateCount = 0);
    isCommitting$1 = isWorking = true;
    invariant(root.current !== finishedWork$jscomp$0, "Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.");
    expirationTime = root.pendingCommitExpirationTime;
    invariant(0 !== expirationTime, "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
    root.pendingCommitExpirationTime = 0;
    firstBatch = finishedWork$jscomp$0.expirationTime;
    var childExpirationTimeBeforeCommit = finishedWork$jscomp$0.childExpirationTime;
    firstBatch = 0 === firstBatch || 0 !== childExpirationTimeBeforeCommit && childExpirationTimeBeforeCommit < firstBatch ? childExpirationTimeBeforeCommit : firstBatch;
    root.didError = false;
    0 === firstBatch ? (root.earliestPendingTime = 0, root.latestPendingTime = 0, root.earliestSuspendedTime = 0, root.latestSuspendedTime = 0, root.latestPingedTime = 0) : (childExpirationTimeBeforeCommit = root.latestPendingTime, 0 !== childExpirationTimeBeforeCommit && (childExpirationTimeBeforeCommit < firstBatch ? root.earliestPendingTime = root.latestPendingTime = 0 : root.earliestPendingTime < firstBatch && (root.earliestPendingTime = root.latestPendingTime)), childExpirationTimeBeforeCommit = root.earliestSuspendedTime, 0 === childExpirationTimeBeforeCommit ? markPendingPriorityLevel(root, firstBatch) : firstBatch > root.latestSuspendedTime ? (root.earliestSuspendedTime = 0, root.latestSuspendedTime = 0, root.latestPingedTime = 0, markPendingPriorityLevel(root, firstBatch)) : firstBatch < childExpirationTimeBeforeCommit && markPendingPriorityLevel(root, firstBatch));
    findNextExpirationTimeToWorkOn(0, root);
    ReactCurrentOwner$2.current = null;
    1 < finishedWork$jscomp$0.effectTag ? null !== finishedWork$jscomp$0.lastEffect ? (finishedWork$jscomp$0.lastEffect.nextEffect = finishedWork$jscomp$0, firstBatch = finishedWork$jscomp$0.firstEffect) : firstBatch = finishedWork$jscomp$0 : firstBatch = finishedWork$jscomp$0.firstEffect;

    for (nextEffect = firstBatch; null !== nextEffect;) {
      childExpirationTimeBeforeCommit = false;
      var error = undefined;

      try {
        for (; null !== nextEffect;) {
          if (nextEffect.effectTag & 256) {
            var current$$1 = nextEffect.alternate;

            a: {
              var finishedWork = nextEffect;

              switch (finishedWork.tag) {
                case 2:
                case 3:
                  if (finishedWork.effectTag & 256 && null !== current$$1) {
                    var prevProps = current$$1.memoizedProps,
                        prevState = current$$1.memoizedState,
                        instance = finishedWork.stateNode;
                    instance.props = finishedWork.memoizedProps;
                    instance.state = finishedWork.memoizedState;
                    var snapshot = instance.getSnapshotBeforeUpdate(prevProps, prevState);
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }

                  break a;

                case 5:
                case 7:
                case 8:
                case 6:
                  break a;

                default:
                  invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }

          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        childExpirationTimeBeforeCommit = true, error = e;
      }

      childExpirationTimeBeforeCommit && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    for (nextEffect = firstBatch; null !== nextEffect;) {
      current$$1 = false;
      prevProps = undefined;

      try {
        for (; null !== nextEffect;) {
          var effectTag = nextEffect.effectTag;

          if (effectTag & 128) {
            var current$$1$jscomp$0 = nextEffect.alternate;

            if (null !== current$$1$jscomp$0) {
              var currentRef = current$$1$jscomp$0.ref;
              null !== currentRef && ("function" === typeof currentRef ? currentRef(null) : currentRef.current = null);
            }
          }

          switch (effectTag & 14) {
            case 2:
              nextEffect.effectTag &= -3;
              break;

            case 6:
              nextEffect.effectTag &= -3;
              commitWork(nextEffect.alternate, nextEffect);
              break;

            case 4:
              commitWork(nextEffect.alternate, nextEffect);
              break;

            case 8:
              prevState = nextEffect;

              a: for (snapshot = instance = prevState;;) {
                childExpirationTimeBeforeCommit = snapshot;
                "function" === typeof onCommitFiberUnmount && onCommitFiberUnmount(childExpirationTimeBeforeCommit);

                switch (childExpirationTimeBeforeCommit.tag) {
                  case 2:
                  case 3:
                    safelyDetachRef(childExpirationTimeBeforeCommit);
                    var instance$jscomp$0 = childExpirationTimeBeforeCommit.stateNode;
                    if ("function" === typeof instance$jscomp$0.componentWillUnmount) try {
                      instance$jscomp$0.props = childExpirationTimeBeforeCommit.memoizedProps, instance$jscomp$0.state = childExpirationTimeBeforeCommit.memoizedState, instance$jscomp$0.componentWillUnmount();
                    } catch (unmountError) {
                      captureCommitPhaseError(childExpirationTimeBeforeCommit, unmountError);
                    }
                    break;

                  case 7:
                    safelyDetachRef(childExpirationTimeBeforeCommit);
                    break;

                  case 6:
                    FabricUIManager.createChildSet(childExpirationTimeBeforeCommit.stateNode.containerInfo);
                }

                if (null !== snapshot.child) snapshot.child.return = snapshot, snapshot = snapshot.child;else {
                  if (snapshot === instance) break;

                  for (; null === snapshot.sibling;) {
                    if (null === snapshot.return || snapshot.return === instance) break a;
                    snapshot = snapshot.return;
                  }

                  snapshot.sibling.return = snapshot.return;
                  snapshot = snapshot.sibling;
                }
              }

              prevState.return = null;
              prevState.child = null;
              prevState.alternate && (prevState.alternate.child = null, prevState.alternate.return = null);
          }

          nextEffect = nextEffect.nextEffect;
        }
      } catch (e) {
        current$$1 = true, prevProps = e;
      }

      current$$1 && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, prevProps), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    root.current = finishedWork$jscomp$0;

    for (nextEffect = firstBatch; null !== nextEffect;) {
      effectTag = false;
      current$$1$jscomp$0 = undefined;

      try {
        for (currentRef = expirationTime; null !== nextEffect;) {
          var effectTag$jscomp$0 = nextEffect.effectTag;

          if (effectTag$jscomp$0 & 36) {
            var current$$1$jscomp$1 = nextEffect.alternate;
            instance$jscomp$0 = nextEffect;
            firstBatch = currentRef;

            switch (instance$jscomp$0.tag) {
              case 2:
              case 3:
                var instance$jscomp$1 = instance$jscomp$0.stateNode;
                if (instance$jscomp$0.effectTag & 4) if (null === current$$1$jscomp$1) instance$jscomp$1.props = instance$jscomp$0.memoizedProps, instance$jscomp$1.state = instance$jscomp$0.memoizedState, instance$jscomp$1.componentDidMount();else {
                  var prevProps$jscomp$0 = current$$1$jscomp$1.memoizedProps,
                      prevState$jscomp$0 = current$$1$jscomp$1.memoizedState;
                  instance$jscomp$1.props = instance$jscomp$0.memoizedProps;
                  instance$jscomp$1.state = instance$jscomp$0.memoizedState;
                  instance$jscomp$1.componentDidUpdate(prevProps$jscomp$0, prevState$jscomp$0, instance$jscomp$1.__reactInternalSnapshotBeforeUpdate);
                }
                var updateQueue = instance$jscomp$0.updateQueue;
                null !== updateQueue && (instance$jscomp$1.props = instance$jscomp$0.memoizedProps, instance$jscomp$1.state = instance$jscomp$0.memoizedState, commitUpdateQueue(instance$jscomp$0, updateQueue, instance$jscomp$1, firstBatch));
                break;

              case 5:
                var _updateQueue = instance$jscomp$0.updateQueue;

                if (null !== _updateQueue) {
                  current$$1 = null;
                  if (null !== instance$jscomp$0.child) switch (instance$jscomp$0.child.tag) {
                    case 7:
                      current$$1 = instance$jscomp$0.child.stateNode.canonical;
                      break;

                    case 2:
                    case 3:
                      current$$1 = instance$jscomp$0.child.stateNode;
                  }
                  commitUpdateQueue(instance$jscomp$0, _updateQueue, current$$1, firstBatch);
                }

                break;

              case 7:
                null === current$$1$jscomp$1 && instance$jscomp$0.effectTag & 4 && invariant(false, "The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
                break;

              case 8:
                break;

              case 6:
                break;

              case 15:
                break;

              case 16:
                break;

              default:
                invariant(false, "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }

          if (effectTag$jscomp$0 & 128) {
            var ref = nextEffect.ref;

            if (null !== ref) {
              var instance$jscomp$2 = nextEffect.stateNode;

              switch (nextEffect.tag) {
                case 7:
                  var instanceToUse = instance$jscomp$2.canonical;
                  break;

                default:
                  instanceToUse = instance$jscomp$2;
              }

              "function" === typeof ref ? ref(instanceToUse) : ref.current = instanceToUse;
            }
          }

          var next = nextEffect.nextEffect;
          nextEffect.nextEffect = null;
          nextEffect = next;
        }
      } catch (e) {
        effectTag = true, current$$1$jscomp$0 = e;
      }

      effectTag && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug in React. Please file an issue."), captureCommitPhaseError(nextEffect, current$$1$jscomp$0), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
    }

    isWorking = isCommitting$1 = false;
    "function" === typeof onCommitFiberRoot && onCommitFiberRoot(finishedWork$jscomp$0.stateNode);
    effectTag$jscomp$0 = finishedWork$jscomp$0.expirationTime;
    finishedWork$jscomp$0 = finishedWork$jscomp$0.childExpirationTime;
    finishedWork$jscomp$0 = 0 === effectTag$jscomp$0 || 0 !== finishedWork$jscomp$0 && finishedWork$jscomp$0 < effectTag$jscomp$0 ? finishedWork$jscomp$0 : effectTag$jscomp$0;
    0 === finishedWork$jscomp$0 && (legacyErrorBoundariesThatAlreadyFailed = null);
    root.expirationTime = finishedWork$jscomp$0;
    root.finishedWork = null;
  }

  function shouldYield() {
    return deadlineDidExpire ? true : null === deadline || deadline.timeRemaining() > timeHeuristicForUnitOfWork ? false : deadlineDidExpire = true;
  }

  function onUncaughtError(error) {
    invariant(null !== nextFlushedRoot, "Should be working on a root. This error is likely caused by a bug in React. Please file an issue.");
    nextFlushedRoot.expirationTime = 0;
    hasUnhandledError || (hasUnhandledError = true, unhandledError = error);
  }

  function getContextForSubtree(parentComponent) {
    if (!parentComponent) return emptyContextObject;
    parentComponent = parentComponent._reactInternalFiber;

    a: {
      invariant(2 === isFiberMountedImpl(parentComponent) && (2 === parentComponent.tag || 3 === parentComponent.tag), "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
      var parentContext = parentComponent;

      do {
        switch (parentContext.tag) {
          case 5:
            parentContext = parentContext.stateNode.context;
            break a;

          case 2:
            if (isContextProvider(parentContext.type)) {
              parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
              break a;
            }

            break;

          case 3:
            if (isContextProvider(parentContext.type._reactResult)) {
              parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
              break a;
            }

        }

        parentContext = parentContext.return;
      } while (null !== parentContext);

      invariant(false, "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      parentContext = undefined;
    }

    if (2 === parentComponent.tag) {
      var Component = parentComponent.type;
      if (isContextProvider(Component)) return processChildContext(parentComponent, Component, parentContext);
    } else if (3 === parentComponent.tag && (Component = parentComponent.type._reactResult, isContextProvider(Component))) return processChildContext(parentComponent, Component, parentContext);

    return parentContext;
  }

  function findHostInstance$1(component) {
    var fiber = component._reactInternalFiber;
    undefined === fiber && ("function" === typeof component.render ? invariant(false, "Unable to find node on an unmounted component.") : invariant(false, "Argument appears to not be a ReactComponent. Keys: %s", Object.keys(component)));
    component = findCurrentHostFiber(fiber);
    return null === component ? null : component.stateNode;
  }

  function updateContainer(element, container, parentComponent, callback) {
    var current$$1 = container.current,
        currentTime = requestCurrentTime();
    current$$1 = computeExpirationForFiber(currentTime, current$$1);
    currentTime = container.current;
    parentComponent = getContextForSubtree(parentComponent);
    null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
    container = callback;
    callback = createUpdate(current$$1);
    callback.payload = {
      element: element
    };
    container = undefined === container ? null : container;
    null !== container && (callback.callback = container);
    enqueueUpdate(currentTime, callback);
    scheduleWork(currentTime, current$$1);
    return current$$1;
  }

  function _createPortal(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
  }

  var getInspectorDataForViewTag = undefined;

  getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(false, "getInspectorDataForViewTag() is not available in production");
  };

  function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) return componentOrHandle.canonical._nativeTag;
    componentOrHandle = findHostInstance$1(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : componentOrHandle.canonical ? componentOrHandle.canonical._nativeTag : componentOrHandle._nativeTag;
  }

  _batchedUpdatesImpl = function _batchedUpdatesImpl(fn, a) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;

    try {
      return fn(a);
    } finally {
      (isBatchingUpdates = previousIsBatchingUpdates) || isRendering || performWork(1, null);
    }
  };

  _flushInteractiveUpdatesImpl = function _flushInteractiveUpdatesImpl() {
    isRendering || 0 === lowestPriorityPendingInteractiveExpirationTime || (performWork(lowestPriorityPendingInteractiveExpirationTime, null), lowestPriorityPendingInteractiveExpirationTime = 0);
  };

  var roots = new Map(),
      ReactFabric = {
    NativeComponent: function (findNodeHandle, findHostInstance) {
      return function (_React$Component) {
        function ReactNativeComponent() {
          if (!(this instanceof ReactNativeComponent)) throw new TypeError("Cannot call a class as a function");

          var call = _React$Component.apply(this, arguments);

          if (!this) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return !call || "object" !== typeof call && "function" !== typeof call ? this : call;
        }

        _inherits(ReactNativeComponent, _React$Component);

        ReactNativeComponent.prototype.blur = function () {
          TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function () {
          TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function (callback) {
          UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        ReactNativeComponent.prototype.measureInWindow = function (callback) {
          UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
          UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
        };

        ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
          var maybeInstance = undefined;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (null != maybeInstance) {
            var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
            nativeProps = diffProperties(null, emptyObject, nativeProps, viewConfig.validAttributes);
            null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
          }
        };

        return ReactNativeComponent;
      }(React.Component);
    }(findNodeHandle, findHostInstance$1),
    findNodeHandle: findNodeHandle,
    render: function render(element, containerTag, callback) {
      var root = roots.get(containerTag);

      if (!root) {
        root = new FiberNode(5, null, null, 0);
        var root$jscomp$0 = {
          current: root,
          containerInfo: containerTag,
          pendingChildren: null,
          earliestPendingTime: 0,
          latestPendingTime: 0,
          earliestSuspendedTime: 0,
          latestSuspendedTime: 0,
          latestPingedTime: 0,
          didError: false,
          pendingCommitExpirationTime: 0,
          finishedWork: null,
          timeoutHandle: -1,
          context: null,
          pendingContext: null,
          hydrate: false,
          nextExpirationTimeToWorkOn: 0,
          expirationTime: 0,
          firstBatch: null,
          nextScheduledRoot: null
        };
        root = root.stateNode = root$jscomp$0;
        roots.set(containerTag, root);
      }

      updateContainer(element, root, null, callback);

      a: if (element = root.current, element.child) switch (element.child.tag) {
        case 7:
          element = element.child.stateNode.canonical;
          break a;

        default:
          element = element.child.stateNode;
      } else element = null;

      return element;
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
      var root = roots.get(containerTag);
      root && updateContainer(null, root, null, function () {
        roots.delete(containerTag);
      });
    },
    createPortal: function createPortal(children, containerTag) {
      return _createPortal(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
    },
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      NativeMethodsMixin: function (findNodeHandle, findHostInstance) {
        return {
          measure: function measure(callback) {
            UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          },
          measureInWindow: function measureInWindow(callback) {
            UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          },
          measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
            UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
          },
          setNativeProps: function setNativeProps(nativeProps) {
            var maybeInstance = undefined;

            try {
              maybeInstance = findHostInstance(this);
            } catch (error) {}

            if (null != maybeInstance) {
              var viewConfig = maybeInstance.viewConfig;
              nativeProps = diffProperties(null, emptyObject, nativeProps, viewConfig.validAttributes);
              null != nativeProps && UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, nativeProps);
            }
          },
          focus: function focus() {
            TextInputState.focusTextInput(findNodeHandle(this));
          },
          blur: function blur() {
            TextInputState.blurTextInput(findNodeHandle(this));
          }
        };
      }(findNodeHandle, findHostInstance$1)
    }
  };

  (function (devToolsConfig) {
    var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    return injectInternals(_extends({}, devToolsConfig, {
      findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
        fiber = findCurrentHostFiber(fiber);
        return null === fiber ? null : fiber.stateNode;
      },
      findFiberByHostInstance: function findFiberByHostInstance(instance) {
        return _findFiberByHostInstance ? _findFiberByHostInstance(instance) : null;
      }
    }));
  })({
    findFiberByHostInstance: getInstanceFromInstance,
    getInspectorDataForViewTag: getInspectorDataForViewTag,
    bundleType: 0,
    version: "16.5.0",
    rendererPackageName: "react-native-renderer"
  });

  var ReactFabric$2 = {
    default: ReactFabric
  },
      ReactFabric$3 = ReactFabric$2 && ReactFabric || ReactFabric$2;
  module.exports = ReactFabric$3.default || ReactFabric$3;
},309,[3,85,142,71,51,144,79,145,310,93]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var FabricUIManager = global.nativeFabricUIManager;
  module.exports = FabricUIManager;
},310,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var MissingNativeEventEmitterShim = _$$_REQUIRE(_dependencyMap[5]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[6]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[7]);

  var RCTAppState = NativeModules.AppState;

  var logError = _$$_REQUIRE(_dependencyMap[8]);

  var invariant = _$$_REQUIRE(_dependencyMap[9]);

  var AppState = function (_NativeEventEmitter) {
    _inherits(AppState, _NativeEventEmitter);

    function AppState() {
      var _this;

      _classCallCheck(this, AppState);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AppState).call(this, RCTAppState));
      _this.isAvailable = true;
      _this.isAvailable = true;
      _this._eventHandlers = {
        change: new Map(),
        memoryWarning: new Map()
      };
      _this.currentState = RCTAppState.initialAppState || 'active';
      var eventUpdated = false;

      _this.addListener('appStateDidChange', function (appStateData) {
        eventUpdated = true;
        _this.currentState = appStateData.app_state;
      });

      RCTAppState.getCurrentAppState(function (appStateData) {
        if (!eventUpdated && _this.currentState !== appStateData.app_state) {
          _this.currentState = appStateData.app_state;

          _this.emit('appStateDidChange', appStateData);
        }
      }, logError);
      return _this;
    }

    _createClass(AppState, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);

        if (type === 'change') {
          this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
            handler(appStateData.app_state);
          }));
        } else if (type === 'memoryWarning') {
          this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);

        if (!this._eventHandlers[type].has(handler)) {
          return;
        }

        this._eventHandlers[type].get(handler).remove();

        this._eventHandlers[type].delete(handler);
      }
    }]);

    return AppState;
  }(NativeEventEmitter);

  {
    AppState = new AppState();
  }
  module.exports = AppState;
},311,[21,22,34,37,40,111,112,8,133,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[1]);

  var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;
  var AsyncStorage = {
    _getRequests: [],
    _getKeys: [],
    _immediate: null,
    getItem: function getItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiGet([key], function (errors, result) {
          var value = result && result[0] && result[0][1] ? result[0][1] : null;
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0], value);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(value);
          }
        });
      });
    },
    setItem: function setItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    removeItem: function removeItem(key, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove([key], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    mergeItem: function mergeItem(key, value, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
          var errs = convertErrors(errors);
          callback && callback(errs && errs[0]);

          if (errs) {
            reject(errs[0]);
          } else {
            resolve(null);
          }
        });
      });
    },
    clear: function clear(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.clear(function (error) {
          callback && callback(convertError(error));

          if (error && convertError(error)) {
            reject(convertError(error));
          } else {
            resolve(null);
          }
        });
      });
    },
    getAllKeys: function getAllKeys(callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.getAllKeys(function (error, keys) {
          callback && callback(convertError(error), keys);

          if (error) {
            reject(convertError(error));
          } else {
            resolve(keys);
          }
        });
      });
    },
    flushGetRequests: function flushGetRequests() {
      var getRequests = this._getRequests;
      var getKeys = this._getKeys;
      this._getRequests = [];
      this._getKeys = [];
      RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
        var map = {};
        result && result.forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          map[key] = value;
          return value;
        });
        var reqLength = getRequests.length;

        for (var i = 0; i < reqLength; i++) {
          var request = getRequests[i];
          var requestKeys = request.keys;
          var requestResult = requestKeys.map(function (key) {
            return [key, map[key]];
          });
          request.callback && request.callback(null, requestResult);
          request.resolve && request.resolve(requestResult);
        }
      });
    },
    multiGet: function multiGet(keys, callback) {
      var _this = this;

      if (!this._immediate) {
        this._immediate = setImmediate(function () {
          _this._immediate = null;

          _this.flushGetRequests();
        });
      }

      var getRequest = {
        keys: keys,
        callback: callback,
        keyIndex: this._getKeys.length,
        resolve: null,
        reject: null
      };
      var promiseResult = new Promise(function (resolve, reject) {
        getRequest.resolve = resolve;
        getRequest.reject = reject;
      });

      this._getRequests.push(getRequest);

      keys.forEach(function (key) {
        if (_this._getKeys.indexOf(key) === -1) {
          _this._getKeys.push(key);
        }
      });
      return promiseResult;
    },
    multiSet: function multiSet(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiRemove: function multiRemove(keys, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiRemove(keys, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    },
    multiMerge: function multiMerge(keyValuePairs, callback) {
      return new Promise(function (resolve, reject) {
        RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
          var error = convertErrors(errors);
          callback && callback(error);

          if (error) {
            reject(error);
          } else {
            resolve(null);
          }
        });
      });
    }
  };

  if (!RCTAsyncStorage.multiMerge) {
    delete AsyncStorage.mergeItem;
    delete AsyncStorage.multiMerge;
  }

  function convertErrors(errs) {
    if (!errs) {
      return null;
    }

    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
      return convertError(e);
    });
  }

  function convertError(error) {
    if (!error) {
      return null;
    }

    var out = new Error(error.message);
    out.key = error.key;
    return out;
  }

  module.exports = AsyncStorage;
},312,[11,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BackHandler = _$$_REQUIRE(_dependencyMap[0]);

  var warning = _$$_REQUIRE(_dependencyMap[1]);

  var BackAndroid = {
    exitApp: function exitApp() {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.exitApp();
    },
    addEventListener: function addEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      return BackHandler.addEventListener(eventName, handler);
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
      BackHandler.removeEventListener(eventName, handler);
    }
  };
  module.exports = BackAndroid;
},313,[307,104]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var PropTypes = _$$_REQUIRE(_dependencyMap[2]);

  var checkPropTypes = PropTypes.checkPropTypes;

  var RCTCameraRollManager = _$$_REQUIRE(_dependencyMap[3]).CameraRollManager;

  var createStrictShapeTypeChecker = _$$_REQUIRE(_dependencyMap[4]);

  var invariant = _$$_REQUIRE(_dependencyMap[5]);

  var GROUP_TYPES_OPTIONS = {
    Album: 'Album',
    All: 'All',
    Event: 'Event',
    Faces: 'Faces',
    Library: 'Library',
    PhotoStream: 'PhotoStream',
    SavedPhotos: 'SavedPhotos'
  };
  var ASSET_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Photos: 'Photos'
  };
  var getPhotosParamChecker = createStrictShapeTypeChecker({
    first: PropTypes.number.isRequired,
    after: PropTypes.string,
    groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),
    groupName: PropTypes.string,
    assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),
    mimeTypes: PropTypes.arrayOf(PropTypes.string)
  });
  var getPhotosReturnChecker = createStrictShapeTypeChecker({
    edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
      node: createStrictShapeTypeChecker({
        type: PropTypes.string.isRequired,
        group_name: PropTypes.string.isRequired,
        image: createStrictShapeTypeChecker({
          uri: PropTypes.string.isRequired,
          height: PropTypes.number.isRequired,
          width: PropTypes.number.isRequired,
          isStored: PropTypes.bool,
          playableDuration: PropTypes.number.isRequired
        }).isRequired,
        timestamp: PropTypes.number.isRequired,
        location: createStrictShapeTypeChecker({
          latitude: PropTypes.number,
          longitude: PropTypes.number,
          altitude: PropTypes.number,
          heading: PropTypes.number,
          speed: PropTypes.number
        })
      }).isRequired
    })).isRequired,
    page_info: createStrictShapeTypeChecker({
      has_next_page: PropTypes.bool.isRequired,
      start_cursor: PropTypes.string,
      end_cursor: PropTypes.string
    }).isRequired
  });

  var CameraRoll = function () {
    function CameraRoll() {
      _classCallCheck(this, CameraRoll);
    }

    _createClass(CameraRoll, null, [{
      key: "saveImageWithTag",
      value: function saveImageWithTag(tag) {
        console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
        return this.saveToCameraRoll(tag, 'photo');
      }
    }, {
      key: "deletePhotos",
      value: function deletePhotos(photos) {
        return RCTCameraRollManager.deletePhotos(photos);
      }
    }, {
      key: "saveToCameraRoll",
      value: function saveToCameraRoll(tag, type) {
        invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');
        invariant(type === 'photo' || type === 'video' || type === undefined, "The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed " + (type || 'unknown'));
        var mediaType = 'photo';

        if (type) {
          mediaType = type;
        } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
          mediaType = 'video';
        }

        return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
      }
    }, {
      key: "getPhotos",
      value: function getPhotos(params) {
        if (arguments.length > 1) {
          console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
          var successCallback = arguments[1];

          var errorCallback = arguments[2] || function () {};

          RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
        }

        return RCTCameraRollManager.getPhotos(params);
      }
    }]);

    return CameraRoll;
  }();

  CameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;
  CameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;
  module.exports = CameraRoll;
},314,[21,22,65,8,171,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Clipboard = _$$_REQUIRE(_dependencyMap[0]).Clipboard;

  module.exports = {
    getString: function getString() {
      return Clipboard.getString();
    },
    setString: function setString(content) {
      Clipboard.setString(content);
    }
  };
},315,[8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var DatePickerAndroid = {
    open: function open(options) {
      return _regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", Promise.reject({
                message: 'DatePickerAndroid is not supported on this platform.'
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  };
  module.exports = DatePickerAndroid;
},316,[130]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var RCTImagePicker = _$$_REQUIRE(_dependencyMap[1]).ImagePickerIOS;

  var ImagePickerIOS = {
    canRecordVideos: function canRecordVideos(callback) {
      return RCTImagePicker.canRecordVideos(callback);
    },
    canUseCamera: function canUseCamera(callback) {
      return RCTImagePicker.canUseCamera(callback);
    },
    openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
      config = _objectSpread({
        videoMode: false
      }, config);
      return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
    },
    openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
      config = _objectSpread({
        showImages: true,
        showVideos: false
      }, config);
      return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
    }
  };
  module.exports = ImagePickerIOS;
},317,[48,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Map = _$$_REQUIRE(_dependencyMap[0]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var NativeModules = _$$_REQUIRE(_dependencyMap[2]);

  var Platform = _$$_REQUIRE(_dependencyMap[3]);

  var RCTNetInfo = NativeModules.NetInfo;
  var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);
  var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

  var _subscriptions = new Map();

  var _isConnectedDeprecated;

  {
    _isConnectedDeprecated = function _isConnectedDeprecated(reachability) {
      return reachability !== 'none' && reachability !== 'unknown';
    };
  }

  function _isConnected(connection) {
    return connection.type !== 'none' && connection.type !== 'unknown';
  }

  var _isConnectedSubscriptions = new Map();

  var NetInfo = {
    addEventListener: function addEventListener(eventName, handler) {
      var listener;

      if (eventName === 'connectionChange') {
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler({
            type: appStateData.connectionType,
            effectiveType: appStateData.effectiveConnectionType
          });
        });
      } else if (eventName === 'change') {
        console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');
        listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
          handler(appStateData.network_info);
        });
      } else {
        console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
        return {
          remove: function remove() {}
        };
      }

      _subscriptions.set(handler, listener);

      return {
        remove: function remove() {
          return NetInfo.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _subscriptions.get(handler);

      if (!listener) {
        return;
      }

      listener.remove();

      _subscriptions.delete(handler);
    },
    fetch: function fetch() {
      console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return resp.network_info;
      });
    },
    getConnectionInfo: function getConnectionInfo() {
      return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
        return {
          type: resp.connectionType,
          effectiveType: resp.effectiveConnectionType
        };
      });
    },
    isConnected: {
      addEventListener: function addEventListener(eventName, handler) {
        var listener = function listener(connection) {
          if (eventName === 'change') {
            handler(_isConnectedDeprecated(connection));
          } else if (eventName === 'connectionChange') {
            handler(_isConnected(connection));
          }
        };

        _isConnectedSubscriptions.set(handler, listener);

        NetInfo.addEventListener(eventName, listener);
        return {
          remove: function remove() {
            return NetInfo.isConnected.removeEventListener(eventName, handler);
          }
        };
      },
      removeEventListener: function removeEventListener(eventName, handler) {
        var listener = _isConnectedSubscriptions.get(handler);

        NetInfo.removeEventListener(eventName, listener);

        _isConnectedSubscriptions.delete(handler);
      },
      fetch: function fetch() {
        return NetInfo.getConnectionInfo().then(_isConnected);
      }
    },
    isConnectionExpensive: function isConnectionExpensive() {
      return Promise.reject(new Error('Currently not supported on iOS'));
    }
  };
  module.exports = NetInfo;
},318,[88,112,8,50]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  var RCTPushNotificationManager = _$$_REQUIRE(_dependencyMap[3]).PushNotificationManager;

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

  var _notifHandlers = new Map();

  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

  var PushNotificationIOS = function () {
    _createClass(PushNotificationIOS, null, [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        RCTPushNotificationManager.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        RCTPushNotificationManager.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        RCTPushNotificationManager.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        RCTPushNotificationManager.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        RCTPushNotificationManager.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        RCTPushNotificationManager.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        RCTPushNotificationManager.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;

        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
            handler(errorInfo);
          });
        }

        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, handler) {
        invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');

        var listener = _notifHandlers.get(type);

        if (!listener) {
          return;
        }

        listener.remove();

        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {};

        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        } else {
          requestedPermissions = {
            alert: true,
            badge: true,
            sound: true
          };
        }

        return RCTPushNotificationManager.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        RCTPushNotificationManager.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        invariant(typeof callback === 'function', 'Must provide a valid callback');
        RCTPushNotificationManager.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }]);

    function PushNotificationIOS(nativeNotif) {
      var _this = this;

      _classCallCheck(this, PushNotificationIOS);

      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;

      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }

      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(function (notifKey) {
          var notifVal = nativeNotif[notifKey];

          if (notifKey === 'aps') {
            _this._alert = notifVal.alert;
            _this._sound = notifVal.sound;
            _this._badgeCount = notifVal.badge;
            _this._category = notifVal.category;
            _this._contentAvailable = notifVal['content-available'];
            _this._threadID = notifVal['thread-id'];
          } else {
            _this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }

    _createClass(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }

        this._remoteNotificationCompleteCallbackCalled = true;
        RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }]);

    return PushNotificationIOS;
  }();

  PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  module.exports = PushNotificationIOS;
},319,[21,22,112,8,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends = _$$_REQUIRE(_dependencyMap[0]);

  var RCTDeviceEventEmitter = _$$_REQUIRE(_dependencyMap[1]);

  var RCTSettingsManager = _$$_REQUIRE(_dependencyMap[2]).SettingsManager;

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var subscriptions = [];
  var Settings = {
    _settings: RCTSettingsManager && RCTSettingsManager.settings,
    get: function get(key) {
      return this._settings[key];
    },
    set: function set(settings) {
      this._settings = _extends(this._settings, settings);
      RCTSettingsManager.setValues(settings);
    },
    watchKeys: function watchKeys(keys, callback) {
      if (typeof keys === 'string') {
        keys = [keys];
      }

      invariant(Array.isArray(keys), 'keys should be a string or array of strings');
      var sid = subscriptions.length;
      subscriptions.push({
        keys: keys,
        callback: callback
      });
      return sid;
    },
    clearWatch: function clearWatch(watchId) {
      if (watchId < subscriptions.length) {
        subscriptions[watchId] = {
          keys: [],
          callback: null
        };
      }
    },
    _sendObservations: function _sendObservations(body) {
      var _this = this;

      Object.keys(body).forEach(function (key) {
        var newValue = body[key];
        var didChange = _this._settings[key] !== newValue;
        _this._settings[key] = newValue;

        if (didChange) {
          subscriptions.forEach(function (sub) {
            if (sub.keys.indexOf(key) !== -1 && sub.callback) {
              sub.callback();
            }
          });
        }
      });
    }
  };
  RCTDeviceEventEmitter.addListener('settingsUpdated', Settings._sendObservations.bind(Settings));
  module.exports = Settings;
},320,[3,33,8,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _objectSpread = _$$_REQUIRE(_dependencyMap[0]);

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1]);

  var _createClass = _$$_REQUIRE(_dependencyMap[2]);

  var Platform = _$$_REQUIRE(_dependencyMap[3]);

  var invariant = _$$_REQUIRE(_dependencyMap[4]);

  var processColor = _$$_REQUIRE(_dependencyMap[5]);

  var _require = _$$_REQUIRE(_dependencyMap[6]),
      ActionSheetManager = _require.ActionSheetManager,
      ShareModule = _require.ShareModule;

  var Share = function () {
    function Share() {
      _classCallCheck(this, Share);
    }

    _createClass(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
        {
          return new Promise(function (resolve, reject) {
            ActionSheetManager.showShareActionSheetWithOptions(_objectSpread({}, content, options, {
              tintColor: processColor(options.tintColor)
            }), function (error) {
              return reject(error);
            }, function (success, activityType) {
              if (success) {
                resolve({
                  action: 'sharedAction',
                  activityType: activityType
                });
              } else {
                resolve({
                  action: 'dismissedAction'
                });
              }
            });
          });
        }
      }
    }, {
      key: "sharedAction",
      get: function get() {
        return 'sharedAction';
      }
    }, {
      key: "dismissedAction",
      get: function get() {
        return 'dismissedAction';
      }
    }]);

    return Share;
  }();

  module.exports = Share;
},321,[48,21,22,50,6,74,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[1]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[2]);

  var _inherits = _$$_REQUIRE(_dependencyMap[3]);

  var NativeEventEmitter = _$$_REQUIRE(_dependencyMap[4]);

  var _require = _$$_REQUIRE(_dependencyMap[5]),
      StatusBarManager = _require.StatusBarManager;

  var StatusBarIOS = function (_NativeEventEmitter) {
    _inherits(StatusBarIOS, _NativeEventEmitter);

    function StatusBarIOS() {
      _classCallCheck(this, StatusBarIOS);

      return _possibleConstructorReturn(this, _getPrototypeOf(StatusBarIOS).apply(this, arguments));
    }

    return StatusBarIOS;
  }(NativeEventEmitter);

  module.exports = new StatusBarIOS(StatusBarManager);
},322,[21,34,37,40,112,8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var TimePickerAndroid = {
    open: function open(options) {
      return _regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", Promise.reject({
                message: 'TimePickerAndroid is not supported on this platform.'
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  };
  module.exports = TimePickerAndroid;
},323,[130]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = _$$_REQUIRE(_dependencyMap[0]).Vibration;

  var Platform = _$$_REQUIRE(_dependencyMap[1]);

  var _vibrating = false;
  var _id = 0;

  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (_vibrating) {
      return;
    }

    _vibrating = true;

    if (pattern[0] === 0) {
      RCTVibration.vibrate();
      pattern = pattern.slice(1);
    }

    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }

    setTimeout(function () {
      return vibrateScheduler(++_id, pattern, repeat, 1);
    }, pattern[0]);
  }

  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }

    RCTVibration.vibrate();

    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }

    setTimeout(function () {
      return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
    }, pattern[nextIndex]);
  }

  var Vibration = {
    vibrate: function vibrate() {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      {
        if (_vibrating) {
          return;
        }

        if (typeof pattern === 'number') {
          RCTVibration.vibrate();
        } else if (Array.isArray(pattern)) {
          vibrateByPattern(pattern, repeat);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function cancel() {
      {
        _vibrating = false;
      }
    }
  };
  module.exports = Vibration;
},324,[8,50]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var RCTVibration = _$$_REQUIRE(_dependencyMap[0]).Vibration;

  var invariant = _$$_REQUIRE(_dependencyMap[1]);

  var VibrationIOS = {
    vibrate: function vibrate() {
      invariant(arguments[0] === undefined, 'Vibration patterns not supported.');
      RCTVibration.vibrate();
    }
  };
  module.exports = VibrationIOS;
},325,[8,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0]);

  var _createClass = _$$_REQUIRE(_dependencyMap[1]);

  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2]);

  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3]);

  var _inherits = _$$_REQUIRE(_dependencyMap[4]);

  var React = _$$_REQUIRE(_dependencyMap[5]);

  var YellowBox;
  {
    YellowBox = function (_React$Component2) {
      _inherits(YellowBox, _React$Component2);

      function YellowBox() {
        _classCallCheck(this, YellowBox);

        return _possibleConstructorReturn(this, _getPrototypeOf(YellowBox).apply(this, arguments));
      }

      _createClass(YellowBox, [{
        key: "render",
        value: function render() {
          return null;
        }
      }], [{
        key: "ignoreWarnings",
        value: function ignoreWarnings(patterns) {}
      }, {
        key: "install",
        value: function install() {}
      }, {
        key: "uninstall",
        value: function uninstall() {}
      }]);

      return YellowBox;
    }(React.Component);
  }
  module.exports = YellowBox;
},326,[21,22,34,37,40,51]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ReactNative = _$$_REQUIRE(_dependencyMap[0]);

  var UIManager = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = function takeSnapshot(view, options) {
    if (typeof view !== 'number' && view !== 'window') {
      view = ReactNative.findNodeHandle(view) || 'window';
    }

    return UIManager.__takeSnapshot(view, options);
  };
},327,[83,71]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var PropTypes = _$$_REQUIRE(_dependencyMap[0]);

  var PointPropType = PropTypes.shape({
    x: PropTypes.number,
    y: PropTypes.number
  });
  module.exports = PointPropType;
},328,[65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ExponentConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  if (!_ExponentConstants.default) {
    console.warn("No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?");
  }

  var manifest = null;

  if (_ExponentConstants.default && _ExponentConstants.default.manifest) {
    manifest = _ExponentConstants.default.manifest;

    if (typeof manifest === 'string') {
      manifest = JSON.parse(manifest);
    }
  }

  var _default = (0, _objectSpread2.default)({}, _ExponentConstants.default, {
    manifest: manifest,
    deviceId: _ExponentConstants.default ? _ExponentConstants.default.installationId : undefined,
    linkingUrl: _ExponentConstants.default ? _ExponentConstants.default.linkingUri : undefined
  });

  exports.default = _default;
},329,[1,48,330]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExponentConstants;
  exports.default = _default;
},330,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _expoReactNativeAdapter = _$$_REQUIRE(_dependencyMap[0]);

  Object.keys(_expoReactNativeAdapter).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _expoReactNativeAdapter[key];
      }
    });
  });
},331,[332]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "EventEmitter", {
    enumerable: true,
    get: function get() {
      return _EventEmitter.EventEmitter;
    }
  });
  Object.defineProperty(exports, "NativeModulesProxy", {
    enumerable: true,
    get: function get() {
      return _NativeModulesProxy.default;
    }
  });
  Object.defineProperty(exports, "requireNativeViewManager", {
    enumerable: true,
    get: function get() {
      return _NativeViewManagerAdapter.requireNativeViewManager;
    }
  });
  exports.Platform = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _EventEmitter = _$$_REQUIRE(_dependencyMap[2]);

  var _NativeModulesProxy = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _NativeViewManagerAdapter = _$$_REQUIRE(_dependencyMap[4]);

  var Platform = {
    OS: _reactNative.Platform.OS
  };
  exports.Platform = Platform;
},332,[1,5,333,335,336]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EventEmitter = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var _NativeEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';

  var EventEmitter = function () {
    function EventEmitter(nativeModule) {
      (0, _classCallCheck2.default)(this, EventEmitter);
      this._listenerCount = 0;
      this._nativeModule = nativeModule;
      this._eventEmitter = new _NativeEventEmitter.default(nativeModule);
    }

    (0, _createClass2.default)(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventName, listener) {
        var _this = this,
            _subscription;

        if (!this._listenerCount && _reactNative.Platform.OS === 'android' && this._nativeModule.startObserving) {
          this._nativeModule.startObserving();
        }

        this._listenerCount++;

        var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);

        var subscription = (_subscription = {}, (0, _defineProperty2.default)(_subscription, nativeEmitterSubscriptionKey, nativeEmitterSubscription), (0, _defineProperty2.default)(_subscription, "remove", function remove() {
          _this.removeSubscription(subscription);
        }), _subscription);
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventName) {
        var removedListenerCount = this._eventEmitter.listeners(eventName).length;

        this._eventEmitter.removeAllListeners(eventName);

        this._listenerCount -= removedListenerCount;
        (0, _invariant.default)(this._listenerCount >= 0, "EventEmitter must have a non-negative number of listeners");

        if (!this._listenerCount && _reactNative.Platform.OS === 'android' && this._nativeModule.stopObserving) {
          this._nativeModule.stopObserving();
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];

        if (!nativeEmitterSubscription) {
          return;
        }

        this._eventEmitter.removeSubscription(nativeEmitterSubscription);

        this._listenerCount--;

        if (!this._listenerCount && _reactNative.Platform.OS === 'android' && this._nativeModule.stopObserving) {
          this._nativeModule.stopObserving();
        }
      }
    }, {
      key: "emit",
      value: function emit(eventName) {
        var _this$_eventEmitter;

        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        (_this$_eventEmitter = this._eventEmitter).emit.apply(_this$_eventEmitter, [eventName].concat(params));
      }
    }]);
    return EventEmitter;
  }();

  exports.EventEmitter = EventEmitter;
},333,[1,49,21,22,334,5,112]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var invariant = function invariant(condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;

      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  };

  module.exports = invariant;
},334,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var NativeProxy = _reactNative.NativeModules.ExpoNativeModuleProxy;
  var modulesConstantsKey = 'modulesConstants';
  var exportedMethodsKey = 'exportedMethods';
  var NativeModulesProxy = {};

  if (NativeProxy) {
    Object.keys(NativeProxy[exportedMethodsKey]).forEach(function (moduleName) {
      NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};
      NativeProxy[exportedMethodsKey][moduleName].forEach(function (methodInfo) {
        NativeModulesProxy[moduleName][methodInfo.name] = function _callee() {
          var key,
              argumentsCount,
              _len,
              args,
              _key,
              _args = arguments;

          return _regenerator.default.async(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  key = methodInfo.key, argumentsCount = methodInfo.argumentsCount;

                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args[_key];
                  }

                  if (!(argumentsCount !== args.length)) {
                    _context.next = 4;
                    break;
                  }

                  throw new Error("Native method " + moduleName + "." + methodInfo.name + " expects " + argumentsCount + " " + (argumentsCount === 1 ? 'argument' : 'arguments') + " but received " + args.length);

                case 4:
                  _context.next = 6;
                  return _regenerator.default.awrap(NativeProxy.callMethod(moduleName, key, args));

                case 6:
                  return _context.abrupt("return", _context.sent);

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, null, this);
        };
      });

      NativeModulesProxy[moduleName].addListener = function () {
        var _NativeModules$EXReac;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return (_NativeModules$EXReac = _reactNative.NativeModules.EXReactNativeEventEmitter).addProxiedListener.apply(_NativeModules$EXReac, [moduleName].concat(args));
      };

      NativeModulesProxy[moduleName].removeListeners = function () {
        var _NativeModules$EXReac2;

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return (_NativeModules$EXReac2 = _reactNative.NativeModules.EXReactNativeEventEmitter).removeProxiedListeners.apply(_NativeModules$EXReac2, [moduleName].concat(args));
      };
    });
  } else {
    console.warn("The \"ExpoNativeModulesProxy\" native module is not exported through NativeModules; verify that expo-react-native-adapter's native code is linked properly");
  }

  var _default = NativeModulesProxy;
  exports.default = _default;
},335,[1,130,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.requireNativeViewManager = requireNativeViewManager;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _lodash2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);

  var ViewPropTypesKeys = Object.keys(_reactNative.ViewPropTypes);

  function requireNativeViewManager(viewName) {
    var reactNativeViewName = "ViewManagerAdapter_" + viewName;
    var ReactNativeComponent = (0, _reactNative.requireNativeComponent)(reactNativeViewName);
    var reactNativeUIConfiguration = _reactNative.UIManager[reactNativeViewName] || {
      NativeProps: {},
      directEventTypes: {}
    };
    var reactNativeComponentPropNames = ['children'].concat((0, _toConsumableArray2.default)(ViewPropTypesKeys), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.NativeProps)), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.directEventTypes)));

    function NativeComponentAdapter(props, ref) {
      var nativeProps = (0, _lodash2.default)(props, reactNativeComponentPropNames);
      var proxiedProps = (0, _lodash.default)(props, reactNativeComponentPropNames);
      return _react.default.createElement(ReactNativeComponent, (0, _extends2.default)({}, nativeProps, {
        proxiedProperties: proxiedProps,
        ref: ref
      }));
    }

    NativeComponentAdapter.displayName = "Adapter<" + viewName + ">";
    return _react.default.forwardRef(NativeComponentAdapter);
  }
},336,[1,3,17,337,338,51,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      symbolTag = '[object Symbol]';
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();

  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return baseFindIndex(array, baseIsNaN, fromIndex);
    }

    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  function baseIsNaN(value) {
    return value !== value;
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function cacheHas(cache, key) {
    return cache.has(key);
  }

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var Symbol = root.Symbol,
      getPrototype = overArg(Object.getPrototypeOf, Object),
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice,
      spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;
  var nativeGetSymbols = Object.getOwnPropertySymbols,
      nativeMax = Math.max;
  var Map = getNative(root, 'Map'),
      nativeCreate = getNative(Object, 'create');

  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function listCacheClear() {
    this.__data__ = [];
  }

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    return true;
  }

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  function SetCache(values) {
    var index = -1,
        length = values ? values.length : 0;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  }

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  function basePick(object, props) {
    object = Object(object);
    return basePickBy(object, props, function (value, key) {
      return key in object;
    });
  }

  function basePickBy(object, props, predicate) {
    var index = -1,
        length = props.length,
        result = {};

    while (++index < length) {
      var key = props[index],
          value = object[key];

      if (predicate(value, key)) {
        result[key] = value;
      }
    }

    return result;
  }

  function baseRest(func, start) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }

  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }

    return result;
  };

  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  var omit = baseRest(function (object, props) {
    if (object == null) {
      return {};
    }

    props = arrayMap(baseFlatten(props, 1), toKey);
    return basePick(object, baseDifference(getAllKeysIn(object), props));
  });

  function stubArray() {
    return [];
  }

  module.exports = omit;
},337,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      symbolTag = '[object Symbol]';
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();

  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var Symbol = root.Symbol,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;
  var nativeMax = Math.max;

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  function basePick(object, props) {
    object = Object(object);
    return basePickBy(object, props, function (value, key) {
      return key in object;
    });
  }

  function basePickBy(object, props, predicate) {
    var index = -1,
        length = props.length,
        result = {};

    while (++index < length) {
      var key = props[index],
          value = object[key];

      if (predicate(value, key)) {
        result[key] = value;
      }
    }

    return result;
  }

  function baseRest(func, start) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }

  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  var pick = baseRest(function (object, props) {
    return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
  });
  module.exports = pick;
},338,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _Logs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _RemoteLogging = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  if (_expoConstants.default.manifest && _expoConstants.default.manifest.logUrl) {
    if (!navigator.hasOwnProperty('userAgent')) {
      _Logs.default.enableExpoCliLogging();
    } else {
      _RemoteLogging.default.enqueueRemoteLogAsync('info', {}, ['You are now debugging remotely; check your browser console for your application logs.']);
    }
  }

  var originalWarn = console.warn;

  console.warn = function warn() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length > 0 && typeof args[0] === 'string' && /^Require cycle: .*node_modules/.test(args[0])) {
      return;
    }

    originalWarn.apply(console, args);
  };
},339,[1,329,340,342]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _RemoteConsole = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _originalConsole;

  function enableExpoCliLogging() {
    if (_originalConsole) {
      return;
    }

    _originalConsole = global.console;
    global.console = _RemoteConsole.default.createRemoteConsole(global.console);
  }

  function disableExpoCliLogging() {
    if (!_originalConsole) {
      return;
    }

    global.console = _originalConsole;
    _originalConsole = null;
  }

  var _default = {
    enableExpoCliLogging: enableExpoCliLogging,
    disableExpoCliLogging: disableExpoCliLogging
  };
  exports.default = _default;
},340,[1,341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _RemoteLogging = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function createRemoteConsole(originalConsole) {
    var groupDepth = 0;
    var enhancedConsole = Object.create(originalConsole);

    _defineConsoleLogMethod('debug', 'info');

    _defineConsoleLogMethod('log', 'info');

    _defineConsoleLogMethod('info', 'info');

    _defineConsoleLogMethod('warn', 'warn');

    _defineConsoleLogMethod('error', 'error');

    enhancedConsole.assert = function assert(condition) {
      for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data[_key - 1] = arguments[_key];
      }

      if (originalConsole.assert) {
        originalConsole.assert.apply(originalConsole, [!!condition].concat(data));
      }

      if (condition) {
        return;
      }

      var assertionMessage = 'Assertion failed';

      if (!data.length) {
        data.push(assertionMessage);
      } else {
        if (typeof data[0] !== 'string') {
          data.unshift(assertionMessage);
        } else {
          data[0] = "Assertion failed: " + data[0];
        }
      }

      _enqueueRemoteLog('error', {}, data);
    };

    enhancedConsole.group = function group() {
      for (var _len2 = arguments.length, data = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        data[_key2] = arguments[_key2];
      }

      if (originalConsole.group) {
        originalConsole.group.apply(originalConsole, data);
      }

      _enqueueRemoteLog('info', {}, data);

      groupDepth++;
    };

    enhancedConsole.groupCollapsed = function groupCollapsed() {
      for (var _len3 = arguments.length, data = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        data[_key3] = arguments[_key3];
      }

      if (originalConsole.groupCollapsed) {
        originalConsole.groupCollapsed.apply(originalConsole, data);
      }

      _enqueueRemoteLog('info', {
        groupCollapsed: true
      }, data);

      groupDepth++;
    };

    enhancedConsole.groupEnd = function groupEnd() {
      if (originalConsole.groupEnd) {
        originalConsole.groupEnd();
      }

      if (groupDepth > 0) {
        groupDepth--;
      }

      _enqueueRemoteLog('info', {
        shouldHide: true
      }, []);
    };

    function _defineConsoleLogMethod(name, level) {
      enhancedConsole[name] = function __expoConsoleLog() {
        var originalMethod = originalConsole[name];

        for (var _len4 = arguments.length, data = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          data[_key4] = arguments[_key4];
        }

        if (typeof originalMethod === 'function') {
          originalMethod.apply(originalConsole, data);
        }

        _enqueueRemoteLog(level, {}, data);
      };
    }

    function _enqueueRemoteLog(level, additionalFields, data) {
      _RemoteLogging.default.enqueueRemoteLogAsync(level, (0, _objectSpread2.default)({
        groupDepth: groupDepth
      }, additionalFields), data).catch(function (error) {
        originalConsole.error("There was a problem sending log messages to your development environment", error);
      });
    }

    return enhancedConsole;
  }

  var _default = {
    createRemoteConsole: createRemoteConsole
  };
  exports.default = _default;
},341,[1,48,342]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.__waitForEmptyLogQueueAsync = __waitForEmptyLogQueueAsync;
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fbemitter = _$$_REQUIRE(_dependencyMap[4]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _uuidJs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _LogSerialization = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _sessionId = _uuidJs.default.create().toString();

  var _logQueue = [];

  var _transportEventEmitter = new _fbemitter.EventEmitter();

  var _logCounter = 0;
  var _isSendingLogs = false;
  var _completionPromise = null;
  var _resolveCompletion2 = null;

  function enqueueRemoteLogAsync(level, additionalFields, data) {
    var warning, lines, _ref, body, includesStack;

    return _regenerator.default.async(function enqueueRemoteLogAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!_isReactNativeWarning(data)) {
              _context.next = 8;
              break;
            }

            if (!(data.length === 0)) {
              _context.next = 3;
              break;
            }

            throw new Error("Warnings must include log arguments");

          case 3:
            warning = data[0];

            if (!(typeof warning !== 'string')) {
              _context.next = 6;
              break;
            }

            throw new TypeError("The log argument for a warning must be a string");

          case 6:
            lines = warning.split('\n');

            if (lines.length > 1 && /^\s+in /.test(lines[1])) {
              data[0] = lines[0];
            }

          case 8:
            _context.next = 10;
            return _regenerator.default.awrap(_LogSerialization.default.serializeLogDataAsync(data, level));

          case 10:
            _ref = _context.sent;
            body = _ref.body;
            includesStack = _ref.includesStack;

            _logQueue.push((0, _objectSpread2.default)({
              count: _logCounter++,
              level: level,
              body: body,
              includesStack: includesStack
            }, additionalFields));

            _sendRemoteLogsAsync().catch(function (error) {
              setImmediate(function () {
                throw error;
              });
            });

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function _sendRemoteLogsAsync() {
    var batch, logUrl;
    return _regenerator.default.async(function _sendRemoteLogsAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(_isSendingLogs || !_logQueue.length)) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return");

          case 2:
            batch = _logQueue.splice(0);
            logUrl = _expoConstants.default.manifest.logUrl;
            (0, _invariant.default)(typeof logUrl === 'string', 'The Expo project manifest must specify `logUrl`');
            _isSendingLogs = true;
            _context2.prev = 6;
            _context2.next = 9;
            return _regenerator.default.awrap(_sendNextLogBatchAsync(batch, logUrl));

          case 9:
            _context2.prev = 9;
            _isSendingLogs = false;
            return _context2.finish(9);

          case 12:
            if (!_logQueue.length) {
              _context2.next = 16;
              break;
            }

            return _context2.abrupt("return", _sendRemoteLogsAsync());

          case 16:
            if (_resolveCompletion2) {
              _resolveCompletion2();
            }

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this, [[6,, 9, 12]]);
  }

  function _sendNextLogBatchAsync(batch, logUrl) {
    var response, success;
    return _regenerator.default.async(function _sendNextLogBatchAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return _regenerator.default.awrap(fetch(logUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                Connection: 'keep-alive',
                'Proxy-Connection': 'keep-alive',
                Accept: 'application/json',
                'Device-Id': _expoConstants.default.installationId,
                'Device-Name': _expoConstants.default.deviceName,
                'Session-Id': _sessionId
              },
              body: JSON.stringify(batch)
            }));

          case 3:
            response = _context3.sent;
            _context3.next = 10;
            break;

          case 6:
            _context3.prev = 6;
            _context3.t0 = _context3["catch"](0);

            _transportEventEmitter.emit('error', {
              error: _context3.t0
            });

            return _context3.abrupt("return");

          case 10:
            success = response.status >= 200 && response.status < 300;

            if (!success) {
              _transportEventEmitter.emit('error', {
                error: new Error("An HTTP error occurred when sending remote logs"),
                response: response
              });
            }

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this, [[0, 6]]);
  }

  function addTransportErrorListener(listener) {
    return _transportEventEmitter.addListener('error', listener);
  }

  function _isReactNativeWarning(data) {
    var message = data[0];
    return data.length === 1 && typeof message === 'string' && message.startsWith('Warning: ');
  }

  var _default = {
    enqueueRemoteLogAsync: enqueueRemoteLogAsync,
    addTransportErrorListener: addTransportErrorListener
  };
  exports.default = _default;

  function __waitForEmptyLogQueueAsync() {
    if (_completionPromise) {
      return _completionPromise;
    }

    if (!_isSendingLogs && !_logQueue.length) {
      return Promise.resolve();
    }

    _completionPromise = new Promise(function (resolve) {
      _resolveCompletion2 = function _resolveCompletion() {
        (0, _invariant.default)(!_isSendingLogs, "Must not be sending logs at completion");
        (0, _invariant.default)(!_logQueue.length, "Log queue must be empty at completion");
        _completionPromise = null;
        _resolveCompletion2 = null;
        resolve();
      };
    });
    return _completionPromise;
  }
},342,[1,130,48,329,343,334,348,349]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var fbemitter = {
    EventEmitter: _$$_REQUIRE(_dependencyMap[0]),
    EmitterSubscription: _$$_REQUIRE(_dependencyMap[1])
  };
  module.exports = fbemitter;
},343,[344,345]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var EmitterSubscription = _$$_REQUIRE(_dependencyMap[0]);

  var EventSubscriptionVendor = _$$_REQUIRE(_dependencyMap[1]);

  var emptyFunction = _$$_REQUIRE(_dependencyMap[2]);

  var invariant = _$$_REQUIRE(_dependencyMap[3]);

  var BaseEventEmitter = function () {
    function BaseEventEmitter() {
      _classCallCheck(this, BaseEventEmitter);

      this._subscriber = new EventSubscriptionVendor();
      this._currentSubscription = null;
    }

    BaseEventEmitter.prototype.addListener = function addListener(eventType, listener, context) {
      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this._subscriber, listener, context));
    };

    BaseEventEmitter.prototype.once = function once(eventType, listener, context) {
      var emitter = this;
      return this.addListener(eventType, function () {
        emitter.removeCurrentListener();
        listener.apply(context, arguments);
      });
    };

    BaseEventEmitter.prototype.removeAllListeners = function removeAllListeners(eventType) {
      this._subscriber.removeAllSubscriptions(eventType);
    };

    BaseEventEmitter.prototype.removeCurrentListener = function removeCurrentListener() {
      !!!this._currentSubscription ? invariant(false) : undefined;

      this._subscriber.removeSubscription(this._currentSubscription);
    };

    BaseEventEmitter.prototype.listeners = function listeners(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

      return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
        return subscription.listener;
      }) : [];
    };

    BaseEventEmitter.prototype.emit = function emit(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);

      if (subscriptions) {
        var keys = Object.keys(subscriptions);

        for (var ii = 0; ii < keys.length; ii++) {
          var key = keys[ii];
          var subscription = subscriptions[key];

          if (subscription) {
            this._currentSubscription = subscription;

            this.__emitToSubscription.apply(this, [subscription].concat(Array.prototype.slice.call(arguments)));
          }
        }

        this._currentSubscription = null;
      }
    };

    BaseEventEmitter.prototype.__emitToSubscription = function __emitToSubscription(subscription, eventType) {
      var args = Array.prototype.slice.call(arguments, 2);
      subscription.listener.apply(subscription.context, args);
    };

    return BaseEventEmitter;
  }();

  module.exports = BaseEventEmitter;
},344,[345,347,46,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var EventSubscription = _$$_REQUIRE(_dependencyMap[0]);

  var EmitterSubscription = function (_EventSubscription) {
    _inherits(EmitterSubscription, _EventSubscription);

    function EmitterSubscription(subscriber, listener, context) {
      _classCallCheck(this, EmitterSubscription);

      _EventSubscription.call(this, subscriber);

      this.listener = listener;
      this.context = context;
    }

    return EmitterSubscription;
  }(EventSubscription);

  module.exports = EmitterSubscription;
},345,[346]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var EventSubscription = function () {
    function EventSubscription(subscriber) {
      _classCallCheck(this, EventSubscription);

      this.subscriber = subscriber;
    }

    EventSubscription.prototype.remove = function remove() {
      if (this.subscriber) {
        this.subscriber.removeSubscription(this);
        this.subscriber = null;
      }
    };

    return EventSubscription;
  }();

  module.exports = EventSubscription;
},346,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var invariant = _$$_REQUIRE(_dependencyMap[0]);

  var EventSubscriptionVendor = function () {
    function EventSubscriptionVendor() {
      _classCallCheck(this, EventSubscriptionVendor);

      this._subscriptionsForType = {};
      this._currentSubscription = null;
    }

    EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {
      !(subscription.subscriber === this) ? invariant(false) : undefined;

      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }

      var key = this._subscriptionsForType[eventType].length;

      this._subscriptionsForType[eventType].push(subscription);

      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    };

    EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    };

    EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;
      var subscriptionsForType = this._subscriptionsForType[eventType];

      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    };

    EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    };

    return EventSubscriptionVendor;
  }();

  module.exports = EventSubscriptionVendor;
},347,[6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function UUIDjs() {}

  ;

  UUIDjs.maxFromBits = function (bits) {
    return Math.pow(2, bits);
  };

  UUIDjs.limitUI04 = UUIDjs.maxFromBits(4);
  UUIDjs.limitUI06 = UUIDjs.maxFromBits(6);
  UUIDjs.limitUI08 = UUIDjs.maxFromBits(8);
  UUIDjs.limitUI12 = UUIDjs.maxFromBits(12);
  UUIDjs.limitUI14 = UUIDjs.maxFromBits(14);
  UUIDjs.limitUI16 = UUIDjs.maxFromBits(16);
  UUIDjs.limitUI32 = UUIDjs.maxFromBits(32);
  UUIDjs.limitUI40 = UUIDjs.maxFromBits(40);
  UUIDjs.limitUI48 = UUIDjs.maxFromBits(48);

  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  UUIDjs.randomUI04 = function () {
    return getRandomInt(0, UUIDjs.limitUI04 - 1);
  };

  UUIDjs.randomUI06 = function () {
    return getRandomInt(0, UUIDjs.limitUI06 - 1);
  };

  UUIDjs.randomUI08 = function () {
    return getRandomInt(0, UUIDjs.limitUI08 - 1);
  };

  UUIDjs.randomUI12 = function () {
    return getRandomInt(0, UUIDjs.limitUI12 - 1);
  };

  UUIDjs.randomUI14 = function () {
    return getRandomInt(0, UUIDjs.limitUI14 - 1);
  };

  UUIDjs.randomUI16 = function () {
    return getRandomInt(0, UUIDjs.limitUI16 - 1);
  };

  UUIDjs.randomUI32 = function () {
    return getRandomInt(0, UUIDjs.limitUI32 - 1);
  };

  UUIDjs.randomUI40 = function () {
    return (0 | Math.random() * 1073741824) + (0 | Math.random() * 1024) * 1073741824;
  };

  UUIDjs.randomUI48 = function () {
    return (0 | Math.random() * 1073741824) + (0 | Math.random() * 262144) * 1073741824;
  };

  UUIDjs.paddedString = function (string, length, z) {
    string = String(string);
    z = !z ? '0' : z;
    var i = length - string.length;

    for (; i > 0; i >>>= 1, z += z) {
      if (i & 1) {
        string = z + string;
      }
    }

    return string;
  };

  UUIDjs.prototype.fromParts = function (timeLow, timeMid, timeHiAndVersion, clockSeqHiAndReserved, clockSeqLow, node) {
    this.version = timeHiAndVersion >> 12 & 0xF;
    this.hex = UUIDjs.paddedString(timeLow.toString(16), 8) + '-' + UUIDjs.paddedString(timeMid.toString(16), 4) + '-' + UUIDjs.paddedString(timeHiAndVersion.toString(16), 4) + '-' + UUIDjs.paddedString(clockSeqHiAndReserved.toString(16), 2) + UUIDjs.paddedString(clockSeqLow.toString(16), 2) + '-' + UUIDjs.paddedString(node.toString(16), 12);
    return this;
  };

  UUIDjs.prototype.toString = function () {
    return this.hex;
  };

  UUIDjs.prototype.toURN = function () {
    return 'urn:uuid:' + this.hex;
  };

  UUIDjs.prototype.toBytes = function () {
    var parts = this.hex.split('-');
    var ints = [];
    var intPos = 0;

    for (var i = 0; i < parts.length; i++) {
      for (var j = 0; j < parts[i].length; j += 2) {
        ints[intPos++] = parseInt(parts[i].substr(j, 2), 16);
      }
    }

    return ints;
  };

  UUIDjs.prototype.equals = function (uuid) {
    if (!(uuid instanceof UUID)) {
      return false;
    }

    if (this.hex !== uuid.hex) {
      return false;
    }

    return true;
  };

  UUIDjs.getTimeFieldValues = function (time) {
    var ts = time - Date.UTC(1582, 9, 15);
    var hm = ts / 0x100000000 * 10000 & 0xFFFFFFF;
    return {
      low: (ts & 0xFFFFFFF) * 10000 % 0x100000000,
      mid: hm & 0xFFFF,
      hi: hm >>> 16,
      timestamp: ts
    };
  };

  UUIDjs._create4 = function () {
    return new UUIDjs().fromParts(UUIDjs.randomUI32(), UUIDjs.randomUI16(), 0x4000 | UUIDjs.randomUI12(), 0x80 | UUIDjs.randomUI06(), UUIDjs.randomUI08(), UUIDjs.randomUI48());
  };

  UUIDjs._create1 = function () {
    var now = new Date().getTime();
    var sequence = UUIDjs.randomUI14();
    var node = (UUIDjs.randomUI08() | 1) * 0x10000000000 + UUIDjs.randomUI40();
    var tick = UUIDjs.randomUI04();
    var timestamp = 0;
    var timestampRatio = 0.25;

    if (now != timestamp) {
      if (now < timestamp) {
        sequence++;
      }

      timestamp = now;
      tick = UUIDjs.randomUI04();
    } else if (Math.random() < timestampRatio && tick < 9984) {
      tick += 1 + UUIDjs.randomUI04();
    } else {
      sequence++;
    }

    var tf = UUIDjs.getTimeFieldValues(timestamp);
    var tl = tf.low + tick;
    var thav = tf.hi & 0xFFF | 0x1000;
    sequence &= 0x3FFF;
    var cshar = sequence >>> 8 | 0x80;
    var csl = sequence & 0xFF;
    return new UUIDjs().fromParts(tl, tf.mid, thav, cshar, csl, node);
  };

  UUIDjs.create = function (version) {
    version = version || 4;
    return this['_create' + version]();
  };

  UUIDjs.fromTime = function (time, last) {
    last = !last ? false : last;
    var tf = UUIDjs.getTimeFieldValues(time);
    var tl = tf.low;
    var thav = tf.hi & 0xFFF | 0x1000;

    if (last === false) {
      return new UUIDjs().fromParts(tl, tf.mid, thav, 0, 0, 0);
    } else {
      return new UUIDjs().fromParts(tl, tf.mid, thav, 0x80 | UUIDjs.limitUI06, UUIDjs.limitUI08 - 1, UUIDjs.limitUI48 - 1);
    }
  };

  UUIDjs.firstFromTime = function (time) {
    return UUIDjs.fromTime(time, false);
  };

  UUIDjs.lastFromTime = function (time) {
    return UUIDjs.fromTime(time, true);
  };

  UUIDjs.fromURN = function (strId) {
    var r,
        p = /^(?:urn:uuid:|\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(?:\})?$/i;

    if (r = p.exec(strId)) {
      return new UUIDjs().fromParts(parseInt(r[1], 16), parseInt(r[2], 16), parseInt(r[3], 16), parseInt(r[4], 16), parseInt(r[5], 16), parseInt(r[6], 16));
    }

    return null;
  };

  UUIDjs.fromBytes = function (ints) {
    if (ints.length < 5) {
      return null;
    }

    var str = '';
    var pos = 0;
    var parts = [4, 2, 2, 2, 6];

    for (var i = 0; i < parts.length; i++) {
      for (var j = 0; j < parts[i]; j++) {
        var octet = ints[pos++].toString(16);

        if (octet.length == 1) {
          octet = '0' + octet;
        }

        str += octet;
      }

      if (parts[i] !== 6) {
        str += '-';
      }
    }

    return UUIDjs.fromURN(str);
  };

  UUIDjs.fromBinary = function (binary) {
    var ints = [];

    for (var i = 0; i < binary.length; i++) {
      ints[i] = binary.charCodeAt(i);

      if (ints[i] > 255 || ints[i] < 0) {
        throw new Error('Unexpected byte in binary data.');
      }
    }

    return UUIDjs.fromBytes(ints);
  };

  UUIDjs.new = function () {
    return this.create(4);
  };

  UUIDjs.newTS = function () {
    return this.create(1);
  };

  module.exports = UUIDjs;
},348,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.EXPO_CONSOLE_METHOD_NAME = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _prettyFormat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _parseErrorStack = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _symbolicateStackTrace = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _ReactNodeFormatter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';
  exports.EXPO_CONSOLE_METHOD_NAME = EXPO_CONSOLE_METHOD_NAME;

  function serializeLogDataAsync(data, level) {
    var serializedValues, includesStack, rawStack, syntheticError, stack, errorMessage, serializedError, error, _errorMessage, _serializedError;

    return _regenerator.default.async(function serializeLogDataAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            includesStack = false;

            if (!_stackTraceLogsSupported()) {
              _context.next = 32;
              break;
            }

            if (!_isUnhandledPromiseRejection(data, level)) {
              _context.next = 11;
              break;
            }

            rawStack = data[0];
            syntheticError = {
              stack: rawStack
            };
            _context.next = 7;
            return _regenerator.default.awrap(_symbolicateErrorAsync(syntheticError));

          case 7:
            stack = _context.sent;

            if (!stack.length) {
              serializedValues = _stringifyLogData(data);
            } else {
              errorMessage = rawStack.split('\n')[1];
              serializedValues = [{
                message: "[Unhandled promise rejection: " + errorMessage + "]",
                stack: _formatStack(stack)
              }];
              includesStack = true;
            }

            _context.next = 30;
            break;

          case 11:
            if (!(data.length === 1 && data[0] instanceof Error)) {
              _context.next = 19;
              break;
            }

            _context.next = 14;
            return _regenerator.default.awrap(_serializeErrorAsync(data[0]));

          case 14:
            serializedError = _context.sent;
            serializedValues = [serializedError];
            includesStack = serializedError.hasOwnProperty('stack');
            _context.next = 30;
            break;

          case 19:
            if (!(level === 'warn' || level === 'error')) {
              _context.next = 29;
              break;
            }

            error = _captureConsoleStackTrace();
            _errorMessage = _stringifyLogData(data).join(', ');
            _context.next = 24;
            return _regenerator.default.awrap(_serializeErrorAsync(error, _errorMessage));

          case 24:
            _serializedError = _context.sent;
            serializedValues = [_serializedError];
            includesStack = _serializedError.hasOwnProperty('stack');
            _context.next = 30;
            break;

          case 29:
            serializedValues = _stringifyLogData(data);

          case 30:
            _context.next = 33;
            break;

          case 32:
            serializedValues = _stringifyLogData(data);

          case 33:
            return _context.abrupt("return", {
              body: (0, _toConsumableArray2.default)(serializedValues),
              includesStack: includesStack
            });

          case 34:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function _stringifyLogData(data) {
    return data.map(function (item) {
      if (typeof item === 'string') {
        return item;
      } else {
        return (0, _prettyFormat.default)(item, {
          plugins: [_ReactNodeFormatter.default]
        });
      }
    });
  }

  function _serializeErrorAsync(error, message) {
    var stack, formattedStack;
    return _regenerator.default.async(function _serializeErrorAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (message == null) {
              message = error.message;
            }

            if (!(!error.stack || !error.stack.length)) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", (0, _prettyFormat.default)(error));

          case 3:
            _context2.next = 5;
            return _regenerator.default.awrap(_symbolicateErrorAsync(error));

          case 5:
            stack = _context2.sent;
            formattedStack = _formatStack(stack);
            return _context2.abrupt("return", {
              message: message,
              stack: formattedStack
            });

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function _symbolicateErrorAsync(error) {
    var parsedStack, symbolicatedStack;
    return _regenerator.default.async(function _symbolicateErrorAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            parsedStack = (0, _parseErrorStack.default)(error);
            _context3.prev = 1;
            _context3.next = 4;
            return _regenerator.default.awrap((0, _symbolicateStackTrace.default)(parsedStack));

          case 4:
            symbolicatedStack = _context3.sent;
            _context3.next = 10;
            break;

          case 7:
            _context3.prev = 7;
            _context3.t0 = _context3["catch"](1);
            return _context3.abrupt("return", parsedStack);

          case 10:
            if (symbolicatedStack) {
              _context3.next = 12;
              break;
            }

            return _context3.abrupt("return", parsedStack);

          case 12:
            return _context3.abrupt("return", symbolicatedStack.map(_removeProjectRoot));

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this, [[1, 7]]);
  }

  function _formatStack(stack) {
    return stack.map(function (frame) {
      var line = frame.file + ":" + frame.lineNumber;

      if (frame.column != null) {
        line += ":" + frame.column;
      }

      line += " in " + frame.methodName;
      return line;
    }).join('\n');
  }

  function _removeProjectRoot(frame) {
    var filename = frame.file;

    if (filename == null) {
      return frame;
    }

    var projectRoot = _getProjectRoot();

    if (projectRoot == null) {
      return frame;
    }

    if (filename.startsWith(projectRoot)) {
      filename = filename.substring(projectRoot.length);

      if (filename[0] === '/' || filename[0] === '\\') {
        filename = filename.substring(1);
      }

      frame.file = filename;
    }

    return frame;
  }

  function _stackTraceLogsSupported() {
    return false;
  }

  function _isUnhandledPromiseRejection(data, level) {
    return level === 'warn' && typeof data[0] === 'string' && /^Possible Unhandled Promise Rejection/.test(data[0]);
  }

  function _captureConsoleStackTrace() {
    try {
      throw new Error();
    } catch (error) {
      var stackLines = error.stack.split('\n');
      var consoleMethodIndex = stackLines.findIndex(function (frame) {
        return frame.includes(EXPO_CONSOLE_METHOD_NAME);
      });

      if (consoleMethodIndex !== -1) {
        stackLines = stackLines.slice(consoleMethodIndex + 1);
        error.stack = stackLines.join('\n');
      }

      return error;
    }
  }

  function _getProjectRoot() {
    return _expoConstants.default.manifest && _expoConstants.default.manifest.developer ? _expoConstants.default.manifest.developer.projectRoot : null;
  }

  var _default = {
    serializeLogDataAsync: serializeLogDataAsync
  };
  exports.default = _default;
},349,[1,130,17,329,350,94,351,354]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : factory();
  })(this, function () {
    'use strict';

    function unwrapExports(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
      return module = {
        exports: {}
      }, fn(module, module.exports), module.exports;
    }

    var _global = createCommonjsModule(function (module) {
      var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
      if (typeof __g == 'number') __g = global;
    });

    var _core = createCommonjsModule(function (module) {
      var core = module.exports = {
        version: '2.5.7'
      };
      if (typeof __e == 'number') __e = core;
    });

    var _core_1 = _core.version;

    var _aFunction = function _aFunction(it) {
      if (typeof it != 'function') throw TypeError(it + ' is not a function!');
      return it;
    };

    var _ctx = function _ctx(fn, that, length) {
      _aFunction(fn);

      if (that === undefined) return fn;

      switch (length) {
        case 1:
          return function (a) {
            return fn.call(that, a);
          };

        case 2:
          return function (a, b) {
            return fn.call(that, a, b);
          };

        case 3:
          return function (a, b, c) {
            return fn.call(that, a, b, c);
          };
      }

      return function () {
        return fn.apply(that, arguments);
      };
    };

    var _isObject = function _isObject(it) {
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };

    var _anObject = function _anObject(it) {
      if (!_isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };

    var _fails = function _fails(exec) {
      try {
        return !!exec();
      } catch (e) {
        return true;
      }
    };

    var _descriptors = !_fails(function () {
      return Object.defineProperty({}, 'a', {
        get: function get() {
          return 7;
        }
      }).a != 7;
    });

    var document = _global.document;

    var is = _isObject(document) && _isObject(document.createElement);

    var _domCreate = function _domCreate(it) {
      return is ? document.createElement(it) : {};
    };

    var _ie8DomDefine = !_descriptors && !_fails(function () {
      return Object.defineProperty(_domCreate('div'), 'a', {
        get: function get() {
          return 7;
        }
      }).a != 7;
    });

    var _toPrimitive = function _toPrimitive(it, S) {
      if (!_isObject(it)) return it;
      var fn, val;
      if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
      if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
      if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
      throw TypeError("Can't convert object to primitive value");
    };

    var dP = Object.defineProperty;
    var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
      _anObject(O);

      P = _toPrimitive(P, true);

      _anObject(Attributes);

      if (_ie8DomDefine) try {
        return dP(O, P, Attributes);
      } catch (e) {}
      if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };
    var _objectDp = {
      f: f
    };

    var _propertyDesc = function _propertyDesc(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };

    var _hide = _descriptors ? function (object, key, value) {
      return _objectDp.f(object, key, _propertyDesc(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };

    var hasOwnProperty = {}.hasOwnProperty;

    var _has = function _has(it, key) {
      return hasOwnProperty.call(it, key);
    };

    var PROTOTYPE = 'prototype';

    var $export = function $export(type, name, source) {
      var IS_FORCED = type & $export.F;
      var IS_GLOBAL = type & $export.G;
      var IS_STATIC = type & $export.S;
      var IS_PROTO = type & $export.P;
      var IS_BIND = type & $export.B;
      var IS_WRAP = type & $export.W;
      var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
      var expProto = exports[PROTOTYPE];
      var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
      var key, own, out;
      if (IS_GLOBAL) source = name;

      for (key in source) {
        own = !IS_FORCED && target && target[key] !== undefined;
        if (own && _has(exports, key)) continue;
        out = own ? target[key] : source[key];
        exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? _ctx(out, _global) : IS_WRAP && target[key] == out ? function (C) {
          var F = function F(a, b, c) {
            if (this instanceof C) {
              switch (arguments.length) {
                case 0:
                  return new C();

                case 1:
                  return new C(a);

                case 2:
                  return new C(a, b);
              }

              return new C(a, b, c);
            }

            return C.apply(this, arguments);
          };

          F[PROTOTYPE] = C[PROTOTYPE];
          return F;
        }(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;

        if (IS_PROTO) {
          (exports.virtual || (exports.virtual = {}))[key] = out;
          if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
        }
      }
    };

    $export.F = 1;
    $export.G = 2;
    $export.S = 4;
    $export.P = 8;
    $export.B = 16;
    $export.W = 32;
    $export.U = 64;
    $export.R = 128;
    var _export = $export;
    var toString$1 = {}.toString;

    var _cof = function _cof(it) {
      return toString$1.call(it).slice(8, -1);
    };

    var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
      return _cof(it) == 'String' ? it.split('') : Object(it);
    };

    var _defined = function _defined(it) {
      if (it == undefined) throw TypeError("Can't call method on  " + it);
      return it;
    };

    var _toIobject = function _toIobject(it) {
      return _iobject(_defined(it));
    };

    var ceil = Math.ceil;
    var floor = Math.floor;

    var _toInteger = function _toInteger(it) {
      return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };

    var min = Math.min;

    var _toLength = function _toLength(it) {
      return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0;
    };

    var max = Math.max;
    var min$1 = Math.min;

    var _toAbsoluteIndex = function _toAbsoluteIndex(index, length) {
      index = _toInteger(index);
      return index < 0 ? max(index + length, 0) : min$1(index, length);
    };

    var _arrayIncludes = function _arrayIncludes(IS_INCLUDES) {
      return function ($this, el, fromIndex) {
        var O = _toIobject($this);

        var length = _toLength(O.length);

        var index = _toAbsoluteIndex(fromIndex, length);

        var value;
        if (IS_INCLUDES && el != el) while (length > index) {
          value = O[index++];
          if (value != value) return true;
        } else for (; length > index; index++) {
          if (IS_INCLUDES || index in O) {
            if (O[index] === el) return IS_INCLUDES || index || 0;
          }
        }
        return !IS_INCLUDES && -1;
      };
    };

    var _library = true;

    var _shared = createCommonjsModule(function (module) {
      var SHARED = '__core-js_shared__';
      var store = _global[SHARED] || (_global[SHARED] = {});
      (module.exports = function (key, value) {
        return store[key] || (store[key] = value !== undefined ? value : {});
      })('versions', []).push({
        version: _core.version,
        mode: 'pure',
        copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
      });
    });

    var id = 0;
    var px = Math.random();

    var _uid = function _uid(key) {
      return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    };

    var shared = _shared('keys');

    var _sharedKey = function _sharedKey(key) {
      return shared[key] || (shared[key] = _uid(key));
    };

    var arrayIndexOf = _arrayIncludes(false);

    var IE_PROTO = _sharedKey('IE_PROTO');

    var _objectKeysInternal = function _objectKeysInternal(object, names) {
      var O = _toIobject(object);

      var i = 0;
      var result = [];
      var key;

      for (key in O) {
        if (key != IE_PROTO) _has(O, key) && result.push(key);
      }

      while (names.length > i) {
        if (_has(O, key = names[i++])) {
          ~arrayIndexOf(result, key) || result.push(key);
        }
      }

      return result;
    };

    var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

    var _objectKeys = Object.keys || function keys(O) {
      return _objectKeysInternal(O, _enumBugKeys);
    };

    var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
      _anObject(O);

      var keys = _objectKeys(Properties);

      var length = keys.length;
      var i = 0;
      var P;

      while (length > i) {
        _objectDp.f(O, P = keys[i++], Properties[P]);
      }

      return O;
    };

    var document$1 = _global.document;

    var _html = document$1 && document$1.documentElement;

    var IE_PROTO$1 = _sharedKey('IE_PROTO');

    var Empty = function Empty() {};

    var PROTOTYPE$1 = 'prototype';

    var _createDict = function createDict() {
      var iframe = _domCreate('iframe');

      var i = _enumBugKeys.length;
      var lt = '<';
      var gt = '>';
      var iframeDocument;
      iframe.style.display = 'none';

      _html.appendChild(iframe);

      iframe.src = 'javascript:';
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write("<script>document.F=Object</script>");
      iframeDocument.close();
      _createDict = iframeDocument.F;

      while (i--) {
        delete _createDict[PROTOTYPE$1][_enumBugKeys[i]];
      }

      return _createDict();
    };

    var _objectCreate = Object.create || function create(O, Properties) {
      var result;

      if (O !== null) {
        Empty[PROTOTYPE$1] = _anObject(O);
        result = new Empty();
        Empty[PROTOTYPE$1] = null;
        result[IE_PROTO$1] = O;
      } else result = _createDict();

      return Properties === undefined ? result : _objectDps(result, Properties);
    };

    _export(_export.S, 'Object', {
      create: _objectCreate
    });

    var $Object = _core.Object;

    var create = function create(P, D) {
      return $Object.create(P, D);
    };

    var create$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": create,
        __esModule: true
      };
    });

    var _Object$create = unwrapExports(create$1);

    var _toObject = function _toObject(it) {
      return Object(_defined(it));
    };

    var _objectSap = function _objectSap(KEY, exec) {
      var fn = (_core.Object || {})[KEY] || Object[KEY];
      var exp = {};
      exp[KEY] = exec(fn);

      _export(_export.S + _export.F * _fails(function () {
        fn(1);
      }), 'Object', exp);
    };

    _objectSap('keys', function () {
      return function keys(it) {
        return _objectKeys(_toObject(it));
      };
    });

    var keys = _core.Object.keys;
    var keys$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": keys,
        __esModule: true
      };
    });

    var _Object$keys = unwrapExports(keys$1);

    var _stringAt = function _stringAt(TO_STRING) {
      return function (that, pos) {
        var s = String(_defined(that));

        var i = _toInteger(pos);

        var l = s.length;
        var a, b;
        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
      };
    };

    var _redefine = _hide;
    var _iterators = {};

    var _wks = createCommonjsModule(function (module) {
      var store = _shared('wks');

      var Symbol = _global.Symbol;
      var USE_SYMBOL = typeof Symbol == 'function';

      var $exports = module.exports = function (name) {
        return store[name] || (store[name] = USE_SYMBOL && (typeof Symbol === "function" ? Symbol[name] : "@@name") || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
      };

      $exports.store = store;
    });

    var def = _objectDp.f;

    var TAG = _wks('toStringTag');

    var _setToStringTag = function _setToStringTag(it, tag, stat) {
      if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
        configurable: true,
        value: tag
      });
    };

    var IteratorPrototype = {};

    _hide(IteratorPrototype, _wks('iterator'), function () {
      return this;
    });

    var _iterCreate = function _iterCreate(Constructor, NAME, next) {
      Constructor.prototype = _objectCreate(IteratorPrototype, {
        next: _propertyDesc(1, next)
      });

      _setToStringTag(Constructor, NAME + ' Iterator');
    };

    var IE_PROTO$2 = _sharedKey('IE_PROTO');

    var ObjectProto = Object.prototype;

    var _objectGpo = Object.getPrototypeOf || function (O) {
      O = _toObject(O);
      if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];

      if (typeof O.constructor == 'function' && O instanceof O.constructor) {
        return O.constructor.prototype;
      }

      return O instanceof Object ? ObjectProto : null;
    };

    var ITERATOR = _wks('iterator');

    var BUGGY = !([].keys && 'next' in [].keys());
    var FF_ITERATOR = '@@iterator';
    var KEYS = 'keys';
    var VALUES = 'values';

    var returnThis = function returnThis() {
      return this;
    };

    var _iterDefine = function _iterDefine(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
      _iterCreate(Constructor, NAME, next);

      var getMethod = function getMethod(kind) {
        if (!BUGGY && kind in proto) return proto[kind];

        switch (kind) {
          case KEYS:
            return function keys() {
              return new Constructor(this, kind);
            };

          case VALUES:
            return function values() {
              return new Constructor(this, kind);
            };
        }

        return function entries() {
          return new Constructor(this, kind);
        };
      };

      var TAG = NAME + ' Iterator';
      var DEF_VALUES = DEFAULT == VALUES;
      var VALUES_BUG = false;
      var proto = Base.prototype;
      var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
      var $default = $native || getMethod(DEFAULT);
      var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
      var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
      var methods, key, IteratorPrototype;

      if ($anyNative) {
        IteratorPrototype = _objectGpo($anyNative.call(new Base()));

        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
          _setToStringTag(IteratorPrototype, TAG, true);
        }
      }

      if (DEF_VALUES && $native && $native.name !== VALUES) {
        VALUES_BUG = true;

        $default = function values() {
          return $native.call(this);
        };
      }

      if (FORCED && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
        _hide(proto, ITERATOR, $default);
      }

      _iterators[NAME] = $default;
      _iterators[TAG] = returnThis;

      if (DEFAULT) {
        methods = {
          values: DEF_VALUES ? $default : getMethod(VALUES),
          keys: IS_SET ? $default : getMethod(KEYS),
          entries: $entries
        };
        if (FORCED) for (key in methods) {
          if (!(key in proto)) _redefine(proto, key, methods[key]);
        } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
      }

      return methods;
    };

    var $at = _stringAt(true);

    _iterDefine(String, 'String', function (iterated) {
      this._t = String(iterated);
      this._i = 0;
    }, function () {
      var O = this._t;
      var index = this._i;
      var point;
      if (index >= O.length) return {
        value: undefined,
        done: true
      };
      point = $at(O, index);
      this._i += point.length;
      return {
        value: point,
        done: false
      };
    });

    var _iterStep = function _iterStep(done, value) {
      return {
        value: value,
        done: !!done
      };
    };

    var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
      this._t = _toIobject(iterated);
      this._i = 0;
      this._k = kind;
    }, function () {
      var O = this._t;
      var kind = this._k;
      var index = this._i++;

      if (!O || index >= O.length) {
        this._t = undefined;
        return _iterStep(1);
      }

      if (kind == 'keys') return _iterStep(0, index);
      if (kind == 'values') return _iterStep(0, O[index]);
      return _iterStep(0, [index, O[index]]);
    }, 'values');

    _iterators.Arguments = _iterators.Array;

    var TO_STRING_TAG = _wks('toStringTag');

    var DOMIterables = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(',');

    for (var i = 0; i < DOMIterables.length; i++) {
      var NAME = DOMIterables[i];
      var Collection = _global[NAME];
      var proto = Collection && Collection.prototype;
      if (proto && !proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
      _iterators[NAME] = _iterators.Array;
    }

    var f$1 = _wks;
    var _wksExt = {
      f: f$1
    };

    var iterator = _wksExt.f('iterator');

    var iterator$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": iterator,
        __esModule: true
      };
    });
    unwrapExports(iterator$1);

    var _meta = createCommonjsModule(function (module) {
      var META = _uid('meta');

      var setDesc = _objectDp.f;
      var id = 0;

      var isExtensible = Object.isExtensible || function () {
        return true;
      };

      var FREEZE = !_fails(function () {
        return isExtensible(Object.preventExtensions({}));
      });

      var setMeta = function setMeta(it) {
        setDesc(it, META, {
          value: {
            i: 'O' + ++id,
            w: {}
          }
        });
      };

      var fastKey = function fastKey(it, create) {
        if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

        if (!_has(it, META)) {
          if (!isExtensible(it)) return 'F';
          if (!create) return 'E';
          setMeta(it);
        }

        return it[META].i;
      };

      var getWeak = function getWeak(it, create) {
        if (!_has(it, META)) {
          if (!isExtensible(it)) return true;
          if (!create) return false;
          setMeta(it);
        }

        return it[META].w;
      };

      var onFreeze = function onFreeze(it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
        return it;
      };

      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey: fastKey,
        getWeak: getWeak,
        onFreeze: onFreeze
      };
    });

    var _meta_1 = _meta.KEY;
    var _meta_2 = _meta.NEED;
    var _meta_3 = _meta.fastKey;
    var _meta_4 = _meta.getWeak;
    var _meta_5 = _meta.onFreeze;
    var defineProperty = _objectDp.f;

    var _wksDefine = function _wksDefine(name) {
      var $Symbol = _core.Symbol || (_core.Symbol = {});
      if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
        value: _wksExt.f(name)
      });
    };

    var f$2 = Object.getOwnPropertySymbols;
    var _objectGops = {
      f: f$2
    };
    var f$3 = {}.propertyIsEnumerable;
    var _objectPie = {
      f: f$3
    };

    var _enumKeys = function _enumKeys(it) {
      var result = _objectKeys(it);

      var getSymbols = _objectGops.f;

      if (getSymbols) {
        var symbols = getSymbols(it);
        var isEnum = _objectPie.f;
        var i = 0;
        var key;

        while (symbols.length > i) {
          if (isEnum.call(it, key = symbols[i++])) result.push(key);
        }
      }

      return result;
    };

    var _isArray = Array.isArray || function isArray(arg) {
      return _cof(arg) == 'Array';
    };

    var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

    var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return _objectKeysInternal(O, hiddenKeys);
    };

    var _objectGopn = {
      f: f$4
    };
    var gOPN = _objectGopn.f;
    var toString$2 = {}.toString;
    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

    var getWindowNames = function getWindowNames(it) {
      try {
        return gOPN(it);
      } catch (e) {
        return windowNames.slice();
      }
    };

    var f$5 = function getOwnPropertyNames(it) {
      return windowNames && toString$2.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
    };

    var _objectGopnExt = {
      f: f$5
    };
    var gOPD = Object.getOwnPropertyDescriptor;
    var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
      O = _toIobject(O);
      P = _toPrimitive(P, true);
      if (_ie8DomDefine) try {
        return gOPD(O, P);
      } catch (e) {}
      if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
    };
    var _objectGopd = {
      f: f$6
    };
    var META = _meta.KEY;
    var gOPD$1 = _objectGopd.f;
    var dP$1 = _objectDp.f;
    var gOPN$1 = _objectGopnExt.f;
    var $Symbol = _global.Symbol;
    var $JSON = _global.JSON;

    var _stringify = $JSON && $JSON.stringify;

    var PROTOTYPE$2 = 'prototype';

    var HIDDEN = _wks('_hidden');

    var TO_PRIMITIVE = _wks('toPrimitive');

    var isEnum = {}.propertyIsEnumerable;

    var SymbolRegistry = _shared('symbol-registry');

    var AllSymbols = _shared('symbols');

    var OPSymbols = _shared('op-symbols');

    var ObjectProto$1 = Object[PROTOTYPE$2];
    var USE_NATIVE = typeof $Symbol == 'function';
    var QObject = _global.QObject;
    var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;
    var setSymbolDesc = _descriptors && _fails(function () {
      return _objectCreate(dP$1({}, 'a', {
        get: function get() {
          return dP$1(this, 'a', {
            value: 7
          }).a;
        }
      })).a != 7;
    }) ? function (it, key, D) {
      var protoDesc = gOPD$1(ObjectProto$1, key);
      if (protoDesc) delete ObjectProto$1[key];
      dP$1(it, key, D);
      if (protoDesc && it !== ObjectProto$1) dP$1(ObjectProto$1, key, protoDesc);
    } : dP$1;

    var wrap = function wrap(tag) {
      var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);

      sym._k = tag;
      return sym;
    };

    var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
      return typeof it == 'symbol';
    } : function (it) {
      return it instanceof $Symbol;
    };

    var $defineProperty = function defineProperty(it, key, D) {
      if (it === ObjectProto$1) $defineProperty(OPSymbols, key, D);

      _anObject(it);

      key = _toPrimitive(key, true);

      _anObject(D);

      if (_has(AllSymbols, key)) {
        if (!D.enumerable) {
          if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
          it[HIDDEN][key] = true;
        } else {
          if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
          D = _objectCreate(D, {
            enumerable: _propertyDesc(0, false)
          });
        }

        return setSymbolDesc(it, key, D);
      }

      return dP$1(it, key, D);
    };

    var $defineProperties = function defineProperties(it, P) {
      _anObject(it);

      var keys = _enumKeys(P = _toIobject(P));

      var i = 0;
      var l = keys.length;
      var key;

      while (l > i) {
        $defineProperty(it, key = keys[i++], P[key]);
      }

      return it;
    };

    var $create = function create(it, P) {
      return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
    };

    var $propertyIsEnumerable = function propertyIsEnumerable(key) {
      var E = isEnum.call(this, key = _toPrimitive(key, true));
      if (this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
      return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
    };

    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
      it = _toIobject(it);
      key = _toPrimitive(key, true);
      if (it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
      var D = gOPD$1(it, key);
      if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
      return D;
    };

    var $getOwnPropertyNames = function getOwnPropertyNames(it) {
      var names = gOPN$1(_toIobject(it));
      var result = [];
      var i = 0;
      var key;

      while (names.length > i) {
        if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
      }

      return result;
    };

    var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
      var IS_OP = it === ObjectProto$1;
      var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
      var result = [];
      var i = 0;
      var key;

      while (names.length > i) {
        if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true)) result.push(AllSymbols[key]);
      }

      return result;
    };

    if (!USE_NATIVE) {
      $Symbol = function Symbol() {
        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');

        var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);

        var $set = function $set(value) {
          if (this === ObjectProto$1) $set.call(OPSymbols, value);
          if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
          setSymbolDesc(this, tag, _propertyDesc(1, value));
        };

        if (_descriptors && setter) setSymbolDesc(ObjectProto$1, tag, {
          configurable: true,
          set: $set
        });
        return wrap(tag);
      };

      _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
        return this._k;
      });

      _objectGopd.f = $getOwnPropertyDescriptor;
      _objectDp.f = $defineProperty;
      _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
      _objectPie.f = $propertyIsEnumerable;
      _objectGops.f = $getOwnPropertySymbols;

      if (_descriptors && false) {
        _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);
      }

      _wksExt.f = function (name) {
        return wrap(_wks(name));
      };
    }

    _export(_export.G + _export.W + _export.F * !USE_NATIVE, {
      Symbol: $Symbol
    });

    for (var es6Symbols = 'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
      _wks(es6Symbols[j++]);
    }

    for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) {
      _wksDefine(wellKnownSymbols[k++]);
    }

    _export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
      'for': function _for(key) {
        return _has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
      },
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

        for (var key in SymbolRegistry) {
          if (SymbolRegistry[key] === sym) return key;
        }
      },
      useSetter: function useSetter() {
        setter = true;
      },
      useSimple: function useSimple() {
        setter = false;
      }
    });

    _export(_export.S + _export.F * !USE_NATIVE, 'Object', {
      create: $create,
      defineProperty: $defineProperty,
      defineProperties: $defineProperties,
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
      getOwnPropertyNames: $getOwnPropertyNames,
      getOwnPropertySymbols: $getOwnPropertySymbols
    });

    $JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
      var S = $Symbol();
      return _stringify([S]) != '[null]' || _stringify({
        a: S
      }) != '{}' || _stringify(Object(S)) != '{}';
    })), 'JSON', {
      stringify: function stringify(it) {
        var args = [it];
        var i = 1;
        var replacer, $replacer;

        while (arguments.length > i) {
          args.push(arguments[i++]);
        }

        $replacer = replacer = args[1];
        if (!_isObject(replacer) && it === undefined || isSymbol(it)) return;
        if (!_isArray(replacer)) replacer = function replacer(key, value) {
          if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
          if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return _stringify.apply($JSON, args);
      }
    });
    $Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);

    _setToStringTag($Symbol, 'Symbol');

    _setToStringTag(Math, 'Math', true);

    _setToStringTag(_global.JSON, 'JSON', true);

    _wksDefine('asyncIterator');

    _wksDefine('observable');

    var symbol = _core.Symbol;
    var symbol$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": symbol,
        __esModule: true
      };
    });

    var _Symbol = unwrapExports(symbol$1);

    var _typeof_1 = createCommonjsModule(function (module, exports) {
      exports.__esModule = true;

      var _iterator2 = _interopRequireDefault(iterator$1);

      var _symbol2 = _interopRequireDefault(symbol$1);

      var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
      };

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof(obj);
      } : function (obj) {
        return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
      };
    });

    var _typeof = unwrapExports(_typeof_1);

    var _sameValue = Object.is || function is(x, y) {
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };

    _export(_export.S, 'Object', {
      is: _sameValue
    });

    var is$1 = _core.Object.is;
    var is$2 = createCommonjsModule(function (module) {
      module.exports = {
        "default": is$1,
        __esModule: true
      };
    });

    var _Object$is = unwrapExports(is$2);

    _objectSap('getPrototypeOf', function () {
      return function getPrototypeOf(it) {
        return _objectGpo(_toObject(it));
      };
    });

    var getPrototypeOf = _core.Object.getPrototypeOf;
    var getPrototypeOf$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": getPrototypeOf,
        __esModule: true
      };
    });

    var _Object$getPrototypeOf = unwrapExports(getPrototypeOf$1);

    var classCallCheck = createCommonjsModule(function (module, exports) {
      exports.__esModule = true;

      exports.default = function (instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      };
    });

    var _classCallCheck = unwrapExports(classCallCheck);

    var possibleConstructorReturn = createCommonjsModule(function (module, exports) {
      exports.__esModule = true;

      var _typeof3 = _interopRequireDefault(_typeof_1);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      exports.default = function (self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
      };
    });

    var _possibleConstructorReturn = unwrapExports(possibleConstructorReturn);

    var check = function check(O, proto) {
      _anObject(O);

      if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
    };

    var _setProto = {
      set: Object.setPrototypeOf || ('__proto__' in {} ? function (test, buggy, set) {
        try {
          set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
          set(test, []);
          buggy = !(test instanceof Array);
        } catch (e) {
          buggy = true;
        }

        return function setPrototypeOf(O, proto) {
          check(O, proto);
          if (buggy) O.__proto__ = proto;else set(O, proto);
          return O;
        };
      }({}, false) : undefined),
      check: check
    };

    _export(_export.S, 'Object', {
      setPrototypeOf: _setProto.set
    });

    var setPrototypeOf = _core.Object.setPrototypeOf;
    var setPrototypeOf$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": setPrototypeOf,
        __esModule: true
      };
    });
    unwrapExports(setPrototypeOf$1);
    var inherits = createCommonjsModule(function (module, exports) {
      exports.__esModule = true;

      var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);

      var _create2 = _interopRequireDefault(create$1);

      var _typeof3 = _interopRequireDefault(_typeof_1);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      exports.default = function (subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
        }

        subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
      };
    });

    var _inherits = unwrapExports(inherits);

    _export(_export.S + _export.F * !_descriptors, 'Object', {
      defineProperty: _objectDp.f
    });

    var $Object$1 = _core.Object;

    var defineProperty$1 = function defineProperty(it, key, desc) {
      return $Object$1.defineProperty(it, key, desc);
    };

    var defineProperty$2 = createCommonjsModule(function (module) {
      module.exports = {
        "default": defineProperty$1,
        __esModule: true
      };
    });

    var _Object$defineProperty = unwrapExports(defineProperty$2);

    var TAG$1 = _wks('toStringTag');

    var ARG = _cof(function () {
      return arguments;
    }()) == 'Arguments';

    var tryGet = function tryGet(it, key) {
      try {
        return it[key];
      } catch (e) {}
    };

    var _classof = function _classof(it) {
      var O, T, B;
      return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T : ARG ? _cof(O) : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
    };

    var ITERATOR$1 = _wks('iterator');

    var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
      if (it != undefined) return it[ITERATOR$1] || it['@@iterator'] || _iterators[_classof(it)];
    };

    var core_getIterator = _core.getIterator = function (it) {
      var iterFn = core_getIteratorMethod(it);
      if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
      return _anObject(iterFn.call(it));
    };

    var getIterator = core_getIterator;
    var getIterator$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": getIterator,
        __esModule: true
      };
    });

    var _getIterator = unwrapExports(getIterator$1);

    var _redefineAll = function _redefineAll(target, src, safe) {
      for (var key in src) {
        if (safe && target[key]) target[key] = src[key];else _hide(target, key, src[key]);
      }

      return target;
    };

    var _anInstance = function _anInstance(it, Constructor, name, forbiddenField) {
      if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
        throw TypeError(name + ': incorrect invocation!');
      }

      return it;
    };

    var _iterCall = function _iterCall(iterator, fn, value, entries) {
      try {
        return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
      } catch (e) {
        var ret = iterator['return'];
        if (ret !== undefined) _anObject(ret.call(iterator));
        throw e;
      }
    };

    var ITERATOR$2 = _wks('iterator');

    var ArrayProto = Array.prototype;

    var _isArrayIter = function _isArrayIter(it) {
      return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$2] === it);
    };

    var _forOf = createCommonjsModule(function (module) {
      var BREAK = {};
      var RETURN = {};

      var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
        var iterFn = ITERATOR ? function () {
          return iterable;
        } : core_getIteratorMethod(iterable);

        var f = _ctx(fn, that, entries ? 2 : 1);

        var index = 0;
        var length, step, iterator, result;
        if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
        if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
          result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
          if (result === BREAK || result === RETURN) return result;
        } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
          result = _iterCall(iterator, f, step.value, entries);
          if (result === BREAK || result === RETURN) return result;
        }
      };

      exports.BREAK = BREAK;
      exports.RETURN = RETURN;
    });

    var SPECIES = _wks('species');

    var _setSpecies = function _setSpecies(KEY) {
      var C = typeof _core[KEY] == 'function' ? _core[KEY] : _global[KEY];
      if (_descriptors && C && !C[SPECIES]) _objectDp.f(C, SPECIES, {
        configurable: true,
        get: function get() {
          return this;
        }
      });
    };

    var _validateCollection = function _validateCollection(it, TYPE) {
      if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
      return it;
    };

    var dP$2 = _objectDp.f;
    var fastKey = _meta.fastKey;
    var SIZE = _descriptors ? '_s' : 'size';

    var getEntry = function getEntry(that, key) {
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return that._i[index];

      for (entry = that._f; entry; entry = entry.n) {
        if (entry.k == key) return entry;
      }
    };

    var _collectionStrong = {
      getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          _anInstance(that, C, NAME, '_i');

          that._t = NAME;
          that._i = _objectCreate(null);
          that._f = undefined;
          that._l = undefined;
          that[SIZE] = 0;
          if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
        });

        _redefineAll(C.prototype, {
          clear: function clear() {
            for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
              entry.r = true;
              if (entry.p) entry.p = entry.p.n = undefined;
              delete data[entry.i];
            }

            that._f = that._l = undefined;
            that[SIZE] = 0;
          },
          'delete': function _delete(key) {
            var that = _validateCollection(this, NAME);

            var entry = getEntry(that, key);

            if (entry) {
              var next = entry.n;
              var prev = entry.p;
              delete that._i[entry.i];
              entry.r = true;
              if (prev) prev.n = next;
              if (next) next.p = prev;
              if (that._f == entry) that._f = next;
              if (that._l == entry) that._l = prev;
              that[SIZE]--;
            }

            return !!entry;
          },
          forEach: function forEach(callbackfn) {
            _validateCollection(this, NAME);

            var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);

            var entry;

            while (entry = entry ? entry.n : this._f) {
              f(entry.v, entry.k, this);

              while (entry && entry.r) {
                entry = entry.p;
              }
            }
          },
          has: function has(key) {
            return !!getEntry(_validateCollection(this, NAME), key);
          }
        });

        if (_descriptors) dP$2(C.prototype, 'size', {
          get: function get() {
            return _validateCollection(this, NAME)[SIZE];
          }
        });
        return C;
      },
      def: function def(that, key, value) {
        var entry = getEntry(that, key);
        var prev, index;

        if (entry) {
          entry.v = value;
        } else {
          that._l = entry = {
            i: index = fastKey(key, true),
            k: key,
            v: value,
            p: prev = that._l,
            n: undefined,
            r: false
          };
          if (!that._f) that._f = entry;
          if (prev) prev.n = entry;
          that[SIZE]++;
          if (index !== 'F') that._i[index] = entry;
        }

        return that;
      },
      getEntry: getEntry,
      setStrong: function setStrong(C, NAME, IS_MAP) {
        _iterDefine(C, NAME, function (iterated, kind) {
          this._t = _validateCollection(iterated, NAME);
          this._k = kind;
          this._l = undefined;
        }, function () {
          var that = this;
          var kind = that._k;
          var entry = that._l;

          while (entry && entry.r) {
            entry = entry.p;
          }

          if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
            that._t = undefined;
            return _iterStep(1);
          }

          if (kind == 'keys') return _iterStep(0, entry.k);
          if (kind == 'values') return _iterStep(0, entry.v);
          return _iterStep(0, [entry.k, entry.v]);
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

        _setSpecies(NAME);
      }
    };

    var SPECIES$1 = _wks('species');

    var _arraySpeciesConstructor = function _arraySpeciesConstructor(original) {
      var C;

      if (_isArray(original)) {
        C = original.constructor;
        if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;

        if (_isObject(C)) {
          C = C[SPECIES$1];
          if (C === null) C = undefined;
        }
      }

      return C === undefined ? Array : C;
    };

    var _arraySpeciesCreate = function _arraySpeciesCreate(original, length) {
      return new (_arraySpeciesConstructor(original))(length);
    };

    var _arrayMethods = function _arrayMethods(TYPE, $create) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      var create = $create || _arraySpeciesCreate;
      return function ($this, callbackfn, that) {
        var O = _toObject($this);

        var self = _iobject(O);

        var f = _ctx(callbackfn, that, 3);

        var length = _toLength(self.length);

        var index = 0;
        var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
        var val, res;

        for (; length > index; index++) {
          if (NO_HOLES || index in self) {
            val = self[index];
            res = f(val, index, O);

            if (TYPE) {
              if (IS_MAP) result[index] = res;else if (res) switch (TYPE) {
                  case 3:
                    return true;

                  case 5:
                    return val;

                  case 6:
                    return index;

                  case 2:
                    result.push(val);
                } else if (IS_EVERY) return false;
            }
          }
        }

        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
      };
    };

    var dP$3 = _objectDp.f;

    var each = _arrayMethods(0);

    var _collection = function _collection(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
      var Base = _global[NAME];
      var C = Base;
      var ADDER = IS_MAP ? 'set' : 'add';
      var proto = C && C.prototype;
      var O = {};

      if (!_descriptors || typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {
        new C().entries().next();
      }))) {
        C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);

        _redefineAll(C.prototype, methods);

        _meta.NEED = true;
      } else {
        C = wrapper(function (target, iterable) {
          _anInstance(target, C, NAME, '_c');

          target._c = new Base();
          if (iterable != undefined) _forOf(iterable, IS_MAP, target[ADDER], target);
        });
        each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
          var IS_ADDER = KEY == 'add' || KEY == 'set';
          if (KEY in proto && !(IS_WEAK && KEY == 'clear')) _hide(C.prototype, KEY, function (a, b) {
            _anInstance(this, C, KEY);

            if (!IS_ADDER && IS_WEAK && !_isObject(a)) return KEY == 'get' ? undefined : false;

            var result = this._c[KEY](a === 0 ? 0 : a, b);

            return IS_ADDER ? this : result;
          });
        });
        IS_WEAK || dP$3(C.prototype, 'size', {
          get: function get() {
            return this._c.size;
          }
        });
      }

      _setToStringTag(C, NAME);

      O[NAME] = C;

      _export(_export.G + _export.W + _export.F, O);

      if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
      return C;
    };

    var MAP = 'Map';

    var es6_map = _collection(MAP, function (get) {
      return function Map() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    }, {
      get: function get(key) {
        var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);

        return entry && entry.v;
      },
      set: function set(key, value) {
        return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);
      }
    }, _collectionStrong, true);

    var _arrayFromIterable = function _arrayFromIterable(iter, ITERATOR) {
      var result = [];

      _forOf(iter, false, result.push, result, ITERATOR);

      return result;
    };

    var _collectionToJson = function _collectionToJson(NAME) {
      return function toJSON() {
        if (_classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
        return _arrayFromIterable(this);
      };
    };

    _export(_export.P + _export.R, 'Map', {
      toJSON: _collectionToJson('Map')
    });

    var _setCollectionOf = function _setCollectionOf(COLLECTION) {
      _export(_export.S, COLLECTION, {
        of: function of() {
          var length = arguments.length;
          var A = new Array(length);

          while (length--) {
            A[length] = arguments[length];
          }

          return new this(A);
        }
      });
    };

    _setCollectionOf('Map');

    var _setCollectionFrom = function _setCollectionFrom(COLLECTION) {
      _export(_export.S, COLLECTION, {
        from: function from(source) {
          var mapFn = arguments[1];
          var mapping, A, n, cb;

          _aFunction(this);

          mapping = mapFn !== undefined;
          if (mapping) _aFunction(mapFn);
          if (source == undefined) return new this();
          A = [];

          if (mapping) {
            n = 0;
            cb = _ctx(mapFn, arguments[2], 2);

            _forOf(source, false, function (nextItem) {
              A.push(cb(nextItem, n++));
            });
          } else {
            _forOf(source, false, A.push, A);
          }

          return new this(A);
        }
      });
    };

    _setCollectionFrom('Map');

    var map = _core.Map;
    var map$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": map,
        __esModule: true
      };
    });

    var _Map = unwrapExports(map$1);

    var colorName = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
    var conversions = createCommonjsModule(function (module) {
      var reverseKeywords = {};

      for (var key in colorName) {
        if (colorName.hasOwnProperty(key)) {
          reverseKeywords[colorName[key]] = key;
        }
      }

      var convert = module.exports = {
        rgb: {
          channels: 3,
          labels: 'rgb'
        },
        hsl: {
          channels: 3,
          labels: 'hsl'
        },
        hsv: {
          channels: 3,
          labels: 'hsv'
        },
        hwb: {
          channels: 3,
          labels: 'hwb'
        },
        cmyk: {
          channels: 4,
          labels: 'cmyk'
        },
        xyz: {
          channels: 3,
          labels: 'xyz'
        },
        lab: {
          channels: 3,
          labels: 'lab'
        },
        lch: {
          channels: 3,
          labels: 'lch'
        },
        hex: {
          channels: 1,
          labels: ['hex']
        },
        keyword: {
          channels: 1,
          labels: ['keyword']
        },
        ansi16: {
          channels: 1,
          labels: ['ansi16']
        },
        ansi256: {
          channels: 1,
          labels: ['ansi256']
        },
        hcg: {
          channels: 3,
          labels: ['h', 'c', 'g']
        },
        apple: {
          channels: 3,
          labels: ['r16', 'g16', 'b16']
        },
        gray: {
          channels: 1,
          labels: ['gray']
        }
      };

      for (var model in convert) {
        if (convert.hasOwnProperty(model)) {
          if (!('channels' in convert[model])) {
            throw new Error('missing channels property: ' + model);
          }

          if (!('labels' in convert[model])) {
            throw new Error('missing channel labels property: ' + model);
          }

          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error('channel and label counts mismatch: ' + model);
          }

          var channels = convert[model].channels;
          var labels = convert[model].labels;
          delete convert[model].channels;
          delete convert[model].labels;
          Object.defineProperty(convert[model], 'channels', {
            value: channels
          });
          Object.defineProperty(convert[model], 'labels', {
            value: labels
          });
        }
      }

      convert.rgb.hsl = function (rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var h;
        var s;
        var l;

        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }

        h = Math.min(h * 60, 360);

        if (h < 0) {
          h += 360;
        }

        l = (min + max) / 2;

        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }

        return [h, s * 100, l * 100];
      };

      convert.rgb.hsv = function (rgb) {
        var rdif;
        var gdif;
        var bdif;
        var h;
        var s;
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var v = Math.max(r, g, b);
        var diff = v - Math.min(r, g, b);

        var diffc = function diffc(c) {
          return (v - c) / 6 / diff + 0.5;
        };

        if (diff === 0) {
          h = s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);

          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 0.3333333333333333 + rdif - bdif;
          } else if (b === v) {
            h = 0.6666666666666666 + gdif - rdif;
          }

          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }

        return [h * 360, s * 100, v * 100];
      };

      convert.rgb.hwb = function (rgb) {
        var r = rgb[0];
        var g = rgb[1];
        var b = rgb[2];
        var h = convert.rgb.hsl(rgb)[0];
        var w = 0.00392156862745098 * Math.min(r, Math.min(g, b));
        b = 1 - 0.00392156862745098 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };

      convert.rgb.cmyk = function (rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var c;
        var m;
        var y;
        var k;
        k = Math.min(1 - r, 1 - g, 1 - b);
        c = (1 - r - k) / (1 - k) || 0;
        m = (1 - g - k) / (1 - k) || 0;
        y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };

      function comparativeDistance(x, y) {
        return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
      }

      convert.rgb.keyword = function (rgb) {
        var reversed = reverseKeywords[rgb];

        if (reversed) {
          return reversed;
        }

        var currentClosestDistance = Infinity;
        var currentClosestKeyword;

        for (var keyword in colorName) {
          if (colorName.hasOwnProperty(keyword)) {
            var value = colorName[keyword];
            var distance = comparativeDistance(rgb, value);

            if (distance < currentClosestDistance) {
              currentClosestDistance = distance;
              currentClosestKeyword = keyword;
            }
          }
        }

        return currentClosestKeyword;
      };

      convert.keyword.rgb = function (keyword) {
        return colorName[keyword];
      };

      convert.rgb.xyz = function (rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
        g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
        b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
        var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };

      convert.rgb.lab = function (rgb) {
        var xyz = convert.rgb.xyz(rgb);
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
        y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
        z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
        l = 116 * y - 16;
        a = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a, b];
      };

      convert.hsl.rgb = function (hsl) {
        var h = hsl[0] / 360;
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var t1;
        var t2;
        var t3;
        var rgb;
        var val;

        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }

        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }

        t1 = 2 * l - t2;
        rgb = [0, 0, 0];

        for (var i = 0; i < 3; i++) {
          t3 = h + 0.3333333333333333 * -(i - 1);

          if (t3 < 0) {
            t3++;
          }

          if (t3 > 1) {
            t3--;
          }

          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (0.6666666666666666 - t3) * 6;
          } else {
            val = t1;
          }

          rgb[i] = val * 255;
        }

        return rgb;
      };

      convert.hsl.hsv = function (hsl) {
        var h = hsl[0];
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var smin = s;
        var lmin = Math.max(l, 0.01);
        var sv;
        var v;
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        v = (l + s) / 2;
        sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };

      convert.hsv.rgb = function (hsv) {
        var h = hsv[0] / 60;
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var hi = Math.floor(h) % 6;
        var f = h - Math.floor(h);
        var p = 255 * v * (1 - s);
        var q = 255 * v * (1 - s * f);
        var t = 255 * v * (1 - s * (1 - f));
        v *= 255;

        switch (hi) {
          case 0:
            return [v, t, p];

          case 1:
            return [q, v, p];

          case 2:
            return [p, v, t];

          case 3:
            return [p, q, v];

          case 4:
            return [t, p, v];

          case 5:
            return [v, p, q];
        }
      };

      convert.hsv.hsl = function (hsv) {
        var h = hsv[0];
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var vmin = Math.max(v, 0.01);
        var lmin;
        var sl;
        var l;
        l = (2 - s) * v;
        lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };

      convert.hwb.rgb = function (hwb) {
        var h = hwb[0] / 360;
        var wh = hwb[1] / 100;
        var bl = hwb[2] / 100;
        var ratio = wh + bl;
        var i;
        var v;
        var f;
        var n;

        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }

        i = Math.floor(6 * h);
        v = 1 - bl;
        f = 6 * h - i;

        if ((i & 0x01) !== 0) {
          f = 1 - f;
        }

        n = wh + f * (v - wh);
        var r;
        var g;
        var b;

        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;

          case 1:
            r = n;
            g = v;
            b = wh;
            break;

          case 2:
            r = wh;
            g = v;
            b = n;
            break;

          case 3:
            r = wh;
            g = n;
            b = v;
            break;

          case 4:
            r = n;
            g = wh;
            b = v;
            break;

          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }

        return [r * 255, g * 255, b * 255];
      };

      convert.cmyk.rgb = function (cmyk) {
        var c = cmyk[0] / 100;
        var m = cmyk[1] / 100;
        var y = cmyk[2] / 100;
        var k = cmyk[3] / 100;
        var r;
        var g;
        var b;
        r = 1 - Math.min(1, c * (1 - k) + k);
        g = 1 - Math.min(1, m * (1 - k) + k);
        b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };

      convert.xyz.rgb = function (xyz) {
        var x = xyz[0] / 100;
        var y = xyz[1] / 100;
        var z = xyz[2] / 100;
        var r;
        var g;
        var b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.0570;
        r = r > 0.0031308 ? 1.055 * Math.pow(r, 0.4166666666666667) - 0.055 : r * 12.92;
        g = g > 0.0031308 ? 1.055 * Math.pow(g, 0.4166666666666667) - 0.055 : g * 12.92;
        b = b > 0.0031308 ? 1.055 * Math.pow(b, 0.4166666666666667) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };

      convert.xyz.lab = function (xyz) {
        var x = xyz[0];
        var y = xyz[1];
        var z = xyz[2];
        var l;
        var a;
        var b;
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
        y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
        z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
        l = 116 * y - 16;
        a = 500 * (x - y);
        b = 200 * (y - z);
        return [l, a, b];
      };

      convert.lab.xyz = function (lab) {
        var l = lab[0];
        var a = lab[1];
        var b = lab[2];
        var x;
        var y;
        var z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        var y2 = Math.pow(y, 3);
        var x2 = Math.pow(x, 3);
        var z2 = Math.pow(z, 3);
        y = y2 > 0.008856 ? y2 : (y - 0.13793103448275862) / 7.787;
        x = x2 > 0.008856 ? x2 : (x - 0.13793103448275862) / 7.787;
        z = z2 > 0.008856 ? z2 : (z - 0.13793103448275862) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };

      convert.lab.lch = function (lab) {
        var l = lab[0];
        var a = lab[1];
        var b = lab[2];
        var hr;
        var h;
        var c;
        hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;

        if (h < 0) {
          h += 360;
        }

        c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };

      convert.lch.lab = function (lch) {
        var l = lch[0];
        var c = lch[1];
        var h = lch[2];
        var a;
        var b;
        var hr;
        hr = h / 360 * 2 * Math.PI;
        a = c * Math.cos(hr);
        b = c * Math.sin(hr);
        return [l, a, b];
      };

      convert.rgb.ansi16 = function (args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];
        var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
        value = Math.round(value / 50);

        if (value === 0) {
          return 30;
        }

        var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

        if (value === 2) {
          ansi += 60;
        }

        return ansi;
      };

      convert.hsv.ansi16 = function (args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };

      convert.rgb.ansi256 = function (args) {
        var r = args[0];
        var g = args[1];
        var b = args[2];

        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }

          if (r > 248) {
            return 231;
          }

          return Math.round((r - 8) / 247 * 24) + 232;
        }

        var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };

      convert.ansi16.rgb = function (args) {
        var color = args % 10;

        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }

          color = color / 10.5 * 255;
          return [color, color, color];
        }

        var mult = (~~(args > 50) + 1) * 0.5;
        var r = (color & 1) * mult * 255;
        var g = (color >> 1 & 1) * mult * 255;
        var b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };

      convert.ansi256.rgb = function (args) {
        if (args >= 232) {
          var c = (args - 232) * 10 + 8;
          return [c, c, c];
        }

        args -= 16;
        var rem;
        var r = Math.floor(args / 36) / 5 * 255;
        var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        var b = rem % 6 / 5 * 255;
        return [r, g, b];
      };

      convert.rgb.hex = function (args) {
        var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
        var string = integer.toString(16).toUpperCase();
        return '000000'.substring(string.length) + string;
      };

      convert.hex.rgb = function (args) {
        var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

        if (!match) {
          return [0, 0, 0];
        }

        var colorString = match[0];

        if (match[0].length === 3) {
          colorString = colorString.split('').map(function (char) {
            return char + char;
          }).join('');
        }

        var integer = parseInt(colorString, 16);
        var r = integer >> 16 & 0xFF;
        var g = integer >> 8 & 0xFF;
        var b = integer & 0xFF;
        return [r, g, b];
      };

      convert.rgb.hcg = function (rgb) {
        var r = rgb[0] / 255;
        var g = rgb[1] / 255;
        var b = rgb[2] / 255;
        var max = Math.max(Math.max(r, g), b);
        var min = Math.min(Math.min(r, g), b);
        var chroma = max - min;
        var grayscale;
        var hue;

        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }

        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma + 4;
        }

        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };

      convert.hsl.hcg = function (hsl) {
        var s = hsl[1] / 100;
        var l = hsl[2] / 100;
        var c = 1;
        var f = 0;

        if (l < 0.5) {
          c = 2.0 * s * l;
        } else {
          c = 2.0 * s * (1.0 - l);
        }

        if (c < 1.0) {
          f = (l - 0.5 * c) / (1.0 - c);
        }

        return [hsl[0], c * 100, f * 100];
      };

      convert.hsv.hcg = function (hsv) {
        var s = hsv[1] / 100;
        var v = hsv[2] / 100;
        var c = s * v;
        var f = 0;

        if (c < 1.0) {
          f = (v - c) / (1 - c);
        }

        return [hsv[0], c * 100, f * 100];
      };

      convert.hcg.rgb = function (hcg) {
        var h = hcg[0] / 360;
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;

        if (c === 0.0) {
          return [g * 255, g * 255, g * 255];
        }

        var pure = [0, 0, 0];
        var hi = h % 1 * 6;
        var v = hi % 1;
        var w = 1 - v;
        var mg = 0;

        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;

          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;

          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;

          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;

          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;

          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }

        mg = (1.0 - c) * g;
        return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
      };

      convert.hcg.hsv = function (hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1.0 - c);
        var f = 0;

        if (v > 0.0) {
          f = c / v;
        }

        return [hcg[0], f * 100, v * 100];
      };

      convert.hcg.hsl = function (hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var l = g * (1.0 - c) + 0.5 * c;
        var s = 0;

        if (l > 0.0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1.0) {
          s = c / (2 * (1 - l));
        }

        return [hcg[0], s * 100, l * 100];
      };

      convert.hcg.hwb = function (hcg) {
        var c = hcg[1] / 100;
        var g = hcg[2] / 100;
        var v = c + g * (1.0 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };

      convert.hwb.hcg = function (hwb) {
        var w = hwb[1] / 100;
        var b = hwb[2] / 100;
        var v = 1 - b;
        var c = v - w;
        var g = 0;

        if (c < 1) {
          g = (v - c) / (1 - c);
        }

        return [hwb[0], c * 100, g * 100];
      };

      convert.apple.rgb = function (apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };

      convert.rgb.apple = function (rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };

      convert.gray.rgb = function (args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };

      convert.gray.hsl = convert.gray.hsv = function (args) {
        return [0, 0, args[0]];
      };

      convert.gray.hwb = function (gray) {
        return [0, 100, gray[0]];
      };

      convert.gray.cmyk = function (gray) {
        return [0, 0, 0, gray[0]];
      };

      convert.gray.lab = function (gray) {
        return [gray[0], 0, 0];
      };

      convert.gray.hex = function (gray) {
        var val = Math.round(gray[0] / 100 * 255) & 0xFF;
        var integer = (val << 16) + (val << 8) + val;
        var string = integer.toString(16).toUpperCase();
        return '000000'.substring(string.length) + string;
      };

      convert.rgb.gray = function (rgb) {
        var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    });
    var conversions_1 = conversions.rgb;
    var conversions_2 = conversions.hsl;
    var conversions_3 = conversions.hsv;
    var conversions_4 = conversions.hwb;
    var conversions_5 = conversions.cmyk;
    var conversions_6 = conversions.xyz;
    var conversions_7 = conversions.lab;
    var conversions_8 = conversions.lch;
    var conversions_9 = conversions.hex;
    var conversions_10 = conversions.keyword;
    var conversions_11 = conversions.ansi16;
    var conversions_12 = conversions.ansi256;
    var conversions_13 = conversions.hcg;
    var conversions_14 = conversions.apple;
    var conversions_15 = conversions.gray;

    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);

      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          distance: -1,
          parent: null
        };
      }

      return graph;
    }

    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;

      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);

        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];

          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }

      return graph;
    }

    function link(from, to) {
      return function (args) {
        return to(from(args));
      };
    }

    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;

      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }

      fn.conversion = path;
      return fn;
    }

    var route = function route(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);

      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];

        if (node.parent === null) {
          continue;
        }

        conversion[toModel] = wrapConversion(toModel, graph);
      }

      return conversion;
    };

    var convert = {};
    var models = Object.keys(conversions);

    function wrapRaw(fn) {
      var wrappedFn = function wrappedFn(args) {
        if (args === undefined || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        return fn(args);
      };

      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    function wrapRounded(fn) {
      var wrappedFn = function wrappedFn(args) {
        if (args === undefined || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        var result = fn(args);

        if (typeof result === 'object') {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }

        return result;
      };

      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    models.forEach(function (fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], 'channels', {
        value: conversions[fromModel].channels
      });
      Object.defineProperty(convert[fromModel], 'labels', {
        value: conversions[fromModel].labels
      });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function (toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    var colorConvert = convert;
    var ansiStyles = createCommonjsModule(function (module) {
      var wrapAnsi16 = function wrapAnsi16(fn, offset) {
        return function () {
          var code = fn.apply(colorConvert, arguments);
          return '\x1B[' + (code + offset) + 'm';
        };
      };

      var wrapAnsi256 = function wrapAnsi256(fn, offset) {
        return function () {
          var code = fn.apply(colorConvert, arguments);
          return '\x1B[' + (38 + offset) + ';5;' + code + 'm';
        };
      };

      var wrapAnsi16m = function wrapAnsi16m(fn, offset) {
        return function () {
          var rgb = fn.apply(colorConvert, arguments);
          return '\x1B[' + (38 + offset) + ';2;' + rgb[0] + ';' + rgb[1] + ';' + rgb[2] + 'm';
        };
      };

      function assembleStyles() {
        var codes = new _Map();
        var styles = {
          modifier: {
            reset: [0, 0],
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            gray: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.grey = styles.color.gray;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(_Object$keys(styles)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var groupName = _step.value;
            var group = styles[groupName];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = _getIterator(_Object$keys(group)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var styleName = _step3.value;
                var style = group[styleName];
                styles[styleName] = {
                  open: '\x1B[' + style[0] + 'm',
                  close: '\x1B[' + style[1] + 'm'
                };
                group[styleName] = styles[styleName];
                codes.set(style[0], style[1]);
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            _Object$defineProperty(styles, groupName, {
              value: group,
              enumerable: false
            });

            Object.defineProperty(styles, 'codes', {
              value: codes,
              enumerable: false
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var ansi2ansi = function ansi2ansi(n) {
          return n;
        };

        var rgb2rgb = function rgb2rgb(r, g, b) {
          return [r, g, b];
        };

        styles.color.close = '\x1B[39m';
        styles.bgColor.close = '\x1B[49m';
        styles.color.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 0)
        };
        styles.color.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 0)
        };
        styles.color.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 0)
        };
        styles.bgColor.ansi = {
          ansi: wrapAnsi16(ansi2ansi, 10)
        };
        styles.bgColor.ansi256 = {
          ansi256: wrapAnsi256(ansi2ansi, 10)
        };
        styles.bgColor.ansi16m = {
          rgb: wrapAnsi16m(rgb2rgb, 10)
        };
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _getIterator(_Object$keys(colorConvert)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            if (_typeof(colorConvert[key]) !== 'object') {
              continue;
            }

            var suite = colorConvert[key];

            if (key === 'ansi16') {
              key = 'ansi';
            }

            if ('ansi16' in suite) {
              styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
              styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
            }

            if ('ansi256' in suite) {
              styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
              styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
            }

            if ('rgb' in suite) {
              styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
              styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return styles;
      }

      Object.defineProperty(module, 'exports', {
        enumerable: true,
        get: assembleStyles
      });
    });
    var getOwnPropertySymbols = _core.Object.getOwnPropertySymbols;
    var getOwnPropertySymbols$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": getOwnPropertySymbols,
        __esModule: true
      };
    });

    var _Object$getOwnPropertySymbols = unwrapExports(getOwnPropertySymbols$1);

    var getSymbols = _Object$getOwnPropertySymbols || function (obj) {
      return [];
    };

    var isSymbol$1 = function isSymbol(key) {
      return (typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'symbol' || toString.call(key) === '[object Symbol]';
    };

    function printIteratorEntries(iterator, config, indentation, depth, refs, printer) {
      var separator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ': ';
      var result = '';
      var current = iterator.next();

      if (!current.done) {
        result += config.spacingOuter;
        var indentationNext = indentation + config.indent;

        while (!current.done) {
          var name = printer(current.value[0], config, indentationNext, depth, refs);
          var value = printer(current.value[1], config, indentationNext, depth, refs);
          result += indentationNext + name + separator + value;
          current = iterator.next();

          if (!current.done) {
            result += ',' + config.spacingInner;
          } else if (!config.min) {
            result += ',';
          }
        }

        result += config.spacingOuter + indentation;
      }

      return result;
    }

    function printIteratorValues(iterator, config, indentation, depth, refs, printer) {
      var result = '';
      var current = iterator.next();

      if (!current.done) {
        result += config.spacingOuter;
        var indentationNext = indentation + config.indent;

        while (!current.done) {
          result += indentationNext + printer(current.value, config, indentationNext, depth, refs);
          current = iterator.next();

          if (!current.done) {
            result += ',' + config.spacingInner;
          } else if (!config.min) {
            result += ',';
          }
        }

        result += config.spacingOuter + indentation;
      }

      return result;
    }

    function printListItems(list, config, indentation, depth, refs, printer) {
      var result = '';

      if (list.length) {
        result += config.spacingOuter;
        var indentationNext = indentation + config.indent;

        for (var i = 0; i < list.length; i++) {
          result += indentationNext + printer(list[i], config, indentationNext, depth, refs);

          if (i < list.length - 1) {
            result += ',' + config.spacingInner;
          } else if (!config.min) {
            result += ',';
          }
        }

        result += config.spacingOuter + indentation;
      }

      return result;
    }

    function printObjectProperties(val, config, indentation, depth, refs, printer) {
      var result = '';

      var keys = _Object$keys(val).sort();

      var symbols = getSymbols(val);

      if (symbols.length) {
        keys = keys.filter(function (key) {
          return !isSymbol$1(key);
        }).concat(symbols);
      }

      if (keys.length) {
        result += config.spacingOuter;
        var indentationNext = indentation + config.indent;

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var name = printer(key, config, indentationNext, depth, refs);
          var value = printer(val[key], config, indentationNext, depth, refs);
          result += indentationNext + name + ': ' + value;

          if (i < keys.length - 1) {
            result += ',' + config.spacingInner;
          } else if (!config.min) {
            result += ',';
          }
        }

        result += config.spacingOuter + indentation;
      }

      return result;
    }

    var _for = _core.Symbol['for'];

    var _for$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": _for,
        __esModule: true
      };
    });

    var _Symbol$for = unwrapExports(_for$1);

    var asymmetricMatcher = _Symbol$for('jest.asymmetricMatcher');

    var SPACE = ' ';

    var serialize = function serialize(val, config, indentation, depth, refs, printer) {
      var stringedValue = val.toString();

      if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
        if (++depth > config.maxDepth) {
          return '[' + stringedValue + ']';
        }

        return stringedValue + SPACE + '[' + printListItems(val.sample, config, indentation, depth, refs, printer) + ']';
      }

      if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
        if (++depth > config.maxDepth) {
          return '[' + stringedValue + ']';
        }

        return stringedValue + SPACE + '{' + printObjectProperties(val.sample, config, indentation, depth, refs, printer) + '}';
      }

      if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
        return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
      }

      if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
        return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
      }

      return val.toAsymmetricMatcher();
    };

    var test = function test(val) {
      return val && val.$$typeof === asymmetricMatcher;
    };

    var AsymmetricMatcher = {
      serialize: serialize,
      test: test
    };
    var ansiRegex = createCommonjsModule(function (module) {
      module.exports = function () {
        var pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)", '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'].join('|');
        return new RegExp(pattern, 'g');
      };
    });

    var toHumanReadableAnsi = function toHumanReadableAnsi(text) {
      return text.replace(ansiRegex(), function (match, offset, string) {
        switch (match) {
          case ansiStyles.red.close:
          case ansiStyles.green.close:
          case ansiStyles.cyan.close:
          case ansiStyles.gray.close:
          case ansiStyles.white.close:
          case ansiStyles.yellow.close:
          case ansiStyles.bgRed.close:
          case ansiStyles.bgGreen.close:
          case ansiStyles.bgYellow.close:
          case ansiStyles.inverse.close:
          case ansiStyles.dim.close:
          case ansiStyles.bold.close:
          case ansiStyles.reset.open:
          case ansiStyles.reset.close:
            return '</>';

          case ansiStyles.red.open:
            return '<red>';

          case ansiStyles.green.open:
            return '<green>';

          case ansiStyles.cyan.open:
            return '<cyan>';

          case ansiStyles.gray.open:
            return '<gray>';

          case ansiStyles.white.open:
            return '<white>';

          case ansiStyles.yellow.open:
            return '<yellow>';

          case ansiStyles.bgRed.open:
            return '<bgRed>';

          case ansiStyles.bgGreen.open:
            return '<bgGreen>';

          case ansiStyles.bgYellow.open:
            return '<bgYellow>';

          case ansiStyles.inverse.open:
            return '<inverse>';

          case ansiStyles.dim.open:
            return '<dim>';

          case ansiStyles.bold.open:
            return '<bold>';

          default:
            return '';
        }
      });
    };

    var test$1 = function test(val) {
      return typeof val === 'string' && val.match(ansiRegex());
    };

    var serialize$1 = function serialize(val, config, indentation, depth, refs, printer) {
      return printer(toHumanReadableAnsi(val), config, indentation, depth, refs);
    };

    var ConvertAnsi = {
      serialize: serialize$1,
      test: test$1
    };
    var $assign = Object.assign;

    var _objectAssign = !$assign || _fails(function () {
      var A = {};
      var B = {};
      var S = Symbol();
      var K = 'abcdefghijklmnopqrst';
      A[S] = 7;
      K.split('').forEach(function (k) {
        B[k] = k;
      });
      return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
    }) ? function assign(target, source) {
      var T = _toObject(target);

      var aLen = arguments.length;
      var index = 1;
      var getSymbols = _objectGops.f;
      var isEnum = _objectPie.f;

      while (aLen > index) {
        var S = _iobject(arguments[index++]);

        var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
        var length = keys.length;
        var j = 0;
        var key;

        while (length > j) {
          if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
        }
      }

      return T;
    } : $assign;

    _export(_export.S + _export.F, 'Object', {
      assign: _objectAssign
    });

    var assign = _core.Object.assign;
    var assign$1 = createCommonjsModule(function (module) {
      module.exports = {
        "default": assign,
        __esModule: true
      };
    });

    var _Object$assign = unwrapExports(assign$1);

    var SPACE$1 = ' ';
    var COLLECTION_NAMES = ['DOMStringMap', 'NamedNodeMap'];

    var test$2 = function test(val) {
      return val && val.constructor && COLLECTION_NAMES.indexOf(val.constructor.name) !== -1;
    };

    var convertCollectionToObject = function convertCollectionToObject(collection) {
      var result = {};

      if (collection.constructor.name === 'NamedNodeMap') {
        for (var i = 0; i < collection.length; i++) {
          result[collection[i].name] = collection[i].value;
        }
      } else {
        result = _Object$assign({}, collection);
      }

      return result;
    };

    var serialize$2 = function serialize(collection, config, indentation, depth, refs, printer) {
      if (++depth > config.maxDepth) {
        return '[' + collection.constructor.name + ']';
      }

      return collection.constructor.name + SPACE$1 + '{' + printObjectProperties(convertCollectionToObject(collection), config, indentation, depth, refs, printer) + '}';
    };

    var DOMCollection = {
      serialize: serialize$2,
      test: test$2
    };

    function escapeHTML(str) {
      return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    var printProps = function printProps(keys, props, config, indentation, depth, refs, printer) {
      var indentationNext = indentation + config.indent;
      var colors = config.colors;
      return keys.map(function (key) {
        var value = props[key];
        var printed = printer(value, config, indentationNext, depth, refs);

        if (typeof value !== 'string') {
          if (printed.indexOf('\n') !== -1) {
            printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;
          }

          printed = '{' + printed + '}';
        }

        return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + '=' + colors.value.open + printed + colors.value.close;
      }).join('');
    };

    var printChildren = function printChildren(children, config, indentation, depth, refs, printer) {
      return children.map(function (child) {
        return config.spacingOuter + indentation + (typeof child === 'string' ? printText(child, config) : printer(child, config, indentation, depth, refs));
      }).join('');
    };

    var printText = function printText(text, config) {
      var contentColor = config.colors.content;
      return contentColor.open + escapeHTML(text) + contentColor.close;
    };

    var printComment = function printComment(comment, config) {
      var commentColor = config.colors.comment;
      return commentColor.open + '<!--' + escapeHTML(comment) + '-->' + commentColor.close;
    };

    var printElement = function printElement(type, printedProps, printedChildren, config, indentation) {
      var tagColor = config.colors.tag;
      return tagColor.open + '<' + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? '>' + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + '</' + type : (printedProps && !config.min ? '' : ' ') + '/') + '>' + tagColor.close;
    };

    var printElementAsLeaf = function printElementAsLeaf(type, config) {
      var tagColor = config.colors.tag;
      return tagColor.open + '<' + type + tagColor.close + ' …' + tagColor.open + ' />' + tagColor.close;
    };

    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var FRAGMENT_NODE = 11;
    var ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;

    var testNode = function testNode(nodeType, name) {
      return nodeType === ELEMENT_NODE && ELEMENT_REGEXP.test(name) || nodeType === TEXT_NODE && name === 'Text' || nodeType === COMMENT_NODE && name === 'Comment' || nodeType === FRAGMENT_NODE && name === 'DocumentFragment';
    };

    var test$3 = function test(val) {
      return val && val.constructor && val.constructor.name && testNode(val.nodeType, val.constructor.name);
    };

    var keysMapper = function keysMapper(attribute) {
      return attribute.name;
    };

    var propsReducer = function propsReducer(props, attribute) {
      props[attribute.name] = attribute.value;
      return props;
    };

    var serialize$3 = function serialize(node, config, indentation, depth, refs, printer) {
      if (node.nodeType === TEXT_NODE) {
        return printText(node.data, config);
      }

      if (node.nodeType === COMMENT_NODE) {
        return printComment(node.data, config);
      }

      var type = node.nodeType === FRAGMENT_NODE ? 'DocumentFragment' : node.tagName.toLowerCase();

      if (++depth > config.maxDepth) {
        return printElementAsLeaf(type, config);
      }

      return printElement(type, printProps(Array.prototype.map.call(node.attributes || [], keysMapper).sort(), Array.prototype.reduce.call(node.attributes || [], propsReducer, {}), config, indentation + config.indent, depth, refs, printer), printChildren(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
    };

    var DOMElement = {
      serialize: serialize$3,
      test: test$3
    };
    var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
    var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';
    var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
    var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';
    var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
    var IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@';
    var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';
    var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';
    var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

    var getImmutableName = function getImmutableName(name) {
      return 'Immutable.' + name;
    };

    var printAsLeaf = function printAsLeaf(name) {
      return '[' + name + ']';
    };

    var SPACE$2 = ' ';
    var LAZY = '…';

    var printImmutableEntries = function printImmutableEntries(val, config, indentation, depth, refs, printer, type) {
      return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE$2 + '{' + printIteratorEntries(val.entries(), config, indentation, depth, refs, printer) + '}';
    };

    var getRecordEntries = function getRecordEntries(val) {
      var i = 0;
      return {
        next: function next() {
          if (i < val._keys.length) {
            var key = val._keys[i++];
            return {
              done: false,
              value: [key, val.get(key)]
            };
          }

          return {
            done: true
          };
        }
      };
    };

    var printImmutableRecord = function printImmutableRecord(val, config, indentation, depth, refs, printer) {
      var name = getImmutableName(val._name || 'Record');
      return ++depth > config.maxDepth ? printAsLeaf(name) : name + SPACE$2 + '{' + printIteratorEntries(getRecordEntries(val), config, indentation, depth, refs, printer) + '}';
    };

    var printImmutableSeq = function printImmutableSeq(val, config, indentation, depth, refs, printer) {
      var name = getImmutableName('Seq');

      if (++depth > config.maxDepth) {
        return printAsLeaf(name);
      }

      if (val[IS_KEYED_SENTINEL]) {
        return name + SPACE$2 + '{' + (val._iter || val._object ? printIteratorEntries(val.entries(), config, indentation, depth, refs, printer) : LAZY) + '}';
      }

      return name + SPACE$2 + '[' + (val._iter || val._array || val._collection || val._iterable ? printIteratorValues(val.values(), config, indentation, depth, refs, printer) : LAZY) + ']';
    };

    var printImmutableValues = function printImmutableValues(val, config, indentation, depth, refs, printer, type) {
      return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE$2 + '[' + printIteratorValues(val.values(), config, indentation, depth, refs, printer) + ']';
    };

    var serialize$4 = function serialize(val, config, indentation, depth, refs, printer) {
      if (val[IS_MAP_SENTINEL]) {
        return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');
      }

      if (val[IS_LIST_SENTINEL]) {
        return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');
      }

      if (val[IS_SET_SENTINEL]) {
        return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');
      }

      if (val[IS_STACK_SENTINEL]) {
        return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');
      }

      if (val[IS_SEQ_SENTINEL]) {
        return printImmutableSeq(val, config, indentation, depth, refs, printer);
      }

      return printImmutableRecord(val, config, indentation, depth, refs, printer);
    };

    var test$4 = function test(val) {
      return val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
    };

    var Immutable = {
      serialize: serialize$4,
      test: test$4
    };

    var elementSymbol = _Symbol$for('react.element');

    var fragmentSymbol = _Symbol$for('react.fragment');

    var forwardRefSymbol = _Symbol$for('react.forward_ref');

    var providerSymbol = _Symbol$for('react.provider');

    var contextSymbol = _Symbol$for('react.context');

    var getChildren = function getChildren(arg) {
      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (Array.isArray(arg)) {
        arg.forEach(function (item) {
          getChildren(item, children);
        });
      } else if (arg != null && arg !== false) {
        children.push(arg);
      }

      return children;
    };

    var getType = function getType(element) {
      var type = element.type;

      if (typeof type === 'string') {
        return type;
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || 'Unknown';
      }

      if (type === fragmentSymbol) {
        return 'React.Fragment';
      }

      if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null) {
        if (type.$$typeof === providerSymbol) {
          return 'Context.Provider';
        }

        if (type.$$typeof === contextSymbol) {
          return 'Context.Consumer';
        }

        if (type.$$typeof === forwardRefSymbol) {
          var functionName = type.render.displayName || type.render.name || '';
          return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
        }
      }

      return 'UNDEFINED';
    };

    var getPropKeys = function getPropKeys(element) {
      var props = element.props;
      return _Object$keys(props).filter(function (key) {
        return key !== 'children' && props[key] !== undefined;
      }).sort();
    };

    var serialize$5 = function serialize(element, config, indentation, depth, refs, printer) {
      return ++depth > config.maxDepth ? printElementAsLeaf(getType(element), config) : printElement(getType(element), printProps(getPropKeys(element), element.props, config, indentation + config.indent, depth, refs, printer), printChildren(getChildren(element.props.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
    };

    var test$5 = function test(val) {
      return val && val.$$typeof === elementSymbol;
    };

    var ReactElement = {
      serialize: serialize$5,
      test: test$5
    };

    var testSymbol = _Symbol$for('react.test.json');

    var getPropKeys$1 = function getPropKeys(object) {
      var props = object.props;
      return props ? _Object$keys(props).filter(function (key) {
        return props[key] !== undefined;
      }).sort() : [];
    };

    var serialize$6 = function serialize(object, config, indentation, depth, refs, printer) {
      return ++depth > config.maxDepth ? printElementAsLeaf(object.type, config) : printElement(object.type, object.props ? printProps(getPropKeys$1(object), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? printChildren(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
    };

    var test$6 = function test(val) {
      return val && val.$$typeof === testSymbol;
    };

    var ReactTestComponent = {
      serialize: serialize$6,
      test: test$6
    };
    var toString$3 = Object.prototype.toString;
    var toISOString = Date.prototype.toISOString;
    var errorToString = Error.prototype.toString;
    var regExpToString = RegExp.prototype.toString;
    var symbolToString = _Symbol.prototype.toString;

    var getConstructorName = function getConstructorName(val) {
      return typeof val.constructor === 'function' && val.constructor.name || 'Object';
    };

    var isWindow = function isWindow(val) {
      return typeof window !== 'undefined' && val === window;
    };

    var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
    var NEWLINE_REGEXP = /\n/gi;

    var PrettyFormatPluginError = function (_Error) {
      _inherits(PrettyFormatPluginError, _Error);

      function PrettyFormatPluginError(message, stack) {
        _classCallCheck(this, PrettyFormatPluginError);

        var _this = _possibleConstructorReturn(this, (PrettyFormatPluginError.__proto__ || _Object$getPrototypeOf(PrettyFormatPluginError)).call(this, message));

        _this.stack = stack;
        _this.name = _this.constructor.name;
        return _this;
      }

      return PrettyFormatPluginError;
    }(Error);

    function isToStringedArrayType(toStringed) {
      return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
    }

    function printNumber(val) {
      return _Object$is(val, -0) ? '-0' : String(val);
    }

    function printFunction(val, printFunctionName) {
      if (!printFunctionName) {
        return '[Function]';
      }

      return '[Function ' + (val.name || 'anonymous') + ']';
    }

    function printSymbol(val) {
      return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
    }

    function printError(val) {
      return '[' + errorToString.call(val) + ']';
    }

    function printBasicValue(val, printFunctionName, escapeRegex) {
      if (val === true || val === false) {
        return '' + val;
      }

      if (val === undefined) {
        return 'undefined';
      }

      if (val === null) {
        return 'null';
      }

      var typeOf = typeof val === 'undefined' ? 'undefined' : _typeof(val);

      if (typeOf === 'number') {
        return printNumber(val);
      }

      if (typeOf === 'string') {
        return '"' + val.replace(/"|\\/g, '\\$&') + '"';
      }

      if (typeOf === 'function') {
        return printFunction(val, printFunctionName);
      }

      if (typeOf === 'symbol') {
        return printSymbol(val);
      }

      var toStringed = toString$3.call(val);

      if (toStringed === '[object WeakMap]') {
        return 'WeakMap {}';
      }

      if (toStringed === '[object WeakSet]') {
        return 'WeakSet {}';
      }

      if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') {
        return printFunction(val, printFunctionName);
      }

      if (toStringed === '[object Symbol]') {
        return printSymbol(val);
      }

      if (toStringed === '[object Date]') {
        return isNaN(+val) ? 'Date { NaN }' : toISOString.call(val);
      }

      if (toStringed === '[object Error]') {
        return printError(val);
      }

      if (toStringed === '[object RegExp]') {
        if (escapeRegex) {
          return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        return regExpToString.call(val);
      }

      if (val instanceof Error) {
        return printError(val);
      }

      return null;
    }

    function printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {
      if (refs.indexOf(val) !== -1) {
        return '[Circular]';
      }

      refs = refs.slice();
      refs.push(val);
      var hitMaxDepth = ++depth > config.maxDepth;
      var min = config.min;

      if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function' && !hasCalledToJSON) {
        return printer(val.toJSON(), config, indentation, depth, refs, true);
      }

      var toStringed = toString$3.call(val);

      if (toStringed === '[object Arguments]') {
        return hitMaxDepth ? '[Arguments]' : (min ? '' : 'Arguments ') + '[' + printListItems(val, config, indentation, depth, refs, printer) + ']';
      }

      if (isToStringedArrayType(toStringed)) {
        return hitMaxDepth ? '[' + val.constructor.name + ']' : (min ? '' : val.constructor.name + ' ') + '[' + printListItems(val, config, indentation, depth, refs, printer) + ']';
      }

      if (toStringed === '[object Map]') {
        return hitMaxDepth ? '[Map]' : 'Map {' + printIteratorEntries(val.entries(), config, indentation, depth, refs, printer, ' => ') + '}';
      }

      if (toStringed === '[object Set]') {
        return hitMaxDepth ? '[Set]' : 'Set {' + printIteratorValues(val.values(), config, indentation, depth, refs, printer) + '}';
      }

      return hitMaxDepth || isWindow(val) ? '[' + getConstructorName(val) + ']' : (min ? '' : getConstructorName(val) + ' ') + '{' + printObjectProperties(val, config, indentation, depth, refs, printer) + '}';
    }

    function printPlugin(plugin, val, config, indentation, depth, refs) {
      var printed = undefined;

      try {
        printed = plugin.serialize ? plugin.serialize(val, config, indentation, depth, refs, printer) : plugin.print(val, function (valChild) {
          return printer(valChild, config, indentation, depth, refs);
        }, function (str) {
          var indentationNext = indentation + config.indent;
          return indentationNext + str.replace(NEWLINE_REGEXP, '\n' + indentationNext);
        }, {
          edgeSpacing: config.spacingOuter,
          min: config.min,
          spacing: config.spacingInner
        }, config.colors);
      } catch (error) {
        throw new PrettyFormatPluginError(error.message, error.stack);
      }

      if (typeof printed !== 'string') {
        throw new Error('pretty-format: Plugin must return type "string" but instead returned "' + (typeof printed === 'undefined' ? 'undefined' : _typeof(printed)) + '".');
      }

      return printed;
    }

    function findPlugin(plugins, val) {
      for (var p = 0; p < plugins.length; p++) {
        try {
          if (plugins[p].test(val)) {
            return plugins[p];
          }
        } catch (error) {
          throw new PrettyFormatPluginError(error.message, error.stack);
        }
      }

      return null;
    }

    function printer(val, config, indentation, depth, refs, hasCalledToJSON) {
      var plugin = findPlugin(config.plugins, val);

      if (plugin !== null) {
        return printPlugin(plugin, val, config, indentation, depth, refs);
      }

      var basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex);

      if (basicResult !== null) {
        return basicResult;
      }

      return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);
    }

    var DEFAULT_THEME = {
      comment: 'gray',
      content: 'reset',
      prop: 'yellow',
      tag: 'cyan',
      value: 'green'
    };

    var DEFAULT_THEME_KEYS = _Object$keys(DEFAULT_THEME);

    var DEFAULT_OPTIONS = {
      callToJSON: true,
      escapeRegex: false,
      highlight: false,
      indent: 2,
      maxDepth: Infinity,
      min: false,
      plugins: [],
      printFunctionName: true,
      theme: DEFAULT_THEME
    };

    function validateOptions(options) {
      _Object$keys(options).forEach(function (key) {
        if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
          throw new Error('pretty-format: Unknown option "' + key + '".');
        }
      });

      if (options.min && options.indent !== undefined && options.indent !== 0) {
        throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
      }

      if (options.theme !== undefined) {
        if (options.theme === null) {
          throw new Error('pretty-format: Option "theme" must not be null.');
        }

        if (_typeof(options.theme) !== 'object') {
          throw new Error('pretty-format: Option "theme" must be of type "object" but instead received "' + _typeof(options.theme) + '".');
        }
      }
    }

    var getColorsHighlight = function getColorsHighlight(options) {
      return DEFAULT_THEME_KEYS.reduce(function (colors, key) {
        var value = options.theme && options.theme[key] !== undefined ? options.theme[key] : DEFAULT_THEME[key];
        var color = ansiStyles[value];

        if (color && typeof color.close === 'string' && typeof color.open === 'string') {
          colors[key] = color;
        } else {
          throw new Error('pretty-format: Option "theme" has a key "' + key + '" whose value "' + value + '" is undefined in ansi-styles.');
        }

        return colors;
      }, _Object$create(null));
    };

    var getColorsEmpty = function getColorsEmpty() {
      return DEFAULT_THEME_KEYS.reduce(function (colors, key) {
        colors[key] = {
          close: '',
          open: ''
        };
        return colors;
      }, _Object$create(null));
    };

    var getPrintFunctionName = function getPrintFunctionName(options) {
      return options && options.printFunctionName !== undefined ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName;
    };

    var getEscapeRegex = function getEscapeRegex(options) {
      return options && options.escapeRegex !== undefined ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex;
    };

    var getConfig = function getConfig(options) {
      return {
        callToJSON: options && options.callToJSON !== undefined ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,
        colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),
        escapeRegex: getEscapeRegex(options),
        indent: options && options.min ? '' : createIndent(options && options.indent !== undefined ? options.indent : DEFAULT_OPTIONS.indent),
        maxDepth: options && options.maxDepth !== undefined ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,
        min: options && options.min !== undefined ? options.min : DEFAULT_OPTIONS.min,
        plugins: options && options.plugins !== undefined ? options.plugins : DEFAULT_OPTIONS.plugins,
        printFunctionName: getPrintFunctionName(options),
        spacingInner: options && options.min ? ' ' : '\n',
        spacingOuter: options && options.min ? '' : '\n'
      };
    };

    function createIndent(indent) {
      return new Array(indent + 1).join(' ');
    }

    function prettyFormat(val, options) {
      if (options) {
        validateOptions(options);

        if (options.plugins) {
          var plugin = findPlugin(options.plugins, val);

          if (plugin !== null) {
            return printPlugin(plugin, val, getConfig(options), '', 0, []);
          }
        }
      }

      var basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options));

      if (basicResult !== null) {
        return basicResult;
      }

      return printComplexValue(val, getConfig(options), '', 0, []);
    }

    prettyFormat.plugins = {
      AsymmetricMatcher: AsymmetricMatcher,
      ConvertAnsi: ConvertAnsi,
      DOMCollection: DOMCollection,
      DOMElement: DOMElement,
      Immutable: Immutable,
      ReactElement: ReactElement,
      ReactTestComponent: ReactTestComponent
    };
    module.exports = prettyFormat;
  });
},350,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _symbolicateStackTrace = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = _symbolicateStackTrace.default;
  exports.default = _default;
},351,[1,352]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _regeneratorRuntime = _$$_REQUIRE(_dependencyMap[0]);

  var _objectSpread = _$$_REQUIRE(_dependencyMap[1]);

  var getDevServer = _$$_REQUIRE(_dependencyMap[2]);

  var _require = _$$_REQUIRE(_dependencyMap[3]),
      SourceCode = _require.SourceCode;

  var fetch;

  function isSourcedFromDisk(sourcePath) {
    return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
  }

  function symbolicateStackTrace(stack) {
    var devServer, stackCopy, foundInternalSource, response, json;
    return _regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!fetch) {
              fetch = global.fetch || _$$_REQUIRE(_dependencyMap[4]).fetch;
            }

            devServer = getDevServer();

            if (devServer.bundleLoadedFromServer) {
              _context.next = 4;
              break;
            }

            throw new Error('Bundle was not loaded from the packager');

          case 4:
            stackCopy = stack;

            if (SourceCode.scriptURL) {
              foundInternalSource = false;
              stackCopy = stack.map(function (frame) {
                if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                  return _objectSpread({}, frame, {
                    file: SourceCode.scriptURL
                  });
                }

                foundInternalSource = true;
                return frame;
              });
            }

            _context.next = 8;
            return _regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
              method: 'POST',
              body: JSON.stringify({
                stack: stackCopy
              })
            }));

          case 8:
            response = _context.sent;
            _context.next = 11;
            return _regeneratorRuntime.awrap(response.json());

          case 11:
            json = _context.sent;
            return _context.abrupt("return", json.stack);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  module.exports = symbolicateStackTrace;
},352,[130,48,353,8,120]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = _$$_REQUIRE(_dependencyMap[0]),
      SourceCode = _require.SourceCode;

  var _cachedDevServerURL;

  var FALLBACK = 'http://localhost:8081/';

  function getDevServer() {
    if (_cachedDevServerURL === undefined) {
      var match = SourceCode && SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
      _cachedDevServerURL = match ? match[0] : null;
    }

    return {
      url: _cachedDevServerURL || FALLBACK,
      bundleLoadedFromServer: _cachedDevServerURL !== null
    };
  }

  module.exports = getDevServer;
},353,[8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    test: function test(value) {
      return value && value.hasOwnProperty('tag') && value.hasOwnProperty('key') && value.hasOwnProperty('type');
    },
    serialize: function serialize(node, config, indentation, depth, refs, printer) {
      return (config.min ? '' : 'FiberNode ') + "{" + _printProperties(node, ['tag', 'key', 'type'], config, indentation, depth, refs, printer) + "}";
    }
  };
  exports.default = _default;

  function _printProperties(object, keys, config, indentation, depth, refs, printer) {
    var result = config.spacingOuter;
    var propertyIndentation = indentation + config.indent;

    for (var ii = 0; ii < keys.length; ii++) {
      var key = keys[ii];
      var name = printer(key, config, propertyIndentation, depth, refs);
      var value = printer(object[key], config, propertyIndentation, depth, refs);
      result += "" + propertyIndentation + name + ": " + value;

      if (ii < keys.length - 1) {
        result += ',' + config.spacingInner;
      } else if (!config.min) {
        result += ',';
      }
    }

    result += config.spacingOuter + indentation;
    return result;
  }
},354,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var _AssetRegistry = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AssetSourceResolver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _resolveAssetSource = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _uriParser = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _urlJoin = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var FS, Constants;

  try {
    FS = _$$_REQUIRE(_dependencyMap[11]).FileSystem;
  } catch (error) {
    throw new Error('`expo-asset` requires `expo-file-system` package to be installed and linked.');
  }

  try {
    Constants = _$$_REQUIRE(_dependencyMap[12]).default;
  } catch (error) {
    throw new Error('`expo-asset` requires `expo-constants` package to be installed and linked.');
  }

  var parser = new _uriParser.default.Parser();
  var bundledAssets = new Set(FS.bundledAssets || []);
  var assetMapOverride = Constants.manifest && Constants.manifest.assetMapOverride;

  var getManifestBaseUrl = function getManifestBaseUrl(manifestUrl) {
    var urlComponents = parser.parse(manifestUrl);

    if (urlComponents.protocol === 'exp') {
      urlComponents.protocol = 'http';
    } else if (urlComponents.protocol === 'exps') {
      urlComponents.protocol = 'https';
    }

    urlComponents.relative = urlComponents.directory;
    return parser.format(urlComponents);
  };

  var manifestBaseUrl = Constants.experienceUrl ? getManifestBaseUrl(Constants.experienceUrl) : null;

  var resolveIfRelative = function resolveIfRelative(uri) {
    var uriComponents = parser.parse(uri);

    if (uriComponents.protocol === '' && manifestBaseUrl) {
      return (0, _urlJoin.default)(manifestBaseUrl, uri.replace(/^\.?\//, ''));
    } else {
      return uri;
    }
  };

  function isImageType(type) {
    return /^(jpeg|jpg|gif|png|bmp)$/i.test(type);
  }

  function getExtension(url) {
    var filename = filenameFromUrl(url);
    var dotIndex = filename.lastIndexOf('.');
    return dotIndex > 0 ? filename.substring(dotIndex) : '';
  }

  function filenameFromUrl(url) {
    var urlComponents = parser.parse(this.uri);
    return urlComponents.file;
  }

  var pickScale = function pickScale(originalMeta) {
    var meta = assetMapOverride ? (0, _objectSpread2.default)({}, originalMeta, assetMapOverride[originalMeta.hash]) : originalMeta;
    var scale = meta.scales.length > 1 ? _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get()) : 1;
    var index = meta.scales.findIndex(function (s) {
      return s === scale;
    });
    var hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;
    var uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;
    var suffix = '/' + meta.name + (scale === 1 ? '' : '@' + scale + 'x') + '.' + meta.type + '?platform=' + _reactNative.Platform.OS + '&hash=' + meta.hash;

    if (uri) {
      return {
        uri: resolveIfRelative(uri),
        hash: hash
      };
    }

    var assetUrlOverride = Constants.manifest && Constants.manifest.assetUrlOverride;

    if (assetUrlOverride) {
      return {
        uri: resolveIfRelative((0, _urlJoin.default)(assetUrlOverride, hash)),
        hash: hash
      };
    }

    if (/^https?:/.test(meta.httpServerLocation)) {
      return {
        uri: meta.httpServerLocation + suffix,
        hash: hash
      };
    }

    if (Constants.manifest && Constants.manifest.developer) {
      return {
        uri: Constants.manifest.bundleUrl.match(/^https?:\/\/.*?\//)[0] + meta.httpServerLocation.replace(/^\/?/, '') + suffix,
        hash: hash
      };
    }

    return {
      uri: 'https://d1wp6m56sqw74a.cloudfront.net/~assets/' + hash,
      hash: hash
    };
  };

  var getUriInBundle = function getUriInBundle(hash, type) {
    var assetName = 'asset_' + hash + (type ? '.' + type : '');

    if (Constants.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {
      return null;
    }

    return "" + FS.bundleDirectory + assetName;
  };

  function getImageInfoAsync(src) {
    return new Promise(function (resolve, reject) {
      var img = new Image();
      img.onerror = reject;

      img.onload = function () {
        var name = img.name || img.title || img.localName;
        resolve({
          name: name,
          width: img.naturalWidth,
          height: img.naturalHeight
        });
      };

      img.src = src;
    });
  }

  var Asset = function () {
    function Asset(_ref) {
      var name = _ref.name,
          type = _ref.type,
          hash = _ref.hash,
          uri = _ref.uri,
          width = _ref.width,
          height = _ref.height;
      (0, _classCallCheck2.default)(this, Asset);
      this.name = name;
      this.type = type;
      this.hash = hash;
      this.uri = uri;
      this.localUri = getUriInBundle(hash, type);

      if (typeof width === 'number') {
        this.width = width;
      }

      if (typeof height === 'number') {
        this.height = height;
      }

      this.downloading = false;
      this.downloaded = !!this.localUri;
      this.downloadCallbacks = [];
    }

    (0, _createClass2.default)(Asset, [{
      key: "downloadAsync",
      value: function downloadAsync() {
        var _this = this;

        var _ref2, width, height, name, localUri, _ref3, exists, md5, _ref4;

        return _regenerator.default.async(function downloadAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.downloaded) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                if (!this.downloading) {
                  _context.next = 6;
                  break;
                }

                _context.next = 5;
                return _regenerator.default.awrap(new Promise(function (resolve, reject) {
                  return _this.downloadCallbacks.push({
                    resolve: resolve,
                    reject: reject
                  });
                }));

              case 5:
                return _context.abrupt("return");

              case 6:
                this.downloading = true;
                _context.prev = 7;

                if (!(_reactNative.Platform.OS === 'web')) {
                  _context.next = 25;
                  break;
                }

                if (!isImageType(this.type)) {
                  _context.next = 21;
                  break;
                }

                _context.next = 12;
                return _regenerator.default.awrap(getImageInfoAsync(this.uri));

              case 12:
                _ref2 = _context.sent;
                width = _ref2.width;
                height = _ref2.height;
                name = _ref2.name;
                this.width = width;
                this.height = height;
                this.name = name;
                _context.next = 22;
                break;

              case 21:
                this.name = filenameFromUrl(this.uri);

              case 22:
                this.localUri = this.uri;
                _context.next = 39;
                break;

              case 25:
                localUri = FS.cacheDirectory + "ExponentAsset-" + this.hash + "." + this.type;
                _context.next = 28;
                return _regenerator.default.awrap(FS.getInfoAsync(localUri, {
                  cache: true,
                  md5: true
                }));

              case 28:
                _ref3 = _context.sent;
                exists = _ref3.exists;
                md5 = _ref3.md5;

                if (!(!exists || md5 !== this.hash)) {
                  _context.next = 38;
                  break;
                }

                _context.next = 34;
                return _regenerator.default.awrap(FS.downloadAsync(this.uri, localUri, {
                  cache: true,
                  md5: true
                }));

              case 34:
                _ref4 = _context.sent;
                md5 = _ref4.md5;

                if (!(md5 !== this.hash)) {
                  _context.next = 38;
                  break;
                }

                throw new Error("Downloaded file for asset '" + this.name + "." + this.type + "' " + ("Located at " + this.uri + " ") + "failed MD5 integrity check");

              case 38:
                this.localUri = localUri;

              case 39:
                this.downloaded = true;
                this.downloadCallbacks.forEach(function (_ref5) {
                  var resolve = _ref5.resolve;
                  return resolve();
                });
                _context.next = 47;
                break;

              case 43:
                _context.prev = 43;
                _context.t0 = _context["catch"](7);
                this.downloadCallbacks.forEach(function (_ref6) {
                  var reject = _ref6.reject;
                  return reject(_context.t0);
                });
                throw _context.t0;

              case 47:
                _context.prev = 47;
                this.downloading = false;
                this.downloadCallbacks = [];
                return _context.finish(47);

              case 51:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[7, 43, 47, 51]]);
      }
    }], [{
      key: "loadAsync",
      value: function loadAsync(moduleId) {
        var moduleIds = typeof moduleId === 'number' ? [moduleId] : moduleId;
        return Promise.all(moduleIds.map(function (m) {
          return Asset.fromModule(m).downloadAsync();
        }));
      }
    }, {
      key: "fromModule",
      value: function fromModule(virtualAssetModule) {
        if (typeof virtualAssetModule === 'string') {
          return Asset.fromURI(virtualAssetModule);
        } else {
          var meta = _AssetRegistry.default.getAssetByID(virtualAssetModule);

          return Asset.fromMetadata(meta);
        }
      }
    }, {
      key: "fromMetadata",
      value: function fromMetadata(meta) {
        var metaHash = meta.hash;

        if (Asset.byHash[metaHash]) {
          return Asset.byHash[metaHash];
        }

        var _pickScale = pickScale(meta),
            uri = _pickScale.uri,
            hash = _pickScale.hash;

        var asset = new Asset({
          name: meta.name,
          type: meta.type,
          hash: hash,
          uri: uri,
          width: meta.width,
          height: meta.height
        });
        Asset.byHash[metaHash] = asset;
        return asset;
      }
    }, {
      key: "fromURI",
      value: function fromURI(uri) {
        if (Asset.byUri[uri]) {
          return Asset.byUri[uri];
        }

        var type = '';

        if (uri.indexOf(';base64') > -1) {
          type = uri.split(';')[0].split('/')[1];
        } else {
          type = getExtension(uri);
        }

        var asset = new Asset({
          type: type,
          uri: uri
        });
        Asset.byUri[uri] = asset;
        return asset;
      }
    }]);
    return Asset;
  }();

  exports.default = Asset;
  Asset.byHash = {};
  Asset.byUri = {};

  _resolveAssetSource.default.setCustomSourceTransformer(function (resolver) {
    var asset = Asset.fromMetadata(resolver.asset);
    return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);
  });
},355,[1,130,21,22,48,5,153,154,152,356,360,361,329]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},356,[357]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Parser = _$$_REQUIRE(_dependencyMap[0]);

  var p = new Parser();
  exports.Parser = Parser;
  exports.parse = p.parse;
  exports.complete = p.complete;
  exports.format = p.format;
},357,[358]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var parseUri = _$$_REQUIRE(_dependencyMap[0]);

  function sortedQuery(query) {
    var keys = [],
        name,
        i,
        len,
        key,
        sorted = [];

    for (name in query) {
      for (i = 0, len = keys.length; i < len; i++) {
        if (keys[i] >= name) break;
      }

      keys.splice(i, 0, name);
    }

    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      sorted.push(key + "=" + query[key]);
    }

    if (sorted.length !== 0) return sorted.join("&");
  }

  ;

  function isSet(value) {
    if (value !== undefined && value !== null) return value !== '';
    return false;
  }

  function value(value) {
    if (value !== undefined && value !== null) return value;
    return '';
  }

  function prefix(value, prefix) {
    if (value !== undefined && value !== null) return prefix + value;
    return '';
  }

  function suffix(value, suffix) {
    if (value !== undefined && value !== null) return value + suffix;
    return '';
  }

  function Parser(options) {
    this.options = options;
  }

  ;

  Parser.prototype.parse = function (uriStr, strictMode) {
    if (strictMode === true) return parseUri(uriStr, "strict");
    return parseUri(uriStr);
  };

  Parser.prototype.complete = function (obj) {
    if (typeof obj === 'string') obj = this.parse(obj);
    if (!isSet(obj.userInfo) && (isSet(obj.user) || isSet(obj.password))) obj.userInfo = value(obj.user) + prefix(obj.password, ':');
    if (!isSet(obj.authority) && (isSet(obj.userInfo) || isSet(obj.host) || isSet(obj.port))) obj.authority = suffix(obj.userInfo, '@') + value(obj.host) + prefix(obj.port, ':');
    if (!isSet(obj.query) && isSet(obj.queryKey)) obj.query = sortedQuery(obj.queryKey);
    if (!isSet(obj.relative) && (isSet(obj.directory) || isSet(obj.file))) obj.relative = value(obj.directory) + value(obj.file);
    if (!isSet(obj.relative) && (isSet(obj.path) || isSet(obj.query) || isSet(obj.anchor))) obj.relative = value(obj.path) + prefix(obj.query, '?') + prefix(obj.anchor, '#');
    return obj;
  };

  Parser.prototype.format = function (obj) {
    obj = this.complete(obj);
    return suffix(obj.protocol, ':').toLowerCase() + prefix(obj.authority, '//') + value(obj.relative);
  };

  module.exports = exports = Parser;
},358,[359]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function parseUri(str, mode) {
    var o = parseUri.options;
    if (mode === undefined) mode = o.strictMode ? "strict" : "loose";
    var m = o.parser[mode].exec(str),
        uri = {},
        i = 14;

    while (i--) {
      uri[o.key[i]] = m[i] || "";
    }

    uri[o.q.name] = {};
    uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
      if ($1) {
        if (uri[o.q.name][$1] === undefined) {
          uri[o.q.name][$1] = $2;
        } else if (typeof uri[o.q.name][$1] === '[object Array]') {
          uri[o.q.name][$1].push($2);
        } else if (typeof uri[o.q.name][$1] === 'string') {
          uri[o.q.name][$1] = [uri[o.q.name][$1], $2];
        }
      }
    });
    return uri;
  }

  ;
  parseUri.options = {
    strictMode: false,
    key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
    q: {
      name: "queryKey",
      parser: /(?:^|&)([^&=]*)=?([^&]*)/g
    },
    parser: {
      strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
      loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
    }
  };
  module.exports = parseUri;
},359,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (name, context, definition) {
    if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();
  })('urljoin', this, function () {
    function normalize(strArray) {
      var resultArray = [];

      if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
        var first = strArray.shift();
        strArray[0] = first + strArray[0];
      }

      if (strArray[0].match(/^file:\/\/\//)) {
        strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1:///');
      } else {
        strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1://');
      }

      for (var i = 0; i < strArray.length; i++) {
        var component = strArray[i];

        if (typeof component !== 'string') {
          throw new TypeError('Url must be a string. Received ' + component);
        }

        if (component === '') {
          continue;
        }

        if (i > 0) {
          component = component.replace(/^[\/]+/, '');
        }

        if (i < strArray.length - 1) {
          component = component.replace(/[\/]+$/, '');
        } else {
          component = component.replace(/[\/]+$/, '/');
        }

        resultArray.push(component);
      }

      var str = resultArray.join('/');
      str = str.replace(/\/(\?|&|#[^!])/g, '$1');
      var parts = str.split('?');
      str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');
      return str;
    }

    return function () {
      var input;

      if (typeof arguments[0] === 'object') {
        input = arguments[0];
      } else {
        input = [].slice.call(arguments);
      }

      return normalize(input);
    };
  });
},360,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get FileSystem() {
      return _$$_REQUIRE(_dependencyMap[0]);
    }

  };
},361,[362]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getInfoAsync = getInfoAsync;
  exports.readAsStringAsync = readAsStringAsync;
  exports.writeAsStringAsync = writeAsStringAsync;
  exports.deleteAsync = deleteAsync;
  exports.moveAsync = moveAsync;
  exports.copyAsync = copyAsync;
  exports.makeDirectoryAsync = makeDirectoryAsync;
  exports.readDirectoryAsync = readDirectoryAsync;
  exports.downloadAsync = downloadAsync;
  exports.createDownloadResumable = createDownloadResumable;
  exports.DownloadResumable = exports.EncodingTypes = exports.bundleDirectory = exports.bundledAssets = exports.cacheDirectory = exports.documentDirectory = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[4]);

  var _uuidJs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _ExponentFileSystem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var normalizeEndingSlash = function normalizeEndingSlash(p) {
    if (p != null) {
      return p.replace(/\/*$/, '') + '/';
    }

    return null;
  };

  _ExponentFileSystem.default.documentDirectory = normalizeEndingSlash(_ExponentFileSystem.default.documentDirectory);
  _ExponentFileSystem.default.cacheDirectory = normalizeEndingSlash(_ExponentFileSystem.default.cacheDirectory);
  var documentDirectory = _ExponentFileSystem.default.documentDirectory;
  exports.documentDirectory = documentDirectory;
  var cacheDirectory = _ExponentFileSystem.default.cacheDirectory;
  exports.cacheDirectory = cacheDirectory;
  var bundledAssets = _ExponentFileSystem.default.bundledAssets;
  exports.bundledAssets = bundledAssets;
  var bundleDirectory = _ExponentFileSystem.default.bundleDirectory;
  exports.bundleDirectory = bundleDirectory;
  var EncodingTypes = {
    UTF8: 'utf8',
    Base64: 'base64'
  };
  exports.EncodingTypes = EncodingTypes;

  function getInfoAsync(fileUri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _ExponentFileSystem.default.getInfoAsync(fileUri, options);
  }

  function readAsStringAsync(fileUri, options) {
    return _ExponentFileSystem.default.readAsStringAsync(fileUri, options || {});
  }

  function writeAsStringAsync(fileUri, contents, options) {
    return _ExponentFileSystem.default.writeAsStringAsync(fileUri, contents, options || {});
  }

  function deleteAsync(fileUri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _ExponentFileSystem.default.deleteAsync(fileUri, options);
  }

  function moveAsync(options) {
    return _ExponentFileSystem.default.moveAsync(options);
  }

  function copyAsync(options) {
    return _ExponentFileSystem.default.copyAsync(options);
  }

  function makeDirectoryAsync(fileUri) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _ExponentFileSystem.default.makeDirectoryAsync(fileUri, options);
  }

  function readDirectoryAsync(fileUri) {
    return _ExponentFileSystem.default.readDirectoryAsync(fileUri, {});
  }

  function downloadAsync(uri, fileUri) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return _ExponentFileSystem.default.downloadAsync(uri, fileUri, options);
  }

  function createDownloadResumable(uri, fileUri, options, callback, resumeData) {
    return new DownloadResumable(uri, fileUri, options, callback, resumeData);
  }

  var DownloadResumable = function () {
    function DownloadResumable(url, fileUri) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : undefined;
      var resumeData = arguments.length > 4 ? arguments[4] : undefined;
      (0, _classCallCheck2.default)(this, DownloadResumable);
      this._uuid = _uuidJs.default.create(4).toString();
      this._url = url;
      this._fileUri = fileUri;
      this._options = options;
      this._resumeData = resumeData;
      this._callback = callback;
      this._subscription = null;
      this._emitter = new _expoCore.EventEmitter(_ExponentFileSystem.default);
    }

    (0, _createClass2.default)(DownloadResumable, [{
      key: "downloadAsync",
      value: function downloadAsync() {
        return _regenerator.default.async(function downloadAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._addSubscription();

                _context.next = 3;
                return _regenerator.default.awrap(_ExponentFileSystem.default.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));

              case 3:
                return _context.abrupt("return", _context.sent);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "pauseAsync",
      value: function pauseAsync() {
        var pauseResult;
        return _regenerator.default.async(function pauseAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _regenerator.default.awrap(_ExponentFileSystem.default.downloadResumablePauseAsync(this._uuid));

              case 2:
                pauseResult = _context2.sent;

                this._removeSubscription();

                if (!pauseResult) {
                  _context2.next = 9;
                  break;
                }

                this._resumeData = pauseResult.resumeData;
                return _context2.abrupt("return", this.savable());

              case 9:
                throw new Error('Unable to generate a savable pause state');

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "resumeAsync",
      value: function resumeAsync() {
        return _regenerator.default.async(function resumeAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this._addSubscription();

                _context3.next = 3;
                return _regenerator.default.awrap(_ExponentFileSystem.default.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData));

              case 3:
                return _context3.abrupt("return", _context3.sent);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "savable",
      value: function savable() {
        return {
          url: this._url,
          fileUri: this._fileUri,
          options: this._options,
          resumeData: this._resumeData
        };
      }
    }, {
      key: "_addSubscription",
      value: function _addSubscription() {
        var _this = this;

        if (this._subscription) {
          return;
        }

        this._subscription = this._emitter.addListener('Exponent.downloadProgress', function (_ref) {
          var uuid = _ref.uuid,
              data = _ref.data;

          if (uuid === _this._uuid) {
            var callback = _this._callback;

            if (callback) {
              callback(data);
            }
          }
        });
      }
    }, {
      key: "_removeSubscription",
      value: function _removeSubscription() {
        if (!this._subscription) {
          return;
        }

        this._emitter.removeSubscription(this._subscription);

        this._subscription = null;
      }
    }]);
    return DownloadResumable;
  }();

  exports.DownloadResumable = DownloadResumable;
},362,[1,130,21,22,331,348,363]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExponentFileSystem;
  exports.default = _default;
},363,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "AdMobBanner", {
    enumerable: true,
    get: function get() {
      return _AdMobBanner.default;
    }
  });
  Object.defineProperty(exports, "AdMobInterstitial", {
    enumerable: true,
    get: function get() {
      return _AdMobInterstitial.default;
    }
  });
  Object.defineProperty(exports, "AdMobRewarded", {
    enumerable: true,
    get: function get() {
      return _AdMobRewarded.default;
    }
  });
  Object.defineProperty(exports, "PublisherBanner", {
    enumerable: true,
    get: function get() {
      return _PublisherBanner.default;
    }
  });

  var _AdMobBanner = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _AdMobInterstitial = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _AdMobRewarded = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _PublisherBanner = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
},364,[1,365,367,373,375]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var AdMobBanner = function (_React$Component) {
    (0, _inherits2.default)(AdMobBanner, _React$Component);

    function AdMobBanner() {
      var _this;

      (0, _classCallCheck2.default)(this, AdMobBanner);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AdMobBanner).apply(this, arguments));
      _this.state = {
        style: {}
      };

      _this._handleSizeChange = function (_ref) {
        var nativeEvent = _ref.nativeEvent;
        var height = nativeEvent.height,
            width = nativeEvent.width;

        _this.setState({
          style: {
            width: width,
            height: height
          }
        });
      };

      _this._handleDidFailToReceiveAdWithError = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        return _this.props.onDidFailToReceiveAdWithError && _this.props.onDidFailToReceiveAdWithError(nativeEvent.error);
      };

      return _this;
    }

    (0, _createClass2.default)(AdMobBanner, [{
      key: "render",
      value: function render() {
        return React.createElement(_reactNative.View, {
          style: this.props.style
        }, React.createElement(ExpoBannerView, {
          style: this.state.style,
          adUnitID: this.props.adUnitID,
          bannerSize: this.props.bannerSize,
          testDeviceID: this.props.testDeviceID,
          onSizeChange: this._handleSizeChange,
          onAdViewDidReceiveAd: this.props.onAdViewDidReceiveAd,
          onDidFailToReceiveAdWithError: this._handleDidFailToReceiveAdWithError,
          onAdViewWillPresentScreen: this.props.onAdViewWillPresentScreen,
          onAdViewWillDismissScreen: this.props.onAdViewWillDismissScreen,
          onAdViewDidDismissScreen: this.props.onAdViewDidDismissScreen,
          onAdViewWillLeaveApplication: this.props.onAdViewWillLeaveApplication
        }));
      }
    }]);
    return AdMobBanner;
  }(React.Component);

  exports.default = AdMobBanner;
  AdMobBanner.propTypes = (0, _objectSpread2.default)({
    bannerSize: _propTypes.default.oneOf(['banner', 'largeBanner', 'mediumRectangle', 'fullBanner', 'leaderboard', 'smartBannerPortrait', 'smartBannerLandscape']),
    adUnitID: _propTypes.default.string,
    testDeviceID: _propTypes.default.string,
    onAdViewDidReceiveAd: _propTypes.default.func,
    onDidFailToReceiveAdWithError: _propTypes.default.func,
    onAdViewWillPresentScreen: _propTypes.default.func,
    onAdViewWillDismissScreen: _propTypes.default.func,
    onAdViewDidDismissScreen: _propTypes.default.func,
    onAdViewWillLeaveApplication: _propTypes.default.func
  }, _reactNative.ViewPropTypes);
  AdMobBanner.defaultProps = {
    bannerSize: 'smartBannerPortrait'
  };
  var ExpoBannerView = (0, _expoCore.requireNativeViewManager)('ExpoAdsAdMobBannerView');
},365,[366,1,48,21,22,34,37,40,331,65,51,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  module.exports = _interopRequireWildcard;
},366,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[2]);

  var _expoErrors = _$$_REQUIRE(_dependencyMap[3]);

  var _ExpoAdsAdMobInterstitialManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var moduleName = 'AdMobInterstitial';
  var eventNames = ['interstitialDidLoad', 'interstitialDidFailToLoad', 'interstitialDidOpen', 'interstitialDidClose', 'interstitialWillLeaveApplication'];
  var eventEmitter = new _expoCore.EventEmitter(_ExpoAdsAdMobInterstitialManager.default);
  var eventHandlers = {};

  for (var _i = 0; _i < eventNames.length; _i++) {
    var eventName = eventNames[_i];
    eventHandlers[eventName] = new Map();
  }

  var _default = {
    setAdUnitID: function setAdUnitID(id) {
      return _regenerator.default.async(function setAdUnitID$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (_ExpoAdsAdMobInterstitialManager.default.setAdUnitID) {
                _context.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'setAdUnitID');

            case 2:
              _context.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobInterstitialManager.default.setAdUnitID(id));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    setTestDeviceID: function setTestDeviceID(id) {
      return _regenerator.default.async(function setTestDeviceID$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (_ExpoAdsAdMobInterstitialManager.default.setTestDeviceID) {
                _context2.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'setTestDeviceID');

            case 2:
              _context2.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobInterstitialManager.default.setTestDeviceID(id));

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    },
    requestAdAsync: function requestAdAsync() {
      return _regenerator.default.async(function requestAdAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (_ExpoAdsAdMobInterstitialManager.default.requestAd) {
                _context3.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'requestAdAsync');

            case 2:
              _context3.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobInterstitialManager.default.requestAd());

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    },
    showAdAsync: function showAdAsync() {
      return _regenerator.default.async(function showAdAsync$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (_ExpoAdsAdMobInterstitialManager.default.showAd) {
                _context4.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'showAdAsync');

            case 2:
              _context4.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobInterstitialManager.default.showAd());

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    },
    dismissAdAsync: function dismissAdAsync() {
      return _regenerator.default.async(function dismissAdAsync$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (_ExpoAdsAdMobInterstitialManager.default.dismissAd) {
                _context5.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'dismissAdAsync');

            case 2:
              _context5.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobInterstitialManager.default.dismissAd());

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    },
    getIsReadyAsync: function getIsReadyAsync() {
      return _regenerator.default.async(function getIsReadyAsync$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (_ExpoAdsAdMobInterstitialManager.default.getIsReady) {
                _context6.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'getIsReadyAsync');

            case 2:
              _context6.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobInterstitialManager.default.getIsReady());

            case 4:
              return _context6.abrupt("return", _context6.sent);

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    },
    addEventListener: function addEventListener(type, handler) {
      if (eventNames.includes(type)) {
        eventHandlers[type].set(handler, eventEmitter.addListener(type, handler));
      } else {
        console.log("Event with type " + type + " does not exist.");
      }
    },
    removeEventListener: function removeEventListener(type, handler) {
      var eventSubscription = eventHandlers[type].get(handler);

      if (!eventHandlers[type].has(handler) || !eventSubscription) {
        return;
      }

      eventSubscription.remove();
      eventHandlers[type].delete(handler);
    },
    removeAllListeners: function removeAllListeners() {
      for (var _i2 = 0; _i2 < eventNames.length; _i2++) {
        var _eventName = eventNames[_i2];
        eventEmitter.removeAllListeners(_eventName);
      }
    }
  };
  exports.default = _default;
},367,[1,130,331,368,372]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UnavailabilityError = exports.CodedError = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _wrapNativeSuper2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var CodedError = function (_Error) {
    (0, _inherits2.default)(CodedError, _Error);

    function CodedError(code, message) {
      var _this;

      (0, _classCallCheck2.default)(this, CodedError);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CodedError).call(this, message));
      _this.code = code;
      return _this;
    }

    return CodedError;
  }((0, _wrapNativeSuper2.default)(Error));

  exports.CodedError = CodedError;

  var UnavailabilityError = function (_CodedError) {
    (0, _inherits2.default)(UnavailabilityError, _CodedError);

    function UnavailabilityError(moduleName, propertyName) {
      (0, _classCallCheck2.default)(this, UnavailabilityError);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UnavailabilityError).call(this, 'ERR_UNAVAILABLE', "The method or property " + moduleName + "." + propertyName + " is not available on this platform, are you sure you've linked all the native dependencies properly?"));
    }

    return UnavailabilityError;
  }(CodedError);

  exports.UnavailabilityError = UnavailabilityError;
},368,[1,21,34,37,40,369]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[1]);

  var isNativeFunction = _$$_REQUIRE(_dependencyMap[2]);

  var construct = _$$_REQUIRE(_dependencyMap[3]);

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  module.exports = _wrapNativeSuper;
},369,[37,41,370,371]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  module.exports = _isNativeFunction;
},370,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      module.exports = _construct = Reflect.construct;
    } else {
      module.exports = _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  module.exports = _construct;
},371,[41]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoAdsAdMobInterstitialManager;
  exports.default = _default;
},372,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[2]);

  var _expoErrors = _$$_REQUIRE(_dependencyMap[3]);

  var _ExpoAdsAdMobRewardedVideoAdManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var moduleName = 'AdMobRewarded';
  var eventNames = ['rewardedVideoDidRewardUser', 'rewardedVideoDidLoad', 'rewardedVideoDidFailToLoad', 'rewardedVideoDidOpen', 'rewardedVideoDidStart', 'rewardedVideoDidClose', 'rewardedVideoWillLeaveApplication'];
  var eventEmitter = new _expoCore.EventEmitter(_ExpoAdsAdMobRewardedVideoAdManager.default);
  var eventHandlers = {};

  for (var _i = 0; _i < eventNames.length; _i++) {
    var eventName = eventNames[_i];
    eventHandlers[eventName] = new Map();
  }

  var _default = {
    setAdUnitID: function setAdUnitID(id) {
      return _regenerator.default.async(function setAdUnitID$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (_ExpoAdsAdMobRewardedVideoAdManager.default.setAdUnitID) {
                _context.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'setAdUnitID');

            case 2:
              _context.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobRewardedVideoAdManager.default.setAdUnitID(id));

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    setTestDeviceID: function setTestDeviceID(id) {
      return _regenerator.default.async(function setTestDeviceID$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (_ExpoAdsAdMobRewardedVideoAdManager.default.setTestDeviceID) {
                _context2.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'setTestDeviceID');

            case 2:
              _context2.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobRewardedVideoAdManager.default.setTestDeviceID(id));

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    },
    requestAdAsync: function requestAdAsync() {
      return _regenerator.default.async(function requestAdAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (_ExpoAdsAdMobRewardedVideoAdManager.default.requestAd) {
                _context3.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'requestAdAsync');

            case 2:
              _context3.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobRewardedVideoAdManager.default.requestAd());

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    },
    showAdAsync: function showAdAsync() {
      return _regenerator.default.async(function showAdAsync$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (_ExpoAdsAdMobRewardedVideoAdManager.default.showAd) {
                _context4.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'showAdAsync');

            case 2:
              _context4.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobRewardedVideoAdManager.default.showAd());

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    },
    dismissAdAsync: function dismissAdAsync() {
      return _regenerator.default.async(function dismissAdAsync$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (_ExpoAdsAdMobRewardedVideoAdManager.default.dismissAd) {
                _context5.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'dismissAdAsync');

            case 2:
              _context5.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobRewardedVideoAdManager.default.dismissAd());

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    },
    getIsReadyAsync: function getIsReadyAsync() {
      return _regenerator.default.async(function getIsReadyAsync$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (_ExpoAdsAdMobRewardedVideoAdManager.default.getIsReady) {
                _context6.next = 2;
                break;
              }

              throw new _expoErrors.UnavailabilityError(moduleName, 'getIsReadyAsync');

            case 2:
              _context6.next = 4;
              return _regenerator.default.awrap(_ExpoAdsAdMobRewardedVideoAdManager.default.getIsReady());

            case 4:
              return _context6.abrupt("return", _context6.sent);

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    },
    addEventListener: function addEventListener(type, handler) {
      if (eventNames.includes(type)) {
        eventHandlers[type].set(handler, eventEmitter.addListener(type, handler));
      } else {
        console.log("Event with type " + type + " does not exist.");
      }
    },
    removeEventListener: function removeEventListener(type, handler) {
      var eventSubscription = eventHandlers[type].get(handler);

      if (!eventHandlers[type].has(handler) || !eventSubscription) {
        return;
      }

      eventSubscription.remove();
      eventHandlers[type].delete(handler);
    },
    removeAllListeners: function removeAllListeners() {
      for (var _i2 = 0; _i2 < eventNames.length; _i2++) {
        var _eventName = eventNames[_i2];
        eventEmitter.removeAllListeners(_eventName);
      }
    }
  };
  exports.default = _default;
},373,[1,130,331,368,374]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoAdsAdMobRewardedVideoAdManager;
  exports.default = _default;
},374,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[8]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var PublisherBanner = function (_React$Component) {
    (0, _inherits2.default)(PublisherBanner, _React$Component);

    function PublisherBanner() {
      var _this;

      (0, _classCallCheck2.default)(this, PublisherBanner);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PublisherBanner).apply(this, arguments));
      _this.state = {
        style: {}
      };

      _this._handleSizeChange = function (_ref) {
        var nativeEvent = _ref.nativeEvent;
        var height = nativeEvent.height,
            width = nativeEvent.width;

        _this.setState({
          style: {
            width: width,
            height: height
          }
        });
      };

      _this._handleDidFailToReceiveAdWithError = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        return _this.props.onDidFailToReceiveAdWithError && _this.props.onDidFailToReceiveAdWithError(nativeEvent.error);
      };

      return _this;
    }

    (0, _createClass2.default)(PublisherBanner, [{
      key: "render",
      value: function render() {
        return React.createElement(_reactNative.View, {
          style: this.props.style
        }, React.createElement(ExpoBannerView, {
          style: this.state.style,
          adUnitID: this.props.adUnitID,
          bannerSize: this.props.bannerSize,
          testDeviceID: this.props.testDeviceID,
          onSizeChange: this._handleSizeChange,
          onAdViewDidReceiveAd: this.props.onAdViewDidReceiveAd,
          onDidFailToReceiveAdWithError: this._handleDidFailToReceiveAdWithError,
          onAdViewWillPresentScreen: this.props.onAdViewWillPresentScreen,
          onAdViewWillDismissScreen: this.props.onAdViewWillDismissScreen,
          onAdViewDidDismissScreen: this.props.onAdViewDidDismissScreen,
          onAdViewWillLeaveApplication: this.props.onAdViewWillLeaveApplication,
          onAdmobDispatchAppEvent: this.props.onAdMobDispatchAppEvent
        }));
      }
    }]);
    return PublisherBanner;
  }(React.Component);

  exports.default = PublisherBanner;
  PublisherBanner.propTypes = (0, _objectSpread2.default)({
    bannerSize: _propTypes.default.oneOf(['banner', 'largeBanner', 'mediumRectangle', 'fullBanner', 'leaderboard', 'smartBannerPortrait', 'smartBannerLandscape']),
    adUnitID: _propTypes.default.string,
    testDeviceID: _propTypes.default.string,
    onAdViewDidReceiveAd: _propTypes.default.func,
    onDidFailToReceiveAdWithError: _propTypes.default.func,
    onAdViewWillPresentScreen: _propTypes.default.func,
    onAdViewWillDismissScreen: _propTypes.default.func,
    onAdViewDidDismissScreen: _propTypes.default.func,
    onAdViewWillLeaveApplication: _propTypes.default.func,
    onAdmobDispatchAppEvent: _propTypes.default.func
  }, _reactNative.ViewPropTypes);
  PublisherBanner.defaultProps = {
    bannerSize: 'smartBannerPortrait'
  };
  var ExpoBannerView = (0, _expoCore.requireNativeViewManager)('ExpoAdsPublisherBannerView');
},375,[366,1,48,21,22,34,37,40,331,65,51,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get Segment() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    }

  };
},376,[377]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _expoCore = _$$_REQUIRE(_dependencyMap[1]);

  var ExponentSegment = _expoCore.NativeModulesProxy.ExponentSegment;
  var _default = {
    initialize: function initialize(options) {
      if (_reactNative.Platform.OS === 'android') {
        ExponentSegment.initializeAndroid(options.androidWriteKey);
      } else if (_reactNative.Platform.OS === 'ios') {
        ExponentSegment.initializeIOS(options.iosWriteKey);
      } else {
        throw new Error("Unable to initialize Segment on `" + _reactNative.Platform.OS + "`");
      }
    },
    identify: function identify(userId) {
      ExponentSegment.identify(userId);
    },
    identifyWithTraits: function identifyWithTraits(userId, traits) {
      ExponentSegment.identifyWithTraits(userId, traits);
    },
    group: function group(groupId) {
      ExponentSegment.group(groupId);
    },
    groupWithTraits: function groupWithTraits(groupId, traits) {
      ExponentSegment.groupWithTraits(groupId, traits);
    },
    alias: function alias(newId, options) {
      return ExponentSegment.alias(newId, options);
    },
    reset: function reset() {
      ExponentSegment.reset();
    },
    track: function track(event) {
      ExponentSegment.track(event);
    },
    trackWithProperties: function trackWithProperties(event, properties) {
      ExponentSegment.trackWithProperties(event, properties);
    },
    screen: function screen(screenName) {
      ExponentSegment.screen(screenName);
    },
    screenWithProperties: function screenWithProperties(event, properties) {
      ExponentSegment.screenWithProperties(event, properties);
    },
    flush: function flush() {
      ExponentSegment.flush();
    },
    getEnabledAsync: function getEnabledAsync() {
      return new Promise(function (resolve, reject) {
        return ExponentSegment.getEnabledAsync().then(function (isEnabledNumber) {
          return resolve(!!isEnabledNumber);
        }).catch(reject);
      });
    },
    setEnabledAsync: function setEnabledAsync(enabled) {
      return ExponentSegment.setEnabledAsync(enabled);
    }
  };
  exports.default = _default;
},377,[5,331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get Asset() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    }

  };
},378,[355]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get AppAuth() {
      return _$$_REQUIRE(_dependencyMap[0]);
    }

  };
},379,[380]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.authAsync = authAsync;
  exports.refreshAsync = refreshAsync;
  exports.revokeAsync = revokeAsync;
  exports.URLSchemes = exports.OAuthRedirect = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[3]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var ExpoAppAuth = _expoCore.NativeModulesProxy.ExpoAppAuth;

  var isValidString = function isValidString(s) {
    return s && typeof s === 'string';
  };

  function isValidClientId(clientId) {
    if (!isValidString(clientId)) throw new Error('Config error: clientId must be a string');
  }

  function isValidProps(_ref) {
    var isRefresh = _ref.isRefresh,
        issuer = _ref.issuer,
        redirectUrl = _ref.redirectUrl,
        clientId = _ref.clientId,
        clientSecret = _ref.clientSecret,
        scopes = _ref.scopes,
        additionalParameters = _ref.additionalParameters,
        serviceConfiguration = _ref.serviceConfiguration;

    var _serviceConfigIsValid = serviceConfiguration && isValidString(serviceConfiguration.authorizationEndpoint) && isValidString(serviceConfiguration.tokenEndpoint);

    if (!isValidString(issuer) && !_serviceConfigIsValid) throw new Error('Invalid you must provide either an issuer or a service endpoints');
    if (!isValidString(redirectUrl)) throw new Error('Config error: redirectUrl must be a string');
    isValidClientId(clientId);
  }

  function _executeAsync(props) {
    return _regenerator.default.async(function _executeAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!props.redirectUrl) {
              props.redirectUrl = ExpoAppAuth.OAuthRedirect + ":/oauthredirect";
            }

            isValidProps(props);
            _context.next = 4;
            return _regenerator.default.awrap(ExpoAppAuth.executeAsync(props));

          case 4:
            return _context.abrupt("return", _context.sent);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function authAsync(props) {
    return _regenerator.default.async(function authAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(_executeAsync(props));

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function refreshAsync(props, refreshToken) {
    return _regenerator.default.async(function refreshAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (refreshToken) {
              _context3.next = 2;
              break;
            }

            throw new Error('Please include the refreshToken');

          case 2:
            _context3.next = 4;
            return _regenerator.default.awrap(_executeAsync((0, _objectSpread2.default)({
              isRefresh: true,
              refreshToken: refreshToken
            }, props)));

          case 4:
            return _context3.abrupt("return", _context3.sent);

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function revokeAsync(_ref2, _ref3) {
    var clientId, issuer, serviceConfiguration, token, _ref3$isClientIdProvi, isClientIdProvided, revocationEndpoint, response, openidConfig, body, headers, results;

    return _regenerator.default.async(function revokeAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            clientId = _ref2.clientId, issuer = _ref2.issuer, serviceConfiguration = _ref2.serviceConfiguration;
            token = _ref3.token, _ref3$isClientIdProvi = _ref3.isClientIdProvided, isClientIdProvided = _ref3$isClientIdProvi === undefined ? false : _ref3$isClientIdProvi;

            if (token) {
              _context4.next = 4;
              break;
            }

            throw new Error('Please include the token to revoke');

          case 4:
            isValidClientId(clientId);

            if (!(!isValidString(issuer) || serviceConfiguration && !isValidString(serviceConfiguration.revocationEndpoint))) {
              _context4.next = 7;
              break;
            }

            throw new Error('Config error: you must provide either an issuer or a revocation endpoint');

          case 7:
            if (!(serviceConfiguration && serviceConfiguration.revocationEndpoint)) {
              _context4.next = 11;
              break;
            }

            revocationEndpoint = serviceConfiguration.revocationEndpoint;
            _context4.next = 19;
            break;

          case 11:
            _context4.next = 13;
            return _regenerator.default.awrap(fetch(issuer + "/.well-known/openid-configuration"));

          case 13:
            response = _context4.sent;
            _context4.next = 16;
            return _regenerator.default.awrap(response.json());

          case 16:
            openidConfig = _context4.sent;
            (0, _invariant.default)(openidConfig.revocation_endpoint, 'The OpenID config does not specify a revocation endpoint');
            revocationEndpoint = openidConfig.revocation_endpoint;

          case 19:
            body = "token=" + token + (isClientIdProvided ? "&client_id=" + clientId : '');
            headers = {
              'Content-Type': 'application/x-www-form-urlencoded'
            };
            _context4.prev = 21;
            _context4.next = 24;
            return _regenerator.default.awrap(fetch(revocationEndpoint, {
              method: 'POST',
              headers: headers,
              body: body
            }));

          case 24:
            results = _context4.sent;
            return _context4.abrupt("return", results);

          case 28:
            _context4.prev = 28;
            _context4.t0 = _context4["catch"](21);
            throw new Error("Failed to revoke token " + _context4.t0.message);

          case 31:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this, [[21, 28]]);
  }

  var OAuthRedirect = ExpoAppAuth.OAuthRedirect,
      URLSchemes = ExpoAppAuth.URLSchemes;
  exports.URLSchemes = URLSchemes;
  exports.OAuthRedirect = OAuthRedirect;
},380,[1,48,130,331,334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getStatusAsync = getStatusAsync;
  exports.setMinimumIntervalAsync = setMinimumIntervalAsync;
  exports.registerTaskAsync = registerTaskAsync;
  exports.unregisterTaskAsync = unregisterTaskAsync;
  exports.Status = exports.Result = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[3]);

  var TaskManager = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

  var ExpoBackgroundFetch = _expoCore.NativeModulesProxy.ExpoBackgroundFetch;
  var BackgroundFetchResult;
  exports.Result = BackgroundFetchResult;

  (function (BackgroundFetchResult) {
    BackgroundFetchResult[BackgroundFetchResult["NoData"] = 1] = "NoData";
    BackgroundFetchResult[BackgroundFetchResult["NewData"] = 2] = "NewData";
    BackgroundFetchResult[BackgroundFetchResult["Failed"] = 3] = "Failed";
  })(BackgroundFetchResult || (exports.Result = BackgroundFetchResult = {}));

  var BackgroundFetchStatus;
  exports.Status = BackgroundFetchStatus;

  (function (BackgroundFetchStatus) {
    BackgroundFetchStatus[BackgroundFetchStatus["Denied"] = 1] = "Denied";
    BackgroundFetchStatus[BackgroundFetchStatus["Restricted"] = 2] = "Restricted";
    BackgroundFetchStatus[BackgroundFetchStatus["Available"] = 3] = "Available";
  })(BackgroundFetchStatus || (exports.Status = BackgroundFetchStatus = {}));

  function getStatusAsync() {
    return _regenerator.default.async(function getStatusAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(_expoCore.Platform.OS !== 'ios')) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", Promise.resolve(null));

          case 2:
            return _context.abrupt("return", ExpoBackgroundFetch.getStatusAsync());

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function setMinimumIntervalAsync(minimumInterval) {
    return _regenerator.default.async(function setMinimumIntervalAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(_expoCore.Platform.OS !== 'ios')) {
              _context2.next = 3;
              break;
            }

            console.warn("expo-background-fetch is currently available only on iOS");
            return _context2.abrupt("return");

          case 3:
            _context2.next = 5;
            return _regenerator.default.awrap(ExpoBackgroundFetch.setMinimumIntervalAsync(minimumInterval));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function registerTaskAsync(taskName) {
    return _regenerator.default.async(function registerTaskAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(_expoCore.Platform.OS !== 'ios')) {
              _context3.next = 3;
              break;
            }

            console.warn("expo-background-fetch is currently available only on iOS");
            return _context3.abrupt("return");

          case 3:
            if (TaskManager.isTaskDefined(taskName)) {
              _context3.next = 5;
              break;
            }

            throw new Error("Task '" + taskName + "' is not defined. You must define a task using TaskManager.defineTask before registering.");

          case 5:
            _context3.next = 7;
            return _regenerator.default.awrap(ExpoBackgroundFetch.registerTaskAsync(taskName));

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function unregisterTaskAsync(taskName) {
    return _regenerator.default.async(function unregisterTaskAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(_expoCore.Platform.OS !== 'ios')) {
              _context4.next = 3;
              break;
            }

            console.warn("expo-background-fetch is currently available only on iOS");
            return _context4.abrupt("return");

          case 3:
            _context4.next = 5;
            return _regenerator.default.awrap(ExpoBackgroundFetch.unregisterTaskAsync(taskName));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }
},381,[366,1,130,331,382]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.defineTask = defineTask;
  exports.isTaskDefined = isTaskDefined;
  exports.isTaskRegisteredAsync = isTaskRegisteredAsync;
  exports.getTaskOptionsAsync = getTaskOptionsAsync;
  exports.getRegisteredTasksAsync = getRegisteredTasksAsync;
  exports.unregisterTaskAsync = unregisterTaskAsync;
  exports.unregisterAllTasksAsync = unregisterAllTasksAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[2]);

  var _expoErrors = _$$_REQUIRE(_dependencyMap[3]);

  var _ExpoTaskManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var eventEmitter = new _expoCore.EventEmitter(_ExpoTaskManager.default);
  var tasks = new Map();
  var isRunningDuringInitialization = true;

  function _validateTaskName(taskName) {
    if (!taskName || typeof taskName !== 'string') {
      throw new TypeError('`taskName` must be a non-empty string.');
    }
  }

  function defineTask(taskName, task) {
    if (!isRunningDuringInitialization) {
      console.error("TaskManager.defineTask must be called during initialization phase!");
      return;
    }

    if (!taskName || typeof taskName !== 'string') {
      console.warn("TaskManager.defineTask: 'taskName' argument must be a non-empty string.");
      return;
    }

    if (!task || typeof task !== 'function') {
      console.warn("TaskManager.defineTask: 'task' argument must be a function.");
      return;
    }

    if (tasks.has(taskName)) {
      console.warn("TaskManager.defineTask: task '" + taskName + "' is already defined.");
      return;
    }

    tasks.set(taskName, task);
  }

  function isTaskDefined(taskName) {
    return tasks.has(taskName);
  }

  function isTaskRegisteredAsync(taskName) {
    return _regenerator.default.async(function isTaskRegisteredAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (_ExpoTaskManager.default.isTaskRegisteredAsync) {
              _context.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('TaskManager', 'isTaskRegisteredAsync');

          case 2:
            _validateTaskName(taskName);

            return _context.abrupt("return", _ExpoTaskManager.default.isTaskRegisteredAsync(taskName));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function getTaskOptionsAsync(taskName) {
    return _regenerator.default.async(function getTaskOptionsAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (_ExpoTaskManager.default.getTaskOptionsAsync) {
              _context2.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('TaskManager', 'getTaskOptionsAsync');

          case 2:
            _validateTaskName(taskName);

            return _context2.abrupt("return", _ExpoTaskManager.default.getTaskOptionsAsync(taskName));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function getRegisteredTasksAsync() {
    return _regenerator.default.async(function getRegisteredTasksAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (_ExpoTaskManager.default.getRegisteredTasksAsync) {
              _context3.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('TaskManager', 'getRegisteredTasksAsync');

          case 2:
            return _context3.abrupt("return", _ExpoTaskManager.default.getRegisteredTasksAsync());

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function unregisterTaskAsync(taskName) {
    return _regenerator.default.async(function unregisterTaskAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (_ExpoTaskManager.default.unregisterTaskAsync) {
              _context4.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('TaskManager', 'unregisterTaskAsync');

          case 2:
            _validateTaskName(taskName);

            _context4.next = 5;
            return _regenerator.default.awrap(_ExpoTaskManager.default.unregisterTaskAsync(taskName));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function unregisterAllTasksAsync() {
    return _regenerator.default.async(function unregisterAllTasksAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (_ExpoTaskManager.default.unregisterAllTasksAsync) {
              _context5.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('TaskManager', 'unregisterAllTasksAsync');

          case 2:
            _context5.next = 4;
            return _regenerator.default.awrap(_ExpoTaskManager.default.unregisterAllTasksAsync());

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  eventEmitter.addListener(_ExpoTaskManager.default.EVENT_NAME, function _callee(_ref) {
    var data, error, executionInfo, eventId, taskName, task, result;
    return _regenerator.default.async(function _callee$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            data = _ref.data, error = _ref.error, executionInfo = _ref.executionInfo;
            eventId = executionInfo.eventId, taskName = executionInfo.taskName;
            task = tasks.get(taskName);
            result = null;

            if (!task) {
              _context6.next = 20;
              break;
            }

            _context6.prev = 5;
            _context6.next = 8;
            return _regenerator.default.awrap(task({
              data: data,
              error: error,
              executionInfo: executionInfo
            }));

          case 8:
            result = _context6.sent;
            _context6.next = 14;
            break;

          case 11:
            _context6.prev = 11;
            _context6.t0 = _context6["catch"](5);
            console.error("TaskManager: Task \"" + taskName + "\" failed:", _context6.t0);

          case 14:
            _context6.prev = 14;
            _context6.next = 17;
            return _regenerator.default.awrap(_ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {
              eventId: eventId,
              result: result
            }));

          case 17:
            return _context6.finish(14);

          case 18:
            _context6.next = 25;
            break;

          case 20:
            console.warn("TaskManager: Task \"" + taskName + "\" has been executed but looks like it is not defined. Please make sure that \"TaskManager.defineTask\" is called during initialization phase.");
            _context6.next = 23;
            return _regenerator.default.awrap(_ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {
              eventId: eventId,
              result: result
            }));

          case 23:
            _context6.next = 25;
            return _regenerator.default.awrap(_ExpoTaskManager.default.unregisterTaskAsync(taskName));

          case 25:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this, [[5, 11, 14, 18]]);
  });
  Promise.resolve().then(function () {
    isRunningDuringInitialization = false;
  });
},382,[1,130,331,368,383]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoTaskManager;
  exports.default = _default;
},383,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get BarCodeScanner() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    }

  };
},384,[385]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Constants = exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[12]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[13]);

  var ExpoBarCodeScannerModule = _expoCore.NativeModulesProxy.ExpoBarCodeScannerModule;
  var EVENT_THROTTLE_MS = 500;

  var BarCodeScanner = function (_React$Component) {
    (0, _inherits2.default)(BarCodeScanner, _React$Component);

    function BarCodeScanner(props) {
      var _this;

      (0, _classCallCheck2.default)(this, BarCodeScanner);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BarCodeScanner).call(this, props));

      _this.setReference = function (ref) {
        if (ref) {
          _this.barCodeScannerRef = ref;
          _this.barCodeScannerHandle = (0, _reactNative.findNodeHandle)(ref);
        } else {
          _this.barCodeScannerRef = null;
          _this.barCodeScannerHandle = null;
        }
      };

      _this.onObjectDetected = function (callback) {
        return function (_ref) {
          var nativeEvent = _ref.nativeEvent;
          var type = nativeEvent.type;

          if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && new Date() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {
            return;
          }

          if (callback) {
            callback(nativeEvent);
            _this.lastEventsTimes[type] = new Date();
            _this.lastEvents[type] = JSON.stringify(nativeEvent);
          }
        };
      };

      _this.lastEvents = {};
      _this.lastEventsTimes = {};
      return _this;
    }

    (0, _createClass2.default)(BarCodeScanner, [{
      key: "render",
      value: function render() {
        var nativeProps = this.convertNativeProps(this.props);
        var _this$props = this.props,
            onBarCodeScanned = _this$props.onBarCodeScanned,
            onBarCodeRead = _this$props.onBarCodeRead;
        return _react.default.createElement(ExpoBarCodeScannerView, (0, _extends2.default)({}, nativeProps, {
          ref: this.setReference,
          onBarCodeScanned: this.onObjectDetected(onBarCodeScanned || onBarCodeRead)
        }));
      }
    }, {
      key: "convertNativeProps",
      value: function convertNativeProps(props) {
        var newProps = (0, _lodash.default)(props, this.convertProp);
        return newProps;
      }
    }, {
      key: "convertProp",
      value: function convertProp(value, key) {
        if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {
          return BarCodeScanner.ConversionTables[key][value];
        }

        return value;
      }
    }], [{
      key: "scanFromURLAsync",
      value: function scanFromURLAsync(url, barCodeTypes) {
        var effectiveBarCodeTypes;
        return _regenerator.default.async(function scanFromURLAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(Array.isArray(barCodeTypes) && barCodeTypes.length === 0)) {
                  _context.next = 2;
                  break;
                }

                throw new Error('No barCodeTypes requested, provide at least one barCodeType for scanner');

              case 2:
                if (!(_reactNative.Platform.OS === 'ios')) {
                  _context.next = 6;
                  break;
                }

                if (!(Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeScanner.Constants.BarCodeType.qr))) {
                  _context.next = 5;
                  break;
                }

                throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');

              case 5:
                return _context.abrupt("return", ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeScanner.Constants.BarCodeType.qr]));

              case 6:
                effectiveBarCodeTypes = barCodeTypes || Object.values(ExpoBarCodeScannerModule.BarCodeType);
                return _context.abrupt("return", ExpoBarCodeScannerModule.scanFromURLAsync(url, effectiveBarCodeTypes));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }]);
    return BarCodeScanner;
  }(_react.default.Component);

  exports.default = BarCodeScanner;
  BarCodeScanner.Constants = {
    BarCodeType: ExpoBarCodeScannerModule.BarCodeType,
    Type: ExpoBarCodeScannerModule.Type
  };
  BarCodeScanner.ConversionTables = {
    type: ExpoBarCodeScannerModule.Type
  };
  BarCodeScanner.propTypes = (0, _objectSpread2.default)({}, _reactNative.ViewPropTypes, {
    onBarCodeScanned: _propTypes.default.func,
    barCodeTypes: _propTypes.default.array,
    type: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
  });
  BarCodeScanner.defaultProps = {
    type: ExpoBarCodeScannerModule.Type.back,
    barCodeTypes: Object.values(ExpoBarCodeScannerModule.BarCodeType)
  };
  var Constants = BarCodeScanner.Constants;
  exports.Constants = Constants;
  var ExpoBarCodeScannerView = (0, _expoCore.requireNativeViewManager)('ExpoBarCodeScannerView', BarCodeScanner);
},385,[1,48,130,3,21,22,34,37,40,51,65,386,331,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var LARGE_ARRAY_SIZE = 200;
  var FUNC_ERROR_TEXT = 'Expected a function';
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reEscapeChar = /\\(\\)?/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding('util');
    } catch (e) {}
  }();

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function isHostObject(value) {
    var result = false;

    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }

    return result;
  }

  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var arrayProto = Array.prototype,
      funcProto = Function.prototype,
      objectProto = Object.prototype;
  var coreJsData = root['__core-js_shared__'];

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  var Symbol = root.Symbol,
      Uint8Array = root.Uint8Array,
      propertyIsEnumerable = objectProto.propertyIsEnumerable,
      splice = arrayProto.splice;
  var nativeKeys = overArg(Object.keys, Object);
  var DataView = getNative(root, 'DataView'),
      Map = getNative(root, 'Map'),
      Promise = getNative(root, 'Promise'),
      Set = getNative(root, 'Set'),
      WeakMap = getNative(root, 'WeakMap'),
      nativeCreate = getNative(Object, 'create');
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function Hash(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  function ListCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function listCacheClear() {
    this.__data__ = [];
  }

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    return true;
  }

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  function MapCache(entries) {
    var index = -1,
        length = entries ? entries.length : 0;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  function SetCache(values) {
    var index = -1,
        length = values ? values.length : 0;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  }

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }

  function stackClear() {
    this.__data__ = new ListCache();
  }

  function stackDelete(key) {
    return this.__data__['delete'](key);
  }

  function stackGet(key) {
    return this.__data__.get(key);
  }

  function stackHas(key) {
    return this.__data__.has(key);
  }

  function stackSet(key, value) {
    var cache = this.__data__;

    if (cache instanceof ListCache) {
      var pairs = cache.__data__;

      if (!Map || pairs.length < 199) {
        pairs.push([key, value]);
        return this;
      }

      cache = this.__data__ = new MapCache(pairs);
    }

    cache.set(key, value);
    return this;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  var baseFor = createBaseFor();

  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  function baseGet(object, path) {
    path = isKey(path, object) ? [path] : castPath(path);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  function baseGetTag(value) {
    return objectToString.call(value);
  }

  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  function baseIsEqual(value, other, customizer, bitmask, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
  }

  function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = arrayTag,
        othTag = arrayTag;

    if (!objIsArr) {
      objTag = getTag(object);
      objTag = objTag == argsTag ? objectTag : objTag;
    }

    if (!othIsArr) {
      othTag = getTag(other);
      othTag = othTag == argsTag ? objectTag : othTag;
    }

    var objIsObj = objTag == objectTag && !isHostObject(object),
        othIsObj = othTag == objectTag && !isHostObject(other),
        isSameTag = objTag == othTag;

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
    }

    if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
  }

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, 3, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
  }

  function baseIteratee(value) {
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity;
    }

    if (typeof value == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }

    return property(value);
  }

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  function baseMatches(source) {
    var matchData = getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }

    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, 3);
    };
  }

  function basePropertyDeep(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  function castPath(value) {
    return isArray(value) ? value : stringToPath(value);
  }

  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!seen.has(othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
            return seen.add(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= UNORDERED_COMPARE_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];
      result[length] = [key, value, isStrictComparable(value)];
    }

    return result;
  }

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var getTag = baseGetTag;

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = objectToString.call(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : undefined;

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;

          case mapCtorString:
            return mapTag;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag;

          case weakMapCtorString:
            return weakMapTag;
        }
      }

      return result;
    };
  }

  function hasPath(object, path, hasFunc) {
    path = isKey(path, object) ? [path] : castPath(path);
    var result,
        index = -1,
        length = path.length;

    while (++index < length) {
      var key = toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result) {
      return result;
    }

    var length = object ? object.length : 0;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value;

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  var stringToPath = memoize(function (string) {
    string = toString(string);
    var result = [];

    if (reLeadingDot.test(string)) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  var isArray = Array.isArray;

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  function mapValues(object, iteratee) {
    var result = {};
    iteratee = baseIteratee(iteratee, 3);
    baseForOwn(object, function (value, key, object) {
      result[key] = iteratee(value, key, object);
    });
    return result;
  }

  function identity(value) {
    return value;
  }

  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  module.exports = mapValues;
},386,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Camera", {
    enumerable: true,
    get: function get() {
      return _Camera.default;
    }
  });
  Object.defineProperty(exports, "Constants", {
    enumerable: true,
    get: function get() {
      return _Camera.Constants;
    }
  });

  var _Camera = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));
},387,[366,388]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Constants = exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[12]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[13]);

  var CameraManager = _expoCore.NativeModulesProxy.ExponentCameraManager || _expoCore.NativeModulesProxy.ExponentCameraModule;
  var EventThrottleMs = 500;
  var _PICTURE_SAVED_CALLBACKS = {};
  var _GLOBAL_PICTURE_ID = 1;

  var Camera = function (_React$Component) {
    (0, _inherits2.default)(Camera, _React$Component);

    function Camera(props) {
      var _this;

      (0, _classCallCheck2.default)(this, Camera);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Camera).call(this, props));

      _this._onCameraReady = function () {
        if (_this.props.onCameraReady) {
          _this.props.onCameraReady();
        }
      };

      _this._onMountError = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        if (_this.props.onMountError) {
          _this.props.onMountError(nativeEvent);
        }
      };

      _this._onPictureSaved = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        var callback = _PICTURE_SAVED_CALLBACKS[nativeEvent.id];

        if (callback) {
          callback(nativeEvent.data);
          delete _PICTURE_SAVED_CALLBACKS[nativeEvent.id];
        }
      };

      _this._onObjectDetected = function (callback) {
        return function (_ref3) {
          var nativeEvent = _ref3.nativeEvent;
          var type = nativeEvent.type;

          if (_this._lastEvents[type] && _this._lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this._lastEvents[type] && new Date().getTime() - _this._lastEventsTimes[type].getTime() < EventThrottleMs) {
            return;
          }

          if (callback) {
            callback(nativeEvent);
            _this._lastEventsTimes[type] = new Date();
            _this._lastEvents[type] = JSON.stringify(nativeEvent);
          }
        };
      };

      _this._setReference = function (ref) {
        if (ref) {
          _this._cameraRef = ref;
          _this._cameraHandle = (0, _reactNative.findNodeHandle)(ref);
        } else {
          _this._cameraRef = null;
          _this._cameraHandle = null;
        }
      };

      _this._lastEvents = {};
      _this._lastEventsTimes = {};
      return _this;
    }

    (0, _createClass2.default)(Camera, [{
      key: "takePictureAsync",
      value: function takePictureAsync(options) {
        var id;
        return _regenerator.default.async(function takePictureAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!options) {
                  options = {};
                }

                if (!options.quality) {
                  options.quality = 1;
                }

                if (options.onPictureSaved) {
                  id = _GLOBAL_PICTURE_ID++;
                  _PICTURE_SAVED_CALLBACKS[id] = options.onPictureSaved;
                  options.id = id;
                  options.fastMode = true;
                }

                _context.next = 5;
                return _regenerator.default.awrap(CameraManager.takePicture(options, this._cameraHandle));

              case 5:
                return _context.abrupt("return", _context.sent);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "getSupportedRatiosAsync",
      value: function getSupportedRatiosAsync() {
        return _regenerator.default.async(function getSupportedRatiosAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(_reactNative.Platform.OS === 'android')) {
                  _context2.next = 6;
                  break;
                }

                _context2.next = 3;
                return _regenerator.default.awrap(CameraManager.getSupportedRatios(this._cameraHandle));

              case 3:
                return _context2.abrupt("return", _context2.sent);

              case 6:
                throw new Error('Ratio is not supported on iOS');

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "getAvailablePictureSizesAsync",
      value: function getAvailablePictureSizesAsync(ratio) {
        return _regenerator.default.async(function getAvailablePictureSizesAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _regenerator.default.awrap(CameraManager.getAvailablePictureSizes(ratio, this._cameraHandle));

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "recordAsync",
      value: function recordAsync(options) {
        return _regenerator.default.async(function recordAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!options || typeof options !== 'object') {
                  options = {};
                } else if (typeof options.quality === 'string') {
                  options.quality = Camera.Constants.VideoQuality[options.quality];
                }

                _context4.next = 3;
                return _regenerator.default.awrap(CameraManager.record(options, this._cameraHandle));

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "stopRecording",
      value: function stopRecording() {
        CameraManager.stopRecording(this._cameraHandle);
      }
    }, {
      key: "pausePreview",
      value: function pausePreview() {
        CameraManager.pausePreview(this._cameraHandle);
      }
    }, {
      key: "resumePreview",
      value: function resumePreview() {
        CameraManager.resumePreview(this._cameraHandle);
      }
    }, {
      key: "render",
      value: function render() {
        var nativeProps = this._convertNativeProps(this.props);

        return _react.default.createElement(ExponentCamera, (0, _extends2.default)({}, nativeProps, {
          ref: this._setReference,
          onCameraReady: this._onCameraReady,
          onMountError: this._onMountError,
          onPictureSaved: this._onPictureSaved,
          onBarCodeScanned: this._onObjectDetected(this.props.onBarCodeScanned),
          onFacesDetected: this._onObjectDetected(this.props.onFacesDetected)
        }));
      }
    }, {
      key: "_convertNativeProps",
      value: function _convertNativeProps(props) {
        var newProps = (0, _lodash.default)(props, convertProp);
        var propsKeys = Object.keys(newProps);

        if (!propsKeys.includes('barCodeScannerSettings') && propsKeys.includes('barCodeTypes')) {
          newProps.barCodeScannerSettings = {
            barCodeTypes: newProps.barCodeTypes
          };
        }

        if (props.onBarCodeScanned) {
          newProps.barCodeScannerEnabled = true;
        }

        if (props.onFacesDetected) {
          newProps.faceDetectorEnabled = true;
        }

        if (_reactNative.Platform.OS === 'ios') {
          delete newProps.ratio;
          delete newProps.useCamera2Api;
        }

        return newProps;
      }
    }]);
    return Camera;
  }(_react.default.Component);

  exports.default = Camera;
  Camera.Constants = {
    Type: CameraManager.Type,
    FlashMode: CameraManager.FlashMode,
    AutoFocus: CameraManager.AutoFocus,
    WhiteBalance: CameraManager.WhiteBalance,
    VideoQuality: CameraManager.VideoQuality,
    VideoStabilization: CameraManager.VideoStabilization || {}
  };
  Camera.ConversionTables = {
    type: CameraManager.Type,
    flashMode: CameraManager.FlashMode,
    autoFocus: CameraManager.AutoFocus,
    whiteBalance: CameraManager.WhiteBalance
  };
  Camera.propTypes = (0, _objectSpread2.default)({}, _reactNative.ViewPropTypes, {
    zoom: _propTypes.default.number,
    ratio: _propTypes.default.string,
    focusDepth: _propTypes.default.number,
    onMountError: _propTypes.default.func,
    pictureSize: _propTypes.default.string,
    onCameraReady: _propTypes.default.func,
    useCamera2Api: _propTypes.default.bool,
    onBarCodeScanned: _propTypes.default.func,
    barCodeScannerSettings: _propTypes.default.object,
    onFacesDetected: _propTypes.default.func,
    faceDetectorSettings: _propTypes.default.object,
    type: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    flashMode: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    videoStabilizationMode: _propTypes.default.number,
    whiteBalance: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    autoFocus: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool])
  });
  Camera.defaultProps = {
    zoom: 0,
    ratio: '4:3',
    focusDepth: 0,
    faceDetectorSettings: {},
    type: CameraManager.Type.back,
    autoFocus: CameraManager.AutoFocus.on,
    flashMode: CameraManager.FlashMode.off,
    whiteBalance: CameraManager.WhiteBalance.auto
  };

  var convertProp = function convertProp(value, key) {
    if (typeof value === 'string' && Camera.ConversionTables[key]) {
      return Camera.ConversionTables[key][value];
    }

    return value;
  };

  var Constants = Camera.Constants;
  exports.Constants = Constants;
  var ExponentCamera = (0, _expoCore.requireNativeViewManager)('ExponentCamera');
},388,[1,48,3,130,21,22,34,37,40,51,65,386,331,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get Contacts() {
      return _$$_REQUIRE(_dependencyMap[0]);
    }

  };
},389,[390]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.shareContactAsync = shareContactAsync;
  exports.getContactsAsync = getContactsAsync;
  exports.getPagedContactsAsync = getPagedContactsAsync;
  exports.getContactByIdAsync = getContactByIdAsync;
  exports.addContactAsync = addContactAsync;
  exports.updateContactAsync = updateContactAsync;
  exports.removeContactAsync = removeContactAsync;
  exports.writeContactToFileAsync = writeContactToFileAsync;
  exports.presentFormAsync = presentFormAsync;
  exports.addExistingGroupToContainerAsync = addExistingGroupToContainerAsync;
  exports.createGroupAsync = createGroupAsync;
  exports.updateGroupNameAsync = updateGroupNameAsync;
  exports.removeGroupAsync = removeGroupAsync;
  exports.addExistingContactToGroupAsync = addExistingContactToGroupAsync;
  exports.removeContactFromGroupAsync = removeContactFromGroupAsync;
  exports.getGroupsAsync = getGroupsAsync;
  exports.getDefaultContainerIdAsync = getDefaultContainerIdAsync;
  exports.getContainersAsync = getContainersAsync;
  exports.ContactTypes = exports.SortTypes = exports.ContainerTypes = exports.CalendarFormats = exports.Fields = exports.RELATIONSHIPS = exports.DATES = exports.URLS = exports.IM_ADDRESSES = exports.SOCIAL_PROFILES = exports.PHONETIC_LAST_NAME = exports.PHONETIC_MIDDLE_NAME = exports.PHONETIC_FIRST_NAME = exports.NAME_SUFFIX = exports.NAME_PREFIX = exports.NON_GREGORIAN_BIRTHDAY = exports.BIRTHDAY = exports.NOTE = exports.RAW_IMAGE = exports.IMAGE = exports.ADDRESSES = exports.EMAILS = exports.PHONE_NUMBERS = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _expoCore = _$$_REQUIRE(_dependencyMap[5]);

  var _uuidJs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _ExpoContacts = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[8]);

  var isIOS = _expoCore.Platform.OS === 'ios';

  function shareContactAsync(contactId, message) {
    var shareOptions,
        url,
        _args = arguments;
    return _regenerator.default.async(function shareContactAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            shareOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};

            if (_ExpoContacts.default.shareContactAsync) {
              _context.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'shareContactAsync');

          case 3:
            if (!isIOS) {
              _context.next = 10;
              break;
            }

            _context.next = 6;
            return _regenerator.default.awrap(writeContactToFileAsync({
              id: contactId
            }));

          case 6:
            url = _context.sent;

            _reactNative.Share.share({
              url: url,
              message: message
            }, shareOptions);

            _context.next = 13;
            break;

          case 10:
            _context.next = 12;
            return _regenerator.default.awrap(_ExpoContacts.default.shareContactAsync(contactId, message));

          case 12:
            return _context.abrupt("return", _context.sent);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function getContactsAsync() {
    var contactQuery,
        _args2 = arguments;
    return _regenerator.default.async(function getContactsAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            contactQuery = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};

            if (_ExpoContacts.default.getContactsAsync) {
              _context2.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'getContactsAsync');

          case 3:
            _context2.next = 5;
            return _regenerator.default.awrap(_ExpoContacts.default.getContactsAsync(contactQuery));

          case 5:
            return _context2.abrupt("return", _context2.sent);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function getPagedContactsAsync() {
    var contactQuery,
        pageSize,
        nOptions,
        _args3 = arguments;
    return _regenerator.default.async(function getPagedContactsAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            contactQuery = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
            pageSize = contactQuery.pageSize, nOptions = (0, _objectWithoutProperties2.default)(contactQuery, ["pageSize"]);

            if (!(pageSize && pageSize <= 0)) {
              _context3.next = 4;
              break;
            }

            throw new Error('Error: Contacts.getPagedContactsAsync: `pageSize` must be greater than 0');

          case 4:
            _context3.next = 6;
            return _regenerator.default.awrap(getContactsAsync((0, _objectSpread2.default)({}, nOptions, {
              pageSize: pageSize
            })));

          case 6:
            return _context3.abrupt("return", _context3.sent);

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function getContactByIdAsync(id, fields) {
    var results;
    return _regenerator.default.async(function getContactByIdAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (_ExpoContacts.default.getContactsAsync) {
              _context4.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'getContactsAsync');

          case 2:
            if (!(id == null)) {
              _context4.next = 6;
              break;
            }

            throw new Error('Error: Contacts.getContactByIdAsync: Please pass an ID as a parameter');

          case 6:
            _context4.next = 8;
            return _regenerator.default.awrap(_ExpoContacts.default.getContactsAsync({
              pageSize: 1,
              pageOffset: 0,
              fields: fields,
              id: id
            }));

          case 8:
            results = _context4.sent;

            if (!(results && results.data && results.data.length > 0)) {
              _context4.next = 11;
              break;
            }

            return _context4.abrupt("return", results.data[0]);

          case 11:
            return _context4.abrupt("return", null);

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function addContactAsync(contact, containerId) {
    return _regenerator.default.async(function addContactAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (_ExpoContacts.default.addContactAsync) {
              _context5.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'addContactAsync');

          case 2:
            _context5.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.addContactAsync(contact, containerId));

          case 4:
            return _context5.abrupt("return", _context5.sent);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  function updateContactAsync(contact) {
    return _regenerator.default.async(function updateContactAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (_ExpoContacts.default.updateContactAsync) {
              _context6.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'updateContactAsync');

          case 2:
            _context6.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.updateContactAsync(contact));

          case 4:
            return _context6.abrupt("return", _context6.sent);

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this);
  }

  function removeContactAsync(contactId) {
    return _regenerator.default.async(function removeContactAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (_ExpoContacts.default.removeContactAsync) {
              _context7.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'removeContactAsync');

          case 2:
            _context7.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.removeContactAsync(contactId));

          case 4:
            return _context7.abrupt("return", _context7.sent);

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  }

  function writeContactToFileAsync() {
    var contactQuery,
        _args8 = arguments;
    return _regenerator.default.async(function writeContactToFileAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            contactQuery = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};

            if (_ExpoContacts.default.writeContactToFileAsync) {
              _context8.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'writeContactToFileAsync');

          case 3:
            _context8.next = 5;
            return _regenerator.default.awrap(_ExpoContacts.default.writeContactToFileAsync(contactQuery));

          case 5:
            return _context8.abrupt("return", _context8.sent);

          case 6:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this);
  }

  function presentFormAsync(contactId, contact) {
    var formOptions,
        adjustedOptions,
        _args9 = arguments;
    return _regenerator.default.async(function presentFormAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            formOptions = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};

            if (_ExpoContacts.default.presentFormAsync) {
              _context9.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'presentFormAsync');

          case 3:
            if (!isIOS) {
              _context9.next = 11;
              break;
            }

            adjustedOptions = formOptions;

            if (contactId) {
              if (contact) {
                contact = null;
                console.log('Expo.Contacts.presentFormAsync: You should define either a `contact` or a `contactId` but not both.');
              }

              if (adjustedOptions.isNew !== undefined) {
                console.log('Expo.Contacts.presentFormAsync: formOptions.isNew is not supported with `contactId`');
              }
            }

            _context9.next = 8;
            return _regenerator.default.awrap(_ExpoContacts.default.presentFormAsync(contactId, contact, adjustedOptions));

          case 8:
            return _context9.abrupt("return", _context9.sent);

          case 11:
            _context9.next = 13;
            return _regenerator.default.awrap(_ExpoContacts.default.presentFormAsync(contactId, contact, formOptions));

          case 13:
            return _context9.abrupt("return", _context9.sent);

          case 14:
          case "end":
            return _context9.stop();
        }
      }
    }, null, this);
  }

  function addExistingGroupToContainerAsync(groupId, containerId) {
    return _regenerator.default.async(function addExistingGroupToContainerAsync$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (_ExpoContacts.default.addExistingGroupToContainerAsync) {
              _context10.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'addExistingGroupToContainerAsync');

          case 2:
            _context10.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.addExistingGroupToContainerAsync(groupId, containerId));

          case 4:
            return _context10.abrupt("return", _context10.sent);

          case 5:
          case "end":
            return _context10.stop();
        }
      }
    }, null, this);
  }

  function createGroupAsync(name, containerId) {
    return _regenerator.default.async(function createGroupAsync$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (_ExpoContacts.default.createGroupAsync) {
              _context11.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'createGroupAsync');

          case 2:
            name = name || _uuidJs.default.create().toString();

            if (containerId) {
              _context11.next = 7;
              break;
            }

            _context11.next = 6;
            return _regenerator.default.awrap(getDefaultContainerIdAsync());

          case 6:
            containerId = _context11.sent;

          case 7:
            _context11.next = 9;
            return _regenerator.default.awrap(_ExpoContacts.default.createGroupAsync(name, containerId));

          case 9:
            return _context11.abrupt("return", _context11.sent);

          case 10:
          case "end":
            return _context11.stop();
        }
      }
    }, null, this);
  }

  function updateGroupNameAsync(groupName, groupId) {
    return _regenerator.default.async(function updateGroupNameAsync$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (_ExpoContacts.default.updateGroupNameAsync) {
              _context12.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'updateGroupNameAsync');

          case 2:
            _context12.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.updateGroupNameAsync(groupName, groupId));

          case 4:
            return _context12.abrupt("return", _context12.sent);

          case 5:
          case "end":
            return _context12.stop();
        }
      }
    }, null, this);
  }

  function removeGroupAsync(groupId) {
    return _regenerator.default.async(function removeGroupAsync$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (_ExpoContacts.default.removeGroupAsync) {
              _context13.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'removeGroupAsync');

          case 2:
            _context13.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.removeGroupAsync(groupId));

          case 4:
            return _context13.abrupt("return", _context13.sent);

          case 5:
          case "end":
            return _context13.stop();
        }
      }
    }, null, this);
  }

  function addExistingContactToGroupAsync(contactId, groupId) {
    return _regenerator.default.async(function addExistingContactToGroupAsync$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (_ExpoContacts.default.addExistingContactToGroupAsync) {
              _context14.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'addExistingContactToGroupAsync');

          case 2:
            _context14.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.addExistingContactToGroupAsync(contactId, groupId));

          case 4:
            return _context14.abrupt("return", _context14.sent);

          case 5:
          case "end":
            return _context14.stop();
        }
      }
    }, null, this);
  }

  function removeContactFromGroupAsync(contactId, groupId) {
    return _regenerator.default.async(function removeContactFromGroupAsync$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            if (_ExpoContacts.default.removeContactFromGroupAsync) {
              _context15.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'removeContactFromGroupAsync');

          case 2:
            _context15.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.removeContactFromGroupAsync(contactId, groupId));

          case 4:
            return _context15.abrupt("return", _context15.sent);

          case 5:
          case "end":
            return _context15.stop();
        }
      }
    }, null, this);
  }

  function getGroupsAsync(groupQuery) {
    return _regenerator.default.async(function getGroupsAsync$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            if (_ExpoContacts.default.getGroupsAsync) {
              _context16.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'getGroupsAsync');

          case 2:
            _context16.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.getGroupsAsync(groupQuery));

          case 4:
            return _context16.abrupt("return", _context16.sent);

          case 5:
          case "end":
            return _context16.stop();
        }
      }
    }, null, this);
  }

  function getDefaultContainerIdAsync() {
    return _regenerator.default.async(function getDefaultContainerIdAsync$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            if (_ExpoContacts.default.getDefaultContainerIdentifierAsync) {
              _context17.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'getDefaultContainerIdentifierAsync');

          case 2:
            _context17.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.getDefaultContainerIdentifierAsync());

          case 4:
            return _context17.abrupt("return", _context17.sent);

          case 5:
          case "end":
            return _context17.stop();
        }
      }
    }, null, this);
  }

  function getContainersAsync(containerQuery) {
    return _regenerator.default.async(function getContainersAsync$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            if (_ExpoContacts.default.getContainersAsync) {
              _context18.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Contacts', 'getContainersAsync');

          case 2:
            _context18.next = 4;
            return _regenerator.default.awrap(_ExpoContacts.default.getContainersAsync(containerQuery));

          case 4:
            return _context18.abrupt("return", _context18.sent);

          case 5:
          case "end":
            return _context18.stop();
        }
      }
    }, null, this);
  }

  var PHONE_NUMBERS = 'phoneNumbers';
  exports.PHONE_NUMBERS = PHONE_NUMBERS;
  var EMAILS = 'emails';
  exports.EMAILS = EMAILS;
  var ADDRESSES = 'addresses';
  exports.ADDRESSES = ADDRESSES;
  var IMAGE = 'image';
  exports.IMAGE = IMAGE;
  var RAW_IMAGE = 'rawImage';
  exports.RAW_IMAGE = RAW_IMAGE;
  var NOTE = 'note';
  exports.NOTE = NOTE;
  var BIRTHDAY = 'birthday';
  exports.BIRTHDAY = BIRTHDAY;
  var NON_GREGORIAN_BIRTHDAY = 'nonGregorianBirthday';
  exports.NON_GREGORIAN_BIRTHDAY = NON_GREGORIAN_BIRTHDAY;
  var NAME_PREFIX = 'namePrefix';
  exports.NAME_PREFIX = NAME_PREFIX;
  var NAME_SUFFIX = 'nameSuffix';
  exports.NAME_SUFFIX = NAME_SUFFIX;
  var PHONETIC_FIRST_NAME = 'phoneticFirstName';
  exports.PHONETIC_FIRST_NAME = PHONETIC_FIRST_NAME;
  var PHONETIC_MIDDLE_NAME = 'phoneticMiddleName';
  exports.PHONETIC_MIDDLE_NAME = PHONETIC_MIDDLE_NAME;
  var PHONETIC_LAST_NAME = 'phoneticLastName';
  exports.PHONETIC_LAST_NAME = PHONETIC_LAST_NAME;
  var SOCIAL_PROFILES = 'socialProfiles';
  exports.SOCIAL_PROFILES = SOCIAL_PROFILES;
  var IM_ADDRESSES = 'instantMessageAddresses';
  exports.IM_ADDRESSES = IM_ADDRESSES;
  var URLS = 'urlAddresses';
  exports.URLS = URLS;
  var DATES = 'dates';
  exports.DATES = DATES;
  var RELATIONSHIPS = 'relationships';
  exports.RELATIONSHIPS = RELATIONSHIPS;
  var Fields = {
    ID: 'id',
    ContactType: 'contactType',
    Name: 'name',
    FirstName: 'firstName',
    MiddleName: 'middleName',
    LastName: 'lastName',
    MaidenName: 'maidenName',
    NamePrefix: 'namePrefix',
    NameSuffix: 'nameSuffix',
    Nickname: 'nickname',
    PhoneticFirstName: 'phoneticFirstName',
    PhoneticMiddleName: 'phoneticMiddleName',
    PhoneticLastName: 'phoneticLastName',
    Birthday: 'birthday',
    NonGregorianBirthday: 'nonGregorianBirthday',
    Emails: 'emails',
    PhoneNumbers: 'phoneNumbers',
    Addresses: 'addresses',
    SocialProfiles: 'socialProfiles',
    InstantMessageAddresses: 'instantMessageAddresses',
    UrlAddresses: 'urlAddresses',
    Company: 'company',
    JobTitle: 'jobTitle',
    Department: 'department',
    ImageAvailable: 'imageAvailable',
    Image: 'image',
    RawImage: 'rawImage',
    ExtraNames: 'extraNames',
    Note: 'note',
    Dates: 'dates',
    Relationships: 'relationships'
  };
  exports.Fields = Fields;
  var CalendarFormats = {
    Gregorian: 'gregorian',
    Buddhist: 'buddhist',
    Chinese: 'chinese',
    Coptic: 'coptic',
    EthiopicAmeteMihret: 'ethiopicAmeteMihret',
    EthiopicAmeteAlem: 'ethiopicAmeteAlem',
    Hebrew: 'hebrew',
    ISO8601: 'iso8601',
    Indian: 'indian',
    Islamic: 'islamic',
    IslamicCivil: 'islamicCivil',
    Japanese: 'japanese',
    Persian: 'persian',
    RepublicOfChina: 'republicOfChina',
    IslamicTabular: 'islamicTabular',
    IslamicUmmAlQura: 'islamicUmmAlQura'
  };
  exports.CalendarFormats = CalendarFormats;
  var ContainerTypes = {
    Local: 'local',
    Exchange: 'exchange',
    CardDAV: 'cardDAV',
    Unassigned: 'unassigned'
  };
  exports.ContainerTypes = ContainerTypes;
  var SortTypes = {
    UserDefault: 'userDefault',
    FirstName: 'firstName',
    LastName: 'lastName',
    None: 'none'
  };
  exports.SortTypes = SortTypes;
  var ContactTypes = {
    Person: 'person',
    Company: 'company'
  };
  exports.ContactTypes = ContactTypes;
},390,[1,48,9,130,5,331,348,391,368]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoContacts;
  exports.default = _default;
},391,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get FaceDetector() {
      return _$$_REQUIRE(_dependencyMap[0]);
    }

  };
},392,[393]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.detectFacesAsync = detectFacesAsync;
  exports.Constants = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[2]);

  var FaceDetectorModule = _expoCore.NativeModulesProxy.ExpoFaceDetector;

  function detectFacesAsync(uri, options) {
    return FaceDetectorModule.detectFaces((0, _objectSpread2.default)({}, options, {
      uri: uri
    }));
  }

  var Constants = {
    Mode: FaceDetectorModule.Mode,
    Landmarks: FaceDetectorModule.Landmarks,
    Classifications: FaceDetectorModule.Classifications
  };
  exports.Constants = Constants;
},393,[1,48,331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.processFontFamily = processFontFamily;
  exports.isLoaded = isLoaded;
  exports.isLoading = isLoading;
  exports.loadAsync = loadAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoAsset = _$$_REQUIRE(_dependencyMap[2]);

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[4]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _ExpoFontLoader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var isWeb = _expoCore.Platform.OS === 'web';
  var loaded = {};
  var loadPromises = {};

  function processFontFamily(name) {
    if (typeof name !== 'string' || _expoConstants.default.systemFonts.includes(name) || name === 'System') {
      return name;
    }

    if (name.includes(_expoConstants.default.sessionId)) {
      return name;
    }

    if (!isLoaded(name)) {
      return 'System';
    }

    return "ExpoFont-" + _getNativeFontName(name);
  }

  function isLoaded(name) {
    return loaded.hasOwnProperty(name);
  }

  function isLoading(name) {
    return loadPromises.hasOwnProperty(name);
  }

  function loadAsync(nameOrMap, source) {
    var fontMap, names, name, asset;
    return _regenerator.default.async(function loadAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof nameOrMap === 'object')) {
              _context2.next = 6;
              break;
            }

            fontMap = nameOrMap;
            names = Object.keys(fontMap);
            _context2.next = 5;
            return _regenerator.default.awrap(Promise.all(names.map(function (name) {
              return loadAsync(name, fontMap[name]);
            })));

          case 5:
            return _context2.abrupt("return");

          case 6:
            name = nameOrMap;

            if (!loaded[name]) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt("return");

          case 9:
            if (!loadPromises[name]) {
              _context2.next = 11;
              break;
            }

            return _context2.abrupt("return", loadPromises[name]);

          case 11:
            (0, _invariant.default)(source, "No source from which to load font \"" + name + "\"");
            asset = _getAssetForSource(source);

            loadPromises[name] = function _callee() {
              return _regenerator.default.async(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      _context.next = 3;
                      return _regenerator.default.awrap(_loadSingleFontAsync(name, asset));

                    case 3:
                      loaded[name] = true;

                    case 4:
                      _context.prev = 4;
                      delete loadPromises[name];
                      return _context.finish(4);

                    case 7:
                    case "end":
                      return _context.stop();
                  }
                }
              }, null, this, [[0,, 4, 7]]);
            }();

            _context2.next = 16;
            return _regenerator.default.awrap(loadPromises[name]);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function _getAssetForSource(source) {
    if (!isWeb && typeof source === 'string') {
      throw new Error('Loading fonts from remote URIs is temporarily not supported. Please download the font file and load it using require. See: https://docs.expo.io/versions/latest/guides/using-custom-fonts.html#downloading-the-font');
    }

    if (isWeb || typeof source === 'number') {
      return _expoAsset.Asset.fromModule(source);
    }

    return source;
  }

  function _loadSingleFontAsync(name, asset) {
    return _regenerator.default.async(function _loadSingleFontAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _regenerator.default.awrap(asset.downloadAsync());

          case 2:
            if (asset.downloaded) {
              _context3.next = 4;
              break;
            }

            throw new Error("Failed to download asset for font \"" + name + "\"");

          case 4:
            _context3.next = 6;
            return _regenerator.default.awrap(_ExpoFontLoader.default.loadAsync(_getNativeFontName(name), asset.localUri));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function _getNativeFontName(name) {
    if (isWeb) {
      return name;
    }

    return _expoConstants.default.sessionId + "-" + name;
  }

  var wasImportWarningShown = false;
  Object.defineProperty(exports, 'Font', {
    get: function get() {
      if (!wasImportWarningShown) {
        console.warn("The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.");
        wasImportWarningShown = true;
      }

      return {
        processFontFamily: processFontFamily,
        isLoaded: isLoaded,
        isLoading: isLoading,
        loadAsync: loadAsync
      };
    }
  });
},394,[1,130,378,329,331,334,395]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoFontLoader;
  exports.default = _default;
},395,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get GLView() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    }

  };
},396,[397]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[14]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[15]);

  var _package = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var ExponentGLObjectManager = _expoCore.NativeModulesProxy.ExponentGLObjectManager,
      ExponentGLViewManager = _expoCore.NativeModulesProxy.ExponentGLViewManager;

  var GLView = function (_React$Component) {
    (0, _inherits2.default)(GLView, _React$Component);

    function GLView() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, GLView);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(GLView)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this._setNativeRef = function (nativeRef) {
        if (_this.props.nativeRef_EXPERIMENTAL) {
          _this.props.nativeRef_EXPERIMENTAL(nativeRef);
        }

        _this.nativeRef = nativeRef;
      };

      _this._onSurfaceCreate = function (_ref) {
        var exglCtxId = _ref.nativeEvent.exglCtxId;
        var gl = getGl(exglCtxId);
        _this.exglCtxId = exglCtxId;

        if (_this.props.onContextCreate) {
          _this.props.onContextCreate(gl);
        }
      };

      return _this;
    }

    (0, _createClass2.default)(GLView, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            onContextCreate = _this$props.onContextCreate,
            msaaSamples = _this$props.msaaSamples,
            viewProps = (0, _objectWithoutProperties2.default)(_this$props, ["onContextCreate", "msaaSamples"]);
        return React.createElement(_reactNative.View, viewProps, React.createElement(GLView.NativeView, {
          ref: this._setNativeRef,
          style: (0, _objectSpread2.default)({
            flex: 1
          }, _reactNative.Platform.OS === 'ios' ? {
            backgroundColor: 'transparent'
          } : {}),
          onSurfaceCreate: this._onSurfaceCreate,
          msaaSamples: _reactNative.Platform.OS === 'ios' ? msaaSamples : undefined
        }));
      }
    }, {
      key: "startARSessionAsync",
      value: function startARSessionAsync() {
        return ExponentGLViewManager.startARSessionAsync((0, _reactNative.findNodeHandle)(this.nativeRef));
      }
    }, {
      key: "createCameraTextureAsync",
      value: function createCameraTextureAsync(cameraRef) {
        var exglCtxId, cameraTag, _ref2, exglObjId;

        return _regenerator.default.async(function createCameraTextureAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                exglCtxId = this.exglCtxId;

                if (exglCtxId) {
                  _context.next = 3;
                  break;
                }

                throw new Error('GLView\'s surface is not created yet!');

              case 3:
                cameraTag = (0, _reactNative.findNodeHandle)(cameraRef);
                _context.next = 6;
                return _regenerator.default.awrap(ExponentGLObjectManager.createCameraTextureAsync(exglCtxId, cameraTag));

              case 6:
                _ref2 = _context.sent;
                exglObjId = _ref2.exglObjId;
                return _context.abrupt("return", new WebGLTexture(exglObjId));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "destroyObjectAsync",
      value: function destroyObjectAsync(glObject) {
        return ExponentGLObjectManager.destroyObjectAsync(glObject.id);
      }
    }, {
      key: "takeSnapshotAsync",
      value: function takeSnapshotAsync() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var exglCtxId = this.exglCtxId;
        return GLView.takeSnapshotAsync(exglCtxId, options);
      }
    }], [{
      key: "createContextAsync",
      value: function createContextAsync() {
        var _ref3, exglCtxId;

        return _regenerator.default.async(function createContextAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _regenerator.default.awrap(ExponentGLObjectManager.createContextAsync());

              case 2:
                _ref3 = _context2.sent;
                exglCtxId = _ref3.exglCtxId;
                return _context2.abrupt("return", getGl(exglCtxId));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "destroyContextAsync",
      value: function destroyContextAsync(exgl) {
        var exglCtxId;
        return _regenerator.default.async(function destroyContextAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                exglCtxId = getContextId(exgl);
                return _context3.abrupt("return", ExponentGLObjectManager.destroyContextAsync(exglCtxId));

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "takeSnapshotAsync",
      value: function takeSnapshotAsync(exgl) {
        var options,
            exglCtxId,
            _args4 = arguments;
        return _regenerator.default.async(function takeSnapshotAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                exglCtxId = getContextId(exgl);
                return _context4.abrupt("return", ExponentGLObjectManager.takeSnapshotAsync(exglCtxId, options));

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }]);
    return GLView;
  }(React.Component);

  exports.default = GLView;
  GLView.propTypes = (0, _objectSpread2.default)({
    onContextCreate: _propTypes.default.func,
    msaaSamples: _propTypes.default.number,
    nativeRef_EXPERIMENTAL: _propTypes.default.func
  }, _reactNative.ViewPropTypes);
  GLView.defaultProps = {
    msaaSamples: 4
  };
  GLView.NativeView = (0, _expoCore.requireNativeViewManager)('ExponentGLView', GLView);

  var WebGLRenderingContext = function WebGLRenderingContext() {
    (0, _classCallCheck2.default)(this, WebGLRenderingContext);
  };

  var WebGL2RenderingContext = function (_WebGLRenderingContex) {
    (0, _inherits2.default)(WebGL2RenderingContext, _WebGLRenderingContex);

    function WebGL2RenderingContext() {
      (0, _classCallCheck2.default)(this, WebGL2RenderingContext);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGL2RenderingContext).apply(this, arguments));
    }

    return WebGL2RenderingContext;
  }(WebGLRenderingContext);

  var idToObject = {};

  var WebGLObject = function () {
    function WebGLObject(id) {
      (0, _classCallCheck2.default)(this, WebGLObject);

      if (idToObject[id]) {
        throw new Error("WebGL object with underlying EXGLObjectId '" + id + "' already exists!");
      }

      this.id = id;
    }

    (0, _createClass2.default)(WebGLObject, [{
      key: "toString",
      value: function toString() {
        return "[WebGLObject " + this.id + "]";
      }
    }]);
    return WebGLObject;
  }();

  var wrapObject = function wrapObject(type, id) {
    var found = idToObject[id];

    if (found) {
      return found;
    }

    return idToObject[id] = new type(id);
  };

  var objectId = function objectId(obj) {
    return obj && obj.id;
  };

  var WebGLBuffer = function (_WebGLObject) {
    (0, _inherits2.default)(WebGLBuffer, _WebGLObject);

    function WebGLBuffer() {
      (0, _classCallCheck2.default)(this, WebGLBuffer);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLBuffer).apply(this, arguments));
    }

    return WebGLBuffer;
  }(WebGLObject);

  var WebGLFramebuffer = function (_WebGLObject2) {
    (0, _inherits2.default)(WebGLFramebuffer, _WebGLObject2);

    function WebGLFramebuffer() {
      (0, _classCallCheck2.default)(this, WebGLFramebuffer);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLFramebuffer).apply(this, arguments));
    }

    return WebGLFramebuffer;
  }(WebGLObject);

  var WebGLProgram = function (_WebGLObject3) {
    (0, _inherits2.default)(WebGLProgram, _WebGLObject3);

    function WebGLProgram() {
      (0, _classCallCheck2.default)(this, WebGLProgram);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLProgram).apply(this, arguments));
    }

    return WebGLProgram;
  }(WebGLObject);

  var WebGLRenderbuffer = function (_WebGLObject4) {
    (0, _inherits2.default)(WebGLRenderbuffer, _WebGLObject4);

    function WebGLRenderbuffer() {
      (0, _classCallCheck2.default)(this, WebGLRenderbuffer);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLRenderbuffer).apply(this, arguments));
    }

    return WebGLRenderbuffer;
  }(WebGLObject);

  var WebGLShader = function (_WebGLObject5) {
    (0, _inherits2.default)(WebGLShader, _WebGLObject5);

    function WebGLShader() {
      (0, _classCallCheck2.default)(this, WebGLShader);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLShader).apply(this, arguments));
    }

    return WebGLShader;
  }(WebGLObject);

  var WebGLTexture = function (_WebGLObject6) {
    (0, _inherits2.default)(WebGLTexture, _WebGLObject6);

    function WebGLTexture() {
      (0, _classCallCheck2.default)(this, WebGLTexture);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLTexture).apply(this, arguments));
    }

    return WebGLTexture;
  }(WebGLObject);

  var WebGLUniformLocation = function WebGLUniformLocation(id) {
    (0, _classCallCheck2.default)(this, WebGLUniformLocation);
    this.id = id;
  };

  var WebGLActiveInfo = function WebGLActiveInfo(obj) {
    (0, _classCallCheck2.default)(this, WebGLActiveInfo);
    (0, _extends2.default)(this, obj);
  };

  var WebGLShaderPrecisionFormat = function WebGLShaderPrecisionFormat(obj) {
    (0, _classCallCheck2.default)(this, WebGLShaderPrecisionFormat);
    (0, _extends2.default)(this, obj);
  };

  var WebGLQuery = function (_WebGLObject7) {
    (0, _inherits2.default)(WebGLQuery, _WebGLObject7);

    function WebGLQuery() {
      (0, _classCallCheck2.default)(this, WebGLQuery);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLQuery).apply(this, arguments));
    }

    return WebGLQuery;
  }(WebGLObject);

  var WebGLSampler = function (_WebGLObject8) {
    (0, _inherits2.default)(WebGLSampler, _WebGLObject8);

    function WebGLSampler() {
      (0, _classCallCheck2.default)(this, WebGLSampler);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLSampler).apply(this, arguments));
    }

    return WebGLSampler;
  }(WebGLObject);

  var WebGLSync = function (_WebGLObject9) {
    (0, _inherits2.default)(WebGLSync, _WebGLObject9);

    function WebGLSync() {
      (0, _classCallCheck2.default)(this, WebGLSync);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLSync).apply(this, arguments));
    }

    return WebGLSync;
  }(WebGLObject);

  var WebGLTransformFeedback = function (_WebGLObject10) {
    (0, _inherits2.default)(WebGLTransformFeedback, _WebGLObject10);

    function WebGLTransformFeedback() {
      (0, _classCallCheck2.default)(this, WebGLTransformFeedback);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLTransformFeedback).apply(this, arguments));
    }

    return WebGLTransformFeedback;
  }(WebGLObject);

  var WebGLVertexArrayObject = function (_WebGLObject11) {
    (0, _inherits2.default)(WebGLVertexArrayObject, _WebGLObject11);

    function WebGLVertexArrayObject() {
      (0, _classCallCheck2.default)(this, WebGLVertexArrayObject);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WebGLVertexArrayObject).apply(this, arguments));
    }

    return WebGLVertexArrayObject;
  }(WebGLObject);

  var wrapMethods = function wrapMethods(gl) {
    var _getParameterTypes;

    var wrap = function wrap(methodNames, wrapper) {
      return (Array.isArray(methodNames) ? methodNames : [methodNames]).forEach(function (methodName) {
        return gl[methodName] = wrapper(gl[methodName]);
      });
    };

    var getParameterTypes = (_getParameterTypes = {}, (0, _defineProperty2.default)(_getParameterTypes, gl.ARRAY_BUFFER_BINDING, WebGLBuffer), (0, _defineProperty2.default)(_getParameterTypes, gl.COPY_READ_BUFFER_BINDING, WebGLBuffer), (0, _defineProperty2.default)(_getParameterTypes, gl.COPY_WRITE_BUFFER_BINDING, WebGLBuffer), (0, _defineProperty2.default)(_getParameterTypes, gl.CURRENT_PROGRAM, WebGLProgram), (0, _defineProperty2.default)(_getParameterTypes, gl.DRAW_FRAMEBUFFER_BINDING, WebGLFramebuffer), (0, _defineProperty2.default)(_getParameterTypes, gl.ELEMENT_ARRAY_BUFFER_BINDING, WebGLBuffer), (0, _defineProperty2.default)(_getParameterTypes, gl.READ_FRAMEBUFFER_BINDING, WebGLFramebuffer), (0, _defineProperty2.default)(_getParameterTypes, gl.RENDERBUFFER_BINDING, WebGLRenderbuffer), (0, _defineProperty2.default)(_getParameterTypes, gl.SAMPLER_BINDING, WebGLSampler), (0, _defineProperty2.default)(_getParameterTypes, gl.TEXTURE_BINDING_2D_ARRAY, WebGLTexture), (0, _defineProperty2.default)(_getParameterTypes, gl.TEXTURE_BINDING_2D, WebGLTexture), (0, _defineProperty2.default)(_getParameterTypes, gl.TEXTURE_BINDING_3D, WebGLTexture), (0, _defineProperty2.default)(_getParameterTypes, gl.TEXTURE_BINDING_CUBE_MAP, WebGLTexture), (0, _defineProperty2.default)(_getParameterTypes, gl.TRANSFORM_FEEDBACK_BINDING, WebGLTransformFeedback), (0, _defineProperty2.default)(_getParameterTypes, gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, WebGLBuffer), (0, _defineProperty2.default)(_getParameterTypes, gl.UNIFORM_BUFFER_BINDING, WebGLBuffer), (0, _defineProperty2.default)(_getParameterTypes, gl.VERTEX_ARRAY_BINDING, WebGLVertexArrayObject), _getParameterTypes);
    wrap('getParameter', function (orig) {
      return function (pname) {
        var ret = orig.call(gl, pname);

        if (pname === gl.VERSION) {
          ret = "WebGL 2.0 (Expo-" + _reactNative.Platform.OS + "-" + _package.default.version + ") (" + ret + ")";
        }

        var type = getParameterTypes[pname];
        return type ? wrapObject(type, ret) : ret;
      };
    });
    wrap('bindBuffer', function (orig) {
      return function (target, buffer) {
        return orig.call(gl, target, buffer && buffer.id);
      };
    });
    wrap('createBuffer', function (orig) {
      return function () {
        return wrapObject(WebGLBuffer, orig.call(gl));
      };
    });
    wrap('deleteBuffer', function (orig) {
      return function (buffer) {
        return orig.call(gl, buffer && buffer.id);
      };
    });
    wrap('isBuffer', function (orig) {
      return function (buffer) {
        return buffer instanceof WebGLBuffer && orig.call(gl, buffer.id);
      };
    });
    wrap('bindFramebuffer', function (orig) {
      return function (target, framebuffer) {
        return orig.call(gl, target, framebuffer && framebuffer.id);
      };
    });
    wrap('createFramebuffer', function (orig) {
      return function () {
        return wrapObject(WebGLFramebuffer, orig.call(gl));
      };
    });
    wrap('deleteFramebuffer', function (orig) {
      return function (framebuffer) {
        return orig.call(gl, framebuffer && framebuffer.id);
      };
    });
    wrap('framebufferRenderbuffer', function (orig) {
      return function (target, attachment, rbtarget, rb) {
        return orig.call(gl, target, attachment, rbtarget, rb && rb.id);
      };
    });
    wrap('framebufferTexture2D', function (orig) {
      return function (target, attachment, textarget, tex, level) {
        return orig.call(gl, target, attachment, textarget, tex && tex.id, level);
      };
    });
    wrap('isFramebuffer', function (orig) {
      return function (framebuffer) {
        return framebuffer instanceof WebGLFramebuffer && orig.call(gl, framebuffer.id);
      };
    });
    wrap('framebufferTextureLayer', function (orig) {
      return function (target, attachment, texture, level, layer) {
        return orig.call(gl, target, attachment, objectId(texture), level, layer);
      };
    });
    wrap('bindRenderbuffer', function (orig) {
      return function (target, renderbuffer) {
        return orig.call(gl, target, renderbuffer && renderbuffer.id);
      };
    });
    wrap('createRenderbuffer', function (orig) {
      return function () {
        return wrapObject(WebGLRenderbuffer, orig.call(gl));
      };
    });
    wrap('deleteRenderbuffer', function (orig) {
      return function (renderbuffer) {
        return orig.call(gl, renderbuffer && renderbuffer.id);
      };
    });
    wrap('isRenderbuffer', function (orig) {
      return function (renderbuffer) {
        return renderbuffer instanceof WebGLRenderbuffer && orig.call(gl, renderbuffer.id);
      };
    });
    wrap('bindTexture', function (orig) {
      return function (target, texture) {
        return orig.call(gl, target, texture && texture.id);
      };
    });
    wrap('createTexture', function (orig) {
      return function () {
        return wrapObject(WebGLTexture, orig.call(gl));
      };
    });
    wrap('deleteTexture', function (orig) {
      return function (texture) {
        return orig.call(gl, texture && texture.id);
      };
    });
    wrap('isTexture', function (orig) {
      return function (texture) {
        return texture instanceof WebGLTexture && orig.call(gl, texture.id);
      };
    });
    wrap('attachShader', function (orig) {
      return function (program, shader) {
        return orig.call(gl, program && program.id, shader && shader.id);
      };
    });
    wrap('bindAttribLocation', function (orig) {
      return function (program, index, name) {
        return orig.call(gl, program && program.id, index, name);
      };
    });
    wrap('compileShader', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('createProgram', function (orig) {
      return function () {
        return wrapObject(WebGLProgram, orig.call(gl));
      };
    });
    wrap('createShader', function (orig) {
      return function (type) {
        return wrapObject(WebGLShader, orig.call(gl, type));
      };
    });
    wrap('deleteProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('deleteShader', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('detachShader', function (orig) {
      return function (program, shader) {
        return orig.call(gl, program && program.id, shader && shader.id);
      };
    });
    wrap('getAttachedShaders', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id).map(function (id) {
          return wrapObject(WebGLShader, id);
        });
      };
    });
    wrap('getProgramParameter', function (orig) {
      return function (program, pname) {
        return orig.call(gl, program && program.id, pname);
      };
    });
    wrap('getProgramInfoLog', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('getShaderParameter', function (orig) {
      return function (shader, pname) {
        return orig.call(gl, shader && shader.id, pname);
      };
    });
    wrap('getShaderPrecisionFormat', function (orig) {
      return function (shadertype, precisiontype) {
        return new WebGLShaderPrecisionFormat(orig.call(gl, shadertype, precisiontype));
      };
    });
    wrap('getShaderInfoLog', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('getShaderSource', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('linkProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('shaderSource', function (orig) {
      return function (shader, source) {
        return orig.call(gl, shader && shader.id, source);
      };
    });
    wrap('useProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('validateProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('isShader', function (orig) {
      return function (shader) {
        return shader instanceof WebGLShader && orig.call(gl, shader.id);
      };
    });
    wrap('isProgram', function (orig) {
      return function (program) {
        return program instanceof WebGLProgram && orig.call(gl, program.id);
      };
    });
    wrap('getFragDataLocation', function (orig) {
      return function (program) {
        return orig.call(gl, objectId(program));
      };
    });
    wrap('getActiveAttrib', function (orig) {
      return function (program, index) {
        return new WebGLActiveInfo(orig.call(gl, program && program.id, index));
      };
    });
    wrap('getActiveUniform', function (orig) {
      return function (program, index) {
        return new WebGLActiveInfo(orig.call(gl, program && program.id, index));
      };
    });
    wrap('getAttribLocation', function (orig) {
      return function (program, name) {
        return orig.call(gl, program && program.id, name);
      };
    });
    wrap('getUniform', function (orig) {
      return function (program, location) {
        return orig.call(gl, program && program.id, location && location.id);
      };
    });
    wrap('getUniformLocation', function (orig) {
      return function (program, name) {
        return new WebGLUniformLocation(orig.call(gl, program && program.id, name));
      };
    });
    wrap(['uniform1f', 'uniform1i', 'uniform1ui'], function (orig) {
      return function (loc, x) {
        return orig.call(gl, objectId(loc), x);
      };
    });
    wrap(['uniform2f', 'uniform2i', 'uniform2ui'], function (orig) {
      return function (loc, x, y) {
        return orig.call(gl, objectId(loc), x, y);
      };
    });
    wrap(['uniform3f', 'uniform3i', 'uniform3ui'], function (orig) {
      return function (loc, x, y, z) {
        return orig.call(gl, objectId(loc), x, y, z);
      };
    });
    wrap(['uniform4f', 'uniform4i', 'uniform4ui'], function (orig) {
      return function (loc, x, y, z, w) {
        return orig.call(gl, objectId(loc), x, y, z, w);
      };
    });
    wrap(['uniform1fv', 'uniform2fv', 'uniform3fv', 'uniform4fv'], function (orig) {
      return function (loc, val) {
        return orig.call(gl, objectId(loc), new Float32Array(val));
      };
    });
    wrap(['uniform1iv', 'uniform2iv', 'uniform3iv', 'uniform4iv'], function (orig) {
      return function (loc, val) {
        return orig.call(gl, objectId(loc), new Int32Array(val));
      };
    });
    wrap(['uniform1uiv', 'uniform2uiv', 'uniform3uiv', 'uniform4uiv'], function (orig) {
      return function (loc, val) {
        return orig.call(gl, objectId(loc), new Uint32Array(val));
      };
    });
    wrap(['uniformMatrix2fv', 'uniformMatrix3fv', 'uniformMatrix4fv', 'uniformMatrix3x2fv', 'uniformMatrix4x2fv', 'uniformMatrix2x3fv', 'uniformMatrix4x3fv', 'uniformMatrix2x4fv', 'uniformMatrix3x4fv'], function (orig) {
      return function (loc, transpose, val) {
        return orig.call(gl, loc && loc.id, transpose, new Float32Array(val));
      };
    });
    wrap(['vertexAttrib1fv', 'vertexAttrib2fv', 'vertexAttrib3fv', 'vertexAttrib4fv'], function (orig) {
      return function (index, val) {
        return orig.call(gl, index, new Float32Array(val));
      };
    });
    wrap('vertexAttribI4iv', function (orig) {
      return function (index, val) {
        return orig.call(gl, index, new Int32Array(val));
      };
    });
    wrap('vertexAttribI4uiv', function (orig) {
      return function (index, val) {
        return orig.call(gl, index, new Uint32Array(val));
      };
    });
    wrap('createQuery', function (orig) {
      return function () {
        return wrapObject(WebGLQuery, orig.call(gl));
      };
    });
    wrap('deleteQuery', function (orig) {
      return function (query) {
        return orig.call(gl, objectId(query));
      };
    });
    wrap('beginQuery', function (orig) {
      return function (target, query) {
        return orig.call(gl, target, objectId(query));
      };
    });
    wrap('getQuery', function (orig) {
      return function (target, pname) {
        var id = orig.call(gl, target, pname);
        return id ? wrapObject(WebGLQuery, id) : id;
      };
    });
    wrap('getQueryParameter', function (orig) {
      return function (query, pname) {
        return orig.call(gl, objectId(query), pname);
      };
    });
    wrap('bindSampler', function (orig) {
      return function (unit, sampler) {
        return orig.call(gl, unit, objectId(sampler));
      };
    });
    wrap('createSampler', function (orig) {
      return function () {
        return wrapObject(WebGLSampler, orig.call(gl));
      };
    });
    wrap('deleteSampler', function (orig) {
      return function (sampler) {
        return orig.call(gl, objectId(sampler));
      };
    });
    wrap('isSampler', function (orig) {
      return function (sampler) {
        return sampler instanceof WebGLSampler && orig.call(gl, sampler.id);
      };
    });
    wrap(['samplerParameteri', 'samplerParameterf'], function (orig) {
      return function (sampler, pname, param) {
        return orig.call(gl, objectId(sampler), pname, param);
      };
    });
    wrap('getSamplerParameter', function (orig) {
      return function (sampler, pname) {
        return orig.call(gl, objectId(sampler), pname);
      };
    });
    wrap('bindTransformFeedback', function (orig) {
      return function (target, transformFeedback) {
        return orig.call(gl, target, objectId(transformFeedback));
      };
    });
    wrap('createTransformFeedback', function (orig) {
      return function () {
        return wrapObject(WebGLTransformFeedback, orig.call(gl));
      };
    });
    wrap('deleteTransformFeedback', function (orig) {
      return function (transformFeedback) {
        return orig.call(gl, objectId(transformFeedback));
      };
    });
    wrap('transformFeedbackVaryings', function (orig) {
      return function (program, varyings, bufferMode) {
        return orig.call(gl, objectId(program), varyings, bufferMode);
      };
    });
    wrap('getTransformFeedbackVarying', function (orig) {
      return function (program, index) {
        return new WebGLActiveInfo(orig.call(gl, objectId(program), index));
      };
    });
    wrap(['bindBufferBase', 'bindBufferRange'], function (orig) {
      return function (target, index, buffer) {
        for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
          rest[_key2 - 3] = arguments[_key2];
        }

        return orig.call.apply(orig, [gl, target, index, objectId(buffer)].concat(rest));
      };
    });
    wrap('getUniformIndices', function (orig) {
      return function (program, uniformNames) {
        var uintArray = orig.call(gl, objectId(program), uniformNames);
        return Array.from(uintArray);
      };
    });
    wrap('getActiveUniforms', function (orig) {
      return function (program, uniformIndices, pname) {
        var intArray = orig.call(gl, objectId(program), new Uint32Array(uniformIndices), pname);
        var boolResult = pname === gl.UNIFORM_IS_ROW_MAJOR;
        var arr = Array.from(intArray);
        return boolResult ? arr.map(function (val) {
          return !!val;
        }) : arr;
      };
    });
    wrap('getUniformBlockIndex', function (orig) {
      return function (program, uniformBlockName) {
        return orig.call(gl, objectId(program), uniformBlockName);
      };
    });
    wrap('getActiveUniformBlockName', function (orig) {
      return function (program, uniformBlockIndex) {
        return orig.call(gl, objectId(program), uniformBlockIndex);
      };
    });
    wrap('uniformBlockBinding', function (orig) {
      return function (program, uniformBlockIndex, uniformBlockBinding) {
        return orig.call(gl, objectId(program), uniformBlockIndex, uniformBlockBinding);
      };
    });
    wrap('bindVertexArray', function (orig) {
      return function (vertexArray) {
        return orig.call(gl, vertexArray && vertexArray.id);
      };
    });
    wrap('createVertexArray', function (orig) {
      return function () {
        return wrapObject(WebGLVertexArrayObject, orig.call(gl));
      };
    });
    wrap('deleteVertexArray', function (orig) {
      return function (vertexArray) {
        return orig.call(gl, vertexArray && vertexArray.id);
      };
    });
    wrap('isVertexArray', function (orig) {
      return function (vertexArray) {
        return vertexArray instanceof WebGLVertexArrayObject && orig.call(gl, vertexArray.id);
      };
    });
  };

  var getGl = function getGl(exglCtxId) {
    var gl = global.__EXGLContexts[exglCtxId];
    gl.__exglCtxId = exglCtxId;
    delete global.__EXGLContexts[exglCtxId];
    var glesVersion = gl.getParameter(gl.VERSION);
    var supportsWebGL2 = parseFloat(glesVersion.split(/[^\d.]+/g).join(' ')) >= 3.0;
    var prototype = supportsWebGL2 ? global.WebGL2RenderingContext.prototype : global.WebGLRenderingContext.prototype;

    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(gl, prototype);
    } else {
      gl.__proto__ = prototype;
    }

    wrapMethods(gl);
    gl.canvas = null;
    var viewport = gl.getParameter(gl.VIEWPORT);
    gl.drawingBufferWidth = viewport[2];
    gl.drawingBufferHeight = viewport[3];
    var enableLogging = false;
    Object.defineProperty(gl, 'enableLogging', {
      configurable: true,
      get: function get() {
        return enableLogging;
      },
      set: function set(enable) {
        if (enable === enableLogging) {
          return;
        }

        if (enable) {
          Object.keys(gl).forEach(function (key) {
            if (typeof gl[key] === 'function') {
              var original = gl[key];

              gl[key] = function () {
                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                console.log("EXGL: " + key + "(" + args.join(', ') + ")");
                var r = original.apply(gl, args);
                console.log("EXGL:    = " + r);
                return r;
              };

              gl[key].original = original;
            }
          });
        } else {
          Object.keys(gl).forEach(function (key) {
            if (typeof gl[key] === 'function' && gl[key].original) {
              gl[key] = gl[key].original;
            }
          });
        }

        enableLogging = enable;
      }
    });
    return gl;
  };

  var getContextId = function getContextId(exgl) {
    var exglCtxId = exgl && typeof exgl === 'object' ? exgl.__exglCtxId : exgl;

    if (!exglCtxId || typeof exglCtxId !== 'number') {
      throw new Error("Invalid EXGLContext id: " + String(exglCtxId));
    }

    return exglCtxId;
  };

  global.WebGLRenderingContext = WebGLRenderingContext;
  global.WebGL2RenderingContext = WebGL2RenderingContext;
  global.WebGLObject = WebGLObject;
  global.WebGLBuffer = WebGLBuffer;
  global.WebGLFramebuffer = WebGLFramebuffer;
  global.WebGLProgram = WebGLProgram;
  global.WebGLRenderbuffer = WebGLRenderbuffer;
  global.WebGLShader = WebGLShader;
  global.WebGLTexture = WebGLTexture;
  global.WebGLUniformLocation = WebGLUniformLocation;
  global.WebGLActiveInfo = WebGLActiveInfo;
  global.WebGLShaderPrecisionFormat = WebGLShaderPrecisionFormat;
  global.WebGLQuery = WebGLQuery;
  global.WebGLSampler = WebGLSampler;
  global.WebGLSync = WebGLSync;
  global.WebGLTransformFeedback = WebGLTransformFeedback;
  global.WebGLVertexArrayObject = WebGLVertexArrayObject;
},397,[366,1,49,3,130,48,9,21,22,34,37,40,51,65,331,5,398]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "name": "expo-gl",
  "version": "2.0.0",
  "description": "Expo GL standalone universal module",
  "main": "index.js",
  "keywords": [
    "react-native",
    "expo",
    "gl",
    "glview",
    "webgl"
  ],
  "homepage": "https://docs.expo.io/",
  "author": "650 Industries, Inc.",
  "license": "MIT",
  "peerDependencies": {
    "expo-core": "~2.0.0",
    "expo-camera-interface": "~2.0.0",
    "expo-file-system-interface": "~2.0.0",
    "expo-gl-cpp": "~2.0.0"
  },
  "dependencies": {
    "prop-types": "^15.6.2"
  },
  "devDependencies": {
    "babel-preset-expo": "^5.0.0"
  },
  "gitHead": "f15abc53c111bd0438cd36dc456c59cfa7c56a58"
}
;
},398,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GoogleSignIn = undefined;

  var GoogleSignIn = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  exports.GoogleSignIn = GoogleSignIn;
},399,[366,400]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.allowInClient = allowInClient;
  exports.getCurrentUser = getCurrentUser;
  exports.askForPlayServicesAsync = askForPlayServicesAsync;
  exports.getPlayServiceAvailability = getPlayServiceAvailability;
  exports.initAsync = initAsync;
  exports.isSignedInAsync = isSignedInAsync;
  exports.isConnectedAsync = isConnectedAsync;
  exports.signInSilentlyAsync = signInSilentlyAsync;
  exports.signInAsync = signInAsync;
  exports.signOutAsync = signOutAsync;
  exports.disconnectAsync = disconnectAsync;
  exports.getCurrentUserAsync = getCurrentUserAsync;
  exports.getPhotoAsync = getPhotoAsync;
  Object.defineProperty(exports, "ExpoGoogleSignIn", {
    enumerable: true,
    get: function get() {
      return _ExpoGoogleSignIn.ExpoGoogleSignIn;
    }
  });
  Object.defineProperty(exports, "GoogleUser", {
    enumerable: true,
    get: function get() {
      return _GoogleUser.GoogleUser;
    }
  });
  Object.defineProperty(exports, "GoogleAuthData", {
    enumerable: true,
    get: function get() {
      return _GoogleAuthData.GoogleAuthData;
    }
  });
  Object.defineProperty(exports, "GoogleAuthentication", {
    enumerable: true,
    get: function get() {
      return _GoogleAuthentication.GoogleAuthentication;
    }
  });
  Object.defineProperty(exports, "GoogleIdentity", {
    enumerable: true,
    get: function get() {
      return _GoogleIdentity.GoogleIdentity;
    }
  });
  Object.defineProperty(exports, "GoogleSignInType", {
    enumerable: true,
    get: function get() {
      return _GoogleSignIn.GoogleSignInType;
    }
  });
  Object.defineProperty(exports, "GoogleSignInOptions", {
    enumerable: true,
    get: function get() {
      return _GoogleSignIn.GoogleSignInOptions;
    }
  });
  Object.defineProperty(exports, "GoogleSignInAuthResultType", {
    enumerable: true,
    get: function get() {
      return _GoogleSignIn.GoogleSignInAuthResultType;
    }
  });
  Object.defineProperty(exports, "GoogleSignInAuthResult", {
    enumerable: true,
    get: function get() {
      return _GoogleSignIn.GoogleSignInAuthResult;
    }
  });
  Object.defineProperty(exports, "GoogleSignInPlayServicesOptions", {
    enumerable: true,
    get: function get() {
      return _GoogleSignIn.GoogleSignInPlayServicesOptions;
    }
  });
  exports.TYPES = exports.SCOPES = exports.ERRORS = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[5]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _ExpoGoogleSignIn = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _GoogleUser = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _GoogleAuthData = _$$_REQUIRE(_dependencyMap[9]);

  var _GoogleAuthentication = _$$_REQUIRE(_dependencyMap[10]);

  var _GoogleIdentity = _$$_REQUIRE(_dependencyMap[11]);

  var _GoogleSignIn = _$$_REQUIRE(_dependencyMap[12]);

  var ERRORS = _ExpoGoogleSignIn.default.ERRORS,
      SCOPES = _ExpoGoogleSignIn.default.SCOPES,
      TYPES = _ExpoGoogleSignIn.default.TYPES;
  exports.TYPES = TYPES;
  exports.SCOPES = SCOPES;
  exports.ERRORS = ERRORS;
  var DEFAULT_SCOPES = [SCOPES.PROFILE, SCOPES.EMAIL];

  var _initialization;

  var _options = {};
  var _currentUser = null;
  var _isClientUsageEnabled = false;

  function setCurrentUser(currentUser) {
    _currentUser = currentUser;
    return _currentUser;
  }

  function validateOptions() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (options.offlineAccess) {
      (0, _invariant.default)(typeof options.webClientId === 'string' && options.webClientId !== '', 'GoogleSignIn: Offline access (offlineAccess: true) requires a valid google server id `webClientId`');
    }

    return (0, _objectSpread2.default)({}, options, {
      scopes: options.scopes || DEFAULT_SCOPES
    });
  }

  function validateOwnership() {
    (0, _invariant.default)(_isClientUsageEnabled || _expoConstants.default.appOwnership !== 'expo', 'expo-google-sign-in is not supported in the Expo Client because a custom URL scheme is required at build time. Please refer to the docs for usage outside of Expo www.npmjs.com/package/expo-google-sign-in');
  }

  function ensureGoogleIsInitializedAsync(options) {
    return _regenerator.default.async(function ensureGoogleIsInitializedAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(_initialization == null)) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", initAsync(options));

          case 2:
            return _context.abrupt("return", _initialization);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function invokeAuthMethod(method) {
    var payload, account;
    return _regenerator.default.async(function invokeAuthMethod$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (_ExpoGoogleSignIn.default[method]) {
              _context2.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('GoogleSignIn', method);

          case 2:
            _context2.next = 4;
            return _regenerator.default.awrap(ensureGoogleIsInitializedAsync());

          case 4:
            _context2.next = 6;
            return _regenerator.default.awrap(_ExpoGoogleSignIn.default[method]());

          case 6:
            payload = _context2.sent;
            account = payload != null ? new _GoogleUser.default(payload) : null;
            return _context2.abrupt("return", setCurrentUser(account));

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function allowInClient() {
    _isClientUsageEnabled = true;
  }

  function getCurrentUser() {
    return _currentUser;
  }

  function askForPlayServicesAsync() {
    return _regenerator.default.async(function askForPlayServicesAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _regenerator.default.awrap(getPlayServiceAvailability(true));

          case 2:
            return _context3.abrupt("return", _context3.sent);

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function getPlayServiceAvailability() {
    var shouldAsk,
        _args4 = arguments;
    return _regenerator.default.async(function getPlayServiceAvailability$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            shouldAsk = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : false;
            validateOwnership();

            if (!_ExpoGoogleSignIn.default.arePlayServicesAvailableAsync) {
              _context4.next = 8;
              break;
            }

            _context4.next = 5;
            return _regenerator.default.awrap(_ExpoGoogleSignIn.default.arePlayServicesAvailableAsync(shouldAsk));

          case 5:
            return _context4.abrupt("return", _context4.sent);

          case 8:
            return _context4.abrupt("return", true);

          case 9:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function initAsync(options) {
    var hasPlayServices;
    return _regenerator.default.async(function initAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (_ExpoGoogleSignIn.default.initAsync) {
              _context5.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('GoogleSignIn', 'initAsync');

          case 2:
            _options = validateOptions(options || _options);
            _context5.next = 5;
            return _regenerator.default.awrap(getPlayServiceAvailability());

          case 5:
            hasPlayServices = _context5.sent;

            if (hasPlayServices) {
              _context5.next = 8;
              break;
            }

            return _context5.abrupt("return", false);

          case 8:
            _initialization = _ExpoGoogleSignIn.default.initAsync(_options);
            return _context5.abrupt("return", _initialization);

          case 10:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  function isSignedInAsync() {
    var user;
    return _regenerator.default.async(function isSignedInAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _regenerator.default.awrap(getCurrentUserAsync());

          case 2:
            user = _context6.sent;
            return _context6.abrupt("return", user != null);

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this);
  }

  function isConnectedAsync() {
    return _regenerator.default.async(function isConnectedAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _regenerator.default.awrap(_ExpoGoogleSignIn.default.isConnectedAsync());

          case 2:
            return _context7.abrupt("return", _context7.sent);

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  }

  function signInSilentlyAsync() {
    var isConnected, auth;
    return _regenerator.default.async(function signInSilentlyAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return _regenerator.default.awrap(isConnectedAsync());

          case 2:
            isConnected = _context8.sent;

            if (!isConnected) {
              _context8.next = 16;
              break;
            }

            _context8.prev = 4;
            _context8.next = 7;
            return _regenerator.default.awrap(invokeAuthMethod('signInSilentlyAsync'));

          case 7:
            auth = _context8.sent;
            return _context8.abrupt("return", auth);

          case 11:
            _context8.prev = 11;
            _context8.t0 = _context8["catch"](4);

            if (!(_context8.t0.code === ERRORS.SIGN_IN_REQUIRED)) {
              _context8.next = 15;
              break;
            }

            return _context8.abrupt("return", null);

          case 15:
            throw _context8.t0;

          case 16:
            return _context8.abrupt("return", null);

          case 17:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this, [[4, 11]]);
  }

  function signInAsync() {
    var user;
    return _regenerator.default.async(function signInAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.prev = 0;
            _context9.next = 3;
            return _regenerator.default.awrap(invokeAuthMethod('signInAsync'));

          case 3:
            user = _context9.sent;
            return _context9.abrupt("return", {
              type: 'success',
              user: user
            });

          case 7:
            _context9.prev = 7;
            _context9.t0 = _context9["catch"](0);

            if (!(_context9.t0.code === ERRORS.SIGN_IN_CANCELLED)) {
              _context9.next = 11;
              break;
            }

            return _context9.abrupt("return", {
              type: 'cancel',
              user: null
            });

          case 11:
            throw _context9.t0;

          case 12:
          case "end":
            return _context9.stop();
        }
      }
    }, null, this, [[0, 7]]);
  }

  function signOutAsync() {
    return _regenerator.default.async(function signOutAsync$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _regenerator.default.awrap(invokeAuthMethod('signOutAsync'));

          case 2:
          case "end":
            return _context10.stop();
        }
      }
    }, null, this);
  }

  function disconnectAsync() {
    return _regenerator.default.async(function disconnectAsync$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _regenerator.default.awrap(invokeAuthMethod('disconnectAsync'));

          case 2:
          case "end":
            return _context11.stop();
        }
      }
    }, null, this);
  }

  function getCurrentUserAsync() {
    return _regenerator.default.async(function getCurrentUserAsync$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _regenerator.default.awrap(invokeAuthMethod('getCurrentUserAsync'));

          case 2:
            return _context12.abrupt("return", _context12.sent);

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, null, this);
  }

  function getPhotoAsync() {
    var size,
        _args13 = arguments;
    return _regenerator.default.async(function getPhotoAsync$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            size = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : 128;

            if (_ExpoGoogleSignIn.default.getPhotoAsync) {
              _context13.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('GoogleSignIn', 'getPhotoAsync');

          case 3:
            _context13.next = 5;
            return _regenerator.default.awrap(ensureGoogleIsInitializedAsync());

          case 5:
            _context13.next = 7;
            return _regenerator.default.awrap(_ExpoGoogleSignIn.default.getPhotoAsync(size));

          case 7:
            return _context13.abrupt("return", _context13.sent);

          case 8:
          case "end":
            return _context13.stop();
        }
      }
    }, null, this);
  }
},400,[366,1,130,48,329,368,334,401,402,404,403,405,406]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoGoogleSignIn;
  exports.default = _default;
},401,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[9]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _ExpoGoogleSignIn = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _GoogleAuthentication = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _GoogleIdentity2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var GoogleUser = function (_GoogleIdentity) {
    (0, _inherits2.default)(GoogleUser, _GoogleIdentity);

    function GoogleUser(props) {
      var _this;

      (0, _classCallCheck2.default)(this, GoogleUser);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(GoogleUser).call(this, props));

      _this.clearCache = function _callee() {
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (_ExpoGoogleSignIn.default.clearCacheAsync) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                (0, _invariant.default)(_this.auth && _this.auth.accessToken, 'GoogleSignIn: GoogleUser.clearCache(): Invalid accessToken');
                _context.next = 5;
                return _regenerator.default.awrap(_ExpoGoogleSignIn.default.clearCacheAsync({
                  token: _this.auth.accessToken
                }));

              case 5:
                return _context.abrupt("return", _context.sent);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      };

      _this.getHeaders = function () {
        (0, _invariant.default)(_this.auth && _this.auth.accessToken && _this.auth.accessToken !== '', 'GoogleSignIn: GoogleUser.getHeaders(): Invalid accessToken');
        return {
          Authorization: "Bearer " + _this.auth.accessToken,
          Accept: 'application/json',
          'Content-Type': 'application/json'
        };
      };

      _this.refreshAuth = function _callee2() {
        var response;
        return _regenerator.default.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (_ExpoGoogleSignIn.default.getTokensAsync) {
                  _context2.next = 2;
                  break;
                }

                throw new _expoErrors.UnavailabilityError('GoogleSignIn', 'getTokensAsync');

              case 2:
                _context2.next = 4;
                return _regenerator.default.awrap(_ExpoGoogleSignIn.default.getTokensAsync(false));

              case 4:
                response = _context2.sent;

                if (response.idToken == null) {
                  response.idToken = _this.auth.idToken;
                }

                if (!_this.auth) {
                  _this.auth = new _GoogleAuthentication.default(response);
                } else {
                  _this.auth.idToken = response.idToken;
                  _this.auth.accessToken = response.accessToken;
                }

                return _context2.abrupt("return", _this.auth);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      };

      var auth = props.auth,
          scopes = props.scopes,
          hostedDomain = props.hostedDomain,
          serverAuthCode = props.serverAuthCode;
      _this.auth = auth;
      _this.scopes = scopes;
      _this.hostedDomain = hostedDomain;
      _this.serverAuthCode = serverAuthCode;
      return _this;
    }

    (0, _createClass2.default)(GoogleUser, [{
      key: "equals",
      value: function equals(other) {
        if (!(0, _get2.default)((0, _getPrototypeOf2.default)(GoogleUser.prototype), "equals", this).call(this, other) || !(other instanceof GoogleUser)) {
          return false;
        }

        return this.auth.equals(other.auth) && this.scopes === other.scopes && this.hostedDomain === other.hostedDomain && this.serverAuthCode === other.serverAuthCode;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var auth = this.auth;

        if (this.auth && this.auth.toJSON) {
          auth = this.auth.toJSON();
        }

        return (0, _objectSpread2.default)({}, (0, _get2.default)((0, _getPrototypeOf2.default)(GoogleUser.prototype), "toJSON", this).call(this), {
          auth: auth,
          scopes: this.scopes,
          hostedDomain: this.hostedDomain,
          serverAuthCode: this.serverAuthCode
        });
      }
    }]);
    return GoogleUser;
  }(_GoogleIdentity2.default);

  var _default = GoogleUser;
  exports.default = _default;
},402,[1,48,130,21,22,34,37,38,40,368,334,401,403,405]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _GoogleAuthData2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var GoogleAuthentication = function (_GoogleAuthData) {
    (0, _inherits2.default)(GoogleAuthentication, _GoogleAuthData);

    function GoogleAuthentication(props) {
      var _this;

      (0, _classCallCheck2.default)(this, GoogleAuthentication);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(GoogleAuthentication).call(this, props));
      var clientId = props.clientId,
          accessToken = props.accessToken,
          accessTokenExpirationDate = props.accessTokenExpirationDate,
          refreshToken = props.refreshToken,
          idToken = props.idToken,
          idTokenExpirationDate = props.idTokenExpirationDate;
      _this.clientId = clientId;
      _this.accessToken = accessToken;
      _this.accessTokenExpirationDate = accessTokenExpirationDate;
      _this.refreshToken = refreshToken;
      _this.idToken = idToken;
      _this.idTokenExpirationDate = idTokenExpirationDate;
      return _this;
    }

    (0, _createClass2.default)(GoogleAuthentication, [{
      key: "equals",
      value: function equals(other) {
        if (!(0, _get2.default)((0, _getPrototypeOf2.default)(GoogleAuthentication.prototype), "equals", this).call(this, other) || !(other instanceof GoogleAuthentication)) {
          return false;
        }

        return this.clientId === other.clientId && this.accessToken === other.accessToken && this.accessTokenExpirationDate === other.accessTokenExpirationDate && this.refreshToken === other.refreshToken && this.idToken === other.idToken && this.idTokenExpirationDate === other.idTokenExpirationDate;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return (0, _objectSpread2.default)({}, (0, _get2.default)((0, _getPrototypeOf2.default)(GoogleAuthentication.prototype), "toJSON", this).call(this), {
          clientId: this.clientId,
          accessToken: this.accessToken,
          accessTokenExpirationDate: this.accessTokenExpirationDate,
          refreshToken: this.refreshToken,
          idToken: this.idToken,
          idTokenExpirationDate: this.idTokenExpirationDate
        });
      }
    }]);
    return GoogleAuthentication;
  }(_GoogleAuthData2.default);

  var _default = GoogleAuthentication;
  exports.default = _default;
},403,[1,48,21,22,34,37,38,40,404]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var GoogleAuthData = function () {
    function GoogleAuthData() {
      (0, _classCallCheck2.default)(this, GoogleAuthData);
      this.equals = this.equals.bind(this);
      this.toJSON = this.toJSON.bind(this);
    }

    (0, _createClass2.default)(GoogleAuthData, [{
      key: "equals",
      value: function equals(other) {
        return other && other instanceof GoogleAuthData;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {};
      }
    }]);
    return GoogleAuthData;
  }();

  var _default = GoogleAuthData;
  exports.default = _default;
},404,[1,21,22]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _GoogleAuthData2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var GoogleIdentity = function (_GoogleAuthData) {
    (0, _inherits2.default)(GoogleIdentity, _GoogleAuthData);

    function GoogleIdentity(props) {
      var _this;

      (0, _classCallCheck2.default)(this, GoogleIdentity);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(GoogleIdentity).call(this, props));
      var uid = props.uid,
          email = props.email,
          displayName = props.displayName,
          photoURL = props.photoURL,
          firstName = props.firstName,
          lastName = props.lastName;
      _this.uid = uid;
      _this.email = email;
      _this.displayName = displayName;
      _this.photoURL = photoURL;
      _this.firstName = firstName;
      _this.lastName = lastName;
      return _this;
    }

    (0, _createClass2.default)(GoogleIdentity, [{
      key: "equals",
      value: function equals(other) {
        if (!(0, _get2.default)((0, _getPrototypeOf2.default)(GoogleIdentity.prototype), "equals", this).call(this, other) || !(other instanceof GoogleIdentity)) {
          return false;
        }

        return this.displayName === other.displayName && this.photoURL === other.photoURL && this.uid === other.uid && this.email === other.email && this.firstName === other.firstName && this.lastName === other.lastName;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return (0, _objectSpread2.default)({}, (0, _get2.default)((0, _getPrototypeOf2.default)(GoogleIdentity.prototype), "toJSON", this).call(this), {
          uid: this.uid,
          email: this.email,
          displayName: this.displayName,
          photoURL: this.photoURL,
          firstName: this.firstName,
          lastName: this.lastName
        });
      }
    }]);
    return GoogleIdentity;
  }(_GoogleAuthData2.default);

  var _default = GoogleIdentity;
  exports.default = _default;
},405,[1,48,21,22,34,37,38,40,404]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _GoogleUser = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
},406,[1,402]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get LocalAuthentication() {
      return _$$_REQUIRE(_dependencyMap[0]);
    }

  };
},407,[408]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.hasHardwareAsync = hasHardwareAsync;
  exports.supportedAuthenticationTypesAsync = supportedAuthenticationTypesAsync;
  exports.isEnrolledAsync = isEnrolledAsync;
  exports.authenticateAsync = authenticateAsync;
  exports.cancelAuthenticate = cancelAuthenticate;
  exports.AuthenticationType = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[3]);

  var _ExpoLocalAuthentication = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var AuthenticationType = {
    FINGERPRINT: 1,
    FACIAL_RECOGNITION: 2
  };
  exports.AuthenticationType = AuthenticationType;

  function hasHardwareAsync() {
    return _regenerator.default.async(function hasHardwareAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(_ExpoLocalAuthentication.default.hasHardwareAsync());

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function supportedAuthenticationTypesAsync() {
    return _regenerator.default.async(function supportedAuthenticationTypesAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(_ExpoLocalAuthentication.default.supportedAuthenticationTypesAsync());

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function isEnrolledAsync() {
    return _regenerator.default.async(function isEnrolledAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _regenerator.default.awrap(_ExpoLocalAuthentication.default.isEnrolledAsync());

          case 2:
            return _context3.abrupt("return", _context3.sent);

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function authenticateAsync() {
    var promptMessageIOS,
        result,
        _args4 = arguments;
    return _regenerator.default.async(function authenticateAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            promptMessageIOS = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 'Authenticate';

            if (!(_expoCore.Platform.OS === 'ios')) {
              _context4.next = 10;
              break;
            }

            (0, _invariant.default)(typeof promptMessageIOS === 'string' && promptMessageIOS.length, 'Fingerprint.authenticateAsync must be called with a non-empty string on iOS');
            _context4.next = 5;
            return _regenerator.default.awrap(_ExpoLocalAuthentication.default.authenticateAsync(promptMessageIOS));

          case 5:
            result = _context4.sent;

            if (result.warning) {
              console.warn(result.warning);
            }

            return _context4.abrupt("return", result);

          case 10:
            _context4.next = 12;
            return _regenerator.default.awrap(_ExpoLocalAuthentication.default.authenticateAsync());

          case 12:
            return _context4.abrupt("return", _context4.sent);

          case 13:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function cancelAuthenticate() {
    return _regenerator.default.async(function cancelAuthenticate$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (_ExpoLocalAuthentication.default.cancelAuthenticate) {
              _context5.next = 2;
              break;
            }

            throw new Error("LocalAuthentication.cancelAuthenticate is not supported on " + _expoCore.Platform.OS);

          case 2:
            _context5.next = 4;
            return _regenerator.default.awrap(_ExpoLocalAuthentication.default.cancelAuthenticate());

          case 4:
            return _context5.abrupt("return", _context5.sent);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }
},408,[1,130,334,331,409]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoLocalAuthentication;
  exports.default = _default;
},409,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get Localization() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    }

  };
},410,[411]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ExpoLocalization = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = {
    locale: _ExpoLocalization.default.locale,
    locales: _ExpoLocalization.default.locales,
    timezone: _ExpoLocalization.default.timezone,
    isoCurrencyCodes: _ExpoLocalization.default.isoCurrencyCodes,
    country: _ExpoLocalization.default.country,
    isRTL: _ExpoLocalization.default.isRTL,
    getLocalizationAsync: function getLocalizationAsync() {
      var localization;
      return _regenerator.default.async(function getLocalizationAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _regenerator.default.awrap(_ExpoLocalization.default.getLocalizationAsync());

            case 2:
              localization = _context.sent;
              this.locale = _ExpoLocalization.default.locale;
              this.locales = _ExpoLocalization.default.locales;
              this.timezone = _ExpoLocalization.default.timezone;
              this.isoCurrencyCodes = _ExpoLocalization.default.isoCurrencyCodes;
              this.country = _ExpoLocalization.default.country;
              this.isRTL = _ExpoLocalization.default.isRTL;
              return _context.abrupt("return", localization);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  };
  exports.default = _default;
},411,[1,130,412]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoLocalization;
  exports.default = _default;
},412,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getProviderStatusAsync = getProviderStatusAsync;
  exports.getCurrentPositionAsync = getCurrentPositionAsync;
  exports.getHeadingAsync = getHeadingAsync;
  exports.watchHeadingAsync = watchHeadingAsync;
  exports.geocodeAsync = geocodeAsync;
  exports.reverseGeocodeAsync = reverseGeocodeAsync;
  exports.setApiKey = setApiKey;
  exports.watchPositionAsync = watchPositionAsync;
  exports.requestPermissionsAsync = requestPermissionsAsync;
  exports.hasServicesEnabledAsync = hasServicesEnabledAsync;
  exports.startLocationUpdatesAsync = startLocationUpdatesAsync;
  exports.stopLocationUpdatesAsync = stopLocationUpdatesAsync;
  exports.hasStartedLocationUpdatesAsync = hasStartedLocationUpdatesAsync;
  exports.startGeofencingAsync = startGeofencingAsync;
  exports.stopGeofencingAsync = stopGeofencingAsync;
  exports.hasStartedGeofencingAsync = hasStartedGeofencingAsync;
  exports.installWebGeolocationPolyfill = installWebGeolocationPolyfill;
  exports._getCurrentWatchId = _getCurrentWatchId;
  exports.EventEmitter = exports.GeofencingRegionState = exports.GeofencingEventType = exports.Accuracy = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[2]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ExpoLocation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var LocationEventEmitter = new _expoCore.EventEmitter(_ExpoLocation.default);
  exports.EventEmitter = LocationEventEmitter;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  var LocationAccuracy;
  exports.Accuracy = LocationAccuracy;

  (function (LocationAccuracy) {
    LocationAccuracy[LocationAccuracy["Lowest"] = 1] = "Lowest";
    LocationAccuracy[LocationAccuracy["Low"] = 2] = "Low";
    LocationAccuracy[LocationAccuracy["Balanced"] = 3] = "Balanced";
    LocationAccuracy[LocationAccuracy["High"] = 4] = "High";
    LocationAccuracy[LocationAccuracy["Highest"] = 5] = "Highest";
    LocationAccuracy[LocationAccuracy["BestForNavigation"] = 6] = "BestForNavigation";
  })(LocationAccuracy || (exports.Accuracy = LocationAccuracy = {}));

  var GeofencingEventType;
  exports.GeofencingEventType = GeofencingEventType;

  (function (GeofencingEventType) {
    GeofencingEventType[GeofencingEventType["Enter"] = 1] = "Enter";
    GeofencingEventType[GeofencingEventType["Exit"] = 2] = "Exit";
  })(GeofencingEventType || (exports.GeofencingEventType = GeofencingEventType = {}));

  var GeofencingRegionState;
  exports.GeofencingRegionState = GeofencingRegionState;

  (function (GeofencingRegionState) {
    GeofencingRegionState[GeofencingRegionState["Unknown"] = 0] = "Unknown";
    GeofencingRegionState[GeofencingRegionState["Inside"] = 1] = "Inside";
    GeofencingRegionState[GeofencingRegionState["Outside"] = 2] = "Outside";
  })(GeofencingRegionState || (exports.GeofencingRegionState = GeofencingRegionState = {}));

  var nextWatchId = 0;
  var headingId;

  function _getNextWatchId() {
    nextWatchId++;
    return nextWatchId;
  }

  function _getCurrentWatchId() {
    return nextWatchId;
  }

  var watchCallbacks = {};
  var deviceEventSubscription;
  var headingEventSub;
  var googleApiKey;
  var googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';

  function getProviderStatusAsync() {
    return _regenerator.default.async(function getProviderStatusAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", _ExpoLocation.default.getProviderStatusAsync());

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function getCurrentPositionAsync() {
    var options,
        _args2 = arguments;
    return _regenerator.default.async(function getCurrentPositionAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
            return _context2.abrupt("return", _ExpoLocation.default.getCurrentPositionAsync(options));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function getHeadingAsync() {
    return _regenerator.default.async(function getHeadingAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", new Promise(function _callee(resolve, reject) {
              var tries, headingSub, done, subscription, _tries;

              return _regenerator.default.async(function _callee$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      _context3.prev = 0;

                      if (!headingEventSub) {
                        _context3.next = 6;
                        break;
                      }

                      tries = 0;
                      headingSub = LocationEventEmitter.addListener('Exponent.headingChanged', function (_ref) {
                        var heading = _ref.heading;

                        if (heading.accuracy > 1 || tries > 5) {
                          resolve(heading);
                          LocationEventEmitter.removeSubscription(headingSub);
                        } else {
                          tries += 1;
                        }
                      });
                      _context3.next = 12;
                      break;

                    case 6:
                      done = false;
                      _tries = 0;
                      _context3.next = 10;
                      return _regenerator.default.awrap(watchHeadingAsync(function (heading) {
                        if (!done) {
                          if (heading.accuracy > 1 || _tries > 5) {
                            subscription.remove();
                            resolve(heading);
                            done = true;
                          } else {
                            _tries += 1;
                          }
                        } else {
                          subscription.remove();
                        }
                      }));

                    case 10:
                      subscription = _context3.sent;

                      if (done) {
                        subscription.remove();
                      }

                    case 12:
                      _context3.next = 17;
                      break;

                    case 14:
                      _context3.prev = 14;
                      _context3.t0 = _context3["catch"](0);
                      reject(_context3.t0);

                    case 17:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, null, this, [[0, 14]]);
            }));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function watchHeadingAsync(callback) {
    return _regenerator.default.async(function watchHeadingAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (headingEventSub) {
              _removeHeadingWatcher(headingId);
            }

            headingEventSub = LocationEventEmitter.addListener('Exponent.headingChanged', function (_ref2) {
              var watchId = _ref2.watchId,
                  heading = _ref2.heading;
              var callback = watchCallbacks[watchId];

              if (callback) {
                callback(heading);
              } else {
                _ExpoLocation.default.removeWatchAsync(watchId);
              }
            });
            headingId = _getNextWatchId();
            watchCallbacks[headingId] = callback;
            _context5.next = 6;
            return _regenerator.default.awrap(_ExpoLocation.default.watchDeviceHeading(headingId));

          case 6:
            return _context5.abrupt("return", {
              remove: function remove() {
                _removeHeadingWatcher(headingId);
              }
            });

          case 7:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  function _removeHeadingWatcher(watchId) {
    if (!watchCallbacks[watchId]) {
      return;
    }

    delete watchCallbacks[watchId];

    _ExpoLocation.default.removeWatchAsync(watchId);

    if (headingEventSub) {
      LocationEventEmitter.removeSubscription(headingEventSub);
      headingEventSub = null;
    }
  }

  function _maybeInitializeEmitterSubscription() {
    if (!deviceEventSubscription) {
      deviceEventSubscription = LocationEventEmitter.addListener('Exponent.locationChanged', function (_ref3) {
        var watchId = _ref3.watchId,
            location = _ref3.location;
        var callback = watchCallbacks[watchId];

        if (callback) {
          callback(location);
        } else {
          _ExpoLocation.default.removeWatchAsync(watchId);
        }
      });
    }
  }

  function geocodeAsync(address) {
    return _regenerator.default.async(function geocodeAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt("return", _ExpoLocation.default.geocodeAsync(address).catch(function (error) {
              var platformUsesGoogleMaps = _expoCore.Platform.OS === 'android' || _expoCore.Platform.OS === 'web';

              if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {
                if (!googleApiKey) {
                  throw new Error(error.message + ' Please set a Google API Key to use geocoding.');
                }

                return _googleGeocodeAsync(address);
              }

              throw error;
            }));

          case 1:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this);
  }

  function reverseGeocodeAsync(location) {
    return _regenerator.default.async(function reverseGeocodeAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (!(typeof location.latitude !== 'number' || typeof location.longitude !== 'number')) {
              _context7.next = 2;
              break;
            }

            throw new TypeError('Location should be an object with number properties `latitude` and `longitude`.');

          case 2:
            return _context7.abrupt("return", _ExpoLocation.default.reverseGeocodeAsync(location).catch(function (error) {
              var platformUsesGoogleMaps = _expoCore.Platform.OS === 'android' || _expoCore.Platform.OS === 'web';

              if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {
                if (!googleApiKey) {
                  throw new Error(error.message + ' Please set a Google API Key to use geocoding.');
                }

                return _googleReverseGeocodeAsync(location);
              }

              throw error;
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  }

  function setApiKey(apiKey) {
    googleApiKey = apiKey;
  }

  function _googleGeocodeAsync(address) {
    var result, resultObject;
    return _regenerator.default.async(function _googleGeocodeAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return _regenerator.default.awrap(fetch("https://maps.googleapis.com/maps/api/geocode/json?key=" + googleApiKey + "&address=" + encodeURI(address)));

          case 2:
            result = _context8.sent;
            _context8.next = 5;
            return _regenerator.default.awrap(result.json());

          case 5:
            resultObject = _context8.sent;

            if (!(resultObject.status !== 'OK')) {
              _context8.next = 8;
              break;
            }

            throw new Error('An error occurred during geocoding.');

          case 8:
            return _context8.abrupt("return", resultObject.results.map(function (result) {
              var location = result.geometry.location;
              return {
                latitude: location.lat,
                longitude: location.lng
              };
            }));

          case 9:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this);
  }

  function _googleReverseGeocodeAsync(options) {
    var result, resultObject;
    return _regenerator.default.async(function _googleReverseGeocodeAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _regenerator.default.awrap(fetch("https://maps.googleapis.com/maps/api/geocode/json?key=" + googleApiKey + "&latlng=" + options.latitude + "," + options.longitude));

          case 2:
            result = _context9.sent;
            _context9.next = 5;
            return _regenerator.default.awrap(result.json());

          case 5:
            resultObject = _context9.sent;

            if (!(resultObject.status !== 'OK')) {
              _context9.next = 8;
              break;
            }

            throw new Error('An error occurred during geocoding.');

          case 8:
            return _context9.abrupt("return", resultObject.results.map(function (result) {
              var address = {};
              result.address_components.forEach(function (component) {
                if (component.types.includes('locality')) {
                  address.city = component.long_name;
                } else if (component.types.includes('street_address')) {
                  address.street = component.long_name;
                } else if (component.types.includes('administrative_area_level_1')) {
                  address.region = component.long_name;
                } else if (component.types.includes('country')) {
                  address.country = component.long_name;
                } else if (component.types.includes('postal_code')) {
                  address.postalCode = component.long_name;
                } else if (component.types.includes('point_of_interest')) {
                  address.name = component.long_name;
                }
              });
              return address;
            }));

          case 9:
          case "end":
            return _context9.stop();
        }
      }
    }, null, this);
  }

  function watchPosition(success, error, options) {
    _maybeInitializeEmitterSubscription();

    var watchId = _getNextWatchId();

    watchCallbacks[watchId] = success;

    _ExpoLocation.default.watchPositionImplAsync(watchId, options).catch(function (err) {
      _removeWatcher(watchId);

      error({
        watchId: watchId,
        message: err.message,
        code: err.code
      });
    });

    return watchId;
  }

  function watchPositionAsync(options, callback) {
    var watchId;
    return _regenerator.default.async(function watchPositionAsync$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _maybeInitializeEmitterSubscription();

            watchId = _getNextWatchId();
            watchCallbacks[watchId] = callback;
            _context10.next = 5;
            return _regenerator.default.awrap(_ExpoLocation.default.watchPositionImplAsync(watchId, options));

          case 5:
            return _context10.abrupt("return", {
              remove: function remove() {
                _removeWatcher(watchId);
              }
            });

          case 6:
          case "end":
            return _context10.stop();
        }
      }
    }, null, this);
  }

  function clearWatch(watchId) {
    _removeWatcher(watchId);
  }

  function _removeWatcher(watchId) {
    if (!watchCallbacks[watchId]) {
      return;
    }

    _ExpoLocation.default.removeWatchAsync(watchId);

    delete watchCallbacks[watchId];

    if (Object.keys(watchCallbacks).length === 0 && deviceEventSubscription) {
      LocationEventEmitter.removeSubscription(deviceEventSubscription);
      deviceEventSubscription = null;
    }
  }

  function getCurrentPosition(success) {
    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _invariant.default)(typeof success === 'function', 'Must provide a valid success callback.');
    (0, _invariant.default)(typeof options === 'object', 'options must be an object.');

    _getCurrentPositionAsyncWrapper(success, error, options);
  }

  function _getCurrentPositionAsyncWrapper(success, error, options) {
    var result;
    return _regenerator.default.async(function _getCurrentPositionAsyncWrapper$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.prev = 0;
            _context11.next = 3;
            return _regenerator.default.awrap(_ExpoLocation.default.requestPermissionsAsync());

          case 3:
            _context11.next = 5;
            return _regenerator.default.awrap(getCurrentPositionAsync(options));

          case 5:
            result = _context11.sent;
            success(result);
            _context11.next = 12;
            break;

          case 9:
            _context11.prev = 9;
            _context11.t0 = _context11["catch"](0);
            error(_context11.t0);

          case 12:
          case "end":
            return _context11.stop();
        }
      }
    }, null, this, [[0, 9]]);
  }

  function requestPermissionsAsync() {
    return _regenerator.default.async(function requestPermissionsAsync$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _regenerator.default.awrap(_ExpoLocation.default.requestPermissionsAsync());

          case 2:
          case "end":
            return _context12.stop();
        }
      }
    }, null, this);
  }

  function hasServicesEnabledAsync() {
    return _regenerator.default.async(function hasServicesEnabledAsync$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _regenerator.default.awrap(_ExpoLocation.default.hasServicesEnabledAsync());

          case 2:
            return _context13.abrupt("return", _context13.sent);

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, null, this);
  }

  function _validateTaskName(taskName) {
    (0, _invariant.default)(taskName && typeof taskName === 'string', '`taskName` must be a non-empty string.');
  }

  function startLocationUpdatesAsync(taskName) {
    var options,
        _args14 = arguments;
    return _regenerator.default.async(function startLocationUpdatesAsync$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            options = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {
              accuracy: LocationAccuracy.Balanced
            };

            _validateTaskName(taskName);

            _context14.next = 4;
            return _regenerator.default.awrap(_ExpoLocation.default.startLocationUpdatesAsync(taskName, options));

          case 4:
          case "end":
            return _context14.stop();
        }
      }
    }, null, this);
  }

  function stopLocationUpdatesAsync(taskName) {
    return _regenerator.default.async(function stopLocationUpdatesAsync$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _validateTaskName(taskName);

            _context15.next = 3;
            return _regenerator.default.awrap(_ExpoLocation.default.stopLocationUpdatesAsync(taskName));

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, null, this);
  }

  function hasStartedLocationUpdatesAsync(taskName) {
    return _regenerator.default.async(function hasStartedLocationUpdatesAsync$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _validateTaskName(taskName);

            return _context16.abrupt("return", _ExpoLocation.default.hasStartedLocationUpdatesAsync(taskName));

          case 2:
          case "end":
            return _context16.stop();
        }
      }
    }, null, this);
  }

  function _validateRegions(regions) {
    if (!regions || regions.length === 0) {
      throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');
    }

    for (var _iterator = regions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref4;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref4 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref4 = _i.value;
      }

      var _region = _ref4;

      if (typeof _region.latitude !== 'number') {
        throw new TypeError("Region's latitude must be a number. Got '" + _region.latitude + "' instead.");
      }

      if (typeof _region.longitude !== 'number') {
        throw new TypeError("Region's longitude must be a number. Got '" + _region.longitude + "' instead.");
      }

      if (typeof _region.radius !== 'number') {
        throw new TypeError("Region's radius must be a number. Got '" + _region.radius + "' instead.");
      }
    }
  }

  function startGeofencingAsync(taskName) {
    var regions,
        _args17 = arguments;
    return _regenerator.default.async(function startGeofencingAsync$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            regions = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : [];

            _validateTaskName(taskName);

            _validateRegions(regions);

            _context17.next = 5;
            return _regenerator.default.awrap(_ExpoLocation.default.startGeofencingAsync(taskName, {
              regions: regions
            }));

          case 5:
          case "end":
            return _context17.stop();
        }
      }
    }, null, this);
  }

  function stopGeofencingAsync(taskName) {
    return _regenerator.default.async(function stopGeofencingAsync$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _validateTaskName(taskName);

            _context18.next = 3;
            return _regenerator.default.awrap(_ExpoLocation.default.stopGeofencingAsync(taskName));

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, null, this);
  }

  function hasStartedGeofencingAsync(taskName) {
    return _regenerator.default.async(function hasStartedGeofencingAsync$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            _validateTaskName(taskName);

            return _context19.abrupt("return", _ExpoLocation.default.hasStartedGeofencingAsync(taskName));

          case 2:
          case "end":
            return _context19.stop();
        }
      }
    }, null, this);
  }

  function installWebGeolocationPolyfill() {
    if (_expoCore.Platform.OS !== 'web') {
      window.navigator.geolocation = {
        getCurrentPosition: getCurrentPosition,
        watchPosition: watchPosition,
        clearWatch: clearWatch,
        stopObserving: function stopObserving() {}
      };
    }
  }
},413,[1,130,331,334,414]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoLocation;
  exports.default = _default;
},414,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get MediaLibrary() {
      return _$$_REQUIRE(_dependencyMap[0]);
    }

  };
},415,[416]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createAssetAsync = createAssetAsync;
  exports.addAssetsToAlbumAsync = addAssetsToAlbumAsync;
  exports.removeAssetsFromAlbumAsync = removeAssetsFromAlbumAsync;
  exports.deleteAssetsAsync = deleteAssetsAsync;
  exports.getAssetInfoAsync = getAssetInfoAsync;
  exports.getAlbumsAsync = getAlbumsAsync;
  exports.getAlbumAsync = getAlbumAsync;
  exports.createAlbumAsync = createAlbumAsync;
  exports.deleteAlbumsAsync = deleteAlbumsAsync;
  exports.getAssetsAsync = getAssetsAsync;
  exports.addListener = addListener;
  exports.removeSubscription = removeSubscription;
  exports.removeAllListeners = removeAllListeners;
  exports.getMomentsAsync = getMomentsAsync;
  exports.SortBy = exports.MediaType = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _expoCore = _$$_REQUIRE(_dependencyMap[3]);

  var _expoErrors = _$$_REQUIRE(_dependencyMap[4]);

  var _ExponentMediaLibrary = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var eventEmitter = new _expoCore.EventEmitter(_ExponentMediaLibrary.default);

  function arrayize(item) {
    if (Array.isArray(item)) {
      return item;
    }

    return item ? [item] : [];
  }

  function getId(ref) {
    if (typeof ref === 'string') {
      return ref;
    }

    return ref ? ref.id : undefined;
  }

  function checkAssetIds(assetIds) {
    if (assetIds.some(function (id) {
      return !id || typeof id !== 'string';
    })) {
      throw new Error('Asset ID must be a string!');
    }
  }

  function checkAlbumIds(albumIds) {
    if (albumIds.some(function (id) {
      return !id || typeof id !== 'string';
    })) {
      throw new Error('Album ID must be a string!');
    }
  }

  function checkMediaType(mediaType) {
    if (Object.values(MediaType).indexOf(mediaType) === -1) {
      throw new Error("Invalid mediaType: " + mediaType);
    }
  }

  function checkSortBy(sortBy) {
    if (Array.isArray(sortBy)) {
      checkSortByKey(sortBy[0]);

      if (typeof sortBy[1] !== 'boolean') {
        throw new Error('Invalid sortBy array argument. Second item must be a boolean!');
      }
    } else {
      checkSortByKey(sortBy);
    }
  }

  function checkSortByKey(sortBy) {
    if (Object.values(SortBy).indexOf(sortBy) === -1) {
      throw new Error("Invalid sortBy key: " + sortBy);
    }
  }

  var MediaType = _ExponentMediaLibrary.default.MediaType;
  exports.MediaType = MediaType;
  var SortBy = _ExponentMediaLibrary.default.SortBy;
  exports.SortBy = SortBy;

  function createAssetAsync(localUri) {
    var asset;
    return _regenerator.default.async(function createAssetAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (_ExponentMediaLibrary.default.createAssetAsync) {
              _context.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'createAssetAsync');

          case 2:
            if (!(!localUri || typeof localUri !== 'string')) {
              _context.next = 4;
              break;
            }

            throw new Error('Invalid argument "localUri". It must be a string!');

          case 4:
            _context.next = 6;
            return _regenerator.default.awrap(_ExponentMediaLibrary.default.createAssetAsync(localUri));

          case 6:
            asset = _context.sent;

            if (!Array.isArray(asset)) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return", asset[0]);

          case 9:
            return _context.abrupt("return", asset);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function addAssetsToAlbumAsync(assets, album) {
    var copy,
        assetIds,
        albumId,
        _args2 = arguments;
    return _regenerator.default.async(function addAssetsToAlbumAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            copy = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : true;

            if (_ExponentMediaLibrary.default.addAssetsToAlbumAsync) {
              _context2.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');

          case 3:
            assetIds = arrayize(assets).map(getId);
            albumId = getId(album);
            checkAssetIds(assetIds);

            if (!(!albumId || typeof albumId !== 'string')) {
              _context2.next = 8;
              break;
            }

            throw new Error('Invalid album ID. It must be a string!');

          case 8:
            if (!(_reactNative.Platform.OS === 'ios')) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt("return", _ExponentMediaLibrary.default.addAssetsToAlbumAsync(assetIds, albumId));

          case 10:
            return _context2.abrupt("return", _ExponentMediaLibrary.default.addAssetsToAlbumAsync(assetIds, albumId, !!copy));

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function removeAssetsFromAlbumAsync(assets, album) {
    var assetIds, albumId;
    return _regenerator.default.async(function removeAssetsFromAlbumAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (_ExponentMediaLibrary.default.removeAssetsFromAlbumAsync) {
              _context3.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');

          case 2:
            assetIds = arrayize(assets).map(getId);
            albumId = getId(album);
            checkAssetIds(assetIds);
            return _context3.abrupt("return", _ExponentMediaLibrary.default.removeAssetsFromAlbumAsync(assetIds, albumId));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function deleteAssetsAsync(assets) {
    var assetIds;
    return _regenerator.default.async(function deleteAssetsAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (_ExponentMediaLibrary.default.deleteAssetsAsync) {
              _context4.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');

          case 2:
            assetIds = arrayize(assets).map(getId);
            checkAssetIds(assetIds);
            return _context4.abrupt("return", _ExponentMediaLibrary.default.deleteAssetsAsync(assetIds));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function getAssetInfoAsync(asset) {
    var assetId, assetInfo;
    return _regenerator.default.async(function getAssetInfoAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (_ExponentMediaLibrary.default.getAssetInfoAsync) {
              _context5.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');

          case 2:
            assetId = getId(asset);
            checkAssetIds([assetId]);
            _context5.next = 6;
            return _regenerator.default.awrap(_ExponentMediaLibrary.default.getAssetInfoAsync(assetId));

          case 6:
            assetInfo = _context5.sent;

            if (!Array.isArray(assetInfo)) {
              _context5.next = 9;
              break;
            }

            return _context5.abrupt("return", assetInfo[0]);

          case 9:
            return _context5.abrupt("return", assetInfo);

          case 10:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  function getAlbumsAsync() {
    return _regenerator.default.async(function getAlbumsAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (_ExponentMediaLibrary.default.getAlbumsAsync) {
              _context6.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'getAlbumsAsync');

          case 2:
            return _context6.abrupt("return", _ExponentMediaLibrary.default.getAlbumsAsync());

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this);
  }

  function getAlbumAsync(title) {
    return _regenerator.default.async(function getAlbumAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (_ExponentMediaLibrary.default.getAlbumAsync) {
              _context7.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'getAlbumAsync');

          case 2:
            if (!(typeof title !== 'string')) {
              _context7.next = 4;
              break;
            }

            throw new Error('Album title must be a string!');

          case 4:
            return _context7.abrupt("return", _ExponentMediaLibrary.default.getAlbumAsync(title));

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  }

  function createAlbumAsync(albumName, asset) {
    var copyAsset,
        assetId,
        _args8 = arguments;
    return _regenerator.default.async(function createAlbumAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            copyAsset = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : true;

            if (_ExponentMediaLibrary.default.createAlbumAsync) {
              _context8.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'createAlbumAsync');

          case 3:
            assetId = getId(asset);

            if (!(_reactNative.Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0))) {
              _context8.next = 6;
              break;
            }

            throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');

          case 6:
            if (!(!albumName || typeof albumName !== 'string')) {
              _context8.next = 8;
              break;
            }

            throw new Error('Invalid argument "albumName". It must be a string!');

          case 8:
            if (!(assetId != null && typeof assetId !== 'string')) {
              _context8.next = 10;
              break;
            }

            throw new Error('Asset ID must be a string!');

          case 10:
            if (!(_reactNative.Platform.OS === 'ios')) {
              _context8.next = 12;
              break;
            }

            return _context8.abrupt("return", _ExponentMediaLibrary.default.createAlbumAsync(albumName, assetId));

          case 12:
            return _context8.abrupt("return", _ExponentMediaLibrary.default.createAlbumAsync(albumName, assetId, !!copyAsset));

          case 13:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this);
  }

  function deleteAlbumsAsync(albums) {
    var assetRemove,
        albumIds,
        _args9 = arguments;
    return _regenerator.default.async(function deleteAlbumsAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            assetRemove = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : false;

            if (_ExponentMediaLibrary.default.deleteAlbumsAsync) {
              _context9.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');

          case 3:
            albumIds = arrayize(albums).map(getId);
            checkAlbumIds(albumIds);

            if (!(_reactNative.Platform.OS === 'android')) {
              _context9.next = 7;
              break;
            }

            return _context9.abrupt("return", _ExponentMediaLibrary.default.deleteAlbumsAsync(albumIds));

          case 7:
            return _context9.abrupt("return", _ExponentMediaLibrary.default.deleteAlbumsAsync(albumIds, !!assetRemove));

          case 8:
          case "end":
            return _context9.stop();
        }
      }
    }, null, this);
  }

  function getAssetsAsync() {
    var assetsOptions,
        first,
        after,
        album,
        sortBy,
        mediaType,
        options,
        _args10 = arguments;
    return _regenerator.default.async(function getAssetsAsync$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            assetsOptions = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};

            if (_ExponentMediaLibrary.default.getAssetsAsync) {
              _context10.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'getAssetsAsync');

          case 3:
            first = assetsOptions.first, after = assetsOptions.after, album = assetsOptions.album, sortBy = assetsOptions.sortBy, mediaType = assetsOptions.mediaType;
            options = {
              first: first == null ? 20 : first,
              after: getId(after),
              album: getId(album),
              sortBy: arrayize(sortBy),
              mediaType: arrayize(mediaType || [MediaType.photo])
            };

            if (!(first != null && typeof options.first !== 'number')) {
              _context10.next = 7;
              break;
            }

            throw new Error('Option "first" must be a number!');

          case 7:
            if (!(after != null && typeof options.after !== 'string')) {
              _context10.next = 9;
              break;
            }

            throw new Error('Option "after" must be a string!');

          case 9:
            if (!(album != null && typeof options.album !== 'string')) {
              _context10.next = 11;
              break;
            }

            throw new Error('Option "album" must be a string!');

          case 11:
            options.sortBy.forEach(checkSortBy);
            options.mediaType.forEach(checkMediaType);
            return _context10.abrupt("return", _ExponentMediaLibrary.default.getAssetsAsync(options));

          case 14:
          case "end":
            return _context10.stop();
        }
      }
    }, null, this);
  }

  function addListener(listener) {
    var _this = this;

    var subscription = eventEmitter.addListener(_ExponentMediaLibrary.default.CHANGE_LISTENER_NAME, listener);

    subscription.remove = function () {
      return _this.removeSubscription(subscription);
    };

    return subscription;
  }

  function removeSubscription(subscription) {
    eventEmitter.removeSubscription(subscription);
  }

  function removeAllListeners() {
    eventEmitter.removeAllListeners('mediaLibraryDidChange');
  }

  function getMomentsAsync() {
    return _regenerator.default.async(function getMomentsAsync$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (_ExponentMediaLibrary.default.getMomentsAsync) {
              _context11.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('MediaLibrary', 'getMomentsAsync');

          case 2:
            return _context11.abrupt("return", _ExponentMediaLibrary.default.getMomentsAsync());

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, null, this);
  }
},416,[1,130,5,331,368,417]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExponentMediaLibrary;
  exports.default = _default;
},417,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get Permissions() {
      return _$$_REQUIRE(_dependencyMap[0]);
    }

  };
},418,[419]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAsync = getAsync;
  exports.askAsync = askAsync;
  exports.REMINDERS = exports.CALENDAR = exports.CAMERA_ROLL = exports.SYSTEM_BRIGHTNESS = exports.CONTACTS = exports.NOTIFICATIONS = exports.USER_FACING_NOTIFICATIONS = exports.LOCATION = exports.AUDIO_RECORDING = exports.CAMERA = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ExpoPermissions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _Permissions = _$$_REQUIRE(_dependencyMap[3]);

  function handlePermissionsRequest(types, handlePermissions) {
    var permissions;
    return _regenerator.default.async(function handlePermissionsRequest$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (types.length) {
              _context.next = 2;
              break;
            }

            throw new Error('No permission requested!');

          case 2:
            _context.next = 4;
            return _regenerator.default.awrap(handlePermissions(types));

          case 4:
            permissions = _context.sent;
            return _context.abrupt("return", {
              status: Object.keys(permissions).reduce(function (acc, key) {
                return permissions[key].status !== 'granted' ? permissions[key].status : acc;
              }, 'granted'),
              expires: Object.keys(permissions).reduce(function (acc, key) {
                return permissions[key].expires !== 'never' ? permissions[key].expires : acc;
              }, 'never'),
              permissions: permissions
            });

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function getAsync() {
    var _len,
        types,
        _key,
        _args2 = arguments;

    return _regenerator.default.async(function getAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            for (_len = _args2.length, types = new Array(_len), _key = 0; _key < _len; _key++) {
              types[_key] = _args2[_key];
            }

            return _context2.abrupt("return", handlePermissionsRequest(types, _ExpoPermissions.default.getAsync));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function askAsync() {
    var _len2,
        types,
        _key2,
        _args3 = arguments;

    return _regenerator.default.async(function askAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            for (_len2 = _args3.length, types = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              types[_key2] = _args3[_key2];
            }

            return _context3.abrupt("return", handlePermissionsRequest(types, _ExpoPermissions.default.askAsync));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  var CAMERA = 'camera';
  exports.CAMERA = CAMERA;
  var AUDIO_RECORDING = 'audioRecording';
  exports.AUDIO_RECORDING = AUDIO_RECORDING;
  var LOCATION = 'location';
  exports.LOCATION = LOCATION;
  var USER_FACING_NOTIFICATIONS = 'userFacingNotifications';
  exports.USER_FACING_NOTIFICATIONS = USER_FACING_NOTIFICATIONS;
  var NOTIFICATIONS = 'notifications';
  exports.NOTIFICATIONS = NOTIFICATIONS;
  var CONTACTS = 'contacts';
  exports.CONTACTS = CONTACTS;
  var SYSTEM_BRIGHTNESS = 'systemBrightness';
  exports.SYSTEM_BRIGHTNESS = SYSTEM_BRIGHTNESS;
  var CAMERA_ROLL = 'cameraRoll';
  exports.CAMERA_ROLL = CAMERA_ROLL;
  var CALENDAR = 'calendar';
  exports.CALENDAR = CALENDAR;
  var REMINDERS = 'reminders';
  exports.REMINDERS = REMINDERS;
},419,[1,130,420,421]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoPermissions;
  exports.default = _default;
},420,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {},421,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Print", {
    enumerable: true,
    get: function get() {
      return _Print.default;
    }
  });

  var _Print = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));
},422,[1,423]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _ExponentPrint = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[4]);

  var Orientation = _ExponentPrint.default.Orientation;

  function printAsync(options) {
    return _regenerator.default.async(function printAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(_reactNative.Platform.OS === 'web')) {
              _context.next = 4;
              break;
            }

            _context.next = 3;
            return _regenerator.default.awrap(_ExponentPrint.default.print(options));

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
            if (!(!options.uri && !options.html && _reactNative.Platform.OS === 'ios' && !options.markupFormatterIOS)) {
              _context.next = 6;
              break;
            }

            throw new Error('Must provide either `html` or `uri` to print');

          case 6:
            if (!(options.uri && options.html)) {
              _context.next = 8;
              break;
            }

            throw new Error('Must provide exactly one of `html` and `uri` but both were specified');

          case 8:
            _context.next = 10;
            return _regenerator.default.awrap(_ExponentPrint.default.print(options));

          case 10:
            return _context.abrupt("return", _context.sent);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function selectPrinterAsync() {
    return _regenerator.default.async(function selectPrinterAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!_ExponentPrint.default.selectPrinter) {
              _context2.next = 4;
              break;
            }

            _context2.next = 3;
            return _regenerator.default.awrap(_ExponentPrint.default.selectPrinter());

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 4:
            throw new _expoErrors.UnavailabilityError('Print', 'selectPrinterAsync');

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function printToFileAsync() {
    var options,
        _args3 = arguments;
    return _regenerator.default.async(function printToFileAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
            _context3.next = 3;
            return _regenerator.default.awrap(_ExponentPrint.default.printToFileAsync(options));

          case 3:
            return _context3.abrupt("return", _context3.sent);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  var _default = {
    Orientation: Orientation,
    printAsync: printAsync,
    selectPrinterAsync: selectPrinterAsync,
    printToFileAsync: printToFileAsync
  };
  exports.default = _default;
},423,[1,130,5,424,368]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExponentPrint;
  exports.default = _default;
},424,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Accelerometer", {
    enumerable: true,
    get: function get() {
      return _Accelerometer.default;
    }
  });
  Object.defineProperty(exports, "DeviceMotion", {
    enumerable: true,
    get: function get() {
      return _DeviceMotion.default;
    }
  });
  Object.defineProperty(exports, "Gyroscope", {
    enumerable: true,
    get: function get() {
      return _Gyroscope.default;
    }
  });
  Object.defineProperty(exports, "Magnetometer", {
    enumerable: true,
    get: function get() {
      return _Magnetometer.default;
    }
  });
  Object.defineProperty(exports, "MagnetometerUncalibrated", {
    enumerable: true,
    get: function get() {
      return _MagnetometerUncalibrated.default;
    }
  });
  exports.Pedometer = undefined;

  var _Accelerometer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _DeviceMotion = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _Gyroscope = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _Magnetometer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _MagnetometerUncalibrated = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var Pedometer = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  exports.Pedometer = Pedometer;
},425,[366,1,426,429,430,431,432,433]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[1]);

  var _ThreeAxisSensor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ExponentAccelerometer = _expoCore.NativeModulesProxy.ExponentAccelerometer;

  var _default = new _ThreeAxisSensor.default(ExponentAccelerometer, 'accelerometerDidUpdate');

  exports.default = _default;
},426,[1,331,427]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _DeviceSensor2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var ThreeAxisSensor = function (_DeviceSensor) {
    (0, _inherits2.default)(ThreeAxisSensor, _DeviceSensor);

    function ThreeAxisSensor() {
      (0, _classCallCheck2.default)(this, ThreeAxisSensor);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ThreeAxisSensor).apply(this, arguments));
    }

    return ThreeAxisSensor;
  }(_DeviceSensor2.default);

  exports.default = ThreeAxisSensor;
},427,[1,21,34,37,40,428]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[3]);

  var DeviceSensor = function () {
    function DeviceSensor(nativeSensorModule, nativeEventName) {
      (0, _classCallCheck2.default)(this, DeviceSensor);
      this._nativeModule = nativeSensorModule;
      this._nativeEmitter = new _expoCore.EventEmitter(nativeSensorModule);
      this._nativeEventName = nativeEventName;
      this._listenerCount = 0;
    }

    (0, _createClass2.default)(DeviceSensor, [{
      key: "addListener",
      value: function addListener(listener) {
        var _this = this;

        var subscription = this._nativeEmitter.addListener(this._nativeEventName, listener);

        subscription.remove = function () {
          return _this.removeSubscription(subscription);
        };

        this._listenerCount++;
        return subscription;
      }
    }, {
      key: "hasListeners",
      value: function hasListeners() {
        return this._listenerCount > 0;
      }
    }, {
      key: "getListenerCount",
      value: function getListenerCount() {
        return this._listenerCount;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._listenerCount = 0;

        this._nativeEmitter.removeAllListeners(this._nativeEventName);
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this._listenerCount--;

        this._nativeEmitter.removeSubscription(subscription);
      }
    }, {
      key: "setUpdateInterval",
      value: function setUpdateInterval(intervalMs) {
        this._nativeModule.setUpdateInterval(intervalMs);
      }
    }]);
    return DeviceSensor;
  }();

  exports.default = DeviceSensor;
},428,[1,21,22,331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Gravity = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[5]);

  var _DeviceSensor2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var ExponentDeviceMotion = _expoCore.NativeModulesProxy.ExponentDeviceMotion;

  var DeviceMotionSensor = function (_DeviceSensor) {
    (0, _inherits2.default)(DeviceMotionSensor, _DeviceSensor);

    function DeviceMotionSensor() {
      var _this;

      (0, _classCallCheck2.default)(this, DeviceMotionSensor);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DeviceMotionSensor).apply(this, arguments));
      _this.Gravity = ExponentDeviceMotion.Gravity;
      return _this;
    }

    return DeviceMotionSensor;
  }(_DeviceSensor2.default);

  var Gravity = ExponentDeviceMotion.Gravity;
  exports.Gravity = Gravity;

  var _default = new DeviceMotionSensor(ExponentDeviceMotion, 'deviceMotionDidUpdate');

  exports.default = _default;
},429,[1,21,34,37,40,331,428]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[1]);

  var _ThreeAxisSensor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ExponentGyroscope = _expoCore.NativeModulesProxy.ExponentGyroscope;

  var _default = new _ThreeAxisSensor.default(ExponentGyroscope, 'gyroscopeDidUpdate');

  exports.default = _default;
},430,[1,331,427]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[1]);

  var _ThreeAxisSensor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ExponentMagnetometer = _expoCore.NativeModulesProxy.ExponentMagnetometer;

  var _default = new _ThreeAxisSensor.default(ExponentMagnetometer, 'magnetometerDidUpdate');

  exports.default = _default;
},431,[1,331,427]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[1]);

  var _ThreeAxisSensor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ExponentMagnetometerUncalibrated = _expoCore.NativeModulesProxy.ExponentMagnetometerUncalibrated;

  var _default = new _ThreeAxisSensor.default(ExponentMagnetometerUncalibrated, 'magnetometerUncalibratedDidUpdate');

  exports.default = _default;
},432,[1,331,427]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.watchStepCount = watchStepCount;
  exports.getStepCountAsync = getStepCountAsync;
  exports.isAvailableAsync = isAvailableAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[2]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var PedometerEventEmitter = new _expoCore.EventEmitter(_expoCore.NativeModulesProxy.ExponentPedometer);

  function watchStepCount(callback) {
    return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);
  }

  function getStepCountAsync(start, end) {
    return _regenerator.default.async(function getStepCountAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            (0, _invariant.default)(start <= end, 'Pedometer: The start date must precede the end date.');
            _context.next = 3;
            return _regenerator.default.awrap(_expoCore.NativeModulesProxy.ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime()));

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function isAvailableAsync() {
    return _regenerator.default.async(function isAvailableAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(_expoCore.NativeModulesProxy.ExponentPedometer.isAvailableAsync());

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }
},433,[1,130,331,334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.sendSMSAsync = sendSMSAsync;
  exports.isAvailableAsync = isAvailableAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[2]);

  var _ExpoSMS = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function sendSMSAsync(addresses, message) {
    var finalAddresses;
    return _regenerator.default.async(function sendSMSAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            finalAddresses = Array.isArray(addresses) ? addresses : [addresses];

            if (_ExpoSMS.default.sendSMSAsync) {
              _context.next = 3;
              break;
            }

            throw new Error("SMS.sendSMSAsync is not supported on " + _expoCore.Platform.OS);

          case 3:
            return _context.abrupt("return", _ExpoSMS.default.sendSMSAsync(finalAddresses, message));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function isAvailableAsync() {
    return _regenerator.default.async(function isAvailableAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", _ExpoSMS.default.isAvailableAsync());

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }
},434,[1,130,331,435]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoCore = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _expoCore.NativeModulesProxy.ExpoSMS;
  exports.default = _default;
},435,[331]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GestureHandler = undefined;

  var GestureHandler = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  exports.GestureHandler = GestureHandler;
},436,[366,437]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    Swipeable: true,
    DrawerLayout: true
  };
  Object.defineProperty(exports, "Swipeable", {
    enumerable: true,
    get: function get() {
      return _Swipeable.default;
    }
  });
  Object.defineProperty(exports, "DrawerLayout", {
    enumerable: true,
    get: function get() {
      return _DrawerLayout.default;
    }
  });

  var _Swipeable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _DrawerLayout = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _GestureHandler = _$$_REQUIRE(_dependencyMap[3]);

  Object.keys(_GestureHandler).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _GestureHandler[key];
      }
    });
  });

  var _touchables = _$$_REQUIRE(_dependencyMap[4]);

  Object.keys(_touchables).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _touchables[key];
      }
    });
  });
},437,[1,438,442,439,443]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _AnimatedEvent = _$$_REQUIRE(_dependencyMap[11]);

  var _GestureHandler = _$$_REQUIRE(_dependencyMap[12]);

  var DRAG_TOSS = 0.05;

  if (!Math.sign) {
    Math.sign = function (x) {
      return Number(x > 0) - Number(x < 0) || +x;
    };
  }

  var Swipeable = function (_Component) {
    (0, _inherits2.default)(Swipeable, _Component);

    function Swipeable(_props) {
      var _this;

      (0, _classCallCheck2.default)(this, Swipeable);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Swipeable).call(this, _props));

      _this._updateAnimatedEvent = function (props, state) {
        var friction = props.friction,
            overshootFriction = props.overshootFriction,
            useNativeAnimations = props.useNativeAnimations;
        var dragX = state.dragX,
            rowTranslation = state.rowTranslation,
            _state$leftWidth = state.leftWidth,
            leftWidth = _state$leftWidth === undefined ? 0 : _state$leftWidth,
            _state$rowWidth = state.rowWidth,
            rowWidth = _state$rowWidth === undefined ? 0 : _state$rowWidth;
        var _state$rightOffset = state.rightOffset,
            rightOffset = _state$rightOffset === undefined ? rowWidth : _state$rightOffset;
        var rightWidth = Math.max(0, rowWidth - rightOffset);
        var _props$overshootLeft = props.overshootLeft,
            overshootLeft = _props$overshootLeft === undefined ? leftWidth > 0 : _props$overshootLeft,
            _props$overshootRight = props.overshootRight,
            overshootRight = _props$overshootRight === undefined ? rightWidth > 0 : _props$overshootRight;

        var transX = _reactNative.Animated.add(rowTranslation, dragX.interpolate({
          inputRange: [0, friction],
          outputRange: [0, 1]
        })).interpolate({
          inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],
          outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]
        });

        _this._transX = transX;
        _this._showLeftAction = leftWidth > 0 ? transX.interpolate({
          inputRange: [-1, 0, leftWidth],
          outputRange: [0, 0, 1]
        }) : new _reactNative.Animated.Value(0);
        _this._leftActionTranslate = _this._showLeftAction.interpolate({
          inputRange: [0, Number.MIN_VALUE],
          outputRange: [-10000, 0],
          extrapolate: 'clamp'
        });
        _this._showRightAction = rightWidth > 0 ? transX.interpolate({
          inputRange: [-rightWidth, 0, 1],
          outputRange: [1, 0, 0]
        }) : new _reactNative.Animated.Value(0);
        _this._rightActionTranslate = _this._showRightAction.interpolate({
          inputRange: [0, Number.MIN_VALUE],
          outputRange: [-10000, 0],
          extrapolate: 'clamp'
        });
      };

      _this._onTapHandlerStateChange = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        if (nativeEvent.oldState === _GestureHandler.State.ACTIVE) {
          _this.close();
        }
      };

      _this._onHandlerStateChange = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;

        if (nativeEvent.oldState === _GestureHandler.State.ACTIVE) {
          _this._handleRelease(nativeEvent);
        }
      };

      _this._handleRelease = function (nativeEvent) {
        var velocityX = nativeEvent.velocityX,
            dragX = nativeEvent.translationX;
        var _this$state = _this.state,
            _this$state$leftWidth = _this$state.leftWidth,
            leftWidth = _this$state$leftWidth === undefined ? 0 : _this$state$leftWidth,
            _this$state$rowWidth = _this$state.rowWidth,
            rowWidth = _this$state$rowWidth === undefined ? 0 : _this$state$rowWidth,
            rowState = _this$state.rowState;
        var _this$state$rightOffs = _this.state.rightOffset,
            rightOffset = _this$state$rightOffs === undefined ? rowWidth : _this$state$rightOffs;
        var rightWidth = rowWidth - rightOffset;
        var _this$props = _this.props,
            friction = _this$props.friction,
            _this$props$leftThres = _this$props.leftThreshold,
            leftThreshold = _this$props$leftThres === undefined ? leftWidth / 2 : _this$props$leftThres,
            _this$props$rightThre = _this$props.rightThreshold,
            rightThreshold = _this$props$rightThre === undefined ? rightWidth / 2 : _this$props$rightThre;
        var startOffsetX = _this._currentOffset() + dragX / friction;
        var translationX = (dragX + DRAG_TOSS * velocityX) / friction;
        var toValue = 0;

        if (rowState === 0) {
          if (translationX > leftThreshold) {
            toValue = leftWidth;
          } else if (translationX < -rightThreshold) {
            toValue = -rightWidth;
          }
        } else if (rowState === 1) {
          if (translationX > -leftThreshold) {
            toValue = leftWidth;
          }
        } else {
          if (translationX < rightThreshold) {
            toValue = -rightWidth;
          }
        }

        _this._animateRow(startOffsetX, toValue, velocityX / friction);
      };

      _this._animateRow = function (fromValue, toValue, velocityX) {
        var _this$state2 = _this.state,
            dragX = _this$state2.dragX,
            rowTranslation = _this$state2.rowTranslation;
        dragX.setValue(0);
        rowTranslation.setValue(fromValue);

        _this.setState({
          rowState: Math.sign(toValue)
        });

        _reactNative.Animated.spring(rowTranslation, (0, _objectSpread2.default)({
          restSpeedThreshold: 1.7,
          restDisplacementThreshold: 0.4,
          velocity: velocityX,
          bounciness: 0,
          toValue: toValue,
          useNativeDriver: _this.props.useNativeAnimations
        }, _this.props.animationOptions)).start(function (_ref3) {
          var finished = _ref3.finished;

          if (finished) {
            if (toValue > 0 && _this.props.onSwipeableLeftOpen) {
              _this.props.onSwipeableLeftOpen();
            } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {
              _this.props.onSwipeableRightOpen();
            }

            if (toValue === 0) {
              _this.props.onSwipeableClose && _this.props.onSwipeableClose();
            } else {
              _this.props.onSwipeableOpen && _this.props.onSwipeableOpen();
            }
          }
        });

        if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {
          _this.props.onSwipeableLeftWillOpen();
        } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {
          _this.props.onSwipeableRightWillOpen();
        }

        if (toValue === 0) {
          _this.props.onSwipeableWillClose && _this.props.onSwipeableWillClose();
        } else {
          _this.props.onSwipeableWillOpen && _this.props.onSwipeableWillOpen();
        }
      };

      _this._onRowLayout = function (_ref4) {
        var nativeEvent = _ref4.nativeEvent;

        _this.setState({
          rowWidth: nativeEvent.layout.width
        });
      };

      _this._currentOffset = function () {
        var _this$state3 = _this.state,
            _this$state3$leftWidt = _this$state3.leftWidth,
            leftWidth = _this$state3$leftWidt === undefined ? 0 : _this$state3$leftWidt,
            _this$state3$rowWidth = _this$state3.rowWidth,
            rowWidth = _this$state3$rowWidth === undefined ? 0 : _this$state3$rowWidth,
            rowState = _this$state3.rowState;
        var _this$state$rightOffs2 = _this.state.rightOffset,
            rightOffset = _this$state$rightOffs2 === undefined ? rowWidth : _this$state$rightOffs2;
        var rightWidth = rowWidth - rightOffset;

        if (rowState === 1) {
          return leftWidth;
        } else if (rowState === -1) {
          return -rightWidth;
        }

        return 0;
      };

      _this.close = function () {
        _this._animateRow(_this._currentOffset(), 0);
      };

      _this.openLeft = function () {
        var _this$state$leftWidth2 = _this.state.leftWidth,
            leftWidth = _this$state$leftWidth2 === undefined ? 0 : _this$state$leftWidth2;

        _this._animateRow(_this._currentOffset(), leftWidth);
      };

      _this.openRight = function () {
        var _this$state$rowWidth2 = _this.state.rowWidth,
            rowWidth = _this$state$rowWidth2 === undefined ? 0 : _this$state$rowWidth2;
        var _this$state$rightOffs3 = _this.state.rightOffset,
            rightOffset = _this$state$rightOffs3 === undefined ? rowWidth : _this$state$rightOffs3;
        var rightWidth = rowWidth - rightOffset;

        _this._animateRow(_this._currentOffset(), -rightWidth);
      };

      var _dragX = new _reactNative.Animated.Value(0);

      _this.state = {
        dragX: _dragX,
        rowTranslation: new _reactNative.Animated.Value(0),
        rowState: 0,
        leftWidth: undefined,
        rightOffset: undefined,
        rowWidth: undefined
      };

      _this._updateAnimatedEvent(_props, _this.state);

      _this._onGestureEvent = _reactNative.Animated.event([{
        nativeEvent: {
          translationX: _dragX
        }
      }], {
        useNativeDriver: _props.useNativeAnimations
      });
      return _this;
    }

    (0, _createClass2.default)(Swipeable, [{
      key: "componentWillUpdate",
      value: function componentWillUpdate(props, state) {
        if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {
          this._updateAnimatedEvent(props, state);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var rowState = this.state.rowState;
        var _this$props2 = this.props,
            children = _this$props2.children,
            renderLeftActions = _this$props2.renderLeftActions,
            renderRightActions = _this$props2.renderRightActions;

        var left = renderLeftActions && _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.leftActions, {
            transform: [{
              translateX: this._leftActionTranslate
            }]
          }]
        }, renderLeftActions(this._showLeftAction, this._transX), _react.default.createElement(_reactNative.View, {
          onLayout: function onLayout(_ref5) {
            var nativeEvent = _ref5.nativeEvent;
            return _this2.setState({
              leftWidth: nativeEvent.layout.x
            });
          }
        }));

        var right = renderRightActions && _react.default.createElement(_reactNative.Animated.View, {
          style: [styles.rightActions, {
            transform: [{
              translateX: this._rightActionTranslate
            }]
          }]
        }, renderRightActions(this._showRightAction, this._transX), _react.default.createElement(_reactNative.View, {
          onLayout: function onLayout(_ref6) {
            var nativeEvent = _ref6.nativeEvent;
            return _this2.setState({
              rightOffset: nativeEvent.layout.x
            });
          }
        }));

        return _react.default.createElement(_GestureHandler.PanGestureHandler, (0, _extends2.default)({}, this.props, {
          minDeltaX: 10,
          onGestureEvent: this._onGestureEvent,
          onHandlerStateChange: this._onHandlerStateChange
        }), _react.default.createElement(_reactNative.Animated.View, {
          onLayout: this._onRowLayout,
          style: styles.container
        }, left, right, _react.default.createElement(_GestureHandler.TapGestureHandler, {
          enabled: rowState !== 0,
          onHandlerStateChange: this._onTapHandlerStateChange
        }, _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: rowState === 0 ? 'auto' : 'box-only',
          style: {
            transform: [{
              translateX: this._transX
            }]
          }
        }, children))));
      }
    }]);
    return Swipeable;
  }(_react.Component);

  exports.default = Swipeable;
  Swipeable.defaultProps = {
    friction: 1,
    overshootFriction: 1,
    useNativeAnimations: true
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      overflow: 'hidden'
    },
    leftActions: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      flexDirection: 'row'
    }),
    rightActions: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      flexDirection: 'row-reverse'
    })
  });
},438,[366,1,3,48,21,22,34,37,40,51,5,183,439]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "gestureHandlerRootHOC", {
    enumerable: true,
    get: function get() {
      return _gestureHandlerRootHOC.default;
    }
  });
  exports.Directions = exports.FlatList = exports.BorderlessButton = exports.RectButton = exports.BaseButton = exports.RawButton = exports.State = exports.RotationGestureHandler = exports.PinchGestureHandler = exports.PanGestureHandler = exports.LongPressGestureHandler = exports.ForceTouchGestureHandler = exports.FlingGestureHandler = exports.TapGestureHandler = exports.NativeViewGestureHandler = exports.WebView = exports.DrawerLayoutAndroid = exports.ViewPagerAndroid = exports.ToolbarAndroid = exports.TextInput = exports.Switch = exports.Slider = exports.ScrollView = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Touchable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _areEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _gestureHandlerRootHOC = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _stateToPropMappings;

  var RNGestureHandlerModule = _reactNative.NativeModules.RNGestureHandlerModule;
  var UIManager = _reactNative.NativeModules.UIManager;
  var oldSetJSResponder = UIManager.setJSResponder,
      oldClearJSResponder = UIManager.clearJSResponder;

  UIManager.setJSResponder = function (tag, blockNativeResponder) {
    RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);
    oldSetJSResponder(tag, blockNativeResponder);
  };

  UIManager.clearJSResponder = function () {
    RNGestureHandlerModule.handleClearJSResponder();
    oldClearJSResponder();
  };

  UIManager.RCTView.directEventTypes = (0, _objectSpread2.default)({}, UIManager.RCTView.directEventTypes, {
    onGestureHandlerEvent: {
      registrationName: 'onGestureHandlerEvent'
    },
    onGestureHandlerStateChange: {
      registrationName: 'onGestureHandlerStateChange'
    }
  });
  var State = RNGestureHandlerModule.State;
  exports.State = State;
  var Directions = RNGestureHandlerModule.Direction;
  exports.Directions = Directions;
  var handlerTag = 1;
  var handlerIDToTag = {};
  var GestureHandlerPropTypes = {
    id: _propTypes.default.string,
    minPointers: _propTypes.default.number,
    enabled: _propTypes.default.bool,
    waitFor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]))]),
    simultaneousHandlers: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]))]),
    shouldCancelWhenOutside: _propTypes.default.bool,
    hitSlop: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
      left: _propTypes.default.number,
      top: _propTypes.default.number,
      right: _propTypes.default.number,
      bottom: _propTypes.default.number,
      vertical: _propTypes.default.number,
      horizontal: _propTypes.default.number,
      width: _propTypes.default.number,
      height: _propTypes.default.number
    })]),
    onGestureEvent: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    onHandlerStateChange: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    onBegan: _propTypes.default.func,
    onFailed: _propTypes.default.func,
    onCancelled: _propTypes.default.func,
    onActivated: _propTypes.default.func,
    onEnded: _propTypes.default.func
  };
  var stateToPropMappings = (_stateToPropMappings = {}, (0, _defineProperty2.default)(_stateToPropMappings, State.BEGAN, 'onBegan'), (0, _defineProperty2.default)(_stateToPropMappings, State.FAILED, 'onFailed'), (0, _defineProperty2.default)(_stateToPropMappings, State.CANCELLED, 'onCancelled'), (0, _defineProperty2.default)(_stateToPropMappings, State.ACTIVE, 'onActivated'), (0, _defineProperty2.default)(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);

  function isConfigParam(param, name) {
    return param !== undefined && typeof param !== 'function' && (typeof param !== 'object' || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';
  }

  function transformIntoHandlerTags(handlerIDs) {
    if (!Array.isArray(handlerIDs)) {
      handlerIDs = [handlerIDs];
    }

    return handlerIDs.map(function (handlerID) {
      return handlerIDToTag[handlerID] || handlerID.current && handlerID.current._handlerTag || -1;
    }).filter(function (handlerTag) {
      return handlerTag > 0;
    });
  }

  function filterConfig(props, validProps) {
    var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var res = (0, _objectSpread2.default)({}, defaults);
    Object.keys(validProps).forEach(function (key) {
      var value = props[key];

      if (isConfigParam(value, key)) {
        var _value = props[key];

        if (key === 'simultaneousHandlers' || key === 'waitFor') {
          _value = transformIntoHandlerTags(props[key]);
        } else if (key === 'hitSlop') {
          if (typeof _value !== 'object') {
            _value = {
              top: _value,
              left: _value,
              bottom: _value,
              right: _value
            };
          }
        }

        res[key] = _value;
      }
    });
    return res;
  }

  function hasUnresolvedRefs(props) {
    var extract = function extract(refs) {
      if (!Array.isArray(refs)) {
        return refs && refs.current === null;
      }

      return refs.some(function (r) {
        return r && r.current === null;
      });
    };

    return extract(props['simultaneousHandlers']) || extract(props['waitFor']);
  }

  function createHandler(handlerName) {
    var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var transformProps = arguments.length > 3 ? arguments[3] : undefined;
    var customNativeProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

    var Handler = function (_React$Component) {
      (0, _inherits2.default)(Handler, _React$Component);

      function Handler(props) {
        var _this;

        (0, _classCallCheck2.default)(this, Handler);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(Handler).call(this, props));

        _this._onGestureHandlerEvent = function (event) {
          if (event.nativeEvent.handlerTag === _this._handlerTag) {
            _this.props.onGestureEvent && _this.props.onGestureEvent(event);
          } else {
            _this.props.onGestureHandlerEvent && _this.props.onGestureHandlerEvent(event);
          }
        };

        _this._onGestureHandlerStateChange = function (event) {
          if (event.nativeEvent.handlerTag === _this._handlerTag) {
            _this.props.onHandlerStateChange && _this.props.onHandlerStateChange(event);
            var stateEventName = stateToPropMappings[event.nativeEvent.state];

            if (typeof _this.props[stateEventName] === 'function') {
              _this.props[stateEventName](event);
            }
          } else {
            _this.props.onGestureHandlerStateChange && _this.props.onGestureHandlerStateChange(event);
          }
        };

        _this._refHandler = function (node) {
          _this._viewNode = node;

          var child = _react.default.Children.only(_this.props.children);

          var ref = child.ref;

          if (ref !== null) {
            if (typeof ref === 'function') {
              ref(node);
            } else {
              ref.current = node;
            }
          }
        };

        _this._handlerTag = handlerTag++;
        _this._config = {};

        if (props.id) {
          if (handlerIDToTag[props.id] !== undefined) {
            throw new Error("Handler with ID \"" + props.id + "\" already registered");
          }

          handlerIDToTag[props.id] = _this._handlerTag;
        }

        return _this;
      }

      (0, _createClass2.default)(Handler, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          RNGestureHandlerModule.dropGestureHandler(this._handlerTag);

          if (this._updateEnqueued) {
            clearImmediate(this._updateEnqueued);
          }

          if (this.props.id) {
            delete handlerIDToTag[this.props.id];
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          this._viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);
          this._config = filterConfig(transformProps ? transformProps(this.props) : this.props, (0, _objectSpread2.default)({}, this.constructor.propTypes, customNativeProps), config);

          if (hasUnresolvedRefs(this.props)) {
            this._updateEnqueued = setImmediate(function () {
              _this2._updateEnqueued = null;

              _this2._update();
            });
          }

          RNGestureHandlerModule.createGestureHandler(handlerName, this._handlerTag, this._config);
          RNGestureHandlerModule.attachGestureHandler(this._handlerTag, this._viewTag);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);

          if (this._viewTag !== viewTag) {
            this._viewTag = viewTag;
            RNGestureHandlerModule.attachGestureHandler(this._handlerTag, viewTag);
          }

          this._update();
        }
      }, {
        key: "_update",
        value: function _update() {
          var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, (0, _objectSpread2.default)({}, this.constructor.propTypes, customNativeProps), config);

          if (!(0, _areEqual.default)(this._config, newConfig)) {
            this._config = newConfig;
            RNGestureHandlerModule.updateGestureHandler(this._handlerTag, this._config);
          }
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(updates) {
          var mergedProps = (0, _objectSpread2.default)({}, this.props, updates);
          var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, (0, _objectSpread2.default)({}, this.constructor.propTypes, customNativeProps), config);
          this._config = newConfig;
          RNGestureHandlerModule.updateGestureHandler(this._handlerTag, this._config);
        }
      }, {
        key: "render",
        value: function render() {
          var gestureEventHandler = this._onGestureHandlerEvent;
          var _this$props = this.props,
              onGestureEvent = _this$props.onGestureEvent,
              onGestureHandlerEvent = _this$props.onGestureHandlerEvent;

          if (onGestureEvent && typeof onGestureEvent !== 'function') {
            if (onGestureHandlerEvent) {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }

            gestureEventHandler = this.props.onGestureEvent;
          } else {
            if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }
          }

          var gestureStateEventHandler = this._onGestureHandlerStateChange;
          var _this$props2 = this.props,
              onHandlerStateChange = _this$props2.onHandlerStateChange,
              onGestureHandlerStateChange = _this$props2.onGestureHandlerStateChange;

          if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {
            if (onGestureHandlerStateChange) {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }

            gestureStateEventHandler = this.props.onHandlerStateChange;
          } else {
            if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }
          }

          var child = _react.default.Children.only(this.props.children);

          var children = child.props.children;

          if (_Touchable.default.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {
            children = _react.default.Children.toArray(children);
            children.push(_Touchable.default.renderDebugView({
              color: 'mediumspringgreen',
              hitSlop: child.props.hitSlop
            }));
          }

          return _react.default.cloneElement(child, {
            ref: this._refHandler,
            collapsable: false,
            onGestureHandlerEvent: gestureEventHandler,
            onGestureHandlerStateChange: gestureStateEventHandler
          }, children);
        }
      }]);
      return Handler;
    }(_react.default.Component);

    Handler.propTypes = (0, _objectSpread2.default)({}, GestureHandlerPropTypes, propTypes);
    return Handler;
  }

  var NativeViewGestureHandler = createHandler('NativeViewGestureHandler', {
    shouldActivateOnStart: _propTypes.default.bool,
    disallowInterruption: _propTypes.default.bool
  });
  exports.NativeViewGestureHandler = NativeViewGestureHandler;
  var TapGestureHandler = createHandler('TapGestureHandler', {
    maxDurationMs: _propTypes.default.number,
    maxDelayMs: _propTypes.default.number,
    numberOfTaps: _propTypes.default.number,
    maxDeltaX: _propTypes.default.number,
    maxDeltaY: _propTypes.default.number,
    maxDist: _propTypes.default.number,
    minPointers: _propTypes.default.number
  }, {});
  exports.TapGestureHandler = TapGestureHandler;
  var FlingGestureHandler = createHandler('FlingGestureHandler', {
    numberOfPointers: _propTypes.default.number,
    direction: _propTypes.default.number
  }, {});
  exports.FlingGestureHandler = FlingGestureHandler;

  var ForceTouchFallback = function (_React$Component2) {
    (0, _inherits2.default)(ForceTouchFallback, _React$Component2);

    function ForceTouchFallback() {
      (0, _classCallCheck2.default)(this, ForceTouchFallback);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(ForceTouchFallback).apply(this, arguments));
    }

    (0, _createClass2.default)(ForceTouchFallback, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        console.warn('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase');
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);
    return ForceTouchFallback;
  }(_react.default.Component);

  var ForceTouchGestureHandler = _reactNative.NativeModules.PlatformConstants.forceTouchAvailable ? createHandler('ForceTouchGestureHandler', {
    minForce: _propTypes.default.number,
    maxForce: _propTypes.default.number,
    feedbackOnActivation: _propTypes.default.bool
  }, {}) : ForceTouchFallback;
  exports.ForceTouchGestureHandler = ForceTouchGestureHandler;
  ForceTouchGestureHandler.forceTouchAvailable = _reactNative.NativeModules.PlatformConstants.forceTouchAvailable || false;
  var LongPressGestureHandler = createHandler('LongPressGestureHandler', {
    minDurationMs: _propTypes.default.number,
    maxDist: _propTypes.default.number
  }, {});
  exports.LongPressGestureHandler = LongPressGestureHandler;

  function transformPanGestureHandlerProps(props) {
    var res = (0, _objectSpread2.default)({}, props);

    if (props.minDeltaX !== undefined) {
      delete res['minDeltaX'];
      res.activeOffsetXStart = -props.minDeltaX;
      res.activeOffsetXEnd = props.minDeltaX;
    }

    if (props.maxDeltaX !== undefined) {
      delete res['maxDeltaX'];
      res.failOffsetXStart = -props.maxDeltaX;
      res.failOffsetXEnd = props.maxDeltaX;
    }

    if (props.minOffsetX !== undefined) {
      delete res['minOffsetX'];

      if (props.minOffsetX < 0) {
        res.activeOffsetXStart = props.minOffsetX;
      } else {
        res.activeOffsetXEnd = props.minOffsetX;
      }
    }

    if (props.minDeltaY !== undefined) {
      delete res['minDeltaY'];
      res.activeOffsetYStart = -props.minDeltaY;
      res.activeOffsetYEnd = props.minDeltaY;
    }

    if (props.maxDeltaY !== undefined) {
      delete res['maxDeltaY'];
      res.failOffsetYStart = -props.maxDeltaY;
      res.failOffsetYEnd = props.maxDeltaY;
    }

    if (props.minOffsetY !== undefined) {
      delete res['minOffsetY'];

      if (props.minOffsetY < 0) {
        res.activeOffsetYStart = props.minOffsetY;
      } else {
        res.activeOffsetYEnd = props.minOffsetY;
      }
    }

    if (props.activeOffsetX !== undefined) {
      delete res['activeOffsetX'];

      if (Array.isArray(props.activeOffsetX)) {
        res.activeOffsetXStart = props.activeOffsetX[0];
        res.activeOffsetXEnd = props.activeOffsetX[1];
      } else if (props.activeOffsetX < 0) {
        res.activeOffsetXStart = props.activeOffsetX;
      } else {
        res.activeOffsetXEnd = props.activeOffsetX;
      }
    }

    if (props.activeOffsetY !== undefined) {
      delete res['activeOffsetY'];

      if (Array.isArray(props.activeOffsetY)) {
        res.activeOffsetYStart = props.activeOffsetY[0];
        res.activeOffsetYEnd = props.activeOffsetY[1];
      } else if (props.activeOffsetY < 0) {
        res.activeOffsetYStart = props.activeOffsetY;
      } else {
        res.activeOffsetYEnd = props.activeOffsetY;
      }
    }

    if (props.failOffsetX !== undefined) {
      delete res['failOffsetX'];

      if (Array.isArray(props.failOffsetX)) {
        res.failOffsetXStart = props.failOffsetX[0];
        res.failOffsetXEnd = props.failOffsetX[1];
      } else if (props.failOffsetX < 0) {
        res.failOffsetXStart = props.failOffsetX;
      } else {
        res.failOffsetXEnd = props.failOffsetX;
      }
    }

    if (props.failOffsetY !== undefined) {
      delete res['failOffsetY'];

      if (Array.isArray(props.failOffsetY)) {
        res.failOffsetYStart = props.failOffsetY[0];
        res.failOffsetYEnd = props.failOffsetY[1];
      } else if (props.failOffsetY < 0) {
        res.failOffsetYStart = props.failOffsetY;
      } else {
        res.failOffsetYEnd = props.failOffsetY;
      }
    }

    return res;
  }

  function managePanProps(props) {
    return transformPanGestureHandlerProps(props);
  }

  var PanGestureHandler = createHandler('PanGestureHandler', {
    activeOffsetY: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
    activeOffsetX: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
    failOffsetY: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
    failOffsetX: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.number)]),
    minDist: _propTypes.default.number,
    minVelocity: _propTypes.default.number,
    minVelocityX: _propTypes.default.number,
    minVelocityY: _propTypes.default.number,
    minPointers: _propTypes.default.number,
    maxPointers: _propTypes.default.number,
    avgTouches: _propTypes.default.bool
  }, {}, managePanProps, {
    activeOffsetYStart: true,
    activeOffsetYEnd: true,
    activeOffsetXStart: true,
    activeOffsetXEnd: true,
    failOffsetYStart: true,
    failOffsetYEnd: true,
    failOffsetXStart: true,
    failOffsetXEnd: true
  });
  exports.PanGestureHandler = PanGestureHandler;
  var PinchGestureHandler = createHandler('PinchGestureHandler', {}, {});
  exports.PinchGestureHandler = PinchGestureHandler;
  var RotationGestureHandler = createHandler('RotationGestureHandler', {}, {});
  exports.RotationGestureHandler = RotationGestureHandler;
  var NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);
  var NATIVE_WRAPPER_PROPS_FILTER = (0, _objectSpread2.default)({}, NativeViewGestureHandler.propTypes, {
    onGestureHandlerEvent: _propTypes.default.func,
    onGestureHandlerStateChange: _propTypes.default.func
  });

  function createNativeWrapper(Component) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var ComponentWrapper = function (_React$Component3) {
      (0, _inherits2.default)(ComponentWrapper, _React$Component3);

      function ComponentWrapper() {
        var _getPrototypeOf2;

        var _this3;

        (0, _classCallCheck2.default)(this, ComponentWrapper);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this3 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ComponentWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));

        _this3._refHandler = function (node) {
          var source = node;

          while (source != null) {
            for (var _iterator = Object.getOwnPropertyNames(source), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator" : "@@iterator"]();;) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var _methodName = _ref;

              if (!_methodName.startsWith('_') && !_methodName.startsWith('component') && !NATIVE_WRAPPER_BIND_BLACKLIST.has(_methodName) && typeof source[_methodName] === 'function' && _this3[_methodName] === undefined) {
                _this3[_methodName] = source[_methodName].bind(node);
              }
            }

            source = Object.getPrototypeOf(source);
          }
        };

        return _this3;
      }

      (0, _createClass2.default)(ComponentWrapper, [{
        key: "render",
        value: function render() {
          var _this4 = this;

          var gestureHandlerProps = Object.keys(this.props).reduce(function (props, key) {
            if (key in NATIVE_WRAPPER_PROPS_FILTER) {
              props[key] = _this4.props[key];
            }

            return props;
          }, (0, _objectSpread2.default)({}, config));
          return _react.default.createElement(NativeViewGestureHandler, gestureHandlerProps, _react.default.createElement(Component, (0, _extends2.default)({}, this.props, {
            ref: this._refHandler
          })));
        }
      }]);
      return ComponentWrapper;
    }(_react.default.Component);

    ComponentWrapper.propTypes = (0, _objectSpread2.default)({}, Component.propTypes);
    return ComponentWrapper;
  }

  var WrappedScrollView = createNativeWrapper(_reactNative.ScrollView, {
    disallowInterruption: true
  });
  exports.ScrollView = WrappedScrollView;
  var WrappedSlider = createNativeWrapper(_reactNative.Slider, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: true,
    disallowInterruption: true
  });
  exports.Slider = WrappedSlider;
  var WrappedSwitch = createNativeWrapper(_reactNative.Switch, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: true,
    disallowInterruption: true
  });
  exports.Switch = WrappedSwitch;
  var WrappedTextInput = createNativeWrapper(_reactNative.TextInput);
  exports.TextInput = WrappedTextInput;
  var WrappedWebView = createNativeWrapper(_reactNative.WebView);
  exports.WebView = WrappedWebView;
  var WrappedToolbarAndroid = createNativeWrapper(_reactNative.ToolbarAndroid);
  exports.ToolbarAndroid = WrappedToolbarAndroid;
  var WrappedViewPagerAndroid = createNativeWrapper(_reactNative.ViewPagerAndroid, {
    disallowInterruption: true
  });
  exports.ViewPagerAndroid = WrappedViewPagerAndroid;
  var WrappedDrawerLayoutAndroid = createNativeWrapper(_reactNative.DrawerLayoutAndroid, {
    disallowInterruption: true
  });
  exports.DrawerLayoutAndroid = WrappedDrawerLayoutAndroid;
  WrappedDrawerLayoutAndroid.positions = _reactNative.DrawerLayoutAndroid.positions;

  State.print = function (state) {
    var keys = Object.keys(State);

    for (var i = 0; i < keys.length; i++) {
      if (state === State[keys[i]]) {
        return keys[i];
      }
    }
  };

  var RawButton = createNativeWrapper((0, _reactNative.requireNativeComponent)('RNGestureHandlerButton', null), {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: false
  });
  exports.RawButton = RawButton;

  var BaseButton = function (_React$Component4) {
    (0, _inherits2.default)(BaseButton, _React$Component4);

    function BaseButton(props) {
      var _this5;

      (0, _classCallCheck2.default)(this, BaseButton);
      _this5 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(BaseButton).call(this, props));

      _this5._handleEvent = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        var state = nativeEvent.state,
            oldState = nativeEvent.oldState,
            pointerInside = nativeEvent.pointerInside;
        var active = pointerInside && state === State.ACTIVE;

        if (active !== _this5._lastActive && _this5.props.onActiveStateChange) {
          _this5.props.onActiveStateChange(active);
        }

        if (oldState === State.ACTIVE && state !== State.CANCELLED && _this5._lastActive && _this5.props.onPress) {
          _this5.props.onPress(active);
        }

        _this5._lastActive = active;
      };

      _this5._onHandlerStateChange = function (e) {
        _this5.props.onHandlerStateChange && _this5.props.onHandlerStateChange(e);

        _this5._handleEvent(e);
      };

      _this5._onGestureEvent = function (e) {
        _this5.props.onGestureEvent && _this5.props.onGestureEvent(e);

        _this5._handleEvent(e);
      };

      _this5._lastActive = false;
      return _this5;
    }

    (0, _createClass2.default)(BaseButton, [{
      key: "render",
      value: function render() {
        var _this$props3 = this.props,
            style = _this$props3.style,
            rippleColor = _this$props3.rippleColor,
            rest = (0, _objectWithoutProperties2.default)(_this$props3, ["style", "rippleColor"]);
        return _react.default.createElement(RawButton, (0, _extends2.default)({
          style: [{
            overflow: 'hidden'
          }, style],
          rippleColor: (0, _processColor.default)(rippleColor)
        }, rest, {
          onGestureEvent: this._onGestureEvent,
          onHandlerStateChange: this._onHandlerStateChange
        }));
      }
    }]);
    return BaseButton;
  }(_react.default.Component);

  exports.BaseButton = BaseButton;
  BaseButton.propTypes = (0, _objectSpread2.default)({}, RawButton.propTypes, {
    onPress: _propTypes.default.func,
    onActiveStateChange: _propTypes.default.func
  });

  var AnimatedBaseButton = _reactNative.Animated.createAnimatedComponent(BaseButton);

  var btnStyles = _reactNative.StyleSheet.create({
    underlay: {
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      top: 0
    }
  });

  var RectButton = function (_React$Component5) {
    (0, _inherits2.default)(RectButton, _React$Component5);

    function RectButton(props) {
      var _this6;

      (0, _classCallCheck2.default)(this, RectButton);
      _this6 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(RectButton).call(this, props));

      _this6._onActiveStateChange = function (active) {
        if (_reactNative.Platform.OS !== 'android') {
          _this6._opacity.setValue(active ? _this6.props.activeOpacity : 0);
        }

        _this6.props.onActiveStateChange && _this6.props.onActiveStateChange(active);
      };

      _this6._opacity = new _reactNative.Animated.Value(0);
      return _this6;
    }

    (0, _createClass2.default)(RectButton, [{
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
            children = _this$props4.children,
            rest = (0, _objectWithoutProperties2.default)(_this$props4, ["children"]);
        return _react.default.createElement(BaseButton, (0, _extends2.default)({}, rest, {
          onActiveStateChange: this._onActiveStateChange
        }), _react.default.createElement(_reactNative.Animated.View, {
          style: [btnStyles.underlay, {
            opacity: this._opacity
          }, {
            backgroundColor: this.props.underlayColor
          }]
        }), children);
      }
    }]);
    return RectButton;
  }(_react.default.Component);

  exports.RectButton = RectButton;
  RectButton.propTypes = BaseButton.propTypes;
  RectButton.defaultProps = {
    activeOpacity: 0.105,
    underlayColor: 'black'
  };

  var BorderlessButton = function (_React$Component6) {
    (0, _inherits2.default)(BorderlessButton, _React$Component6);

    function BorderlessButton(props) {
      var _this7;

      (0, _classCallCheck2.default)(this, BorderlessButton);
      _this7 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(BorderlessButton).call(this, props));

      _this7._onActiveStateChange = function (active) {
        if (_reactNative.Platform.OS !== 'android') {
          _this7._opacity.setValue(active ? _this7.props.activeOpacity : 1);
        }

        _this7.props.onActiveStateChange && _this7.props.onActiveStateChange(active);
      };

      _this7._opacity = new _reactNative.Animated.Value(1);
      return _this7;
    }

    (0, _createClass2.default)(BorderlessButton, [{
      key: "render",
      value: function render() {
        var _this$props5 = this.props,
            children = _this$props5.children,
            style = _this$props5.style,
            rest = (0, _objectWithoutProperties2.default)(_this$props5, ["children", "style"]);
        return _react.default.createElement(AnimatedBaseButton, (0, _extends2.default)({}, rest, {
          onActiveStateChange: this._onActiveStateChange,
          style: [style, _reactNative.Platform.OS === 'ios' && {
            opacity: this._opacity
          }]
        }), children);
      }
    }]);
    return BorderlessButton;
  }(_react.default.Component);

  exports.BorderlessButton = BorderlessButton;
  BorderlessButton.propTypes = (0, _objectSpread2.default)({}, BaseButton.propTypes, {
    borderless: _propTypes.default.bool
  });
  BorderlessButton.defaultProps = {
    activeOpacity: 0.3,
    borderless: true
  };

  var FlatListWithGHScroll = function FlatListWithGHScroll(props) {
    return _react.default.createElement(_reactNative.FlatList, (0, _extends2.default)({}, props, {
      renderScrollComponent: function renderScrollComponent(props) {
        return _react.default.createElement(WrappedScrollView, props);
      }
    }));
  };

  exports.FlatList = FlatListWithGHScroll;
},439,[1,9,3,21,22,34,37,40,49,48,51,5,74,172,440,65,441]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var aStackPool = [];
  var bStackPool = [];
  /**
   * Checks if two values are equal. Values may be primitives, arrays, or objects.
   * Returns true if both arguments have the same keys and values.
   *
   * @see http://underscorejs.org
   * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
   * @license MIT
   */

  function areEqual(a, b) {
    var aStack = aStackPool.length ? aStackPool.pop() : [];
    var bStack = bStackPool.length ? bStackPool.pop() : [];
    var result = eq(a, b, aStack, bStack);
    aStack.length = 0;
    bStack.length = 0;
    aStackPool.push(aStack);
    bStackPool.push(bStack);
    return result;
  }

  function eq(a, b, aStack, bStack) {
    if (a === b) {
      return a !== 0 || 1 / a == 1 / b;
    }

    if (a == null || b == null) {
      return false;
    }

    if (typeof a != 'object' || typeof b != 'object') {
      return false;
    }

    var objToStr = Object.prototype.toString;
    var className = objToStr.call(a);

    if (className != objToStr.call(b)) {
      return false;
    }

    switch (className) {
      case '[object String]':
        return a == String(b);

      case '[object Number]':
        return isNaN(a) || isNaN(b) ? false : a == Number(b);

      case '[object Date]':
      case '[object Boolean]':
        return +a == +b;

      case '[object RegExp]':
        return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
    }

    var length = aStack.length;

    while (length--) {
      if (aStack[length] == a) {
        return bStack[length] == b;
      }
    }

    aStack.push(a);
    bStack.push(b);
    var size = 0;

    if (className === '[object Array]') {
      size = a.length;

      if (size !== b.length) {
        return false;
      }

      while (size--) {
        if (!eq(a[size], b[size], aStack, bStack)) {
          return false;
        }
      }
    } else {
      if (a.constructor !== b.constructor) {
        return false;
      }

      if (a.hasOwnProperty('valueOf') && b.hasOwnProperty('valueOf')) {
        return a.valueOf() == b.valueOf();
      }

      var keys = Object.keys(a);

      if (keys.length != Object.keys(b).length) {
        return false;
      }

      for (var i = 0; i < keys.length; i++) {
        if (!eq(a[keys[i]], b[keys[i]], aStack, bStack)) {
          return false;
        }
      }
    }

    aStack.pop();
    bStack.pop();
    return true;
  }

  module.exports = areEqual;
},440,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = gestureHandlerRootHOC;

  function gestureHandlerRootHOC(Component) {
    return Component;
  }
},441,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _AnimatedEvent = _$$_REQUIRE(_dependencyMap[11]);

  var _GestureHandler = _$$_REQUIRE(_dependencyMap[12]);

  var DRAG_TOSS = 0.05;
  var IDLE = 'Idle';
  var DRAGGING = 'Dragging';
  var SETTLING = 'Settling';

  var DrawerLayout = function (_Component) {
    (0, _inherits2.default)(DrawerLayout, _Component);

    function DrawerLayout(_props, context) {
      var _this;

      (0, _classCallCheck2.default)(this, DrawerLayout);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DrawerLayout).call(this, _props, context));
      _this._accessibilityIsModalView = _react.default.createRef();
      _this._pointerEventsView = _react.default.createRef();
      _this._panGestureHandler = _react.default.createRef();
      _this._drawerShown = false;

      _this._updateAnimatedEvent = function (props, state) {
        var drawerPosition = props.drawerPosition,
            drawerWidth = props.drawerWidth,
            drawerType = props.drawerType;
        var dragXValue = state.dragX,
            touchXValue = state.touchX,
            drawerTranslation = state.drawerTranslation,
            containerWidth = state.containerWidth;
        var dragX = dragXValue;
        var touchX = touchXValue;

        if (drawerPosition !== 'left') {
          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);
          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));
          touchXValue.setValue(containerWidth);
        } else {
          touchXValue.setValue(0);
        }

        var translationX = dragX;

        if (drawerType === 'front') {
          var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));

          var dragOffsetFromOnStartPosition = startPositionX.interpolate({
            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],
            outputRange: [0, 0, 1]
          });
          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);
        }

        _this._openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({
          inputRange: [0, drawerWidth],
          outputRange: [0, 1],
          extrapolate: 'clamp'
        });
        _this._onGestureEvent = _reactNative.Animated.event([{
          nativeEvent: {
            translationX: dragXValue,
            x: touchXValue
          }
        }], {
          useNativeDriver: props.useNativeAnimations
        });
      };

      _this._handleContainerLayout = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        _this.setState({
          containerWidth: nativeEvent.layout.width
        });
      };

      _this._emitStateChanged = function (newState, drawerWillShow) {
        _this.props.onDrawerStateChanged && _this.props.onDrawerStateChanged(newState, drawerWillShow);
      };

      _this._openingHandlerStateChange = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;

        if (nativeEvent.oldState === _GestureHandler.State.ACTIVE) {
          _this._handleRelease(nativeEvent);
        } else if (nativeEvent.state === _GestureHandler.State.ACTIVE) {
          _this._emitStateChanged(DRAGGING, false);

          if (_this.props.keyboardDismissMode === 'on-drag') {
            _reactNative.Keyboard.dismiss();
          }

          if (_this.props.hideStatusBar) {
            _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');
          }
        }
      };

      _this._onTapHandlerStateChange = function (_ref3) {
        var nativeEvent = _ref3.nativeEvent;

        if (_this._drawerShown && nativeEvent.oldState === _GestureHandler.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {
          _this.closeDrawer();
        }
      };

      _this._handleRelease = function (nativeEvent) {
        var _this$props = _this.props,
            drawerWidth = _this$props.drawerWidth,
            drawerPosition = _this$props.drawerPosition,
            drawerType = _this$props.drawerType;
        var containerWidth = _this.state.containerWidth;
        var dragX = nativeEvent.translationX,
            velocityX = nativeEvent.velocityX,
            touchX = nativeEvent.x;

        if (drawerPosition !== 'left') {
          dragX = -dragX;
          touchX = containerWidth - touchX;
          velocityX = -velocityX;
        }

        var gestureStartX = touchX - dragX;
        var dragOffsetBasedOnStart = 0;

        if (drawerType === 'front') {
          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;
        }

        var startOffsetX = dragX + dragOffsetBasedOnStart + (_this._drawerShown ? drawerWidth : 0);
        var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;
        var shouldOpen = projOffsetX > drawerWidth / 2;

        if (shouldOpen) {
          _this._animateDrawer(startOffsetX, drawerWidth, velocityX);
        } else {
          _this._animateDrawer(startOffsetX, 0, velocityX);
        }
      };

      _this._updateShowing = function (showing) {
        _this._drawerShown = showing;
        _this._accessibilityIsModalView.current && _this._accessibilityIsModalView.current.setNativeProps({
          accessibilityViewIsModal: showing
        });
        _this._pointerEventsView.current && _this._pointerEventsView.current.setNativeProps({
          pointerEvents: showing ? 'auto' : 'none'
        });
        var _this$props2 = _this.props,
            drawerPosition = _this$props2.drawerPosition,
            minSwipeDistance = _this$props2.minSwipeDistance,
            edgeWidth = _this$props2.edgeWidth;
        var fromLeft = drawerPosition === 'left';
        var gestureOrientation = (fromLeft ? 1 : -1) * (_this._drawerShown ? -1 : 1);
        var hitSlop = fromLeft ? {
          left: 0,
          width: showing ? undefined : edgeWidth
        } : {
          right: 0,
          width: showing ? undefined : edgeWidth
        };
        _this._panGestureHandler.current && _this._panGestureHandler.current.setNativeProps({
          hitSlop: hitSlop,
          activeOffsetX: gestureOrientation * minSwipeDistance
        });
      };

      _this._animateDrawer = function (fromValue, toValue, velocity) {
        _this.state.dragX.setValue(0);

        _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);

        if (fromValue !== undefined) {
          var nextFramePosition = fromValue;

          if (_this.props.useNativeAnimations) {
            if (fromValue < toValue && velocity > 0) {
              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);
            } else if (fromValue > toValue && velocity < 0) {
              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);
            }
          }

          _this.state.drawerTranslation.setValue(nextFramePosition);
        }

        var willShow = toValue !== 0;

        _this._updateShowing(willShow);

        _this._emitStateChanged(SETTLING, willShow);

        if (_this.props.hideStatusBar) {
          _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');
        }

        _reactNative.Animated.spring(_this.state.drawerTranslation, {
          velocity: velocity,
          bounciness: 0,
          toValue: toValue,
          useNativeDriver: _this.props.useNativeAnimations
        }).start(function (_ref4) {
          var finished = _ref4.finished;

          if (finished) {
            _this._emitStateChanged(IDLE, willShow);

            if (willShow) {
              _this.props.onDrawerOpen && _this.props.onDrawerOpen();
            } else {
              _this.props.onDrawerClose && _this.props.onDrawerClose();
            }
          }
        });
      };

      _this.openDrawer = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this._animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);
      };

      _this.closeDrawer = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);
      };

      _this._renderOverlay = function () {
        (0, _invariant.default)(_this._openValue, 'should be set');

        var overlayOpacity = _this._openValue.interpolate({
          inputRange: [0, 1],
          outputRange: [0, 0.7],
          extrapolate: 'clamp'
        });

        var dynamicOverlayStyles = {
          opacity: overlayOpacity,
          backgroundColor: _this.props.overlayColor
        };
        return _react.default.createElement(_GestureHandler.TapGestureHandler, {
          onHandlerStateChange: _this._onTapHandlerStateChange
        }, _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: _this._drawerShown ? 'auto' : 'none',
          ref: _this._pointerEventsView,
          style: [styles.overlay, dynamicOverlayStyles]
        }));
      };

      _this._renderDrawer = function () {
        var _this$props3 = _this.props,
            drawerBackgroundColor = _this$props3.drawerBackgroundColor,
            drawerWidth = _this$props3.drawerWidth,
            drawerPosition = _this$props3.drawerPosition,
            drawerType = _this$props3.drawerType,
            drawerContainerStyle = _this$props3.drawerContainerStyle,
            contentContainerStyle = _this$props3.contentContainerStyle;
        var fromLeft = drawerPosition === 'left';
        var drawerSlide = drawerType !== 'back';
        var containerSlide = drawerType !== 'front';
        var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;
        var dynamicDrawerStyles = {
          backgroundColor: drawerBackgroundColor,
          width: drawerWidth
        };
        var openValue = _this._openValue;
        (0, _invariant.default)(openValue, 'should be set');
        var containerStyles;

        if (containerSlide) {
          var containerTranslateX = openValue.interpolate({
            inputRange: [0, 1],
            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],
            extrapolate: 'clamp'
          });
          containerStyles = {
            transform: [{
              translateX: containerTranslateX
            }]
          };
        }

        var drawerTranslateX = 0;

        if (drawerSlide) {
          var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;
          drawerTranslateX = openValue.interpolate({
            inputRange: [0, 1],
            outputRange: [closedDrawerOffset, 0],
            extrapolate: 'clamp'
          });
        }

        var drawerStyles = {
          transform: [{
            translateX: drawerTranslateX
          }],
          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'
        };
        return _react.default.createElement(_reactNative.Animated.View, {
          style: styles.main,
          onLayout: _this._handleContainerLayout
        }, _react.default.createElement(_reactNative.Animated.View, {
          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle]
        }, typeof _this.props.children === 'function' ? _this.props.children(_this._openValue) : _this.props.children, _this._renderOverlay()), _react.default.createElement(_reactNative.Animated.View, {
          pointerEvents: "box-none",
          ref: _this._accessibilityIsModalView,
          accessibilityViewIsModal: _this._drawerShown,
          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]
        }, _react.default.createElement(_reactNative.View, {
          style: [styles.drawer, dynamicDrawerStyles]
        }, _this.props.renderNavigationView(_this._openValue))));
      };

      _this._setPanGestureRef = function (ref) {
        _this._panGestureHandler.current = ref;
        _this.props.onGestureRef && _this.props.onGestureRef(ref);
      };

      var _dragX = new _reactNative.Animated.Value(0);

      var _touchX = new _reactNative.Animated.Value(0);

      var _drawerTranslation = new _reactNative.Animated.Value(0);

      _this.state = {
        dragX: _dragX,
        touchX: _touchX,
        drawerTranslation: _drawerTranslation,
        containerWidth: 0
      };

      _this._updateAnimatedEvent(_props, _this.state);

      return _this;
    }

    (0, _createClass2.default)(DrawerLayout, [{
      key: "componentWillUpdate",
      value: function componentWillUpdate(props, state) {
        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {
          this._updateAnimatedEvent(props, state);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
            drawerPosition = _this$props4.drawerPosition,
            drawerLockMode = _this$props4.drawerLockMode,
            edgeWidth = _this$props4.edgeWidth,
            minSwipeDistance = _this$props4.minSwipeDistance;
        var fromLeft = drawerPosition === 'left';
        var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);
        var hitSlop = fromLeft ? {
          left: 0,
          width: this._drawerShown ? undefined : edgeWidth
        } : {
          right: 0,
          width: this._drawerShown ? undefined : edgeWidth
        };
        return _react.default.createElement(_GestureHandler.PanGestureHandler, {
          ref: this._setPanGestureRef,
          hitSlop: hitSlop,
          activeOffsetX: gestureOrientation * minSwipeDistance,
          failOffsetY: [-15, 15],
          onGestureEvent: this._onGestureEvent,
          onHandlerStateChange: this._openingHandlerStateChange,
          enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'
        }, this._renderDrawer());
      }
    }]);
    return DrawerLayout;
  }(_react.Component);

  exports.default = DrawerLayout;
  DrawerLayout.defaultProps = {
    drawerWidth: 200,
    drawerPosition: 'left',
    useNativeAnimations: true,
    drawerType: 'front',
    edgeWidth: 20,
    minSwipeDistance: 3,
    overlayColor: 'black',
    drawerLockMode: 'unlocked'
  };
  DrawerLayout.positions = {
    Left: 'left',
    Right: 'right'
  };

  var styles = _reactNative.StyleSheet.create({
    drawer: {
      flex: 0
    },
    drawerContainer: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1001,
      flexDirection: 'row'
    }),
    containerInFront: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1002
    }),
    containerOnBack: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject),
    main: {
      flex: 1,
      zIndex: 0,
      overflow: 'hidden'
    },
    overlay: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1000
    })
  });
},442,[366,1,48,21,22,34,37,40,51,334,5,183,439]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "TouchableNativeFeedback", {
    enumerable: true,
    get: function get() {
      return _TouchableNativeFeedback.default;
    }
  });
  Object.defineProperty(exports, "TouchableWithoutFeedback", {
    enumerable: true,
    get: function get() {
      return _TouchableWithoutFeedback.default;
    }
  });
  Object.defineProperty(exports, "TouchableOpacity", {
    enumerable: true,
    get: function get() {
      return _TouchableOpacity.default;
    }
  });
  Object.defineProperty(exports, "TouchableHighlight", {
    enumerable: true,
    get: function get() {
      return _TouchableHighlight.default;
    }
  });

  var _TouchableNativeFeedback = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _TouchableWithoutFeedback = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _TouchableOpacity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _TouchableHighlight = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));
},443,[1,444,445,447,448]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.TouchableNativeFeedback;
  exports.default = _default;
},444,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _GenericTouchable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var TouchableWithoutFeedback = function TouchableWithoutFeedback(props) {
    return _react.default.createElement(_GenericTouchable.default, props);
  };

  TouchableWithoutFeedback.defaultProps = _GenericTouchable.default.defaultProps;
  TouchableWithoutFeedback.propTypes = _GenericTouchable.default.publicPropTypes;
  var _default = TouchableWithoutFeedback;
  exports.default = _default;
},445,[1,446,51]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.TOUCHABLE_STATE = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _GestureHandler = _$$_REQUIRE(_dependencyMap[11]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var TOUCHABLE_STATE = {
    UNDETERMINED: 0,
    BEGAN: 1,
    MOVED_OUTSIDE: 2
  };
  exports.TOUCHABLE_STATE = TOUCHABLE_STATE;
  var PublicPropTypes = {
    accessible: _propTypes.default.bool,
    accessibilityLabel: _propTypes.default.node,
    accessibilityHint: _propTypes.default.string,
    hitSlop: _propTypes.default.shape({
      top: _propTypes.default.number,
      left: _propTypes.default.number,
      bottom: _propTypes.default.number,
      right: _propTypes.default.number
    }),
    disabled: _propTypes.default.bool,
    onPress: _propTypes.default.func,
    onPressIn: _propTypes.default.func,
    onPressOut: _propTypes.default.func,
    onLayout: _propTypes.default.func,
    onLongPress: _propTypes.default.func,
    nativeID: _propTypes.default.string,
    testID: _propTypes.default.string,
    delayPressIn: _propTypes.default.number,
    delayPressOut: _propTypes.default.number,
    delayLongPress: _propTypes.default.number
  };
  var InternalPropTypes = {
    extraButtonProps: _propTypes.default.object,
    onStateChange: _propTypes.default.func
  };

  var GenericTouchable = function (_Component) {
    (0, _inherits2.default)(GenericTouchable, _Component);

    function GenericTouchable() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, GenericTouchable);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(GenericTouchable)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.longPressDetected = false;
      _this.pointerInside = true;
      _this.STATE = TOUCHABLE_STATE.UNDETERMINED;

      _this.handlePressIn = function () {
        if (_this.props.delayPressIn) {
          _this.pressInTimeout = setTimeout(function () {
            _this.moveToState(TOUCHABLE_STATE.BEGAN);

            _this.pressInTimeout = null;
          }, _this.props.delayPressIn);
        } else {
          _this.moveToState(TOUCHABLE_STATE.BEGAN);
        }

        if (_this.props.onLongPress) {
          var time = (_this.props.delayPressIn || 0) + (_this.props.delayLongPress || 0);
          _this.longPressTimeout = setTimeout(_this.onLongPressDetected, time);
        }
      };

      _this.handleMoveOutside = function () {
        if (_this.props.delayPressOut) {
          _this.pressOutTimeout = _this.pressOutTimeout || setTimeout(function () {
            _this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);

            _this.pressOutTimeout = null;
          }, _this.props.delayPressOut);
        } else {
          _this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);
        }
      };

      _this.handleGoToUndetermined = function () {
        clearTimeout(_this.pressOutTimeout);

        if (_this.props.delayPressOut) {
          _this.pressOutTimeout = setTimeout(function () {
            if (_this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
              _this.moveToState(TOUCHABLE_STATE.BEGAN);
            }

            _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);

            _this.pressOutTimeout = null;
          }, _this.props.delayPressOut);
        } else {
          if (_this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
            _this.moveToState(TOUCHABLE_STATE.BEGAN);
          }

          _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
        }
      };

      _this.moveToState = function (newState) {
        if (newState === _this.STATE) {
          return;
        }

        if (newState === TOUCHABLE_STATE.BEGAN) {
          _this.props.onPressIn && _this.props.onPressIn();
        } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {
          _this.props.onPressOut && _this.props.onPressOut();
        } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {
          _this.reset();

          if (_this.STATE === TOUCHABLE_STATE.BEGAN) {
            _this.props.onPressOut && _this.props.onPressOut();
          }
        }

        _this.props.onStateChange && _this.props.onStateChange(_this.STATE, newState);
        _this.STATE = newState;
      };

      _this.onGestureEvent = function (_ref) {
        var pointerInside = _ref.nativeEvent.pointerInside;

        if (_this.pointerInside !== pointerInside) {
          if (pointerInside) {
            _this.onMoveIn();
          } else {
            _this.onMoveOut();
          }
        }

        _this.pointerInside = pointerInside;
      };

      _this.onHandlerStateChange = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        var state = nativeEvent.state;

        if (state === _GestureHandler.State.CANCELLED || state === _GestureHandler.State.FAILED) {
          _this.moveToState(TOUCHABLE_STATE.UNDETERMINED);
        } else if (state === (_reactNative.Platform.OS === 'ios' ? _GestureHandler.State.ACTIVE : _GestureHandler.State.BEGAN) && _this.STATE === TOUCHABLE_STATE.UNDETERMINED) {
          _this.handlePressIn();
        } else if (state === _GestureHandler.State.END) {
          var shouldCallOnPress = !_this.longPressDetected && _this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && _this.pressOutTimeout === null;

          _this.handleGoToUndetermined();

          if (shouldCallOnPress) {
            _this.props.onPress && _this.props.onPress();
          }
        }
      };

      _this.onLongPressDetected = function () {
        _this.longPressDetected = true;

        _this.props.onLongPress();
      };

      _this.onMoveIn = function () {
        if (_this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {
          _this.moveToState(TOUCHABLE_STATE.BEGAN);
        }
      };

      _this.onMoveOut = function () {
        clearTimeout(_this.longPressTimeout);
        _this.longPressTimeout = null;

        if (_this.STATE === TOUCHABLE_STATE.BEGAN) {
          _this.handleMoveOutside();
        }
      };

      return _this;
    }

    (0, _createClass2.default)(GenericTouchable, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.reset();
      }
    }, {
      key: "reset",
      value: function reset() {
        this.longPressDetected = false;
        this.pointerInside = true;
        clearTimeout(this.pressInTimeout);
        clearTimeout(this.pressOutTimeout);
        clearTimeout(this.longPressTimeout);
        this.pressOutTimeout = null;
        this.longPressTimeout = null;
        this.pressInTimeout = null;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.reset();
      }
    }, {
      key: "render",
      value: function render() {
        var coreProps = {
          accessible: this.props.accessible !== false,
          accessibilityLabel: this.props.accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityComponentType: this.props.accessibilityComponentType,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityStates: this.props.accessibilityStates,
          accessibilityTraits: this.props.accessibilityTraits,
          nativeID: this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop
        };
        return _react.default.createElement(_GestureHandler.BaseButton, (0, _extends2.default)({
          onHandlerStateChange: this.props.disabled || this.onHandlerStateChange,
          onGestureEvent: this.onGestureEvent,
          hitSlop: this.props.hitSlop
        }, this.props.extraButtonProps), _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, coreProps, {
          style: this.props.style
        }), this.props.children));
      }
    }]);
    return GenericTouchable;
  }(_react.Component);

  exports.default = GenericTouchable;
  GenericTouchable.publicPropTypes = PublicPropTypes;
  GenericTouchable.internalPropTypes = InternalPropTypes;
  GenericTouchable.propTypes = (0, _objectSpread2.default)({}, InternalPropTypes, PublicPropTypes);
  GenericTouchable.defaultProps = {
    delayLongPress: 600,
    extraButtonProps: {
      rippleColor: 'transparent'
    }
  };
},446,[366,1,48,3,21,22,34,37,40,51,5,439,65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _GenericTouchable = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var TouchableOpacity = function (_Component) {
    (0, _inherits2.default)(TouchableOpacity, _Component);

    function TouchableOpacity() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TouchableOpacity);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TouchableOpacity)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.getChildStyleOpacityWithDefault = function () {
        var childStyle = _reactNative.StyleSheet.flatten(_this.props.style) || {};
        return childStyle.opacity == null ? 1 : childStyle.opacity;
      };

      _this.opacity = new _reactNative.Animated.Value(_this.getChildStyleOpacityWithDefault());

      _this.setOpacityTo = function (value, duration) {
        _reactNative.Animated.timing(_this.opacity, {
          toValue: value,
          duration: duration,
          easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),
          useNativeDriver: true
        }).start();
      };

      _this.onStateChange = function (from, to) {
        if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {
          _this.setOpacityTo(_this.props.activeOpacity, 0);
        } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {
          _this.setOpacityTo(_this.getChildStyleOpacityWithDefault(), 150);
        }
      };

      return _this;
    }

    (0, _createClass2.default)(TouchableOpacity, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            _this$props$style = _this$props.style,
            style = _this$props$style === undefined ? {} : _this$props$style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style"]);
        return _react.default.createElement(_GenericTouchable.default, (0, _extends2.default)({}, rest, {
          style: (0, _objectSpread2.default)({}, style, {
            opacity: this.opacity
          }),
          onStateChange: this.onStateChange
        }), this.props.children ? this.props.children : _react.default.createElement(_reactNative.View, null));
      }
    }]);
    return TouchableOpacity;
  }(_react.Component);

  exports.default = TouchableOpacity;
  TouchableOpacity.defaultProps = (0, _objectSpread2.default)({}, _GenericTouchable.default.defaultProps, {
    activeOpacity: 0.2
  });
  TouchableOpacity.propTypes = (0, _objectSpread2.default)({}, _GenericTouchable.default.publicPropTypes, {
    style: _propTypes.default.object,
    activeOpacity: _propTypes.default.number
  });
},447,[366,1,3,48,9,21,22,34,37,40,5,446,51,65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _GenericTouchable = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var TouchableHighlight = function (_Component) {
    (0, _inherits2.default)(TouchableHighlight, _Component);

    function TouchableHighlight() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TouchableHighlight);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TouchableHighlight)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.state = {
        extraChildStyle: null,
        extraUnderlayStyle: {
          backgroundColor: 'black'
        }
      };

      _this.showUnderlay = function () {
        if (!_this.hasPressHandler()) {
          return;
        }

        _this.setState({
          extraChildStyle: {
            opacity: _this.props.activeOpacity
          },
          extraUnderlayStyle: {
            backgroundColor: _this.props.underlayColor
          }
        });

        _this.props.onShowUnderlay && _this.props.onShowUnderlay();
      };

      _this.hasPressHandler = function () {
        return _this.props.onPress || _this.props.onPressIn || _this.props.onPressOut || _this.props.onLongPress;
      };

      _this.hideUnderlay = function () {
        _this.setState({
          extraChildStyle: null,
          extraUnderlayStyle: null
        });

        _this.props.onHideUnderlay && _this.props.onHideUnderlay();
      };

      _this.onStateChange = function (from, to) {
        if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {
          _this.showUnderlay();
        } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {
          _this.hideUnderlay();
        }
      };

      return _this;
    }

    (0, _createClass2.default)(TouchableHighlight, [{
      key: "renderChildren",
      value: function renderChildren() {
        if (!this.props.children) {
          return _react.default.createElement(View, null);
        }

        var child = _react.default.Children.only(this.props.children);

        return _react.default.cloneElement(child, {
          style: _reactNative.StyleSheet.compose(child.props.style, this.state.extraChildStyle)
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            _this$props$style = _this$props.style,
            style = _this$props$style === undefined ? {} : _this$props$style,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["style"]);
        var extraUnderlayStyle = this.state.extraUnderlayStyle;
        return _react.default.createElement(_GenericTouchable.default, (0, _extends2.default)({}, rest, {
          style: (0, _objectSpread2.default)({}, style, extraUnderlayStyle),
          onStateChange: this.onStateChange
        }), this.renderChildren());
      }
    }]);
    return TouchableHighlight;
  }(_react.Component);

  exports.default = TouchableHighlight;
  TouchableHighlight.defaultProps = (0, _objectSpread2.default)({}, _GenericTouchable.default.defaultProps, {
    activeOpacity: 0.85,
    delayPressOut: 100,
    underlayColor: 'black'
  });
  TouchableHighlight.propTypes = (0, _objectSpread2.default)({}, _GenericTouchable.default.publicPropTypes, {
    activeOpacity: _propTypes.default.number,
    underlayColor: _propTypes.default.string,
    style: _propTypes.default.object,
    onShowUnderlay: _propTypes.default.func,
    onHideUnderlay: _propTypes.default.func
  });
},448,[366,1,3,48,9,21,22,34,37,40,51,446,5,65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Animated", {
    enumerable: true,
    get: function get() {
      return _MapView.Animated;
    }
  });
  Object.defineProperty(exports, "MAP_TYPES", {
    enumerable: true,
    get: function get() {
      return _MapView.MAP_TYPES;
    }
  });
  Object.defineProperty(exports, "ProviderPropType", {
    enumerable: true,
    get: function get() {
      return _MapView.ProviderPropType;
    }
  });
  Object.defineProperty(exports, "Marker", {
    enumerable: true,
    get: function get() {
      return _MapMarker.default;
    }
  });
  Object.defineProperty(exports, "Overlay", {
    enumerable: true,
    get: function get() {
      return _MapOverlay.default;
    }
  });
  Object.defineProperty(exports, "Polyline", {
    enumerable: true,
    get: function get() {
      return _MapPolyline.default;
    }
  });
  Object.defineProperty(exports, "Polygon", {
    enumerable: true,
    get: function get() {
      return _MapPolygon.default;
    }
  });
  Object.defineProperty(exports, "Circle", {
    enumerable: true,
    get: function get() {
      return _MapCircle.default;
    }
  });
  Object.defineProperty(exports, "UrlTile", {
    enumerable: true,
    get: function get() {
      return _MapUrlTile.default;
    }
  });
  Object.defineProperty(exports, "LocalTile", {
    enumerable: true,
    get: function get() {
      return _MapLocalTile.default;
    }
  });
  Object.defineProperty(exports, "Callout", {
    enumerable: true,
    get: function get() {
      return _MapCallout.default;
    }
  });
  Object.defineProperty(exports, "AnimatedRegion", {
    enumerable: true,
    get: function get() {
      return _AnimatedRegion.default;
    }
  });
  exports.default = exports.OverlayAnimated = exports.MarkerAnimated = exports.PROVIDER_DEFAULT = exports.PROVIDER_GOOGLE = undefined;

  var _MapView = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2]));

  var _MapMarker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _MapOverlay = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _MapPolyline = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _MapPolygon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _MapCircle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _MapUrlTile = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _MapLocalTile = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _MapCallout = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _AnimatedRegion = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var PROVIDER_GOOGLE = _MapView.default.PROVIDER_GOOGLE;
  exports.PROVIDER_GOOGLE = PROVIDER_GOOGLE;
  var PROVIDER_DEFAULT = _MapView.default.PROVIDER_DEFAULT;
  exports.PROVIDER_DEFAULT = PROVIDER_DEFAULT;
  var MarkerAnimated = _MapMarker.default.Animated;
  exports.MarkerAnimated = MarkerAnimated;
  var OverlayAnimated = _MapOverlay.default.Animated;
  exports.OverlayAnimated = OverlayAnimated;
  var _default = _MapView.default;
  exports.default = _default;
},449,[1,366,450,451,458,454,455,456,459,460,457,461]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.ProviderPropType = exports.Animated = exports.MAP_TYPES = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[13]);

  var _MapMarker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _MapPolyline = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _MapPolygon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _MapCircle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _MapCallout = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _MapOverlay = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _MapUrlTile = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _MapLocalTile = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _AnimatedRegion = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _decorateMapComponent = _$$_REQUIRE(_dependencyMap[23]);

  var ProviderConstants = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[24]));

  var MAP_TYPES = {
    STANDARD: 'standard',
    SATELLITE: 'satellite',
    HYBRID: 'hybrid',
    TERRAIN: 'terrain',
    NONE: 'none',
    MUTEDSTANDARD: 'mutedStandard'
  };
  exports.MAP_TYPES = MAP_TYPES;
  var GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];
  var viewConfig = {
    uiViewClassName: 'AIR<provider>Map',
    validAttributes: {
      region: true
    }
  };
  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = (0, _objectSpread2.default)({}, viewPropTypes, {
    provider: _propTypes.default.oneOf(['google']),
    style: viewPropTypes.style,
    customMapStyle: _propTypes.default.array,
    customMapStyleString: _propTypes.default.string,
    showsUserLocation: _propTypes.default.bool,
    userLocationAnnotationTitle: _propTypes.default.string,
    showsMyLocationButton: _propTypes.default.bool,
    followsUserLocation: _propTypes.default.bool,
    showsPointsOfInterest: _propTypes.default.bool,
    showsCompass: _propTypes.default.bool,
    zoomEnabled: _propTypes.default.bool,
    zoomControlEnabled: _propTypes.default.bool,
    rotateEnabled: _propTypes.default.bool,
    cacheEnabled: _propTypes.default.bool,
    loadingEnabled: _propTypes.default.bool,
    loadingBackgroundColor: _reactNative.ColorPropType,
    loadingIndicatorColor: _reactNative.ColorPropType,
    scrollEnabled: _propTypes.default.bool,
    pitchEnabled: _propTypes.default.bool,
    toolbarEnabled: _propTypes.default.bool,
    moveOnMarkerPress: _propTypes.default.bool,
    showsScale: _propTypes.default.bool,
    showsBuildings: _propTypes.default.bool,
    showsTraffic: _propTypes.default.bool,
    showsIndoors: _propTypes.default.bool,
    showsIndoorLevelPicker: _propTypes.default.bool,
    mapType: _propTypes.default.oneOf(Object.values(MAP_TYPES)),
    region: _propTypes.default.shape({
      latitude: _propTypes.default.number.isRequired,
      longitude: _propTypes.default.number.isRequired,
      latitudeDelta: _propTypes.default.number.isRequired,
      longitudeDelta: _propTypes.default.number.isRequired
    }),
    initialRegion: _propTypes.default.shape({
      latitude: _propTypes.default.number.isRequired,
      longitude: _propTypes.default.number.isRequired,
      latitudeDelta: _propTypes.default.number.isRequired,
      longitudeDelta: _propTypes.default.number.isRequired
    }),
    liteMode: _propTypes.default.bool,
    mapPadding: _reactNative.EdgeInsetsPropType,
    paddingAdjustmentBehavior: _propTypes.default.oneOf(['always', 'automatic', 'never']),
    maxDelta: _propTypes.default.number,
    minDelta: _propTypes.default.number,
    legalLabelInsets: _reactNative.EdgeInsetsPropType,
    onMapReady: _propTypes.default.func,
    onKmlReady: _propTypes.default.func,
    onRegionChange: _propTypes.default.func,
    onRegionChangeComplete: _propTypes.default.func,
    onPress: _propTypes.default.func,
    onLongPress: _propTypes.default.func,
    onUserLocationChange: _propTypes.default.func,
    onPanDrag: _propTypes.default.func,
    onPoiClick: _propTypes.default.func,
    onMarkerPress: _propTypes.default.func,
    onMarkerSelect: _propTypes.default.func,
    onMarkerDeselect: _propTypes.default.func,
    onCalloutPress: _propTypes.default.func,
    onMarkerDragStart: _propTypes.default.func,
    onMarkerDrag: _propTypes.default.func,
    onMarkerDragEnd: _propTypes.default.func,
    minZoomLevel: _propTypes.default.number,
    maxZoomLevel: _propTypes.default.number,
    kmlSrc: _propTypes.default.string,
    onIndoorLevelActivated: _propTypes.default.func,
    onIndoorBuildingFocused: _propTypes.default.func
  });

  var MapView = function (_React$Component) {
    (0, _inherits2.default)(MapView, _React$Component);

    function MapView(props) {
      var _this;

      (0, _classCallCheck2.default)(this, MapView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapView).call(this, props));
      _this.state = {
        isReady: _reactNative.Platform.OS === 'ios'
      };
      _this._onMapReady = _this._onMapReady.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
      _this._onMarkerPress = _this._onMarkerPress.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
      _this._onChange = _this._onChange.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
      _this._onLayout = _this._onLayout.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
      return _this;
    }

    (0, _createClass2.default)(MapView, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          provider: this.props.provider
        };
      }
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate(nextProps) {
        var a = this.__lastRegion;
        var b = nextProps.region;
        if (!a || !b) return;

        if (a.latitude !== b.latitude || a.longitude !== b.longitude || a.latitudeDelta !== b.latitudeDelta || a.longitudeDelta !== b.longitudeDelta) {
          this.map.setNativeProps({
            region: b
          });
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var isReady = this.state.isReady;

        if (isReady) {
          this._updateStyle();
        }
      }
    }, {
      key: "_updateStyle",
      value: function _updateStyle() {
        var customMapStyle = this.props.customMapStyle;
        this.map.setNativeProps({
          customMapStyleString: JSON.stringify(customMapStyle)
        });
      }
    }, {
      key: "_onMapReady",
      value: function _onMapReady() {
        var _this$props = this.props,
            region = _this$props.region,
            initialRegion = _this$props.initialRegion,
            onMapReady = _this$props.onMapReady;

        if (region) {
          this.map.setNativeProps({
            region: region
          });
        } else if (initialRegion) {
          this.map.setNativeProps({
            initialRegion: initialRegion
          });
        }

        this._updateStyle();

        this.setState({
          isReady: true
        }, function () {
          if (onMapReady) onMapReady();
        });
      }
    }, {
      key: "_onLayout",
      value: function _onLayout(e) {
        var layout = e.nativeEvent.layout;
        if (!layout.width || !layout.height) return;

        if (this.state.isReady && !this.__layoutCalled) {
          var _this$props2 = this.props,
              region = _this$props2.region,
              initialRegion = _this$props2.initialRegion;

          if (region) {
            this.__layoutCalled = true;
            this.map.setNativeProps({
              region: region
            });
          } else if (initialRegion) {
            this.__layoutCalled = true;
            this.map.setNativeProps({
              initialRegion: initialRegion
            });
          }
        }

        if (this.props.onLayout) {
          this.props.onLayout(e);
        }
      }
    }, {
      key: "_onMarkerPress",
      value: function _onMarkerPress(event) {
        if (this.props.onMarkerPress) {
          this.props.onMarkerPress(event.nativeEvent);
        }
      }
    }, {
      key: "_onChange",
      value: function _onChange(event) {
        this.__lastRegion = event.nativeEvent.region;

        if (event.nativeEvent.continuous) {
          if (this.props.onRegionChange) {
            this.props.onRegionChange(event.nativeEvent.region);
          }
        } else if (this.props.onRegionChangeComplete) {
          this.props.onRegionChangeComplete(event.nativeEvent.region);
        }
      }
    }, {
      key: "animateToNavigation",
      value: function animateToNavigation(location, bearing, angle, duration) {
        this._runCommand('animateToNavigation', [location, bearing, angle, duration || 500]);
      }
    }, {
      key: "animateToRegion",
      value: function animateToRegion(region, duration) {
        this._runCommand('animateToRegion', [region, duration || 500]);
      }
    }, {
      key: "animateToCoordinate",
      value: function animateToCoordinate(latLng, duration) {
        this._runCommand('animateToCoordinate', [latLng, duration || 500]);
      }
    }, {
      key: "animateToBearing",
      value: function animateToBearing(bearing, duration) {
        this._runCommand('animateToBearing', [bearing, duration || 500]);
      }
    }, {
      key: "animateToViewingAngle",
      value: function animateToViewingAngle(angle, duration) {
        this._runCommand('animateToViewingAngle', [angle, duration || 500]);
      }
    }, {
      key: "fitToElements",
      value: function fitToElements(animated) {
        this._runCommand('fitToElements', [animated]);
      }
    }, {
      key: "fitToSuppliedMarkers",
      value: function fitToSuppliedMarkers(markers) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$edgePadding = options.edgePadding,
            edgePadding = _options$edgePadding === undefined ? {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        } : _options$edgePadding,
            _options$animated = options.animated,
            animated = _options$animated === undefined ? true : _options$animated;

        this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);
      }
    }, {
      key: "fitToCoordinates",
      value: function fitToCoordinates() {
        var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$edgePadding2 = options.edgePadding,
            edgePadding = _options$edgePadding2 === undefined ? {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        } : _options$edgePadding2,
            _options$animated2 = options.animated,
            animated = _options$animated2 === undefined ? true : _options$animated2;

        this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);
      }
    }, {
      key: "setMapBoundaries",
      value: function setMapBoundaries(northEast, southWest) {
        this._runCommand('setMapBoundaries', [northEast, southWest]);
      }
    }, {
      key: "setIndoorActiveLevelIndex",
      value: function setIndoorActiveLevelIndex(activeLevelIndex) {
        this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);
      }
    }, {
      key: "takeSnapshot",
      value: function takeSnapshot(args) {
        var _this2 = this;

        if (_reactNative.Platform.OS === 'ios' && arguments.length === 4) {
          console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future');
          var width = arguments[0];
          var height = arguments[1];
          var region = arguments[2];
          var callback = arguments[3];

          this._runCommand('takeSnapshot', [width || 0, height || 0, region || {}, 'png', 1, 'legacy', callback]);

          return undefined;
        }

        var config = {
          width: args.width || 0,
          height: args.height || 0,
          region: args.region || {},
          format: args.format || 'png',
          quality: args.quality || 1.0,
          result: args.result || 'file'
        };
        if (config.format !== 'png' && config.format !== 'jpg') throw new Error('Invalid format specified');
        if (config.result !== 'file' && config.result !== 'base64') throw new Error('Invalid result specified');

        if (_reactNative.Platform.OS === 'android') {
          return _reactNative.NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);
        } else if (_reactNative.Platform.OS === 'ios') {
          return new Promise(function (resolve, reject) {
            _this2._runCommand('takeSnapshot', [config.width, config.height, config.region, config.format, config.quality, config.result, function (err, snapshot) {
              if (err) {
                reject(err);
              } else {
                resolve(snapshot);
              }
            }]);
          });
        }

        return Promise.reject('takeSnapshot not supported on this platform');
      }
    }, {
      key: "pointForCoordinate",
      value: function pointForCoordinate(coordinate) {
        if (_reactNative.Platform.OS === 'android') {
          return _reactNative.NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);
        } else if (_reactNative.Platform.OS === 'ios') {
          return this._runCommand('pointForCoordinate', [coordinate]);
        }

        return Promise.reject('pointForCoordinate not supported on this platform');
      }
    }, {
      key: "coordinateForPoint",
      value: function coordinateForPoint(point) {
        if (_reactNative.Platform.OS === 'android') {
          return _reactNative.NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);
        } else if (_reactNative.Platform.OS === 'ios') {
          return this._runCommand('coordinateForPoint', [point]);
        }

        return Promise.reject('coordinateForPoint not supported on this platform');
      }
    }, {
      key: "_uiManagerCommand",
      value: function _uiManagerCommand(name) {
        return _reactNative.NativeModules.UIManager[(0, _decorateMapComponent.getAirMapName)(this.props.provider)].Commands[name];
      }
    }, {
      key: "_mapManagerCommand",
      value: function _mapManagerCommand(name) {
        return _reactNative.NativeModules[(0, _decorateMapComponent.getAirMapName)(this.props.provider) + "Manager"][name];
      }
    }, {
      key: "_getHandle",
      value: function _getHandle() {
        return (0, _reactNative.findNodeHandle)(this.map);
      }
    }, {
      key: "_runCommand",
      value: function _runCommand(name, args) {
        switch (_reactNative.Platform.OS) {
          case 'android':
            return _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this._uiManagerCommand(name), args);

          case 'ios':
            return this._mapManagerCommand(name).apply(undefined, [this._getHandle()].concat((0, _toConsumableArray2.default)(args)));

          default:
            return Promise.reject("Invalid platform was passed: " + _reactNative.Platform.OS);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var props;

        if (this.state.isReady) {
          props = (0, _objectSpread2.default)({
            region: null,
            initialRegion: null,
            onMarkerPress: this._onMarkerPress,
            onChange: this._onChange,
            onMapReady: this._onMapReady,
            onLayout: this._onLayout
          }, this.props);

          if (_reactNative.Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {
            props.mapType = MAP_TYPES.standard;
          }

          props.handlePanDrag = !!props.onPanDrag;
        } else {
          props = {
            style: this.props.style,
            region: null,
            initialRegion: null,
            onMarkerPress: this._onMarkerPress,
            onChange: this._onChange,
            onMapReady: this._onMapReady,
            onLayout: this._onLayout
          };
        }

        if (_reactNative.Platform.OS === 'android' && this.props.liteMode) {
          return _react.default.createElement(AIRMapLite, (0, _extends2.default)({
            ref: function ref(_ref) {
              _this3.map = _ref;
            }
          }, props));
        }

        var AIRMap = getAirMapComponent(this.props.provider);
        return _react.default.createElement(AIRMap, (0, _extends2.default)({
          ref: function ref(_ref2) {
            _this3.map = _ref2;
          }
        }, props));
      }
    }]);
    return MapView;
  }(_react.default.Component);

  MapView.propTypes = propTypes;
  MapView.viewConfig = viewConfig;
  MapView.childContextTypes = _decorateMapComponent.contextTypes;
  MapView.MAP_TYPES = MAP_TYPES;

  var nativeComponent = function nativeComponent(Component) {
    return (0, _reactNative.requireNativeComponent)(Component, MapView, {
      nativeOnly: {
        onChange: true,
        onMapReady: true,
        onKmlReady: true,
        handlePanDrag: true
      }
    });
  };

  var airMaps = {
    default: nativeComponent('AIRMap')
  };

  if (_reactNative.Platform.OS === 'android') {
    airMaps.google = airMaps.default;
  } else {
    airMaps.google = _decorateMapComponent.googleMapIsInstalled ? nativeComponent('AIRGoogleMap') : (0, _decorateMapComponent.createNotSupportedComponent)('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');
  }

  var getAirMapComponent = function getAirMapComponent(provider) {
    return airMaps[provider || 'default'];
  };

  var AIRMapLite = _reactNative.NativeModules.UIManager.AIRMapLite && (0, _reactNative.requireNativeComponent)('AIRMapLite', MapView, {
    nativeOnly: {
      onChange: true,
      onMapReady: true,
      handlePanDrag: true
    }
  });

  var Animated = _reactNative.Animated.createAnimatedComponent(MapView);

  exports.Animated = Animated;

  var ProviderPropType = _propTypes.default.oneOf(Object.values(ProviderConstants));

  exports.ProviderPropType = ProviderPropType;
  MapView.Marker = _MapMarker.default;
  MapView.Polyline = _MapPolyline.default;
  MapView.Polygon = _MapPolygon.default;
  MapView.Circle = _MapCircle.default;
  MapView.UrlTile = _MapUrlTile.default;
  MapView.LocalTile = _MapLocalTile.default;
  MapView.Overlay = _MapOverlay.default;
  MapView.Callout = _MapCallout.default;
  (0, _extends2.default)(MapView, ProviderConstants);
  MapView.ProviderPropType = ProviderPropType;
  MapView.Animated = Animated;
  MapView.AnimatedRegion = _AnimatedRegion.default;
  var _default = MapView;
  exports.default = _default;
},450,[366,1,3,17,21,22,34,37,40,36,48,65,51,5,451,454,455,456,457,458,459,460,461,452,453]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[13]);

  var _resolveAssetSource = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _decorateMapComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[15]));

  var viewConfig = {
    uiViewClassName: 'AIR<provider>MapMarker',
    validAttributes: {
      coordinate: true
    }
  };
  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = (0, _objectSpread2.default)({}, viewPropTypes, {
    identifier: _propTypes.default.string,
    reuseIdentifier: _propTypes.default.string,
    title: _propTypes.default.string,
    description: _propTypes.default.string,
    image: _propTypes.default.any,
    opacity: _propTypes.default.number,
    pinColor: _reactNative.ColorPropType,
    coordinate: _propTypes.default.shape({
      latitude: _propTypes.default.number.isRequired,
      longitude: _propTypes.default.number.isRequired
    }).isRequired,
    centerOffset: _propTypes.default.shape({
      x: _propTypes.default.number.isRequired,
      y: _propTypes.default.number.isRequired
    }),
    calloutOffset: _propTypes.default.shape({
      x: _propTypes.default.number.isRequired,
      y: _propTypes.default.number.isRequired
    }),
    anchor: _propTypes.default.shape({
      x: _propTypes.default.number.isRequired,
      y: _propTypes.default.number.isRequired
    }),
    calloutAnchor: _propTypes.default.shape({
      x: _propTypes.default.number.isRequired,
      y: _propTypes.default.number.isRequired
    }),
    flat: _propTypes.default.bool,
    draggable: _propTypes.default.bool,
    tracksViewChanges: _propTypes.default.bool,
    tracksInfoWindowChanges: _propTypes.default.bool,
    stopPropagation: _propTypes.default.bool,
    onPress: _propTypes.default.func,
    onSelect: _propTypes.default.func,
    onDeselect: _propTypes.default.func,
    onCalloutPress: _propTypes.default.func,
    onDragStart: _propTypes.default.func,
    onDrag: _propTypes.default.func,
    onDragEnd: _propTypes.default.func
  });
  var defaultProps = {
    stopPropagation: false
  };

  var MapMarker = function (_React$Component) {
    (0, _inherits2.default)(MapMarker, _React$Component);

    function MapMarker(props) {
      var _this;

      (0, _classCallCheck2.default)(this, MapMarker);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapMarker).call(this, props));
      _this.showCallout = _this.showCallout.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
      _this.hideCallout = _this.hideCallout.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
      _this.animateMarkerToCoordinate = _this.animateMarkerToCoordinate.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
      return _this;
    }

    (0, _createClass2.default)(MapMarker, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.marker.setNativeProps(props);
      }
    }, {
      key: "showCallout",
      value: function showCallout() {
        this._runCommand('showCallout', []);
      }
    }, {
      key: "hideCallout",
      value: function hideCallout() {
        this._runCommand('hideCallout', []);
      }
    }, {
      key: "animateMarkerToCoordinate",
      value: function animateMarkerToCoordinate(coordinate, duration) {
        this._runCommand('animateMarkerToCoordinate', [coordinate, duration || 500]);
      }
    }, {
      key: "redraw",
      value: function redraw() {
        this._runCommand('redraw', []);
      }
    }, {
      key: "_getHandle",
      value: function _getHandle() {
        return (0, _reactNative.findNodeHandle)(this.marker);
      }
    }, {
      key: "_runCommand",
      value: function _runCommand(name, args) {
        switch (_reactNative.Platform.OS) {
          case 'android':
            _reactNative.NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this.getUIManagerCommand(name), args);

            break;

          case 'ios':
            this.getMapManagerCommand(name).apply(undefined, [this._getHandle()].concat((0, _toConsumableArray2.default)(args)));
            break;

          default:
            break;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var image;

        if (this.props.image) {
          image = (0, _resolveAssetSource.default)(this.props.image) || {};
          image = image.uri || this.props.image;
        }

        var AIRMapMarker = this.getAirComponent();
        return _react.default.createElement(AIRMapMarker, (0, _extends2.default)({
          ref: function ref(_ref) {
            _this2.marker = _ref;
          }
        }, this.props, {
          image: image,
          style: [styles.marker, this.props.style],
          onPress: function onPress(event) {
            if (_this2.props.stopPropagation) {
              event.stopPropagation();
            }

            if (_this2.props.onPress) {
              _this2.props.onPress(event);
            }
          }
        }));
      }
    }]);
    return MapMarker;
  }(_react.default.Component);

  MapMarker.propTypes = propTypes;
  MapMarker.defaultProps = defaultProps;
  MapMarker.viewConfig = viewConfig;

  var styles = _reactNative.StyleSheet.create({
    marker: {
      position: 'absolute',
      backgroundColor: 'transparent'
    }
  });

  MapMarker.Animated = _reactNative.Animated.createAnimatedComponent(MapMarker);

  var _default = (0, _decorateMapComponent.default)(MapMarker, {
    componentType: 'Marker',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });

  exports.default = _default;
},451,[366,1,3,17,21,22,34,37,40,36,48,65,51,5,152,452]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAirMapName = getAirMapName;
  exports.default = decorateMapComponent;
  exports.googleMapIsInstalled = exports.createNotSupportedComponent = exports.contextTypes = exports.NOT_SUPPORTED = exports.USES_DEFAULT_IMPLEMENTATION = exports.SUPPORTED = undefined;

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _ProviderConstants = _$$_REQUIRE(_dependencyMap[3]);

  var SUPPORTED = 'SUPPORTED';
  exports.SUPPORTED = SUPPORTED;
  var USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';
  exports.USES_DEFAULT_IMPLEMENTATION = USES_DEFAULT_IMPLEMENTATION;
  var NOT_SUPPORTED = 'NOT_SUPPORTED';
  exports.NOT_SUPPORTED = NOT_SUPPORTED;

  function getAirMapName(provider) {
    if (_reactNative.Platform.OS === 'android') return 'AIRMap';
    if (provider === _ProviderConstants.PROVIDER_GOOGLE) return 'AIRGoogleMap';
    return 'AIRMap';
  }

  function getAirComponentName(provider, component) {
    return "" + getAirMapName(provider) + component;
  }

  var contextTypes = {
    provider: _propTypes.default.string
  };
  exports.contextTypes = contextTypes;

  var createNotSupportedComponent = function createNotSupportedComponent(message) {
    return function () {
      console.error(message);
      return null;
    };
  };

  exports.createNotSupportedComponent = createNotSupportedComponent;
  var googleMapIsInstalled = !!_reactNative.NativeModules.UIManager[getAirMapName(_ProviderConstants.PROVIDER_GOOGLE)];
  exports.googleMapIsInstalled = googleMapIsInstalled;

  function decorateMapComponent(Component, _ref) {
    var componentType = _ref.componentType,
        providers = _ref.providers;
    var components = {};

    var getDefaultComponent = function getDefaultComponent() {
      return (0, _reactNative.requireNativeComponent)(getAirComponentName(null, componentType), Component);
    };

    Component.contextTypes = contextTypes;

    Component.prototype.getAirComponent = function getAirComponent() {
      var provider = this.context.provider || _ProviderConstants.PROVIDER_DEFAULT;
      if (components[provider]) return components[provider];

      if (provider === _ProviderConstants.PROVIDER_DEFAULT) {
        components[_ProviderConstants.PROVIDER_DEFAULT] = getDefaultComponent();
        return components[_ProviderConstants.PROVIDER_DEFAULT];
      }

      var providerInfo = providers[provider];
      var platformSupport = providerInfo[_reactNative.Platform.OS];
      var componentName = getAirComponentName(provider, componentType);

      if (platformSupport === NOT_SUPPORTED) {
        components[provider] = createNotSupportedComponent("react-native-maps: " + componentName + " is not supported on " + _reactNative.Platform.OS);
      } else if (platformSupport === SUPPORTED) {
        if (provider !== _ProviderConstants.PROVIDER_GOOGLE || _reactNative.Platform.OS === 'ios' && googleMapIsInstalled) {
          components[provider] = (0, _reactNative.requireNativeComponent)(componentName, Component);
        }
      } else {
        if (!components[_ProviderConstants.PROVIDER_DEFAULT]) components[_ProviderConstants.PROVIDER_DEFAULT] = getDefaultComponent();
        components[provider] = components[_ProviderConstants.PROVIDER_DEFAULT];
      }

      return components[provider];
    };

    Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {
      return _reactNative.NativeModules.UIManager[getAirComponentName(this.context.provider, componentType)].Commands[name];
    };

    Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {
      var airComponentName = getAirComponentName(this.context.provider, componentType) + "Manager";
      return _reactNative.NativeModules[airComponentName][name];
    };

    return Component;
  }
},452,[1,65,5,453]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PROVIDER_GOOGLE = exports.PROVIDER_DEFAULT = undefined;
  var PROVIDER_DEFAULT = null;
  exports.PROVIDER_DEFAULT = PROVIDER_DEFAULT;
  var PROVIDER_GOOGLE = 'google';
  exports.PROVIDER_GOOGLE = PROVIDER_GOOGLE;
},453,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _decorateMapComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = (0, _objectSpread2.default)({}, viewPropTypes, {
    coordinates: _propTypes.default.arrayOf(_propTypes.default.shape({
      latitude: _propTypes.default.number.isRequired,
      longitude: _propTypes.default.number.isRequired
    })),
    onPress: _propTypes.default.func,
    tappable: _propTypes.default.bool,
    fillColor: _reactNative.ColorPropType,
    strokeWidth: _propTypes.default.number,
    strokeColor: _reactNative.ColorPropType,
    strokeColors: _propTypes.default.arrayOf(_reactNative.ColorPropType),
    zIndex: _propTypes.default.number,
    lineCap: _propTypes.default.oneOf(['butt', 'round', 'square']),
    lineJoin: _propTypes.default.oneOf(['miter', 'round', 'bevel']),
    miterLimit: _propTypes.default.number,
    geodesic: _propTypes.default.bool,
    lineDashPhase: _propTypes.default.number,
    lineDashPattern: _propTypes.default.arrayOf(_propTypes.default.number)
  });
  var defaultProps = {
    strokeColor: '#000',
    strokeWidth: 1,
    lineJoin: 'round',
    lineCap: 'round'
  };

  var MapPolyline = function (_React$Component) {
    (0, _inherits2.default)(MapPolyline, _React$Component);

    function MapPolyline() {
      (0, _classCallCheck2.default)(this, MapPolyline);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapPolyline).apply(this, arguments));
    }

    (0, _createClass2.default)(MapPolyline, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.polyline.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var AIRMapPolyline = this.getAirComponent();
        return _react.default.createElement(AIRMapPolyline, (0, _extends2.default)({}, this.props, {
          ref: function ref(_ref) {
            _this.polyline = _ref;
          }
        }));
      }
    }]);
    return MapPolyline;
  }(_react.default.Component);

  MapPolyline.propTypes = propTypes;
  MapPolyline.defaultProps = defaultProps;

  var _default = (0, _decorateMapComponent.default)(MapPolyline, {
    componentType: 'Polyline',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });

  exports.default = _default;
},454,[366,1,3,21,22,34,37,40,48,65,51,5,452]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _decorateMapComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = (0, _objectSpread2.default)({}, viewPropTypes, {
    coordinates: _propTypes.default.arrayOf(_propTypes.default.shape({
      latitude: _propTypes.default.number.isRequired,
      longitude: _propTypes.default.number.isRequired
    })),
    holes: _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.shape({
      latitude: _propTypes.default.number.isRequired,
      longitude: _propTypes.default.number.isRequired
    }))),
    onPress: _propTypes.default.func,
    tappable: _propTypes.default.bool,
    strokeWidth: _propTypes.default.number,
    strokeColor: _reactNative.ColorPropType,
    fillColor: _reactNative.ColorPropType,
    zIndex: _propTypes.default.number,
    lineCap: _propTypes.default.oneOf(['butt', 'round', 'square']),
    lineJoin: _propTypes.default.oneOf(['miter', 'round', 'bevel']),
    miterLimit: _propTypes.default.number,
    geodesic: _propTypes.default.bool,
    lineDashPhase: _propTypes.default.number,
    lineDashPattern: _propTypes.default.arrayOf(_propTypes.default.number)
  });
  var defaultProps = {
    strokeColor: '#000',
    strokeWidth: 1
  };

  var MapPolygon = function (_React$Component) {
    (0, _inherits2.default)(MapPolygon, _React$Component);

    function MapPolygon() {
      (0, _classCallCheck2.default)(this, MapPolygon);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapPolygon).apply(this, arguments));
    }

    (0, _createClass2.default)(MapPolygon, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.polygon.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var AIRMapPolygon = this.getAirComponent();
        return _react.default.createElement(AIRMapPolygon, (0, _extends2.default)({}, this.props, {
          ref: function ref(_ref) {
            _this.polygon = _ref;
          }
        }));
      }
    }]);
    return MapPolygon;
  }(_react.default.Component);

  MapPolygon.propTypes = propTypes;
  MapPolygon.defaultProps = defaultProps;

  var _default = (0, _decorateMapComponent.default)(MapPolygon, {
    componentType: 'Polygon',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });

  exports.default = _default;
},455,[366,1,3,21,22,34,37,40,48,65,51,5,452]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _decorateMapComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = (0, _objectSpread2.default)({}, viewPropTypes, {
    center: _propTypes.default.shape({
      latitude: _propTypes.default.number.isRequired,
      longitude: _propTypes.default.number.isRequired
    }).isRequired,
    radius: _propTypes.default.number.isRequired,
    onPress: _propTypes.default.func,
    strokeWidth: _propTypes.default.number,
    strokeColor: _reactNative.ColorPropType,
    fillColor: _reactNative.ColorPropType,
    zIndex: _propTypes.default.number,
    lineCap: _propTypes.default.oneOf(['butt', 'round', 'square']),
    lineJoin: _propTypes.default.oneOf(['miter', 'round', 'bevel']),
    miterLimit: _propTypes.default.number,
    lineDashPhase: _propTypes.default.number,
    lineDashPattern: _propTypes.default.arrayOf(_propTypes.default.number)
  });
  var defaultProps = {
    strokeColor: '#000',
    strokeWidth: 1
  };

  var MapCircle = function (_React$Component) {
    (0, _inherits2.default)(MapCircle, _React$Component);

    function MapCircle() {
      (0, _classCallCheck2.default)(this, MapCircle);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapCircle).apply(this, arguments));
    }

    (0, _createClass2.default)(MapCircle, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this.circle.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        var _this = this;

        var AIRMapCircle = this.getAirComponent();
        return _react.default.createElement(AIRMapCircle, (0, _extends2.default)({}, this.props, {
          ref: function ref(_ref) {
            _this.circle = _ref;
          }
        }));
      }
    }]);
    return MapCircle;
  }(_react.default.Component);

  MapCircle.propTypes = propTypes;
  MapCircle.defaultProps = defaultProps;

  var _default = (0, _decorateMapComponent.default)(MapCircle, {
    componentType: 'Circle',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });

  exports.default = _default;
},456,[366,1,3,21,22,34,37,40,48,65,51,5,452]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _decorateMapComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = (0, _objectSpread2.default)({}, viewPropTypes, {
    tooltip: _propTypes.default.bool,
    onPress: _propTypes.default.func
  });
  var defaultProps = {
    tooltip: false
  };

  var MapCallout = function (_React$Component) {
    (0, _inherits2.default)(MapCallout, _React$Component);

    function MapCallout() {
      (0, _classCallCheck2.default)(this, MapCallout);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapCallout).apply(this, arguments));
    }

    (0, _createClass2.default)(MapCallout, [{
      key: "render",
      value: function render() {
        var AIRMapCallout = this.getAirComponent();
        return _react.default.createElement(AIRMapCallout, (0, _extends2.default)({}, this.props, {
          style: [styles.callout, this.props.style]
        }));
      }
    }]);
    return MapCallout;
  }(_react.default.Component);

  MapCallout.propTypes = propTypes;
  MapCallout.defaultProps = defaultProps;

  var styles = _reactNative.StyleSheet.create({
    callout: {
      position: 'absolute'
    }
  });

  var _default = (0, _decorateMapComponent.default)(MapCallout, {
    componentType: 'Callout',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });

  exports.default = _default;
},457,[366,1,3,21,22,34,37,40,48,65,51,5,452]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _resolveAssetSource = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _decorateMapComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));

  var viewConfig = {
    uiViewClassName: 'AIR<provider>MapOverlay',
    validAttributes: {
      image: true
    }
  };
  var propTypes = (0, _objectSpread2.default)({}, _reactNative.View.propTypes, {
    image: _propTypes.default.any.isRequired,
    bounds: _propTypes.default.arrayOf(_propTypes.default.array.isRequired).isRequired
  });

  var MapOverlay = function (_Component) {
    (0, _inherits2.default)(MapOverlay, _Component);

    function MapOverlay() {
      (0, _classCallCheck2.default)(this, MapOverlay);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapOverlay).apply(this, arguments));
    }

    (0, _createClass2.default)(MapOverlay, [{
      key: "render",
      value: function render() {
        var image;

        if (this.props.image) {
          if (typeof this.props.image.startsWith === 'function' && this.props.image.startsWith('http')) {
            image = this.props.image;
          } else {
            image = (0, _resolveAssetSource.default)(this.props.image) || {};
            image = image.uri;
          }
        }

        var AIRMapOverlay = this.getAirComponent();
        return _react.default.createElement(AIRMapOverlay, (0, _extends2.default)({}, this.props, {
          image: image,
          style: [styles.overlay, this.props.style]
        }));
      }
    }]);
    return MapOverlay;
  }(_react.Component);

  MapOverlay.propTypes = propTypes;
  MapOverlay.viewConfig = viewConfig;

  var styles = _reactNative.StyleSheet.create({
    overlay: {
      position: 'absolute',
      backgroundColor: 'transparent'
    }
  });

  MapOverlay.Animated = _reactNative.Animated.createAnimatedComponent(MapOverlay);

  var _default = (0, _decorateMapComponent.default)(MapOverlay, {
    componentType: 'Overlay',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });

  exports.default = _default;
},458,[366,1,3,21,22,34,37,40,48,51,65,5,152,452]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _decorateMapComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = (0, _objectSpread2.default)({}, viewPropTypes, {
    urlTemplate: _propTypes.default.string.isRequired,
    zIndex: _propTypes.default.number,
    maximumZ: _propTypes.default.number,
    minimumZ: _propTypes.default.number,
    shouldReplaceMapContent: _propTypes.default.bool
  });

  var MapUrlTile = function (_React$Component) {
    (0, _inherits2.default)(MapUrlTile, _React$Component);

    function MapUrlTile() {
      (0, _classCallCheck2.default)(this, MapUrlTile);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapUrlTile).apply(this, arguments));
    }

    (0, _createClass2.default)(MapUrlTile, [{
      key: "render",
      value: function render() {
        var AIRMapUrlTile = this.getAirComponent();
        return _react.default.createElement(AIRMapUrlTile, this.props);
      }
    }]);
    return MapUrlTile;
  }(_react.default.Component);

  MapUrlTile.propTypes = propTypes;

  var _default = (0, _decorateMapComponent.default)(MapUrlTile, {
    componentType: 'UrlTile',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });

  exports.default = _default;
},459,[366,1,21,22,34,37,40,48,65,51,5,452]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _decorateMapComponent = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;
  var propTypes = (0, _objectSpread2.default)({}, viewPropTypes, {
    pathTemplate: _propTypes.default.string.isRequired,
    zIndex: _propTypes.default.number,
    tileSize: _propTypes.default.number
  });

  var MapLocalTile = function (_React$Component) {
    (0, _inherits2.default)(MapLocalTile, _React$Component);

    function MapLocalTile() {
      (0, _classCallCheck2.default)(this, MapLocalTile);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MapLocalTile).apply(this, arguments));
    }

    (0, _createClass2.default)(MapLocalTile, [{
      key: "render",
      value: function render() {
        var AIRMapLocalTile = this.getAirComponent();
        return _react.default.createElement(AIRMapLocalTile, this.props);
      }
    }]);
    return MapLocalTile;
  }(_react.default.Component);

  MapLocalTile.propTypes = propTypes;

  var _default = (0, _decorateMapComponent.default)(MapLocalTile, {
    componentType: 'LocalTile',
    providers: {
      google: {
        ios: _decorateMapComponent.SUPPORTED,
        android: _decorateMapComponent.USES_DEFAULT_IMPLEMENTATION
      }
    }
  });

  exports.default = _default;
},460,[366,1,21,22,34,37,40,48,65,51,5,452]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedWithChildren = Object.getPrototypeOf(_reactNative.Animated.ValueXY);
  var _uniqueId = 1;

  var AnimatedMapRegion = function (_AnimatedWithChildren) {
    (0, _inherits2.default)(AnimatedMapRegion, _AnimatedWithChildren);

    function AnimatedMapRegion(valueIn) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedMapRegion);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedMapRegion).call(this));
      var value = valueIn || {
        latitude: 0,
        longitude: 0,
        latitudeDelta: 0,
        longitudeDelta: 0
      };
      _this.latitude = value.latitude instanceof _reactNative.Animated.Value ? value.latitude : new _reactNative.Animated.Value(value.latitude);
      _this.longitude = value.longitude instanceof _reactNative.Animated.Value ? value.longitude : new _reactNative.Animated.Value(value.longitude);
      _this.latitudeDelta = value.latitudeDelta instanceof _reactNative.Animated.Value ? value.latitudeDelta : new _reactNative.Animated.Value(value.latitudeDelta);
      _this.longitudeDelta = value.longitudeDelta instanceof _reactNative.Animated.Value ? value.longitudeDelta : new _reactNative.Animated.Value(value.longitudeDelta);
      _this._listeners = {};
      return _this;
    }

    (0, _createClass2.default)(AnimatedMapRegion, [{
      key: "setValue",
      value: function setValue(value) {
        this.latitude._value = value.latitude;
        this.longitude._value = value.longitude;
        this.latitudeDelta._value = value.latitudeDelta;
        this.longitudeDelta._value = value.longitudeDelta;
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.latitude.setOffset(offset.latitude);
        this.longitude.setOffset(offset.longitude);
        this.latitudeDelta.setOffset(offset.latitudeDelta);
        this.longitudeDelta.setOffset(offset.longitudeDelta);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.latitude.flattenOffset();
        this.longitude.flattenOffset();
        this.latitudeDelta.flattenOffset();
        this.longitudeDelta.flattenOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          latitude: this.latitude.__getValue(),
          longitude: this.longitude.__getValue(),
          latitudeDelta: this.latitudeDelta.__getValue(),
          longitudeDelta: this.longitudeDelta.__getValue()
        };
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this.latitude.__addChild(this);

        this.longitude.__addChild(this);

        this.latitudeDelta.__addChild(this);

        this.longitudeDelta.__addChild(this);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this.latitude.__removeChild(this);

        this.longitude.__removeChild(this);

        this.latitudeDelta.__removeChild(this);

        this.longitudeDelta.__removeChild(this);
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.latitude.stopAnimation();
        this.longitude.stopAnimation();
        this.latitudeDelta.stopAnimation();
        this.longitudeDelta.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var _this2 = this;

        var id = String(_uniqueId++);

        var jointCallback = function jointCallback() {
          callback(_this2.__getValue());
        };

        this._listeners[id] = {
          latitude: this.latitude.addListener(jointCallback),
          longitude: this.longitude.addListener(jointCallback),
          latitudeDelta: this.latitudeDelta.addListener(jointCallback),
          longitudeDelta: this.longitudeDelta.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.latitude.removeListener(this._listeners[id].latitude);
        this.longitude.removeListener(this._listeners[id].longitude);
        this.latitudeDelta.removeListener(this._listeners[id].latitudeDelta);
        this.longitudeDelta.removeListener(this._listeners[id].longitudeDelta);
        delete this._listeners[id];
      }
    }, {
      key: "spring",
      value: function spring(config) {
        var animations = [];
        config.hasOwnProperty('latitude') && animations.push(_reactNative.Animated.spring(this.latitude, (0, _objectSpread2.default)({}, config, {
          toValue: config.latitude
        })));
        config.hasOwnProperty('longitude') && animations.push(_reactNative.Animated.spring(this.longitude, (0, _objectSpread2.default)({}, config, {
          toValue: config.longitude
        })));
        config.hasOwnProperty('latitudeDelta') && animations.push(_reactNative.Animated.spring(this.latitudeDelta, (0, _objectSpread2.default)({}, config, {
          toValue: config.latitudeDelta
        })));
        config.hasOwnProperty('longitudeDelta') && animations.push(_reactNative.Animated.spring(this.longitudeDelta, (0, _objectSpread2.default)({}, config, {
          toValue: config.longitudeDelta
        })));
        return _reactNative.Animated.parallel(animations);
      }
    }, {
      key: "timing",
      value: function timing(config) {
        var animations = [];
        config.hasOwnProperty('latitude') && animations.push(_reactNative.Animated.timing(this.latitude, (0, _objectSpread2.default)({}, config, {
          toValue: config.latitude
        })));
        config.hasOwnProperty('longitude') && animations.push(_reactNative.Animated.timing(this.longitude, (0, _objectSpread2.default)({}, config, {
          toValue: config.longitude
        })));
        config.hasOwnProperty('latitudeDelta') && animations.push(_reactNative.Animated.timing(this.latitudeDelta, (0, _objectSpread2.default)({}, config, {
          toValue: config.latitudeDelta
        })));
        config.hasOwnProperty('longitudeDelta') && animations.push(_reactNative.Animated.timing(this.longitudeDelta, (0, _objectSpread2.default)({}, config, {
          toValue: config.longitudeDelta
        })));
        return _reactNative.Animated.parallel(animations);
      }
    }]);
    return AnimatedMapRegion;
  }(AnimatedWithChildren);

  exports.default = AnimatedMapRegion;
},461,[1,48,21,22,34,37,40,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getVersion = getVersion;
  exports.isAvailable = isAvailable;
  exports.getUnavailabilityReason = getUnavailabilityReason;
  exports.onFrameDidUpdate = onFrameDidUpdate;
  exports.onDidFailWithError = onDidFailWithError;
  exports.onAnchorsDidUpdate = onAnchorsDidUpdate;
  exports.onCameraDidChangeTrackingState = onCameraDidChangeTrackingState;
  exports.onSessionWasInterrupted = onSessionWasInterrupted;
  exports.onSessionInterruptionEnded = onSessionInterruptionEnded;
  exports.removeAllListeners = removeAllListeners;
  exports.performHitTest = performHitTest;
  exports.setDetectionImagesAsync = setDetectionImagesAsync;
  exports.getCurrentFrame = getCurrentFrame;
  exports.getARMatrices = getARMatrices;
  exports.stopAsync = stopAsync;
  exports.startAsync = startAsync;
  exports.reset = reset;
  exports.resume = resume;
  exports.pause = pause;
  exports.setConfigurationAsync = setConfigurationAsync;
  exports.getProvidesAudioData = getProvidesAudioData;
  exports.setProvidesAudioData = setProvidesAudioData;
  exports.setPlaneDetection = setPlaneDetection;
  exports.getPlaneDetection = getPlaneDetection;
  exports.getCameraTexture = getCameraTexture;
  exports.setWorldOriginAsync = setWorldOriginAsync;
  exports.setLightEstimationEnabled = setLightEstimationEnabled;
  exports.getLightEstimationEnabled = getLightEstimationEnabled;
  exports.setAutoFocusEnabled = setAutoFocusEnabled;
  exports.getAutoFocusEnabled = getAutoFocusEnabled;
  exports.setWorldAlignment = setWorldAlignment;
  exports.getWorldAlignment = getWorldAlignment;
  exports.isConfigurationAvailable = isConfigurationAvailable;
  exports.getSupportedVideoFormats = getSupportedVideoFormats;
  exports.isFrontCameraAvailable = isFrontCameraAvailable;
  exports.isRearCameraAvailable = isRearCameraAvailable;
  exports.TrackingStateReason = exports.TrackingState = exports.FrameAttribute = exports.AnchorEventType = exports.AnchorType = exports.EventType = exports.WorldAlignment = exports.HitTestResultTypes = exports.PlaneDetection = exports.FaceAnchorProp = exports.BlendShape = exports.DepthDataAccuracy = exports.DepthDataQuality = exports.TrackingConfiguration = undefined;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var ExponentAR = _reactNative.NativeModules.ExponentAR || {};
  var emitter = new _reactNative.NativeEventEmitter(ExponentAR);
  var TrackingConfiguration;
  exports.TrackingConfiguration = TrackingConfiguration;

  (function (TrackingConfiguration) {
    TrackingConfiguration["World"] = "ARWorldTrackingConfiguration";
    TrackingConfiguration["Orientation"] = "AROrientationTrackingConfiguration";
    TrackingConfiguration["Face"] = "ARFaceTrackingConfiguration";
  })(TrackingConfiguration || (exports.TrackingConfiguration = TrackingConfiguration = {}));

  var DepthDataQuality;
  exports.DepthDataQuality = DepthDataQuality;

  (function (DepthDataQuality) {
    DepthDataQuality["Low"] = "AVDepthDataQualityLow";
    DepthDataQuality["High"] = "AVDepthDataQualityHigh";
  })(DepthDataQuality || (exports.DepthDataQuality = DepthDataQuality = {}));

  var DepthDataAccuracy;
  exports.DepthDataAccuracy = DepthDataAccuracy;

  (function (DepthDataAccuracy) {
    DepthDataAccuracy["Absolute"] = "AVDepthDataAccuracyAbsolute";
    DepthDataAccuracy["Relative"] = "AVDepthDataAccuracyRelative";
  })(DepthDataAccuracy || (exports.DepthDataAccuracy = DepthDataAccuracy = {}));

  var BlendShape;
  exports.BlendShape = BlendShape;

  (function (BlendShape) {
    BlendShape["BrowDownL"] = "browDown_L";
    BlendShape["BrowDownR"] = "browDown_R";
    BlendShape["BrowInnerUp"] = "browInnerUp";
    BlendShape["BrowOuterUpL"] = "browOuterUp_L";
    BlendShape["BrowOuterUpR"] = "browOuterUp_R";
    BlendShape["CheekPuff"] = "cheekPuff";
    BlendShape["CheekSquintL"] = "cheekSquint_L";
    BlendShape["CheekSquintR"] = "cheekSquint_R";
    BlendShape["EyeBlinkL"] = "eyeBlink_L";
    BlendShape["EyeBlinkR"] = "eyeBlink_R";
    BlendShape["EyeLookDownL"] = "eyeLookDown_L";
    BlendShape["EyeLookDownR"] = "eyeLookDown_R";
    BlendShape["EyeLookInL"] = "eyeLookIn_L";
    BlendShape["EyeLookInR"] = "eyeLookIn_R";
    BlendShape["EyeLookOutL"] = "eyeLookOut_L";
    BlendShape["EyeLookOutR"] = "eyeLookOut_R";
    BlendShape["EyeLookUpL"] = "eyeLookUp_L";
    BlendShape["EyeLookUpR"] = "eyeLookUp_R";
    BlendShape["EyeSquintL"] = "eyeSquint_L";
    BlendShape["EyeSquintR"] = "eyeSquint_R";
    BlendShape["EyeWideL"] = "eyeWide_L";
    BlendShape["EyeWideR"] = "eyeWide_R";
    BlendShape["JawForward"] = "jawForward";
    BlendShape["JawLeft"] = "jawLeft";
    BlendShape["JawOpen"] = "jawOpen";
    BlendShape["JawRight"] = "jawRight";
    BlendShape["MouthClose"] = "mouthClose";
    BlendShape["MouthDimpleL"] = "mouthDimple_L";
    BlendShape["MouthDimpleR"] = "mouthDimple_R";
    BlendShape["MouthFrownL"] = "mouthFrown_L";
    BlendShape["MouthFrownR"] = "mouthFrown_R";
    BlendShape["MouthFunnel"] = "mouthFunnel";
    BlendShape["MouthLeft"] = "mouthLeft";
    BlendShape["MouthLowerDownL"] = "mouthLowerDown_L";
    BlendShape["MouthLowerDownR"] = "mouthLowerDown_R";
    BlendShape["MouthPressL"] = "mouthPress_L";
    BlendShape["MouthPressR"] = "mouthPress_R";
    BlendShape["MouthPucker"] = "mouthPucker";
    BlendShape["MouthRight"] = "mouthRight";
    BlendShape["MouthRollLower"] = "mouthRollLower";
    BlendShape["MouthRollUpper"] = "mouthRollUpper";
    BlendShape["MouthShrugLower"] = "mouthShrugLower";
    BlendShape["MouthShrugUpper"] = "mouthShrugUpper";
    BlendShape["MouthSmileL"] = "mouthSmile_L";
    BlendShape["MouthSmileR"] = "mouthSmile_R";
    BlendShape["MouthStretchL"] = "mouthStretch_L";
    BlendShape["MouthStretchR"] = "mouthStretch_R";
    BlendShape["MouthUpperUpL"] = "mouthUpperUp_L";
    BlendShape["MouthUpperUpR"] = "mouthUpperUp_R";
    BlendShape["NoseSneerL"] = "noseSneer_L";
    BlendShape["NoseSneerR"] = "noseSneer_R";
  })(BlendShape || (exports.BlendShape = BlendShape = {}));

  var FaceAnchorProp;
  exports.FaceAnchorProp = FaceAnchorProp;

  (function (FaceAnchorProp) {
    FaceAnchorProp["Geometry"] = "geometry";
    FaceAnchorProp["BlendShapes"] = "blendShapes";
  })(FaceAnchorProp || (exports.FaceAnchorProp = FaceAnchorProp = {}));

  var PlaneDetection;
  exports.PlaneDetection = PlaneDetection;

  (function (PlaneDetection) {
    PlaneDetection["None"] = "none";
    PlaneDetection["Horizontal"] = "horizontal";
    PlaneDetection["Vertical"] = "vertical";
  })(PlaneDetection || (exports.PlaneDetection = PlaneDetection = {}));

  var HitTestResultTypes;
  exports.HitTestResultTypes = HitTestResultTypes;

  (function (HitTestResultTypes) {
    HitTestResultTypes["FeaturePoint"] = "featurePoint";
    HitTestResultTypes["HorizontalPlane"] = "horizontalPlane";
    HitTestResultTypes["VerticalPlane"] = "verticalPlane";
    HitTestResultTypes["ExistingPlane"] = "existingPlane";
    HitTestResultTypes["ExistingPlaneUsingExtent"] = "existingPlaneUsingExtent";
    HitTestResultTypes["ExistingPlaneUsingGeometry"] = "existingPlaneUsingGeometry";
  })(HitTestResultTypes || (exports.HitTestResultTypes = HitTestResultTypes = {}));

  var WorldAlignment;
  exports.WorldAlignment = WorldAlignment;

  (function (WorldAlignment) {
    WorldAlignment["Gravity"] = "gravity";
    WorldAlignment["GravityAndHeading"] = "gravityAndHeading";
    WorldAlignment["AlignmentCamera"] = "alignmentCamera";
  })(WorldAlignment || (exports.WorldAlignment = WorldAlignment = {}));

  var EventType;
  exports.EventType = EventType;

  (function (EventType) {
    EventType[EventType["FrameDidUpdate"] = ExponentAR.frameDidUpdate] = "FrameDidUpdate";
    EventType[EventType["DidFailWithError"] = ExponentAR.didFailWithError] = "DidFailWithError";
    EventType[EventType["AnchorsDidUpdate"] = ExponentAR.anchorsDidUpdate] = "AnchorsDidUpdate";
    EventType[EventType["CameraDidChangeTrackingState"] = ExponentAR.cameraDidChangeTrackingState] = "CameraDidChangeTrackingState";
    EventType[EventType["SessionWasInterrupted"] = ExponentAR.sessionWasInterrupted] = "SessionWasInterrupted";
    EventType[EventType["SessionInterruptionEnded"] = ExponentAR.sessionInterruptionEnded] = "SessionInterruptionEnded";
  })(EventType || (exports.EventType = EventType = {}));

  var AnchorType;
  exports.AnchorType = AnchorType;

  (function (AnchorType) {
    AnchorType["Face"] = "ARFaceAnchor";
    AnchorType["Image"] = "ARImageAnchor";
    AnchorType["Plane"] = "ARPlaneAnchor";
    AnchorType["Anchor"] = "ARAnchor";
  })(AnchorType || (exports.AnchorType = AnchorType = {}));

  var AnchorEventType;
  exports.AnchorEventType = AnchorEventType;

  (function (AnchorEventType) {
    AnchorEventType["Add"] = "add";
    AnchorEventType["Update"] = "update";
    AnchorEventType["Remove"] = "remove";
  })(AnchorEventType || (exports.AnchorEventType = AnchorEventType = {}));

  var FrameAttribute;
  exports.FrameAttribute = FrameAttribute;

  (function (FrameAttribute) {
    FrameAttribute["Anchors"] = "anchors";
    FrameAttribute["RawFeaturePoints"] = "rawFeaturePoints";
    FrameAttribute["LightEstimation"] = "lightEstimation";
    FrameAttribute["CapturedDepthData"] = "capturedDepthData";
  })(FrameAttribute || (exports.FrameAttribute = FrameAttribute = {}));

  var TrackingState;
  exports.TrackingState = TrackingState;

  (function (TrackingState) {
    TrackingState["NotAvailable"] = "ARTrackingStateNotAvailable";
    TrackingState["Limited"] = "ARTrackingStateLimited";
    TrackingState["Normal"] = "ARTrackingStateNormal";
  })(TrackingState || (exports.TrackingState = TrackingState = {}));

  var TrackingStateReason;
  exports.TrackingStateReason = TrackingStateReason;

  (function (TrackingStateReason) {
    TrackingStateReason["None"] = "ARTrackingStateReasonNone";
    TrackingStateReason["Initializing"] = "ARTrackingStateReasonInitializing";
    TrackingStateReason["ExcessiveMotion"] = "ARTrackingStateReasonExcessiveMotion";
    TrackingStateReason["InsufficientFeatures"] = "ARTrackingStateReasonInsufficientFeatures";
    TrackingStateReason["Relocalizing"] = "ARTrackingStateReasonRelocalizing";
  })(TrackingStateReason || (exports.TrackingStateReason = TrackingStateReason = {}));

  function getVersion() {
    return ExponentAR.ARKitVersion;
  }

  var AvailabilityErrorMessages = {
    Simulator: "Cannot run EXGL in a simulator",
    ANineChip: "ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a",
    ARKitOnlyOnIOS: "ARKit can only run on an iOS device! This is a"
  };

  function isAvailable() {
    if (!_expoConstants.default.isDevice || _reactNative.Platform.isTVOS || _reactNative.Platform.OS !== 'ios' || _expoConstants.default.deviceYearClass < 2015 || !ExponentAR.isSupported || !ExponentAR.startAsync) {
        return false;
      }

    return true;
  }

  function getUnavailabilityReason() {
    if (!_expoConstants.default.isDevice) {
      return AvailabilityErrorMessages.Simulator;
    } else if (_reactNative.Platform.OS !== 'ios') {
      return AvailabilityErrorMessages.ARKitOnlyOnIOS + " " + _reactNative.Platform.OS + " device";
    } else if (_expoConstants.default.deviceYearClass < 2015) {
      return AvailabilityErrorMessages.ANineChip + " " + _expoConstants.default.deviceYearClass + " device";
    }

    return 'Unknown Reason';
  }

  function onFrameDidUpdate(listener) {
    return _addListener(EventType.FrameDidUpdate, listener);
  }

  function onDidFailWithError(listener) {
    return _addListener(EventType.DidFailWithError, listener);
  }

  function onAnchorsDidUpdate(listener) {
    return _addListener(EventType.AnchorsDidUpdate, listener);
  }

  function onCameraDidChangeTrackingState(listener) {
    return _addListener(EventType.CameraDidChangeTrackingState, listener);
  }

  function onSessionWasInterrupted(listener) {
    return _addListener(EventType.SessionWasInterrupted, listener);
  }

  function onSessionInterruptionEnded(listener) {
    return _addListener(EventType.SessionInterruptionEnded, listener);
  }

  function _addListener(eventType, event) {
    return emitter.addListener(eventType, event);
  }

  function removeAllListeners(eventType) {
    emitter.removeAllListeners(eventType);
  }

  function performHitTest(point, types) {
    if (ExponentAR.performHitTest) {
      return ExponentAR.performHitTest(point, types);
    }

    throw new Error("AR hit testing is not supported on this device");
  }

  function setDetectionImagesAsync(images) {
    return _regenerator.default.async(function setDetectionImagesAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!ExponentAR.setDetectionImagesAsync) {
              _context.next = 3;
              break;
            }

            _context.next = 3;
            return _regenerator.default.awrap(ExponentAR.setDetectionImagesAsync(images));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function getCurrentFrame(attributes) {
    if (ExponentAR.getCurrentFrame) {
      return ExponentAR.getCurrentFrame(attributes);
    }

    throw new Error("AR is not supported on this device");
  }

  function getARMatrices(near, far) {
    if (ExponentAR.getARMatrices) {
      return ExponentAR.getARMatrices(near, far);
    }

    throw new Error("AR is not supported on this device");
  }

  function stopAsync() {
    return _regenerator.default.async(function stopAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!ExponentAR.stopAsync) {
              _context2.next = 3;
              break;
            }

            _context2.next = 3;
            return _regenerator.default.awrap(ExponentAR.stopAsync());

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function startAsync(node, configuration) {
    var handle;
    return _regenerator.default.async(function startAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            handle = typeof node === 'number' ? node : _getNodeHandle(node);

            if (!ExponentAR.startAsync) {
              _context3.next = 5;
              break;
            }

            _context3.next = 4;
            return _regenerator.default.awrap(ExponentAR.startAsync(handle, configuration));

          case 4:
            return _context3.abrupt("return", _context3.sent);

          case 5:
            throw new Error("AR is not supported on this device");

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function _getNodeHandle(component) {
    var handle = (0, _reactNative.findNodeHandle)(component);

    if (handle === null) {
      throw new Error("Could not find the React node handle for the AR component: " + component);
    }

    return handle;
  }

  function reset() {
    if (ExponentAR.reset) {
      ExponentAR.reset();
    }
  }

  function resume() {
    if (ExponentAR.resume) {
      ExponentAR.resume();
    }
  }

  function pause() {
    if (ExponentAR.pause) {
      ExponentAR.pause();
    }
  }

  function setConfigurationAsync(configuration) {
    return _regenerator.default.async(function setConfigurationAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!ExponentAR.setConfigurationAsync) {
              _context4.next = 3;
              break;
            }

            _context4.next = 3;
            return _regenerator.default.awrap(ExponentAR.setConfigurationAsync(configuration));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function getProvidesAudioData() {
    if (ExponentAR.getProvidesAudioData) {
      return ExponentAR.getProvidesAudioData();
    }

    return false;
  }

  function setProvidesAudioData(providesAudioData) {
    if (ExponentAR.setProvidesAudioData) {
      ExponentAR.setProvidesAudioData(providesAudioData);
    }
  }

  function setPlaneDetection(planeDetection) {
    if (ExponentAR.setPlaneDetection) {
      ExponentAR.setPlaneDetection(planeDetection);
    }
  }

  function getPlaneDetection() {
    if (ExponentAR.getPlaneDetection) {
      return ExponentAR.getPlaneDetection();
    }

    throw new Error("AR plane detection is not supported on this device");
  }

  function getCameraTexture() {
    if (ExponentAR.getCameraTexture) {
      return ExponentAR.getCameraTexture();
    }

    throw new Error("AR camera textures are not supported on this device");
  }

  function setWorldOriginAsync(matrix_float4x4) {
    return _regenerator.default.async(function setWorldOriginAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!ExponentAR.setWorldOriginAsync) {
              _context5.next = 3;
              break;
            }

            _context5.next = 3;
            return _regenerator.default.awrap(ExponentAR.setWorldOriginAsync(matrix_float4x4));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  function setLightEstimationEnabled(isLightEstimationEnabled) {
    if (ExponentAR.setLightEstimationEnabled) {
      ExponentAR.setLightEstimationEnabled(isLightEstimationEnabled);
    }
  }

  function getLightEstimationEnabled() {
    if (ExponentAR.getLightEstimationEnabled) {
      return ExponentAR.getLightEstimationEnabled();
    }

    return false;
  }

  function setAutoFocusEnabled(isAutoFocusEnabled) {
    if (ExponentAR.setAutoFocusEnabled) {
      ExponentAR.setAutoFocusEnabled(isAutoFocusEnabled);
    }
  }

  function getAutoFocusEnabled() {
    if (ExponentAR.getAutoFocusEnabled) {
      return ExponentAR.getAutoFocusEnabled();
    }

    return false;
  }

  function setWorldAlignment(worldAlignment) {
    if (ExponentAR.setWorldAlignment) {
      ExponentAR.setWorldAlignment(worldAlignment);
    }
  }

  function getWorldAlignment() {
    if (ExponentAR.getWorldAlignment) {
      return ExponentAR.getWorldAlignment();
    }

    throw new Error("AR world alignment is not supported on this device");
  }

  function isConfigurationAvailable(configuration) {
    var _Dimensions$get = _reactNative.Dimensions.get('window'),
        width = _Dimensions$get.width,
        height = _Dimensions$get.height;

    var isX = (width === 812 || height === 812) && !_reactNative.Platform.isTVOS && !_reactNative.Platform.isPad;

    if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {
      return true;
    }

    return !!ExponentAR[configuration];
  }

  function getSupportedVideoFormats(configuration) {
    var _videoFormats;

    var videoFormats = (_videoFormats = {}, (0, _defineProperty2.default)(_videoFormats, TrackingConfiguration.World, 'WorldTrackingVideoFormats'), (0, _defineProperty2.default)(_videoFormats, TrackingConfiguration.Orientation, 'OrientationTrackingVideoFormats'), (0, _defineProperty2.default)(_videoFormats, TrackingConfiguration.Face, 'FaceTrackingVideoFormats'), _videoFormats);
    var videoFormat = videoFormats[configuration];
    return ExponentAR[videoFormat] || [];
  }

  function isFrontCameraAvailable() {
    return isConfigurationAvailable(TrackingConfiguration.Face);
  }

  function isRearCameraAvailable() {
    return isConfigurationAvailable(TrackingConfiguration.World);
  }
},462,[1,49,130,329,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoErrors = _$$_REQUIRE(_dependencyMap[1]);

  var _ExponentAmplitude = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = {
    initialize: function initialize(apiKey) {
      if (!_ExponentAmplitude.default.initialize) {
        throw new _expoErrors.UnavailabilityError('Amplitude', 'initialize');
      }

      return _ExponentAmplitude.default.initialize(apiKey);
    },
    setUserId: function setUserId(userId) {
      if (!_ExponentAmplitude.default.setUserId) {
        throw new _expoErrors.UnavailabilityError('Amplitude', 'setUserId');
      }

      return _ExponentAmplitude.default.setUserId(userId);
    },
    setUserProperties: function setUserProperties(userProperties) {
      if (!_ExponentAmplitude.default.setUserProperties) {
        throw new _expoErrors.UnavailabilityError('Amplitude', 'setUserProperties');
      }

      return _ExponentAmplitude.default.setUserProperties(userProperties);
    },
    clearUserProperties: function clearUserProperties() {
      if (!_ExponentAmplitude.default.clearUserProperties) {
        throw new _expoErrors.UnavailabilityError('Amplitude', 'clearUserProperties');
      }

      return _ExponentAmplitude.default.clearUserProperties();
    },
    logEvent: function logEvent(eventName) {
      if (!_ExponentAmplitude.default.logEvent) {
        throw new _expoErrors.UnavailabilityError('Amplitude', 'logEvent');
      }

      return _ExponentAmplitude.default.logEvent(eventName);
    },
    logEventWithProperties: function logEventWithProperties(eventName, properties) {
      if (!_ExponentAmplitude.default.logEventWithProperties) {
        throw new _expoErrors.UnavailabilityError('Amplitude', 'logEventWithProperties');
      }

      return _ExponentAmplitude.default.logEventWithProperties(eventName, properties);
    },
    setGroup: function setGroup(groupType, groupNames) {
      if (!_ExponentAmplitude.default.setGroup) {
        throw new _expoErrors.UnavailabilityError('Amplitude', 'setGroup');
      }

      return _ExponentAmplitude.default.setGroup(groupType, groupNames);
    }
  };
  exports.default = _default;
},463,[1,368,464]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentAmplitude;
  exports.default = _default;
},464,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _qs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _Linking = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _WebBrowser = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var BASE_URL = "https://auth.expo.io";
  var _authLock = false;

  function startAsync(options) {
    var returnUrl, authUrl, startUrl, result, _parseUrl, params, errorCode;

    return _regenerator.default.async(function startAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            returnUrl = options.returnUrl || getDefaultReturnUrl();
            authUrl = options.authUrl;
            startUrl = getStartUrl(authUrl, returnUrl);

            if (authUrl) {
              _context.next = 5;
              break;
            }

            throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');

          case 5:
            if (!_authLock) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", {
              type: 'locked'
            });

          case 8:
            _authLock = true;
            _context.prev = 9;
            _context.next = 12;
            return _regenerator.default.awrap(_openWebBrowserAsync(startUrl, returnUrl));

          case 12:
            result = _context.sent;

          case 13:
            _context.prev = 13;
            _authLock = false;
            return _context.finish(13);

          case 16:
            if (result) {
              _context.next = 18;
              break;
            }

            throw new Error('Unexpected missing AuthSession result');

          case 18:
            if (result.url) {
              _context.next = 24;
              break;
            }

            if (!result.type) {
              _context.next = 23;
              break;
            }

            return _context.abrupt("return", result);

          case 23:
            throw new Error('Unexpected AuthSession result with missing type');

          case 24:
            _parseUrl = parseUrl(result.url), params = _parseUrl.params, errorCode = _parseUrl.errorCode;
            return _context.abrupt("return", {
              type: errorCode ? 'error' : 'success',
              params: params,
              errorCode: errorCode,
              url: result.url
            });

          case 26:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[9,, 13, 16]]);
  }

  function dismiss() {
    _WebBrowser.default.dismissAuthSession();
  }

  function _openWebBrowserAsync(startUrl, returnUrl) {
    var result;
    return _regenerator.default.async(function _openWebBrowserAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(_WebBrowser.default.openAuthSessionAsync(startUrl, returnUrl));

          case 2:
            result = _context2.sent;

            if (!(result.type === 'cancel' || result.type === 'dismiss')) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return", {
              type: result.type
            });

          case 5:
            return _context2.abrupt("return", result);

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function getStartUrl(authUrl, returnUrl) {
    var queryString = _qs.default.stringify({
      authUrl: authUrl,
      returnUrl: returnUrl
    });

    return getRedirectUrl() + "/start?" + queryString;
  }

  function getRedirectUrl() {
    var redirectUrl = "https://auth.expo.io/" + _expoConstants.default.manifest.id;
    return redirectUrl;
  }

  function getDefaultReturnUrl() {
    return _Linking.default.makeUrl('expo-auth-session');
  }

  function parseUrl(url) {
    var parts = url.split('#');
    var hash = parts[1];
    var partsWithoutHash = parts[0].split('?');
    var queryString = partsWithoutHash[partsWithoutHash.length - 1];

    var parsedSearch = _qs.default.parse(queryString);

    var errorCode = parsedSearch.errorCode;
    delete parsedSearch.errorCode;
    var parsedHash = {};

    if (parts[1]) {
      parsedHash = _qs.default.parse(hash);
    }

    var params = (0, _objectSpread2.default)({}, parsedSearch, parsedHash);
    return {
      errorCode: errorCode,
      params: params
    };
  }

  var _default = {
    dismiss: dismiss,
    getRedirectUrl: getRedirectUrl,
    getStartUrl: getStartUrl,
    getDefaultReturnUrl: getDefaultReturnUrl,

    get getRedirectUri() {
      console.warn('Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)');
      return getRedirectUrl;
    },

    startAsync: startAsync
  };
  exports.default = _default;
},465,[1,48,130,329,466,471,472]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var stringify = _$$_REQUIRE(_dependencyMap[0]);

  var parse = _$$_REQUIRE(_dependencyMap[1]);

  var formats = _$$_REQUIRE(_dependencyMap[2]);

  module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
  };
},466,[467,470,469]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var formats = _$$_REQUIRE(_dependencyMap[1]);

  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + '[]';
    },
    indices: function indices(prefix, key) {
      return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray = Array.isArray;
  var push = Array.prototype.push;

  var pushToArray = function pushToArray(arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
  };

  var toISO = Date.prototype.toISOString;
  var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };

  var stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset) {
    var obj = object;

    if (typeof filter === 'function') {
      obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    }

    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset) : prefix;
      }

      obj = '';
    }

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset);
        return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset))];
      }

      return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
      return values;
    }

    var objKeys;

    if (Array.isArray(filter)) {
      objKeys = filter;
    } else {
      var keys = Object.keys(obj);
      objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var i = 0; i < objKeys.length; ++i) {
      var key = objKeys[i];

      if (skipNulls && obj[key] === null) {
        continue;
      }

      if (Array.isArray(obj)) {
        pushToArray(values, stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
      } else {
        pushToArray(values, stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
      }
    }

    return values;
  };

  module.exports = function (object, opts) {
    var obj = object;
    var options = opts ? utils.assign({}, opts) : {};

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
      throw new TypeError('Encoder has to be a function.');
    }

    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? defaults.allowDots : !!options.allowDots;
    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;
    var charset = options.charset || defaults.charset;

    if (typeof options.charset !== 'undefined' && options.charset !== 'utf-8' && options.charset !== 'iso-8859-1') {
      throw new Error('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    if (typeof options.format === 'undefined') {
      options.format = formats['default'];
    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {
      throw new TypeError('Unknown format option provided.');
    }

    var formatter = formats.formatters[options.format];
    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
      filter = options.filter;
      obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
      filter = options.filter;
      objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
      return '';
    }

    var arrayFormat;

    if (options.arrayFormat in arrayPrefixGenerators) {
      arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
      arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
      arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
      objKeys = Object.keys(obj);
    }

    if (sort) {
      objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
      var key = objKeys[i];

      if (skipNulls && obj[key] === null) {
        continue;
      }

      pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode ? encoder : null, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
    }

    var joined = keys.join(delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    if (options.charsetSentinel) {
      if (charset === 'iso-8859-1') {
        prefix += 'utf8=%26%2310003%3B&';
      } else {
        prefix += 'utf8=%E2%9C%93&';
      }
    }

    return joined.length > 0 ? prefix + joined : '';
  };
},467,[468,469]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var has = Object.prototype.hasOwnProperty;

  var hexTable = function () {
    var array = [];

    for (var i = 0; i < 256; ++i) {
      array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
  }();

  var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
      var item = queue.pop();
      var obj = item.obj[item.prop];

      if (Array.isArray(obj)) {
        var compacted = [];

        for (var j = 0; j < obj.length; ++j) {
          if (typeof obj[j] !== 'undefined') {
            compacted.push(obj[j]);
          }
        }

        item.obj[item.prop] = compacted;
      }
    }
  };

  var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};

    for (var i = 0; i < source.length; ++i) {
      if (typeof source[i] !== 'undefined') {
        obj[i] = source[i];
      }
    }

    return obj;
  };

  var merge = function merge(target, source, options) {
    if (!source) {
      return target;
    }

    if (typeof source !== 'object') {
      if (Array.isArray(target)) {
        target.push(source);
      } else if (typeof target === 'object') {
        if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }

      return target;
    }

    if (typeof target !== 'object') {
      return [target].concat(source);
    }

    var mergeTarget = target;

    if (Array.isArray(target) && !Array.isArray(source)) {
      mergeTarget = arrayToObject(target, options);
    }

    if (Array.isArray(target) && Array.isArray(source)) {
      source.forEach(function (item, i) {
        if (has.call(target, i)) {
          if (target[i] && typeof target[i] === 'object') {
            target[i] = merge(target[i], item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i] = item;
        }
      });
      return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
      var value = source[key];

      if (has.call(acc, key)) {
        acc[key] = merge(acc[key], value, options);
      } else {
        acc[key] = value;
      }

      return acc;
    }, mergeTarget);
  };

  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };

  var decode = function decode(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');

    if (charset === 'iso-8859-1') {
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }

    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e) {
      return strWithoutPlus;
    }
  };

  var encode = function encode(str, defaultEncoder, charset) {
    if (str.length === 0) {
      return str;
    }

    var string = typeof str === 'string' ? str : String(str);

    if (charset === 'iso-8859-1') {
      return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
        return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
      });
    }

    var out = '';

    for (var i = 0; i < string.length; ++i) {
      var c = string.charCodeAt(i);

      if (c === 0x2D || c === 0x2E || c === 0x5F || c === 0x7E || c >= 0x30 && c <= 0x39 || c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A) {
          out += string.charAt(i);
          continue;
        }

      if (c < 0x80) {
        out = out + hexTable[c];
        continue;
      }

      if (c < 0x800) {
        out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
        continue;
      }

      if (c < 0xD800 || c >= 0xE000) {
        out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
        continue;
      }

      i += 1;
      c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
      out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
    }

    return out;
  };

  var compact = function compact(value) {
    var queue = [{
      obj: {
        o: value
      },
      prop: 'o'
    }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
      var item = queue[i];
      var obj = item.obj[item.prop];
      var keys = Object.keys(obj);

      for (var j = 0; j < keys.length; ++j) {
        var key = keys[j];
        var val = obj[key];

        if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
          queue.push({
            obj: obj,
            prop: key
          });
          refs.push(val);
        }
      }
    }

    compactQueue(queue);
    return value;
  };

  var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
  };

  var isBuffer = function isBuffer(obj) {
    if (obj === null || typeof obj === 'undefined') {
      return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };

  var combine = function combine(a, b) {
    return [].concat(a, b);
  };

  module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    merge: merge
  };
},468,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  module.exports = {
    'default': 'RFC3986',
    formatters: {
      RFC1738: function RFC1738(value) {
        return replace.call(value, percentTwenties, '+');
      },
      RFC3986: function RFC3986(value) {
        return value;
      }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
  };
},469,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var has = Object.prototype.hasOwnProperty;
  var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
  };

  var interpretNumericEntities = function interpretNumericEntities(str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };

  var isoSentinel = 'utf8=%26%2310003%3B';
  var charsetSentinel = 'utf8=%E2%9C%93';

  var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1;
    var i;
    var charset = options.charset;

    if (options.charsetSentinel) {
      for (i = 0; i < parts.length; ++i) {
        if (parts[i].indexOf('utf8=') === 0) {
          if (parts[i] === charsetSentinel) {
            charset = 'utf-8';
          } else if (parts[i] === isoSentinel) {
            charset = 'iso-8859-1';
          }

          skipIndex = i;
          i = parts.length;
        }
      }
    }

    for (i = 0; i < parts.length; ++i) {
      if (i === skipIndex) {
        continue;
      }

      var part = parts[i];
      var bracketEqualsPos = part.indexOf(']=');
      var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
      var key, val;

      if (pos === -1) {
        key = options.decoder(part, defaults.decoder, charset);
        val = options.strictNullHandling ? null : '';
      } else {
        key = options.decoder(part.slice(0, pos), defaults.decoder, charset);
        val = options.decoder(part.slice(pos + 1), defaults.decoder, charset);
      }

      if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
        val = interpretNumericEntities(val);
      }

      if (has.call(obj, key)) {
        obj[key] = utils.combine(obj[key], val);
      } else {
        obj[key] = val;
      }
    }

    return obj;
  };

  var parseObject = function parseObject(chain, val, options) {
    var leaf = val;

    for (var i = chain.length - 1; i >= 0; --i) {
      var obj;
      var root = chain[i];

      if (root === '[]' && options.parseArrays) {
        obj = [].concat(leaf);
      } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);

        if (!options.parseArrays && cleanRoot === '') {
          obj = {
            0: leaf
          };
        } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
          obj = [];
          obj[index] = leaf;
        } else {
          obj[cleanRoot] = leaf;
        }
      }

      leaf = obj;
    }

    return leaf;
  };

  var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
    if (!givenKey) {
      return;
    }

    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    var keys = [];

    if (parent) {
      if (!options.plainObjects && has.call(Object.prototype, parent)) {
        if (!options.allowPrototypes) {
          return;
        }
      }

      keys.push(parent);
    }

    var i = 0;

    while ((segment = child.exec(key)) !== null && i < options.depth) {
      i += 1;

      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }

      keys.push(segment[1]);
    }

    if (segment) {
      keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options);
  };

  module.exports = function (str, opts) {
    var options = opts ? utils.assign({}, opts) : {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
      throw new TypeError('Decoder has to be a function.');
    }

    options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'undefined' ? defaults.allowDots : !!options.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (typeof options.charset !== 'undefined' && options.charset !== 'utf-8' && options.charset !== 'iso-8859-1') {
      throw new Error('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    if (typeof options.charset === 'undefined') {
      options.charset = defaults.charset;
    }

    if (str === '' || str === null || typeof str === 'undefined') {
      return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    var keys = Object.keys(tempObj);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      var newObj = parseKeys(key, tempObj[key], options);
      obj = utils.merge(obj, newObj, options);
    }

    return utils.compact(obj);
  };
},470,[468]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _qs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var manifest = _expoConstants.default.manifest;
  var USES_CUSTOM_SCHEME = _expoConstants.default.appOwnership === 'standalone' && manifest.scheme;
  var HOST_URI = manifest.hostUri;

  if (!HOST_URI && !USES_CUSTOM_SCHEME) {
    HOST_URI = _removeScheme(_expoConstants.default.linkingUri).replace(/\/--($|\/.*$)/, '');
  }

  var IS_EXPO_HOSTED = HOST_URI && (/^(.*\.)?(expo\.io|exp\.host|exp\.direct|expo\.test)(:.*)?(\/.*)?$/.test(HOST_URI) || manifest.developer);

  function _removeScheme(url) {
    return url.replace(/^[a-zA-Z0-9+.-]+:\/\//, '');
  }

  function _removePort(url) {
    return url.replace(/(?=([a-zA-Z0-9+.-]+:\/\/)?[^/]):\d+/, '');
  }

  function _removeLeadingSlash(url) {
    return url.replace(/^\//, '');
  }

  function _removeTrailingSlash(url) {
    return url.replace(/\/$/, '');
  }

  function _removeTrailingSlashAndQueryString(url) {
    return url.replace(/\/?\?.*$/, '');
  }

  function makeUrl() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var scheme = 'exp';

    if (_expoConstants.default.appOwnership === 'standalone') {
      scheme = manifest.scheme || manifest.detach && manifest.detach.scheme;
    }

    if (!scheme) {
      throw new Error('Cannot make a deep link into a standalone app with no custom scheme defined');
    }

    var hostUri = HOST_URI || '';

    if (USES_CUSTOM_SCHEME && IS_EXPO_HOSTED) {
      hostUri = '';
    }

    if (path) {
      if (IS_EXPO_HOSTED && hostUri) {
        path = "/--/" + _removeLeadingSlash(path);
      }

      if (!path.startsWith('/') && hostUri) {
        path = "/" + path;
      } else if (path.startsWith('/') && !hostUri) {
        path = path.substr(1);
      }
    } else {
      path = '';
    }

    var queryString = '';
    var queryStringMatchResult = hostUri.match(/(.*)\?(.+)/);

    if (queryStringMatchResult) {
      hostUri = queryStringMatchResult[1];
      queryString = queryStringMatchResult[2];
      var paramsFromHostUri = {};

      try {
        var parsedParams = _qs.default.parse(queryString);

        if (typeof parsedParams === 'object') {
          paramsFromHostUri = parsedParams;
        }
      } catch (e) {}

      queryParams = (0, _objectSpread2.default)({}, queryParams, paramsFromHostUri);
    }

    queryString = _qs.default.stringify(queryParams);

    if (queryString) {
      queryString = "?" + queryString;
    }

    hostUri = _removeTrailingSlash(hostUri);
    return encodeURI(scheme + "://" + hostUri + path + queryString);
  }

  function parse(url) {
    if (!url) {
      throw new Error('parse cannot be called with a null value');
    }

    var decodedUrl = _removePort(decodeURI(url));

    var path;
    var queryParams = {};
    var queryStringMatchResult = decodedUrl.match(/(.*)\?(.+)/);

    if (queryStringMatchResult) {
      decodedUrl = queryStringMatchResult[1];
      queryParams = _qs.default.parse(queryStringMatchResult[2]);
    }

    var hostUri = HOST_URI || '';

    var hostUriStripped = _removePort(_removeTrailingSlashAndQueryString(hostUri));

    if (hostUriStripped && decodedUrl.indexOf(hostUriStripped) > -1) {
      path = decodedUrl.substr(decodedUrl.indexOf(hostUriStripped) + hostUriStripped.length);
    } else {
      path = _removeScheme(decodedUrl);
    }

    path = _removeLeadingSlash(path);

    if (IS_EXPO_HOSTED && !USES_CUSTOM_SCHEME && path.startsWith('--/')) {
      path = path.substr(3);
    } else if (path.indexOf('+') > -1) {
      path = path.substr(path.indexOf('+') + 1);
    }

    return {
      path: path,
      queryParams: queryParams
    };
  }

  function parseInitialURLAsync() {
    var initialUrl;
    return _regenerator.default.async(function parseInitialURLAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(_reactNative.Linking.getInitialURL());

          case 2:
            initialUrl = _context.sent;
            return _context.abrupt("return", parse(initialUrl));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  var newLinking = new _reactNative.Linking.constructor();
  newLinking.makeUrl = makeUrl;
  newLinking.parse = parse;
  newLinking.parseInitialURLAsync = parseInitialURLAsync;
  var _default = newLinking;
  exports.default = _default;
},471,[1,130,48,329,5,466]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _expoErrors = _$$_REQUIRE(_dependencyMap[3]);

  var _ExponentWebBrowser = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  function openBrowserAsync(url) {
    return _regenerator.default.async(function openBrowserAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (_ExponentWebBrowser.default.openBrowserAsync) {
              _context.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('WebBrowser', 'openBrowserAsync');

          case 2:
            return _context.abrupt("return", _ExponentWebBrowser.default.openBrowserAsync(url));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function dismissBrowser() {
    if (!_ExponentWebBrowser.default.dismissBrowser) {
      throw new _expoErrors.UnavailabilityError('WebBrowser', 'dismissBrowser');
    }

    _ExponentWebBrowser.default.dismissBrowser();
  }

  function openAuthSessionAsync(url, redirectUrl) {
    return _regenerator.default.async(function openAuthSessionAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!_authSessionIsNativelySupported()) {
              _context2.next = 6;
              break;
            }

            if (_ExponentWebBrowser.default.openAuthSessionAsync) {
              _context2.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('WebBrowser', 'openAuthSessionAsync');

          case 3:
            return _context2.abrupt("return", _ExponentWebBrowser.default.openAuthSessionAsync(url, redirectUrl));

          case 6:
            return _context2.abrupt("return", _openAuthSessionPolyfillAsync(url, redirectUrl));

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function dismissAuthSession() {
    if (_authSessionIsNativelySupported()) {
      if (!_ExponentWebBrowser.default.dismissAuthSession) {
        throw new _expoErrors.UnavailabilityError('WebBrowser', 'dismissAuthSession');
      }

      _ExponentWebBrowser.default.dismissAuthSession();
    } else {
      if (!_ExponentWebBrowser.default.dismissBrowser) {
        throw new _expoErrors.UnavailabilityError('WebBrowser', 'dismissAuthSession');
      }

      _ExponentWebBrowser.default.dismissBrowser();
    }
  }

  function _authSessionIsNativelySupported() {
    if (_reactNative.Platform.OS === 'android') {
      return false;
    }

    var versionNumber = parseInt(String(_reactNative.Platform.Version), 10);
    return versionNumber >= 11;
  }

  var _redirectHandler = null;

  function _openAuthSessionPolyfillAsync(startUrl, returnUrl) {
    return _regenerator.default.async(function _openAuthSessionPolyfillAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!_redirectHandler) {
              _context3.next = 2;
              break;
            }

            throw new Error("The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be");

          case 2:
            _context3.prev = 2;
            _context3.next = 5;
            return _regenerator.default.awrap(Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]));

          case 5:
            return _context3.abrupt("return", _context3.sent);

          case 6:
            _context3.prev = 6;
            dismissBrowser();

            if (_redirectHandler) {
              _context3.next = 10;
              break;
            }

            throw new Error("The WebBrowser auth session is in an invalid state with no redirect handler when one should be set");

          case 10:
            _reactNative.Linking.removeEventListener('url', _redirectHandler);

            _redirectHandler = null;
            return _context3.finish(6);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this, [[2,, 6, 13]]);
  }

  function _waitForRedirectAsync(returnUrl) {
    return new Promise(function (resolve) {
      _redirectHandler = function _redirectHandler(event) {
        if (event.url.startsWith(returnUrl)) {
          resolve({
            url: event.url,
            type: 'success'
          });
        }
      };

      _reactNative.Linking.addEventListener('url', _redirectHandler);
    });
  }

  var _default = {
    openBrowserAsync: openBrowserAsync,
    openAuthSessionAsync: openAuthSessionAsync,
    dismissBrowser: dismissBrowser,
    dismissAuthSession: dismissAuthSession
  };
  exports.default = _default;
},472,[1,130,5,368,473]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentWebBrowser;
  exports.default = _default;
},473,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getBrightnessAsync = getBrightnessAsync;
  exports.setBrightnessAsync = setBrightnessAsync;
  exports.getSystemBrightnessAsync = getSystemBrightnessAsync;
  exports.setSystemBrightnessAsync = setSystemBrightnessAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  function getBrightnessAsync() {
    return _regenerator.default.async(function getBrightnessAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(_reactNative.NativeModules.ExponentBrightness.getBrightnessAsync());

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function setBrightnessAsync(brightnessValue) {
    return _regenerator.default.async(function setBrightnessAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            brightnessValue = Math.max(0, Math.min(brightnessValue, 1));
            _context2.next = 3;
            return _regenerator.default.awrap(_reactNative.NativeModules.ExponentBrightness.setBrightnessAsync(brightnessValue));

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function getSystemBrightnessAsync() {
    return _regenerator.default.async(function getSystemBrightnessAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(_reactNative.Platform.OS !== 'android')) {
              _context3.next = 4;
              break;
            }

            _context3.next = 3;
            return _regenerator.default.awrap(getBrightnessAsync());

          case 3:
            return _context3.abrupt("return", _context3.sent);

          case 4:
            _context3.next = 6;
            return _regenerator.default.awrap(_reactNative.NativeModules.ExponentBrightness.getSystemBrightnessAsync());

          case 6:
            return _context3.abrupt("return", _context3.sent);

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function setSystemBrightnessAsync(brightnessValue) {
    return _regenerator.default.async(function setSystemBrightnessAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            brightnessValue = Math.max(0, Math.min(brightnessValue, 1));

            if (!(_reactNative.Platform.OS !== 'android')) {
              _context4.next = 7;
              break;
            }

            _context4.next = 4;
            return _regenerator.default.awrap(setBrightnessAsync(brightnessValue));

          case 4:
            return _context4.abrupt("return", _context4.sent);

          case 7:
            _context4.next = 9;
            return _regenerator.default.awrap(_reactNative.NativeModules.ExponentBrightness.setSystemBrightnessAsync(brightnessValue));

          case 9:
            return _context4.abrupt("return", _context4.sent);

          case 10:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }
},474,[1,130,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getCalendarsAsync = getCalendarsAsync;
  exports.createCalendarAsync = createCalendarAsync;
  exports.updateCalendarAsync = updateCalendarAsync;
  exports.deleteCalendarAsync = deleteCalendarAsync;
  exports.getEventsAsync = getEventsAsync;
  exports.getEventAsync = getEventAsync;
  exports.createEventAsync = createEventAsync;
  exports.updateEventAsync = updateEventAsync;
  exports.deleteEventAsync = deleteEventAsync;
  exports.getAttendeesForEventAsync = getAttendeesForEventAsync;
  exports.createAttendeeAsync = createAttendeeAsync;
  exports.updateAttendeeAsync = updateAttendeeAsync;
  exports.deleteAttendeeAsync = deleteAttendeeAsync;
  exports.getRemindersAsync = getRemindersAsync;
  exports.getReminderAsync = getReminderAsync;
  exports.createReminderAsync = createReminderAsync;
  exports.updateReminderAsync = updateReminderAsync;
  exports.deleteReminderAsync = deleteReminderAsync;
  exports.getSourcesAsync = getSourcesAsync;
  exports.getSourceAsync = getSourceAsync;
  exports.openEventInCalendar = openEventInCalendar;
  exports.DEFAULT = exports.ReminderStatus = exports.CalendarAccessLevel = exports.EventAccessLevel = exports.AlarmMethod = exports.AttendeeType = exports.AttendeeStatus = exports.AttendeeRole = exports.SourceType = exports.EventStatus = exports.CalendarType = exports.Availability = exports.Frequency = exports.EntityTypes = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  function getCalendarsAsync(entityType) {
    return _regenerator.default.async(function getCalendarsAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (entityType) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getCalendarsAsync(null));

          case 2:
            return _context.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getCalendarsAsync(entityType));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function createCalendarAsync() {
    var details,
        color,
        newDetails,
        _args2 = arguments;
    return _regenerator.default.async(function createCalendarAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            details = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
            color = details.color ? (0, _reactNative.processColor)(details.color) : undefined;
            newDetails = (0, _objectSpread2.default)({}, details, {
              id: undefined,
              color: color
            });
            return _context2.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveCalendarAsync(newDetails));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function updateCalendarAsync(id) {
    var details,
        color,
        newDetails,
        _args3 = arguments;
    return _regenerator.default.async(function updateCalendarAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            details = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};

            if (id) {
              _context3.next = 3;
              break;
            }

            throw new Error('updateCalendarAsync must be called with an id (string) of the target calendar');

          case 3:
            color = details.color ? (0, _reactNative.processColor)(details.color) : undefined;

            if (_reactNative.Platform.OS === 'android') {
              if (details.hasOwnProperty('source') || details.hasOwnProperty('color') || details.hasOwnProperty('allowsModifications') || details.hasOwnProperty('allowedAvailabilities') || details.hasOwnProperty('isPrimary') || details.hasOwnProperty('ownerAccount') || details.hasOwnProperty('timeZone') || details.hasOwnProperty('allowedReminders') || details.hasOwnProperty('allowedAttendeeTypes') || details.hasOwnProperty('accessLevel')) {
                console.warn('updateCalendarAsync was called with one or more read-only properties, which will not be updated');
              }
            } else {
              if (details.hasOwnProperty('source') || details.hasOwnProperty('type') || details.hasOwnProperty('entityType') || details.hasOwnProperty('allowsModifications') || details.hasOwnProperty('allowedAvailabilities')) {
                console.warn('updateCalendarAsync was called with one or more read-only properties, which will not be updated');
              }
            }

            newDetails = (0, _objectSpread2.default)({}, details, {
              id: id,
              color: color
            });
            return _context3.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveCalendarAsync(newDetails));

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function deleteCalendarAsync(id) {
    return _regenerator.default.async(function deleteCalendarAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (id) {
              _context4.next = 2;
              break;
            }

            throw new Error('deleteCalendarAsync must be called with an id (string) of the target calendar');

          case 2:
            return _context4.abrupt("return", _reactNative.NativeModules.ExponentCalendar.deleteCalendarAsync(id));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this);
  }

  function getEventsAsync(calendarIds, startDate, endDate) {
    return _regenerator.default.async(function getEventsAsync$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (startDate) {
              _context5.next = 2;
              break;
            }

            throw new Error('getEventsAsync must be called with a startDate (date) to search for events');

          case 2:
            if (endDate) {
              _context5.next = 4;
              break;
            }

            throw new Error('getEventsAsync must be called with an endDate (date) to search for events');

          case 4:
            if (!(!calendarIds || !calendarIds.length)) {
              _context5.next = 6;
              break;
            }

            throw new Error('getEventsAsync must be called with a non-empty array of calendarIds to search');

          case 6:
            return _context5.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getEventsAsync(startDate, endDate, calendarIds));

          case 7:
          case "end":
            return _context5.stop();
        }
      }
    }, null, this);
  }

  function getEventAsync(id) {
    var _ref,
        _ref$futureEvents,
        futureEvents,
        instanceStartDate,
        _args6 = arguments;

    return _regenerator.default.async(function getEventAsync$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _ref = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {}, _ref$futureEvents = _ref.futureEvents, futureEvents = _ref$futureEvents === undefined ? false : _ref$futureEvents, instanceStartDate = _ref.instanceStartDate;

            if (id) {
              _context6.next = 3;
              break;
            }

            throw new Error('getEventAsync must be called with an id (string) of the target event');

          case 3:
            if (!(_reactNative.Platform.OS === 'ios')) {
              _context6.next = 7;
              break;
            }

            return _context6.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getEventByIdAsync(id, instanceStartDate));

          case 7:
            return _context6.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getEventByIdAsync(id));

          case 8:
          case "end":
            return _context6.stop();
        }
      }
    }, null, this);
  }

  function createEventAsync(calendarId) {
    var details,
        newDetails,
        _args7 = arguments;
    return _regenerator.default.async(function createEventAsync$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            details = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};

            if (calendarId) {
              _context7.next = 3;
              break;
            }

            throw new Error('createEventAsync must be called with an id (string) of the target calendar');

          case 3:
            if (!(_reactNative.Platform.OS === 'android')) {
              _context7.next = 10;
              break;
            }

            if (details.startDate) {
              _context7.next = 6;
              break;
            }

            throw new Error('createEventAsync requires a startDate (Date)');

          case 6:
            if (details.endDate) {
              _context7.next = 8;
              break;
            }

            throw new Error('createEventAsync requires an endDate (Date)');

          case 8:
            if (details.timeZone) {
              _context7.next = 10;
              break;
            }

            throw new Error('createEventAsync requires a timeZone (string)');

          case 10:
            newDetails = (0, _objectSpread2.default)({}, details, {
              id: undefined,
              calendarId: calendarId === DEFAULT ? undefined : calendarId
            });
            return _context7.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveEventAsync(newDetails, {}));

          case 12:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  }

  function updateEventAsync(id) {
    var details,
        _ref2,
        _ref2$futureEvents,
        futureEvents,
        instanceStartDate,
        newDetails,
        _args8 = arguments;

    return _regenerator.default.async(function updateEventAsync$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            details = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
            _ref2 = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {}, _ref2$futureEvents = _ref2.futureEvents, futureEvents = _ref2$futureEvents === undefined ? false : _ref2$futureEvents, instanceStartDate = _ref2.instanceStartDate;

            if (id) {
              _context8.next = 4;
              break;
            }

            throw new Error('updateEventAsync must be called with an id (string) of the target event');

          case 4:
            if (_reactNative.Platform.OS === 'ios') {
              if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate') || details.hasOwnProperty('originalStartDate') || details.hasOwnProperty('isDetached') || details.hasOwnProperty('status') || details.hasOwnProperty('organizer')) {
                console.warn('updateEventAsync was called with one or more read-only properties, which will not be updated');
              }
            }

            newDetails = (0, _objectSpread2.default)({}, details, {
              id: id,
              instanceStartDate: instanceStartDate
            });
            return _context8.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveEventAsync(newDetails, {
              futureEvents: futureEvents
            }));

          case 7:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this);
  }

  function deleteEventAsync(id) {
    var _ref3,
        _ref3$futureEvents,
        futureEvents,
        instanceStartDate,
        _args9 = arguments;

    return _regenerator.default.async(function deleteEventAsync$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _ref3 = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {}, _ref3$futureEvents = _ref3.futureEvents, futureEvents = _ref3$futureEvents === undefined ? false : _ref3$futureEvents, instanceStartDate = _ref3.instanceStartDate;

            if (id) {
              _context9.next = 3;
              break;
            }

            throw new Error('deleteEventAsync must be called with an id (string) of the target event');

          case 3:
            return _context9.abrupt("return", _reactNative.NativeModules.ExponentCalendar.deleteEventAsync({
              id: id,
              instanceStartDate: instanceStartDate
            }, {
              futureEvents: futureEvents
            }));

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, null, this);
  }

  function getAttendeesForEventAsync(id) {
    var _ref4,
        _ref4$futureEvents,
        futureEvents,
        instanceStartDate,
        params,
        _args10 = arguments;

    return _regenerator.default.async(function getAttendeesForEventAsync$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _ref4 = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {}, _ref4$futureEvents = _ref4.futureEvents, futureEvents = _ref4$futureEvents === undefined ? false : _ref4$futureEvents, instanceStartDate = _ref4.instanceStartDate;

            if (id) {
              _context10.next = 3;
              break;
            }

            throw new Error('getAttendeesForEventAsync must be called with an id (string) of the target event');

          case 3:
            params = _reactNative.Platform.OS === 'ios' ? {
              id: id,
              instanceStartDate: instanceStartDate
            } : id;
            return _context10.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getAttendeesForEventAsync(params));

          case 5:
          case "end":
            return _context10.stop();
        }
      }
    }, null, this);
  }

  function createAttendeeAsync(eventId) {
    var details,
        newDetails,
        _args11 = arguments;
    return _regenerator.default.async(function createAttendeeAsync$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            details = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};

            if (!(_reactNative.Platform.OS === 'ios')) {
              _context11.next = 3;
              break;
            }

            throw new Error('createAttendeeAsync is not available on iOS');

          case 3:
            if (eventId) {
              _context11.next = 5;
              break;
            }

            throw new Error('createAttendeeAsync must be called with an id (string) of the target event');

          case 5:
            if (details.email) {
              _context11.next = 7;
              break;
            }

            throw new Error('createAttendeeAsync requires an email (string)');

          case 7:
            if (details.role) {
              _context11.next = 9;
              break;
            }

            throw new Error('createAttendeeAsync requires a role (string)');

          case 9:
            if (details.type) {
              _context11.next = 11;
              break;
            }

            throw new Error('createAttendeeAsync requires a type (string)');

          case 11:
            if (details.status) {
              _context11.next = 13;
              break;
            }

            throw new Error('createAttendeeAsync requires a status (string)');

          case 13:
            newDetails = (0, _objectSpread2.default)({}, details, {
              id: undefined
            });
            return _context11.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveAttendeeForEventAsync(newDetails, eventId));

          case 15:
          case "end":
            return _context11.stop();
        }
      }
    }, null, this);
  }

  function updateAttendeeAsync(id) {
    var details,
        newDetails,
        _args12 = arguments;
    return _regenerator.default.async(function updateAttendeeAsync$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            details = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};

            if (!(_reactNative.Platform.OS === 'ios')) {
              _context12.next = 3;
              break;
            }

            throw new Error('updateAttendeeAsync is not available on iOS');

          case 3:
            if (id) {
              _context12.next = 5;
              break;
            }

            throw new Error('updateAttendeeAsync must be called with an id (string) of the target event');

          case 5:
            newDetails = (0, _objectSpread2.default)({}, details, {
              id: id
            });
            return _context12.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveAttendeeForEventAsync(newDetails, null));

          case 7:
          case "end":
            return _context12.stop();
        }
      }
    }, null, this);
  }

  function deleteAttendeeAsync(id) {
    return _regenerator.default.async(function deleteAttendeeAsync$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (!(_reactNative.Platform.OS === 'ios')) {
              _context13.next = 2;
              break;
            }

            throw new Error('deleteAttendeeAsync is not available on iOS');

          case 2:
            if (id) {
              _context13.next = 4;
              break;
            }

            throw new Error('deleteAttendeeAsync must be called with an id (string) of the target event');

          case 4:
            return _context13.abrupt("return", _reactNative.NativeModules.ExponentCalendar.deleteAttendeeAsync(id));

          case 5:
          case "end":
            return _context13.stop();
        }
      }
    }, null, this);
  }

  function getRemindersAsync(calendarIds, status, startDate, endDate) {
    return _regenerator.default.async(function getRemindersAsync$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (!(_reactNative.Platform.OS === 'android')) {
              _context14.next = 2;
              break;
            }

            throw new Error('getRemindersAsync is not available on Android');

          case 2:
            if (!(status && !startDate)) {
              _context14.next = 4;
              break;
            }

            throw new Error('getRemindersAsync must be called with a startDate (date) to search for reminders');

          case 4:
            if (!(status && !endDate)) {
              _context14.next = 6;
              break;
            }

            throw new Error('getRemindersAsync must be called with an endDate (date) to search for reminders');

          case 6:
            if (!(!calendarIds || !calendarIds.length)) {
              _context14.next = 8;
              break;
            }

            throw new Error('getRemindersAsync must be called with a non-empty array of calendarIds to search');

          case 8:
            return _context14.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getRemindersAsync(startDate || null, endDate || null, calendarIds, status || null));

          case 9:
          case "end":
            return _context14.stop();
        }
      }
    }, null, this);
  }

  function getReminderAsync(id) {
    return _regenerator.default.async(function getReminderAsync$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            if (!(_reactNative.Platform.OS === 'android')) {
              _context15.next = 2;
              break;
            }

            throw new Error('getReminderAsync is not available on Android');

          case 2:
            if (id) {
              _context15.next = 4;
              break;
            }

            throw new Error('getReminderAsync must be called with an id (string) of the target reminder');

          case 4:
            return _context15.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getReminderByIdAsync(id));

          case 5:
          case "end":
            return _context15.stop();
        }
      }
    }, null, this);
  }

  function createReminderAsync(calendarId) {
    var details,
        newDetails,
        _args16 = arguments;
    return _regenerator.default.async(function createReminderAsync$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            details = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {};

            if (!(_reactNative.Platform.OS === 'android')) {
              _context16.next = 3;
              break;
            }

            throw new Error('createReminderAsync is not available on Android');

          case 3:
            if (calendarId) {
              _context16.next = 5;
              break;
            }

            throw new Error('createReminderAsync must be called with an id (string) of the target calendar');

          case 5:
            newDetails = (0, _objectSpread2.default)({}, details, {
              id: undefined,
              calendarId: calendarId === DEFAULT ? undefined : calendarId
            });
            return _context16.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveReminderAsync(newDetails));

          case 7:
          case "end":
            return _context16.stop();
        }
      }
    }, null, this);
  }

  function updateReminderAsync(id) {
    var details,
        newDetails,
        _args17 = arguments;
    return _regenerator.default.async(function updateReminderAsync$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            details = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};

            if (!(_reactNative.Platform.OS === 'android')) {
              _context17.next = 3;
              break;
            }

            throw new Error('updateReminderAsync is not available on Android');

          case 3:
            if (id) {
              _context17.next = 5;
              break;
            }

            throw new Error('updateReminderAsync must be called with an id (string) of the target reminder');

          case 5:
            if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate')) {
              console.warn('updateReminderAsync was called with one or more read-only properties, which will not be updated');
            }

            newDetails = (0, _objectSpread2.default)({}, details, {
              id: id
            });
            return _context17.abrupt("return", _reactNative.NativeModules.ExponentCalendar.saveReminderAsync(newDetails));

          case 8:
          case "end":
            return _context17.stop();
        }
      }
    }, null, this);
  }

  function deleteReminderAsync(id) {
    return _regenerator.default.async(function deleteReminderAsync$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            if (!(_reactNative.Platform.OS === 'android')) {
              _context18.next = 2;
              break;
            }

            throw new Error('deleteReminderAsync is not available on Android');

          case 2:
            if (id) {
              _context18.next = 4;
              break;
            }

            throw new Error('deleteReminderAsync must be called with an id (string) of the target reminder');

          case 4:
            return _context18.abrupt("return", _reactNative.NativeModules.ExponentCalendar.deleteReminderAsync(id));

          case 5:
          case "end":
            return _context18.stop();
        }
      }
    }, null, this);
  }

  function getSourcesAsync() {
    return _regenerator.default.async(function getSourcesAsync$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            if (!(_reactNative.Platform.OS === 'android')) {
              _context19.next = 2;
              break;
            }

            throw new Error('getSourcesAsync is not available on Android');

          case 2:
            return _context19.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getSourcesAsync());

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, null, this);
  }

  function getSourceAsync(id) {
    return _regenerator.default.async(function getSourceAsync$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            if (!(_reactNative.Platform.OS === 'android')) {
              _context20.next = 2;
              break;
            }

            throw new Error('getSourceAsync is not available on Android');

          case 2:
            if (id) {
              _context20.next = 4;
              break;
            }

            throw new Error('getSourceAsync must be called with an id (string) of the target source');

          case 4:
            return _context20.abrupt("return", _reactNative.NativeModules.ExponentCalendar.getSourceByIdAsync(id));

          case 5:
          case "end":
            return _context20.stop();
        }
      }
    }, null, this);
  }

  function openEventInCalendar(id) {
    if (_reactNative.Platform.OS === 'ios') {
      console.warn('openEventInCalendar is not available on iOS');
      return;
    }

    if (!id) {
      throw new Error('openEventInCalendar must be called with an id (string) of the target event');
    }

    return _reactNative.NativeModules.ExponentCalendar.openEventInCalendar(parseInt(id, 10));
  }

  var EntityTypes = {
    EVENT: 'event',
    REMINDER: 'reminder'
  };
  exports.EntityTypes = EntityTypes;
  var Frequency = {
    DAILY: 'daily',
    WEEKLY: 'weekly',
    MONTHLY: 'monthly',
    YEARLY: 'yearly'
  };
  exports.Frequency = Frequency;
  var Availability = {
    NOT_SUPPORTED: 'notSupported',
    BUSY: 'busy',
    FREE: 'free',
    TENTATIVE: 'tentative',
    UNAVAILABLE: 'unavailable'
  };
  exports.Availability = Availability;
  var CalendarType = {
    LOCAL: 'local',
    CALDAV: 'caldav',
    EXCHANGE: 'exchange',
    SUBSCRIBED: 'subscribed',
    BIRTHDAYS: 'birthdays'
  };
  exports.CalendarType = CalendarType;
  var EventStatus = {
    NONE: 'none',
    CONFIRMED: 'confirmed',
    TENTATIVE: 'tentative',
    CANCELED: 'canceled'
  };
  exports.EventStatus = EventStatus;
  var SourceType = {
    LOCAL: 'local',
    EXCHANGE: 'exchange',
    CALDAV: 'caldav',
    MOBILEME: 'mobileme',
    SUBSCRIBED: 'subscribed',
    BIRTHDAYS: 'birthdays'
  };
  exports.SourceType = SourceType;
  var AttendeeRole = {
    UNKNOWN: 'unknown',
    REQUIRED: 'required',
    OPTIONAL: 'optional',
    CHAIR: 'chair',
    NON_PARTICIPANT: 'nonParticipant',
    ATTENDEE: 'attendee',
    ORGANIZER: 'organizer',
    PERFORMER: 'performer',
    SPEAKER: 'speaker',
    NONE: 'none'
  };
  exports.AttendeeRole = AttendeeRole;
  var AttendeeStatus = {
    UNKNOWN: 'unknown',
    PENDING: 'pending',
    ACCEPTED: 'accepted',
    DECLINED: 'declined',
    TENTATIVE: 'tentative',
    DELEGATED: 'delegated',
    COMPLETED: 'completed',
    IN_PROCESS: 'inProcess',
    INVITED: 'invited',
    NONE: 'none'
  };
  exports.AttendeeStatus = AttendeeStatus;
  var AttendeeType = {
    UNKNOWN: 'unknown',
    PERSON: 'person',
    ROOM: 'room',
    GROUP: 'group',
    RESOURCE: 'resource',
    OPTIONAL: 'optional',
    REQUIRED: 'required',
    NONE: 'none'
  };
  exports.AttendeeType = AttendeeType;
  var AlarmMethod = {
    ALARM: 'alarm',
    ALERT: 'alert',
    EMAIL: 'email',
    SMS: 'sms',
    DEFAULT: 'default'
  };
  exports.AlarmMethod = AlarmMethod;
  var EventAccessLevel = {
    CONFIDENTIAL: 'confidential',
    PRIVATE: 'private',
    PUBLIC: 'public',
    DEFAULT: 'default'
  };
  exports.EventAccessLevel = EventAccessLevel;
  var CalendarAccessLevel = {
    CONTRIBUTOR: 'contributor',
    EDITOR: 'editor',
    FREEBUSY: 'freebusy',
    OVERRIDE: 'override',
    OWNER: 'owner',
    READ: 'read',
    RESPOND: 'respond',
    ROOT: 'root',
    NONE: 'none'
  };
  exports.CalendarAccessLevel = CalendarAccessLevel;
  var ReminderStatus = {
    COMPLETED: 'completed',
    INCOMPLETE: 'incomplete'
  };
  exports.ReminderStatus = ReminderStatus;
  var DEFAULT = 'default';
  exports.DEFAULT = DEFAULT;
},475,[1,48,130,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    get Lottie() {
      return _$$_REQUIRE(_dependencyMap[0]);
    },

    get Branch() {
      return _$$_REQUIRE(_dependencyMap[1]).default;
    },

    get GestureHandler() {
      console.warn('GestureHandler is no longer in DangerZone, you can now import it directly from the expo package.');
      return _$$_REQUIRE(_dependencyMap[2]).GestureHandler;
    },

    get Localization() {
      return _$$_REQUIRE(_dependencyMap[3]).default;
    },

    get Stripe() {
      return _$$_REQUIRE(_dependencyMap[4]).PaymentsStripe;
    },

    get Print() {
      console.warn('Print is no longer in DangerZone, you can now import it directly from the expo package.');
      return _$$_REQUIRE(_dependencyMap[5]).Print;
    },

    get DeviceMotion() {
      return _$$_REQUIRE(_dependencyMap[6]).DeviceMotion;
    },

    get Animated() {
      return _$$_REQUIRE(_dependencyMap[7]).default;
    },

    get Easing() {
      return _$$_REQUIRE(_dependencyMap[7]).Easing;
    },

    get Screen() {
      return _$$_REQUIRE(_dependencyMap[8]).Screen;
    },

    get ScreenContainer() {
      return _$$_REQUIRE(_dependencyMap[8]).ScreenContainer;
    },

    get ScreenStack() {
      return _$$_REQUIRE(_dependencyMap[8]).ScreenStack;
    }

  };
  exports.default = _default;
},476,[477,485,436,490,491,422,425,498,549]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},477,[478]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _jsxFileName = 'src/js/LottieView.js';

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _react = _$$_REQUIRE(_dependencyMap[0]);

  var _react2 = _interopRequireDefault(_react);

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _reactNativeSafeModule = _$$_REQUIRE(_dependencyMap[2]);

  var _reactNativeSafeModule2 = _interopRequireDefault(_reactNativeSafeModule);

  var _propTypes = _$$_REQUIRE(_dependencyMap[3]);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var NativeLottieView = _reactNativeSafeModule2.default.component({
    viewName: 'LottieAnimationView',
    mockComponent: _reactNative.View
  });

  var LottieViewManager = _reactNativeSafeModule2.default.module({
    moduleName: 'LottieAnimationView',
    mock: {
      play: function play() {},
      reset: function reset() {}
    }
  });

  var ViewStyleExceptBorderPropType = function ViewStyleExceptBorderPropType(props, propName, componentName) {
    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var flattened = _reactNative.StyleSheet.flatten(props[propName]);

    var usesBorder = Object.keys(flattened).some(function (key) {
      return key.startsWith('border');
    });

    if (usesBorder) {
      return Error(componentName + ' does not allow any border related style properties to be specified. ' + "Border styles for this component will behave differently across platforms. If you'd " + 'like to render a border around this component, wrap it with a View.');
    }

    return _reactNative.ViewPropTypes.style.apply(_reactNative.ViewPropTypes, [props, propName, componentName].concat(rest));
  };

  var NotAllowedPropType = function NotAllowedPropType(props, propName, componentName) {
    var value = props[propName];

    if (value != null) {
      return Error(componentName + ' cannot specify \'' + propName + '\'.');
    }

    return null;
  };

  var propTypes = _extends({}, _reactNative.ViewPropTypes, {
    style: ViewStyleExceptBorderPropType,
    children: NotAllowedPropType,
    resizeMode: _propTypes2.default.oneOf(['cover', 'contain', 'center']),
    progress: _propTypes2.default.number,
    speed: _propTypes2.default.number,
    loop: _propTypes2.default.bool,
    enableMergePathsAndroidForKitKatAndAbove: _propTypes2.default.bool,
    source: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]).isRequired
  });

  var defaultProps = {
    progress: 0,
    speed: 1,
    loop: true,
    enableMergePathsAndroidForKitKatAndAbove: false,
    resizeMode: 'contain',
    style: _reactNative.StyleSheet.absoluteFill
  };
  var viewConfig = {
    uiViewClassName: 'LottieAnimationView',
    validAttributes: {
      progress: true
    }
  };

  var LottieView = function (_React$Component) {
    _inherits(LottieView, _React$Component);

    function LottieView(props) {
      _classCallCheck(this, LottieView);

      var _this = _possibleConstructorReturn(this, (LottieView.__proto__ || Object.getPrototypeOf(LottieView)).call(this, props));

      _this.viewConfig = viewConfig;
      _this.refRoot = _this.refRoot.bind(_this);
      return _this;
    }

    _createClass(LottieView, [{
      key: 'setNativeProps',
      value: function setNativeProps(props) {
        _reactNative.UIManager.updateView(this.getHandle(), this.viewConfig.uiViewClassName, {
          progress: props.progress
        });
      }
    }, {
      key: 'play',
      value: function play(startFrame, endFrame) {
        this.runCommand('play', [startFrame, endFrame]);
      }
    }, {
      key: 'reset',
      value: function reset() {
        this.runCommand('reset');
      }
    }, {
      key: 'runCommand',
      value: function runCommand(name) {
        var _this2 = this;

        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        return _reactNative.Platform.select({
          android: function android() {
            return _reactNative.UIManager.dispatchViewManagerCommand(_this2.getHandle(), _reactNative.UIManager.LottieAnimationView.Commands[name], args);
          },
          ios: function ios() {
            return LottieViewManager[name].apply(LottieViewManager, [_this2.getHandle()].concat(_toConsumableArray(args)));
          }
        })();
      }
    }, {
      key: 'getHandle',
      value: function getHandle() {
        return (0, _reactNative.findNodeHandle)(this.root);
      }
    }, {
      key: 'refRoot',
      value: function refRoot(root) {
        this.root = root;
      }
    }, {
      key: 'render',
      value: function render() {
        var source = this.props.source;
        var sourceName = typeof source === 'string' ? source : undefined;
        var sourceJson = typeof source === 'string' ? undefined : JSON.stringify(source);
        return _react2.default.createElement(NativeLottieView, _extends({
          ref: this.refRoot
        }, this.props, {
          source: undefined,
          sourceName: sourceName,
          sourceJson: sourceJson,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 123
          }
        }));
      }
    }]);

    return LottieView;
  }(_react2.default.Component);

  LottieView.propTypes = propTypes;
  LottieView.defaultProps = defaultProps;

  var AnimatedLottieView = _reactNative.Animated.createAnimatedComponent(LottieView);

  AnimatedLottieView.prototype.play = function play() {
    var startFrame = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    var endFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

    if (this.getNode()) {
      return this.getNode().play(startFrame, endFrame);
    }

    console.warn('Trying to animate a view on an unmounted component');
    return null;
  };

  AnimatedLottieView.prototype.reset = function pause() {
    if (this.getNode()) {
      return this.getNode().reset();
    }

    console.warn('Trying to animate a view on an unmounted component');
    return null;
  };

  module.exports = AnimatedLottieView;
},478,[51,5,479,65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    create: _$$_REQUIRE(_dependencyMap[0]),
    module: _$$_REQUIRE(_dependencyMap[0]),
    component: _$$_REQUIRE(_dependencyMap[1])
  };
},479,[480,483]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},480,[481]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _templateObject = _taggedTemplateLiteral(['\n      SafeModule.module(...) was invoked without any options parameter.\n    '], ['\n      SafeModule.module(...) was invoked without any options parameter.\n    ']),
      _templateObject2 = _taggedTemplateLiteral(['\n      SafeModule.module(...) requires a moduleName property to be specified.\n    '], ['\n      SafeModule.module(...) requires a moduleName property to be specified.\n    ']),
      _templateObject3 = _taggedTemplateLiteral(['\n      Missing a "mock" parameter.\n    '], ['\n      Missing a "mock" parameter.\n    ']),
      _templateObject4 = _taggedTemplateLiteral(['\n          ReactNative.NativeModules.', '.', ' did not have a corresponding prop defined\n          in the mock provided to SafeModule.\n        '], ['\n          ReactNative.NativeModules.', '.', ' did not have a corresponding prop defined\n          in the mock provided to SafeModule.\n        ']);

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _dedent = _$$_REQUIRE(_dependencyMap[1]);

  var _dedent2 = _interopRequireDefault(_dedent);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var UNMOCKED_PROPERTY_WHITELIST = {
    VERSION: true,
    addListener: true,
    removeListeners: true
  };
  var eventEmitterMock = {
    addListener: function addListener() {},
    removeListeners: function removeListeners() {}
  };

  var first = function first(array, fn) {
    var result = undefined;
    var i = 0;

    for (; i < array.length; i++) {
      result = fn(array[i]);
      if (result) return result;
    }

    return null;
  };

  var moduleWithName = function moduleWithName(nameOrArray) {
    if (!nameOrArray) return null;
    if (Array.isArray(nameOrArray)) return first(nameOrArray, moduleWithName);
    return _reactNative.NativeModules[nameOrArray];
  };

  var getPrimaryName = function getPrimaryName(nameOrArray) {
    return Array.isArray(nameOrArray) ? getPrimaryName(nameOrArray[0]) : nameOrArray;
  };

  var getModule = function getModule(moduleNameOrNames, mock, isEventEmitter) {
    var module = moduleWithName(moduleNameOrNames);
    if (module) return module;
    if (isEventEmitter) return _extends({}, mock, eventEmitterMock);
    return mock;
  };

  var defaultGetVersion = function defaultGetVersion(module) {
    return module.VERSION;
  };

  var create = function SafeModuleCreate(options) {
    if (!options) {
      throw new Error((0, _dedent2.default)(_templateObject));
    }

    var moduleName = options.moduleName;
    var mock = options.mock;
    var isEventEmitter = options.isEventEmitter;
    var versionOverrides = options.versionOverrides;
    var getVersion = options.getVersion;

    if (!getVersion) {
      getVersion = defaultGetVersion;
    }

    if (!moduleName) {
      throw new Error((0, _dedent2.default)(_templateObject2));
    }

    var MODULE_NAME = getPrimaryName(moduleName);

    if (!mock) {
      throw new Error((0, _dedent2.default)(_templateObject3));
    }

    var result = {};
    var module = getModule(moduleName, mock, isEventEmitter);
    var version = getVersion(module);

    if (isEventEmitter) {
      result.emitter = new _reactNative.NativeEventEmitter(module);
    }

    var overrides = undefined;
    var boundOverrides = undefined;

    if (versionOverrides) {
      overrides = versionOverrides[version];
      boundOverrides = {};

      if (overrides) {
        Object.keys(overrides).forEach(function (key) {
          if (typeof overrides[key] === 'function') {
            boundOverrides[key] = overrides[key](module[key], module);
          } else {
            boundOverrides[key] = overrides[key];
          }
        });
      }
    }

    _extends(result, mock, module, boundOverrides);

    return result;
  };

  module.exports = create;
},481,[5,482]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function dedent(strings) {
    var raw = undefined;

    if (typeof strings === "string") {
      raw = [strings];
    } else {
      raw = strings.raw;
    }

    var result = "";

    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }

    for (var i = 0; i < raw.length; i++) {
      result += raw[i].replace(/\\\n[ \t]*/g, "").replace(/\\`/g, "`");

      if (i < values.length) {
        result += values[i];
      }
    }

    result = result.trim();
    var lines = result.split("\n");
    var mindent = null;
    lines.forEach(function (l) {
      var m = l.match(/^ +/);

      if (m) {
        var indent = m[0].length;

        if (!mindent) {
          mindent = indent;
        } else {
          mindent = Math.min(mindent, indent);
        }
      }
    });

    if (mindent !== null) {
      result = lines.map(function (l) {
        return l[0] === " " ? l.slice(mindent) : l;
      }).join("\n");
    }

    return result.replace(/\\n/g, "\n");
  }

  if (typeof module !== "undefined") {
    module.exports = dedent;
  }
},482,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},483,[484]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _templateObject = _taggedTemplateLiteral(['\n      SafeModule.create(...) was invoked without any options parameter.\n    '], ['\n      SafeModule.create(...) was invoked without any options parameter.\n    ']),
      _templateObject2 = _taggedTemplateLiteral(['\n             When attempting to resolve the native component ', ',\n             componentOverrides.', ' is expected to be a function, but found\n             ', ' instead.\n          '], ['\n             When attempting to resolve the native component ', ',\n             componentOverrides.', ' is expected to be a function, but found\n             ', ' instead.\n          ']),
      _templateObject3 = _taggedTemplateLiteral(['\n            When attempting to resolve the native component ', ',\n            componentOverrides.', ' is expected to be a function that returns a React\n            component. Instead, ', ' was found.\n          '], ['\n            When attempting to resolve the native component ', ',\n            componentOverrides.', ' is expected to be a function that returns a React\n            component. Instead, ', ' was found.\n          ']);

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _dedent = _$$_REQUIRE(_dependencyMap[1]);

  var _dedent2 = _interopRequireDefault(_dedent);

  var _SafeModule = _$$_REQUIRE(_dependencyMap[2]);

  var _SafeModule2 = _interopRequireDefault(_SafeModule);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  var first = function first(array, fn) {
    var result = undefined;
    var i = 0;

    for (; i < array.length; i++) {
      result = fn(array[i]);
      if (result) return result;
    }

    return null;
  };

  var findFirstResolver = function findFirstResolver(namespace) {
    return function findFirstOnNamespace(nameOrArray) {
      if (!nameOrArray) return null;
      if (Array.isArray(nameOrArray)) return first(nameOrArray, findFirstOnNamespace);
      return nameOrArray in namespace ? nameOrArray : null;
    };
  };

  var findFirstViewName = findFirstResolver(_reactNative.UIManager);

  var getPrimaryName = function getPrimaryName(nameOrArray) {
    return Array.isArray(nameOrArray) ? getPrimaryName(nameOrArray[0]) : nameOrArray;
  };

  var defaultGetVersion = function defaultGetVersion(module) {
    return module.VERSION;
  };

  function SafeComponentCreate(options) {
    if (!options) {
      throw new Error((0, _dedent2.default)(_templateObject));
    }

    var viewName = options.viewName;
    var propOverrides = options.propOverrides;
    var componentOverrides = options.componentOverrides;
    var mockComponent = options.mockComponent;
    var mock = options.mock;
    var getVersion = options.getVersion;

    if (!getVersion) {
      getVersion = defaultGetVersion;
    }

    if (!viewName) {
      throw new Error('\n      SafeModule.component(...) requires a viewName property to be specified.\n    ');
    }

    if (!mockComponent) {
      throw new Error('\n      SafeModule.component(...) requires a mockComponent property to be specified.\n    ');
    }

    var PRIMARY_VIEW_NAME = getPrimaryName(viewName);
    var realViewName = findFirstViewName(viewName);
    var realViewConfig = _reactNative.UIManager[realViewName];

    if (!realViewName || !realViewConfig) {
      return mockComponent;
    }

    var moduleOptions = _extends({}, options, {
      mock: mock || {},
      moduleName: realViewName + 'Manager'
    });

    var nativeModule = (0, _SafeModule2.default)(moduleOptions);
    var version = getVersion(realViewConfig.Constants || {});

    if (propOverrides) {
      var overrides = propOverrides[version];
      var boundOverrides = {};

      if (overrides) {
        if (typeof overrides === 'function') {
          boundOverrides = overrides(realViewConfig.NativeProps, realViewConfig, nativeModule);
        } else {
          boundOverrides = _extends({}, overrides);
        }
      }

      _extends(realViewConfig.NativeProps, boundOverrides);
    }

    var nativeComponent = (0, _reactNative.requireNativeComponent)(realViewName);
    var result = nativeComponent;

    result.runCommand = function (instance, name) {
      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      return _reactNative.Platform.select({
        android: function android() {
          return _reactNative.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(instance), _reactNative.UIManager[realViewName].Commands[name], args);
        },
        ios: function ios() {
          return nativeModule[name].apply(nativeModule, [(0, _reactNative.findNodeHandle)(instance)].concat(args));
        },
        default: function _default() {}
      })();
    };

    result.updateView = function (instance, props) {
      var native = function native() {
        return _reactNative.UIManager.updateView((0, _reactNative.findNodeHandle)(instance), realViewName, props);
      };

      _reactNative.Platform.select({
        ios: native,
        android: native,
        default: function _default() {}
      })();
    };

    if (componentOverrides) {
      var _overrides = componentOverrides[version];

      if (_overrides) {
        result = _overrides(nativeComponent, nativeModule);
      }
    }

    return result;
  }

  module.exports = SafeComponentCreate;
},484,[5,482,480]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNativeBranch = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  _reactNativeBranch.default.BranchEvent = _reactNativeBranch.BranchEvent;
  var _default = _reactNativeBranch.default;
  exports.default = _default;
},485,[366,486]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "BranchEvent", {
    enumerable: true,
    get: function get() {
      return _BranchEvent.default;
    }
  });
  exports.default = exports.Branch = exports.ShareInitiatedEvent = exports.ShareCompletedEvent = exports.RegisterViewEvent = exports.PurchaseInitiatedEvent = exports.PurchasedEvent = exports.AddToWishlistEvent = exports.AddToCartEvent = exports.VERSION = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _branchUniversalObject = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _BranchEvent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var RNBranch = _reactNative.NativeModules.RNBranch,
      RNBranchEventEmitter = _reactNative.NativeModules.RNBranchEventEmitter;

  var packageFile = _$$_REQUIRE(_dependencyMap[6]);

  var VERSION = packageFile.version;
  exports.VERSION = VERSION;
  var AddToCartEvent = RNBranch.ADD_TO_CART_EVENT;
  exports.AddToCartEvent = AddToCartEvent;
  var AddToWishlistEvent = RNBranch.ADD_TO_WISHLIST_EVENT;
  exports.AddToWishlistEvent = AddToWishlistEvent;
  var PurchasedEvent = RNBranch.PURCHASED_EVENT;
  exports.PurchasedEvent = PurchasedEvent;
  var PurchaseInitiatedEvent = RNBranch.PURCHASE_INITIATED_EVENT;
  exports.PurchaseInitiatedEvent = PurchaseInitiatedEvent;
  var RegisterViewEvent = RNBranch.REGISTER_VIEW_EVENT;
  exports.RegisterViewEvent = RegisterViewEvent;
  var ShareCompletedEvent = RNBranch.SHARE_COMPLETED_EVENT;
  exports.ShareCompletedEvent = ShareCompletedEvent;
  var ShareInitiatedEvent = RNBranch.SHARE_INITIATED_EVENT;
  exports.ShareInitiatedEvent = ShareInitiatedEvent;

  var Branch = function () {
    function Branch() {
      var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      (0, _classCallCheck2.default)(this, Branch);
      this.nativeEventEmitter = _reactNative.Platform.select({
        android: _reactNative.DeviceEventEmitter,
        ios: new _reactNative.NativeEventEmitter(RNBranchEventEmitter)
      });
      this._checkCachedEvents = true;
      this._debug = false;

      this.setDebug = function () {
        throw 'setDebug() is not supported in the RN SDK. For other solutions, please see https://rnbranch.app.link/setDebug';
      };

      this.getLatestReferringParams = RNBranch.getLatestReferringParams;
      this.getFirstReferringParams = RNBranch.getFirstReferringParams;

      this.setIdentity = function (identity) {
        return RNBranch.setIdentity(identity);
      };

      this.logout = RNBranch.logout;

      this.userCompletedAction = function (event) {
        var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return RNBranch.userCompletedAction(event, state);
      };

      this.getShortUrl = RNBranch.getShortUrl;

      this.sendCommerceEvent = function (revenue, metadata) {
        console.info('[Branch] sendCommerceEvent is deprecated. Please use the BranchEvent class instead.');
        return RNBranch.sendCommerceEvent('' + revenue, metadata);
      };

      this.openURL = function (url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return _reactNative.Platform.select({
          android: function android() {
            return RNBranch.openURL(url, options);
          },
          ios: function ios() {
            return RNBranch.openURL(url);
          }
        })();
      };

      this.redeemRewards = function (amount, bucket) {
        return RNBranch.redeemRewards(amount, bucket);
      };

      this.loadRewards = function (bucket) {
        return RNBranch.loadRewards(bucket);
      };

      this.getCreditHistory = RNBranch.getCreditHistory;
      this.createBranchUniversalObject = _branchUniversalObject.default;
      if (_options.debug) this._debug = true;
      console.info('Initializing react-native-branch v. ' + VERSION);
    }

    (0, _createClass2.default)(Branch, [{
      key: "subscribe",
      value: function subscribe(listener) {
        var _this = this;

        if (this._checkCachedEvents) {
          this._checkCachedEvents = false;
          RNBranch.redeemInitSessionResult().then(function (result) {
            if (result) {
              if ('params' in result) {
                result['params']['cached_initial_event'] = true;
              }

              listener(result);
            }

            _this._addListener(listener);
          });
        } else {
          this._addListener(listener);
        }

        var unsubscribe = function unsubscribe() {
          _this._removeListener(listener);
        };

        return unsubscribe;
      }
    }, {
      key: "skipCachedEvents",
      value: function skipCachedEvents() {
        this._checkCachedEvents = false;
      }
    }, {
      key: "_addListener",
      value: function _addListener(listener) {
        this.nativeEventEmitter.addListener(RNBranch.INIT_SESSION_SUCCESS, listener);
        this.nativeEventEmitter.addListener(RNBranch.INIT_SESSION_ERROR, listener);
      }
    }, {
      key: "_removeListener",
      value: function _removeListener(listener) {
        this.nativeEventEmitter.removeListener(RNBranch.INIT_SESSION_SUCCESS, listener);
        this.nativeEventEmitter.removeListener(RNBranch.INIT_SESSION_ERROR, listener);
      }
    }]);
    return Branch;
  }();

  exports.Branch = Branch;

  var _default = new Branch();

  exports.default = _default;
},486,[1,21,22,5,487,488,489]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createBranchUniversalObject;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _BranchEvent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var RNBranch = _reactNative.NativeModules.RNBranch;

  function createBranchUniversalObject(identifier) {
    var options,
        contentMetadata,
        key,
        valueType,
        branchUniversalObject,
        price,
        _ref,
        ident,
        _args = arguments;

    return _regenerator.default.async(function createBranchUniversalObject$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

            if (!(typeof identifier !== 'string')) {
              _context.next = 3;
              break;
            }

            throw new Error('react-native-branch: identifier must be a string');

          case 3:
            contentMetadata = options.contentMetadata || {};

            if (!contentMetadata.customMetadata) {
              _context.next = 14;
              break;
            }

            _context.t0 = _regenerator.default.keys(contentMetadata.customMetadata);

          case 6:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 14;
              break;
            }

            key = _context.t1.value;
            valueType = typeof contentMetadata.customMetadata[key];

            if (!(valueType == 'string')) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("continue", 6);

          case 11:
            console.warn('[Branch] customMetadata values must be strings. Value for property ' + key + ' has type ' + valueType + '.');
            _context.next = 6;
            break;

          case 14:
            branchUniversalObject = (0, _objectSpread2.default)({
              canonicalIdentifier: identifier,
              contentMetadata: contentMetadata
            }, options);
            price = contentMetadata.price === undefined ? undefined : '' + contentMetadata.price;
            branchUniversalObject.contentMetadata.price = price;

            if (options.automaticallyListOnSpotlight !== undefined) {
              console.info('[Branch] automaticallyListOnSpotlight is deprecated. Please use locallyIndex instead.');
            }

            if (options.price !== undefined) {
              console.info('[Branch] price is deprecated. Please use contentMetadata.price instead.');
            }

            if (options.currency !== undefined) {
              console.info('[Branch] currency is deprecated. Please use contentMetadata.price instead.');
            }

            if (options.metadata !== undefined) {
              console.info('[Branch] metadata is deprecated. Please use contentMetadata.customMetadata instead.');
            }

            if (options.contentIndexingMode !== undefined) {
              console.info('[Branch] contentIndexingMode is deprecated. Please use locallyIndex or publiclyIndex instead.');
            }

            _context.next = 24;
            return _regenerator.default.awrap(RNBranch.createUniversalObject(branchUniversalObject));

          case 24:
            _ref = _context.sent;
            ident = _ref.ident;
            return _context.abrupt("return", {
              ident: ident,
              showShareSheet: function showShareSheet() {
                var shareOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var linkProperties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var controlParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                shareOptions = (0, _objectSpread2.default)({
                  title: options.title || '',
                  text: options.contentDescription || ''
                }, shareOptions);
                linkProperties = (0, _objectSpread2.default)({
                  feature: 'share',
                  channel: 'RNApp'
                }, linkProperties);
                return this._tryFunction(RNBranch.showShareSheet, shareOptions, linkProperties, controlParams);
              },
              registerView: function registerView() {
                console.info('[Branch] registerView is deprecated. Please use logEvent(BranchEvent.ViewItem) instead.');
                return this._tryFunction(RNBranch.registerView);
              },
              generateShortUrl: function generateShortUrl() {
                var linkProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var controlParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                return this._tryFunction(RNBranch.generateShortUrl, linkProperties, controlParams);
              },
              listOnSpotlight: function listOnSpotlight() {
                console.info('[Branch] listOnSpotlight is deprecated. Please use locallyIndex instead.');
                if (_reactNative.Platform.OS !== 'ios') return Promise.resolve();
                return this._tryFunction(RNBranch.listOnSpotlight);
              },
              userCompletedAction: function userCompletedAction(event) {
                var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                console.info('[Branch] userCompletedAction is deprecated. Please use logEvent or the BranchEvent class instead.');

                if (event == RNBranch.REGISTER_VIEW_EVENT) {
                  return this.logEvent(_BranchEvent.default.ViewItem, {
                    customData: state
                  });
                }

                return this._tryFunction(RNBranch.userCompletedActionOnUniversalObject, event, state);
              },
              logEvent: function logEvent(eventName) {
                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                return new _BranchEvent.default(eventName, this, params).logEvent();
              },
              release: function release() {
                return RNBranch.releaseUniversalObject(this.ident);
              },
              _newIdent: function _newIdent() {
                var _this = this;

                return RNBranch.createUniversalObject(branchUniversalObject).then(function (_ref2) {
                  var ident = _ref2.ident;
                  _this.ident = ident;
                  return ident;
                });
              },
              _tryFunction: function _tryFunction(func) {
                var _this2 = this;

                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }

                return func.apply(undefined, [this.ident].concat(args)).catch(function (error) {
                  if (error.code != 'RNBranch::Error::BUONotFound') {
                    throw error;
                  }

                  return _this2._newIdent().then(function (ident) {
                    return func.apply(undefined, [ident].concat(args));
                  });
                });
              }
            });

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},487,[1,130,48,5,488]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var RNBranch = _reactNative.NativeModules.RNBranch;

  var BranchEvent = function () {
    function BranchEvent(name) {
      var contentItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      (0, _classCallCheck2.default)(this, BranchEvent);
      this.name = null;
      this.contentItems = [];
      this.transactionID = null;
      this.currency = null;
      this.revenue = null;
      this.shipping = null;
      this.tax = null;
      this.coupon = null;
      this.affiliation = null;
      this.description = null;
      this.searchQuery = null;
      this.customData = null;
      this.name = name;

      if (Array.isArray(contentItems)) {
        this.contentItems = contentItems;
      } else if (contentItems) {
        this.contentItems = [contentItems];
      }

      if (params.transactionID) this.transactionID = params.transactionID;
      if (params.currency) this.currency = params.currency;
      if (params.revenue) this.revenue = params.revenue;
      if (params.shipping) this.shipping = params.shipping;
      if (params.tax) this.tax = params.tax;
      if (params.coupon) this.coupon = params.coupon;
      if (params.affiliation) this.affiliation = params.affiliation;
      if (params.description) this.description = params.description;
      if (params.searchQuery) this.searchQuery = params.searchQuery;
      if (params.customData) this.customData = params.customData;
    }

    (0, _createClass2.default)(BranchEvent, [{
      key: "logEvent",
      value: function logEvent() {
        var idents, ident, buo;
        return _regenerator.default.async(function logEvent$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                idents = this.contentItems.map(function (b) {
                  return b.ident;
                });
                _context.prev = 1;
                _context.next = 4;
                return _regenerator.default.awrap(RNBranch.logEvent(idents, this.name, this._convertParams()));

              case 4:
                return _context.abrupt("return", _context.sent);

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](1);

                if (!(_context.t0.code != 'RNBranch::Error::BUONotFound')) {
                  _context.next = 11;
                  break;
                }

                throw _context.t0;

              case 11:
                ident = this._identFromMessage(_context.t0.message);
                buo = this.contentItems.find(function (b) {
                  return b.ident == ident;
                });
                _context.next = 15;
                return _regenerator.default.awrap(buo._newIdent());

              case 15:
                _context.next = 17;
                return _regenerator.default.awrap(this.logEvent());

              case 17:
                return _context.abrupt("return", _context.sent);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[1, 7]]);
      }
    }, {
      key: "_identFromMessage",
      value: function _identFromMessage(message) {
        var match = /^.*ident\s([A-Fa-f0-9-]+).*$/.exec(message);
        if (match) return match[1];
        return null;
      }
    }, {
      key: "_convertParams",
      value: function _convertParams() {
        var params = {};
        if (this.transactionID) params.transactionID = this.transactionID;
        if (this.currency) params.currency = this.currency;
        if (this.revenue) params.revenue = '' + this.revenue;
        if (this.shipping) params.shipping = '' + this.shipping;
        if (this.tax) params.tax = '' + this.tax;
        if (this.coupon) params.coupon = this.coupon;
        if (this.affiliation) params.affiliation = this.affiliation;
        if (this.description) params.description = this.description;
        if (this.searchQuery) params.searchQuery = this.searchQuery;

        if (this.customData) {
          params.customData = this.customData;

          for (var key in params.customData) {
            var valueType = typeof params.customData[key];
            if (valueType == 'string') continue;
            console.warn('[Branch] customMetadata values must be strings. Value for property ' + key + ' has type ' + valueType + '.');
          }
        }

        return params;
      }
    }]);
    return BranchEvent;
  }();

  exports.default = BranchEvent;
  BranchEvent.AddToCart = RNBranch.STANDARD_EVENT_ADD_TO_CART;
  BranchEvent.AddToWishlist = RNBranch.STANDARD_EVENT_ADD_TO_WISHLIST;
  BranchEvent.ViewCart = RNBranch.STANDARD_EVENT_VIEW_CART;
  BranchEvent.InitiatePurchase = RNBranch.STANDARD_EVENT_INITIATE_PURCHASE;
  BranchEvent.AddPaymentInfo = RNBranch.STANDARD_EVENT_ADD_PAYMENT_INFO;
  BranchEvent.Purchase = RNBranch.STANDARD_EVENT_PURCHASE;
  BranchEvent.SpendCredits = RNBranch.STANDARD_EVENT_SPEND_CREDITS;
  BranchEvent.Search = RNBranch.STANDARD_EVENT_SEARCH;
  BranchEvent.ViewItem = RNBranch.STANDARD_EVENT_VIEW_ITEM;
  BranchEvent.ViewItems = RNBranch.STANDARD_EVENT_VIEW_ITEMS;
  BranchEvent.Rate = RNBranch.STANDARD_EVENT_RATE;
  BranchEvent.Share = RNBranch.STANDARD_EVENT_SHARE;
  BranchEvent.CompleteRegistration = RNBranch.STANDARD_EVENT_COMPLETE_REGISTRATION;
  BranchEvent.CompleteTutorial = RNBranch.STANDARD_EVENT_COMPLETE_TUTORIAL;
  BranchEvent.AchieveLevel = RNBranch.STANDARD_EVENT_ACHIEVE_LEVEL;
  BranchEvent.UnlockAchievement = RNBranch.STANDARD_EVENT_UNLOCK_ACHIEVEMENT;
},488,[1,130,21,22,5]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "name": "react-native-branch",
  "version": "2.2.5",
  "description": "Branch Metrics React Native SDK",
  "main": "src/index.js",
  "files": [
    "android",
    "branch.example.json",
    "docs",
    "ios",
    "react-native-branch.podspec",
    "scripts",
    "src"
  ],
  "scripts": {
    "lint": "eslint src test",
    "test": "ava"
  },
  "ava": {
    "require": [
      "babel-register",
      "babel-polyfill",
      "react-native-mock/mock.js",
      "./test/helpers/RNBranch.mock.js"
    ],
    "babel": "inherit"
  },
  "babel": {
    "ignore": false,
    "presets": [
      "react-native"
    ]
  },
  "keywords": [
    "react-native",
    "react-component",
    "ios",
    "android",
    "branch",
    "metrics",
    "deeplink",
    "deep",
    "link"
  ],
  "authors": [
    "Zack Story <zack@root-two.com> (https://github.com/rt2zz)",
    "Kevin Stumpf (https://github.com/kevinstumpf)",
    "Jimmy Dee (https://github.com/jdee)"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/BranchMetrics/react-native-branch-deep-linking.git"
  },
  "bugs": {
    "url": "https://github.com/BranchMetrics/react-native-branch-deep-linking/issues"
  },
  "homepage": "https://github.com/BranchMetrics/react-native-branch-deep-linking",
  "peerDependencies": {
    "react-native": ">=0.40.0"
  },
  "devDependencies": {
    "ava": "~0.14.0",
    "babel-eslint": "^6.0.4",
    "babel-polyfill": "^6.7.4",
    "eslint": "^2.7.0",
    "eslint-config-rackt": "^1.1.1",
    "mockery": "*",
    "react": "16.0.0-alpha.6",
    "react-addons-create-fragment": "16.0.0-alpha.3",
    "react-addons-pure-render-mixin": "16.0.0-alpha.3",
    "react-addons-test-utils": "16.0.0-alpha.3",
    "react-addons-update": "16.0.0-alpha.3",
    "react-dom": "16.0.0-alpha.3",
    "react-native": "0.43.1",
    "react-native-mock": "^0.3.0",
    "sinon": "*",
    "underscore": "*"
  },
  "rnpm": {
    "commands": {
      "postlink": "node ./node_modules/react-native-branch/scripts/addBranchConfig.js",
      "postunlink": "node ./node_modules/react-native-branch/scripts/removeBranchConfig.js"
    }
  }
}
;
},489,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _expoCore = _$$_REQUIRE(_dependencyMap[4]);

  var _expoLocalization = _$$_REQUIRE(_dependencyMap[5]);

  var isObject = function isObject(obj) {
    return obj && obj.constructor && obj.constructor === Object;
  };

  var LocaleStore = function LocaleStore(locales) {
    (0, _classCallCheck2.default)(this, LocaleStore);

    if (isObject(locales) === false || Object.keys(locales).length <= 1) {
      throw new Error('Locales input must be an object and non-empty');
    }

    var copy = (0, _objectSpread2.default)({}, locales);
    var allGivenLocales = new Set(Object.keys(copy));
    var currentLocaleName = (0, _toConsumableArray2.default)(allGivenLocales)[0];
    var defaultLocale = copy[currentLocaleName];
    var defaultLocaleName = currentLocaleName;
    var defaultLocalePhrases = new Set(Object.keys(defaultLocale));
    var currentLocale = defaultLocale;

    var setLocaleHelper = function setLocaleHelper(newLocaleName, cb) {
      if (allGivenLocales.has(newLocaleName) === false) {}

      if (newLocaleName === currentLocaleName) {
        return;
      }

      currentLocale = copy[newLocaleName];
      currentLocaleName = newLocaleName;
      cb && cb();
    };

    var localizationValueHelper = function localizationValueHelper(name) {
      if (defaultLocalePhrases.has(name)) {
        var result = currentLocale[name];

        if (result !== undefined) {
          return result !== undefined ? result : defaultLocale[name];
        } else {
          var fallback = defaultLocale[name];

          if (fallback === undefined) {
            return '';
          }

          return fallback;
        }
      }
    };

    if (_expoCore.Platform.OS === 'android') {
      var _ret = function () {
        var localizedValues = new Set();

        var _arr = Object.values(copy);

        for (var _i = 0; _i < _arr.length; _i++) {
          var values = _arr[_i];
          Object.keys(values).forEach(function (s) {
            return localizedValues.add(s);
          });
        }

        var proxy = {};
        Object.defineProperty(proxy, 'setLocale', {
          get: function get() {
            return setLocaleHelper;
          }
        });
        var methods = new Set(['setLocale']);

        var _loop = function _loop(name) {
          if (methods.has(name)) {
            throw new Error("Cannot use " + name + " as a locale name");
          }

          Object.defineProperty(proxy, name, {
            get: function get() {
              return localizationValueHelper(name);
            }
          });
        };

        for (var _iterator = localizedValues.keys(), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref;

          if (_isArray) {
            if (_i2 >= _iterator.length) break;
            _ref = _iterator[_i2++];
          } else {
            _i2 = _iterator.next();
            if (_i2.done) break;
            _ref = _i2.value;
          }

          var name = _ref;

          _loop(name);
        }

        return {
          v: proxy
        };
      }();

      if (typeof _ret === "object") return _ret.v;
    } else if (_expoCore.Platform.OS === 'ios') {
      var handlers = {
        setLocale: setLocaleHelper
      };
      var methods = new Set(Object.keys(handlers));
      return new Proxy(this, {
        set: function set() {
          return false;
        },
        get: function get(target, name) {
          if (typeof name !== 'string') {
            return target[name];
          } else {
            if (defaultLocalePhrases.has(name)) {
              return localizationValueHelper(name);
            } else if (methods.has(name)) {
              return handlers[name];
            } else {
              return target[name];
            }
          }
        }
      });
    } else {
      throw new Error("Unsupported platform at moment for localization: " + _expoCore.Platform.OS);
    }
  };

  function warnDeprecated(deprecated, replacement) {
    console.warn("Expo.DangerZone.Localization." + deprecated + " is deprecated. Use `Expo.Localization." + replacement + "` instead.");
  }

  var _default = (0, _objectSpread2.default)({}, _expoLocalization.Localization, {
    getCurrentDeviceCountryAsync: function getCurrentDeviceCountryAsync() {
      warnDeprecated('getCurrentDeviceCountryAsync()', 'country');
      return _expoLocalization.Localization.country;
    },
    getCurrentLocaleAsync: function getCurrentLocaleAsync() {
      warnDeprecated('getCurrentLocaleAsync()', 'locale');
      return _expoLocalization.Localization.locale.replace('-', '_');
    },
    getCurrentTimeZoneAsync: function getCurrentTimeZoneAsync() {
      warnDeprecated('getCurrentTimeZoneAsync()', 'timezone');
      return _expoLocalization.Localization.timezone;
    },
    getPreferredLocalesAsync: function getPreferredLocalesAsync() {
      warnDeprecated('getPreferredLocalesAsync()', 'locales');
      return _expoLocalization.Localization.locales;
    },
    getISOCurrencyCodesAsync: function getISOCurrencyCodesAsync() {
      warnDeprecated('getISOCurrencyCodesAsync()', 'isoCurrencyCodes');
      return _expoLocalization.Localization.isoCurrencyCodes;
    },
    LocaleStore: LocaleStore
  });

  exports.default = _default;
},490,[1,17,48,21,331,410]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get PaymentsStripe() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    }

  };
},491,[492]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var _expoCore = _$$_REQUIRE(_dependencyMap[6]);

  var _processTheme = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _checkArgs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _checkInit = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var types = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _errorCodes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var StripeModule = _expoCore.NativeModulesProxy.StripeModule;

  var Stripe = function () {
    function Stripe() {
      var _this = this;

      (0, _classCallCheck2.default)(this, Stripe);
      this.stripeInitialized = false;

      this.setOptionsAsync = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _checkArgs.default)(types.setOptionsOptionsPropTypes, options, 'options', 'Stripe.setOptions');
        _this.stripeInitialized = true;
        return StripeModule.init(options, _errorCodes.default);
      };

      this.deviceSupportsAndroidPayAsync = function () {
        return StripeModule.deviceSupportsAndroidPay();
      };

      this.deviceSupportsApplePayAsync = function () {
        return StripeModule.deviceSupportsApplePay();
      };

      this.deviceSupportsNativePayAsync = function () {
        return _reactNative.Platform.select({
          ios: function ios() {
            return _this.deviceSupportsApplePay();
          },
          android: function android() {
            return _this.deviceSupportsAndroidPay();
          }
        })();
      };

      this.canMakeApplePayPaymentsAsync = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _checkArgs.default)(types.canMakeApplePayPaymentsOptionsPropTypes, options, 'options', 'Stripe.canMakeApplePayPayments');
        return StripeModule.canMakeApplePayPayments(options);
      };

      this.canMakeAndroidPayPaymentsAsync = function () {
        return StripeModule.canMakeAndroidPayPayments();
      };

      this.canMakeNativePayPaymentsAsync = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return _reactNative.Platform.select({
          ios: function ios() {
            return _this.canMakeApplePayPayments(options);
          },
          android: function android() {
            return _this.canMakeAndroidPayPayments();
          }
        })();
      };

      this.paymentRequestWithAndroidPayAsync = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _checkInit.default)(_this);
        (0, _checkArgs.default)(types.paymentRequestWithAndroidPayOptionsPropTypes, options, 'options', 'Stripe.paymentRequestWithAndroidPay');
        return StripeModule.paymentRequestWithAndroidPay(options);
      };

      this.paymentRequestWithApplePayAsync = function () {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        (0, _checkInit.default)(_this);
        (0, _checkArgs.default)(types.paymentRequestWithApplePayItemsPropTypes, {
          items: items
        }, 'items', 'Stripe.paymentRequestWithApplePay');
        (0, _checkArgs.default)(types.paymentRequestWithApplePayOptionsPropTypes, options, 'options', 'Stripe.paymentRequestWithApplePay');
        return StripeModule.paymentRequestWithApplePay(items, options);
      };

      this.completeApplePayRequestAsync = function () {
        (0, _checkInit.default)(_this);
        return StripeModule.completeApplePayRequest();
      };

      this.completeNativePayRequestAsync = function () {
        return _reactNative.Platform.select({
          ios: function ios() {
            return _this.completeApplePayRequest();
          },
          android: function android() {
            return Promise.resolve();
          }
        })();
      };

      this.cancelApplePayRequestAsync = function () {
        (0, _checkInit.default)(_this);
        return StripeModule.cancelApplePayRequest();
      };

      this.cancelNativePayRequestAsync = function () {
        return _reactNative.Platform.select({
          ios: function ios() {
            return _this.cancelApplePayRequest();
          },
          android: function android() {
            return Promise.resolve();
          }
        })();
      };

      this.openApplePaySetupAsync = function () {
        return StripeModule.openApplePaySetup();
      };

      this.openNativePaySetupAsync = function () {
        return _reactNative.Platform.select({
          ios: function ios() {
            return _this.openApplePaySetup();
          },
          android: function android() {
            return Promise.resolve();
          }
        })();
      };

      this.paymentRequestWithCardFormAsync = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _checkInit.default)(_this);
        (0, _checkArgs.default)(types.paymentRequestWithCardFormOptionsPropTypes, options, 'options', 'Stripe.paymentRequestWithCardForm');
        return StripeModule.paymentRequestWithCardForm((0, _objectSpread2.default)({}, options, {
          theme: (0, _processTheme.default)(options.theme)
        }));
      };

      this.createTokenWithCardAsync = function () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _checkInit.default)(_this);
        (0, _checkArgs.default)(types.createTokenWithCardParamsPropTypes, params, 'params', 'Stripe.createTokenWithCard');
        return StripeModule.createTokenWithCard(params);
      };

      this.createTokenWithBankAccountAsync = function () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _checkInit.default)(_this);
        (0, _checkArgs.default)(types.createTokenWithBankAccountParamsPropTypes, params, 'params', 'Stripe.createTokenWithBankAccount');
        return StripeModule.createTokenWithBankAccount(params);
      };

      this.createSourceWithParamsAsync = function () {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _checkInit.default)(_this);
        (0, _checkArgs.default)(types.createSourceWithParamsPropType, params, 'params', 'Stripe.createSourceWithParams');
        return StripeModule.createSourceWithParams(params);
      };
    }

    (0, _createClass2.default)(Stripe, [{
      key: "paymentRequestWithNativePayAsync",
      value: function paymentRequestWithNativePayAsync() {
        var _this2 = this;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        return _reactNative.Platform.select({
          ios: function ios() {
            return _this2.paymentRequestWithApplePay(items, options);
          },
          android: function android() {
            return _this2.paymentRequestWithAndroidPay(options);
          }
        })();
      }
    }]);
    return Stripe;
  }();

  var _default = new Stripe();

  exports.default = _default;
},492,[366,1,48,21,22,5,331,493,494,495,496,497]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = processTheme;

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _processColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function processTheme() {
    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return Object.keys(theme).reduce(function (result, key) {
      var value = theme[key];

      if (key.toLowerCase().endsWith('color')) {
        value = (0, _processColor.default)(value);
      }

      return (0, _objectSpread3.default)({}, result, (0, _defineProperty2.default)({}, key, value));
    }, {});
  }
},493,[1,49,48,74]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = checkArgs;

  var _ReactPropTypesSecret = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function checkArgs(typeSpecs, values, location, componentName) {}
},494,[1,67]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = checkInit;

  function checkInit(instance) {
    if (!instance.stripeInitialized) {
      throw new Error("You should call init first.\nRead more https://github.com/tipsi/tipsi-stripe#usage");
    }
  }
},495,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSourceWithParamsPropType = exports.paymentRequestWithAndroidPayOptionsPropTypes = exports.androidPayLineItemPropTypes = exports.createTokenWithBankAccountParamsPropTypes = exports.createTokenWithCardParamsPropTypes = exports.paymentRequestWithCardFormOptionsPropTypes = exports.paymentRequestWithApplePayOptionsPropTypes = exports.applePayOptionShippingMethodPropTypes = exports.applePayAddressFieldsPropTypes = exports.paymentRequestWithApplePayItemsPropTypes = exports.paymentRequestWithApplePayItemPropTypes = exports.canMakeApplePayPaymentsOptionsPropTypes = exports.availableApplePayNetworkPropTypes = exports.setOptionsOptionsPropTypes = exports.availableSourceTypes = exports.availableApplePayShippingTypes = exports.availableApplePayAddressFields = exports.availableApplePayNetworks = undefined;

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var availableApplePayNetworks = ['american_express', 'discover', 'master_card', 'visa'];
  exports.availableApplePayNetworks = availableApplePayNetworks;
  var availableApplePayAddressFields = ['all', 'name', 'email', 'phone', 'postal_address'];
  exports.availableApplePayAddressFields = availableApplePayAddressFields;
  var availableApplePayShippingTypes = ['shipping', 'delivery', 'store_pickup', 'service_pickup'];
  exports.availableApplePayShippingTypes = availableApplePayShippingTypes;
  var availableSourceTypes = ['bancontact', 'giropay', 'ideal', 'sepaDebit', 'sofort', 'threeDSecure', 'alipay'];
  exports.availableSourceTypes = availableSourceTypes;
  var setOptionsOptionsPropTypes = {
    publishableKey: _propTypes.default.string,
    merchantId: _propTypes.default.string,
    androidPayMode: _propTypes.default.string
  };
  exports.setOptionsOptionsPropTypes = setOptionsOptionsPropTypes;

  var availableApplePayNetworkPropTypes = _propTypes.default.oneOf(availableApplePayNetworks);

  exports.availableApplePayNetworkPropTypes = availableApplePayNetworkPropTypes;
  var canMakeApplePayPaymentsOptionsPropTypes = {
    networks: _propTypes.default.arrayOf(availableApplePayNetworkPropTypes)
  };
  exports.canMakeApplePayPaymentsOptionsPropTypes = canMakeApplePayPaymentsOptionsPropTypes;
  var paymentRequestWithApplePayItemPropTypes = {
    label: _propTypes.default.string.isRequired,
    amount: _propTypes.default.string.isRequired,
    type: _propTypes.default.oneOf(['final', 'pending'])
  };
  exports.paymentRequestWithApplePayItemPropTypes = paymentRequestWithApplePayItemPropTypes;
  var paymentRequestWithApplePayItemsPropTypes = {
    items: _propTypes.default.arrayOf(_propTypes.default.shape(paymentRequestWithApplePayItemPropTypes)).isRequired
  };
  exports.paymentRequestWithApplePayItemsPropTypes = paymentRequestWithApplePayItemsPropTypes;

  var applePayAddressFieldsPropTypes = _propTypes.default.oneOf(availableApplePayAddressFields);

  exports.applePayAddressFieldsPropTypes = applePayAddressFieldsPropTypes;
  var applePayOptionShippingMethodPropTypes = {
    id: _propTypes.default.string.isRequired,
    label: _propTypes.default.string.isRequired,
    detail: _propTypes.default.string.isRequired,
    amount: _propTypes.default.string.isRequired
  };
  exports.applePayOptionShippingMethodPropTypes = applePayOptionShippingMethodPropTypes;
  var paymentRequestWithApplePayOptionsPropTypes = {
    currencyCode: _propTypes.default.string,
    countryCode: _propTypes.default.string,
    requiredBillingAddressFields: _propTypes.default.arrayOf(applePayAddressFieldsPropTypes),
    requiredShippingAddressFields: _propTypes.default.arrayOf(applePayAddressFieldsPropTypes),
    shippingMethods: _propTypes.default.arrayOf(_propTypes.default.shape(applePayOptionShippingMethodPropTypes)),
    shippingType: _propTypes.default.oneOf(availableApplePayShippingTypes)
  };
  exports.paymentRequestWithApplePayOptionsPropTypes = paymentRequestWithApplePayOptionsPropTypes;
  var paymentRequestWithCardFormOptionsPropTypes = {
    requiredBillingAddressFields: _propTypes.default.oneOf(['full', 'zip']),
    managedAccountCurrency: _propTypes.default.string,
    smsAutofillDisabled: _propTypes.default.bool,
    prefilledInformation: _propTypes.default.shape({
      email: _propTypes.default.string,
      phone: _propTypes.default.string,
      billingAddress: _propTypes.default.shape({
        name: _propTypes.default.string,
        line1: _propTypes.default.string,
        line2: _propTypes.default.string,
        city: _propTypes.default.string,
        state: _propTypes.default.string,
        postalCode: _propTypes.default.string,
        country: _propTypes.default.string,
        phone: _propTypes.default.string,
        email: _propTypes.default.string
      })
    }),
    theme: _propTypes.default.shape({
      primaryBackgroundColor: _propTypes.default.string,
      secondaryBackgroundColor: _propTypes.default.string,
      primaryForegroundColor: _propTypes.default.string,
      secondaryForegroundColor: _propTypes.default.string,
      accentColor: _propTypes.default.string,
      errorColor: _propTypes.default.string
    })
  };
  exports.paymentRequestWithCardFormOptionsPropTypes = paymentRequestWithCardFormOptionsPropTypes;
  var createTokenWithCardParamsPropTypes = {
    number: _propTypes.default.string.isRequired,
    expMonth: _propTypes.default.number.isRequired,
    expYear: _propTypes.default.number.isRequired,
    cvc: _propTypes.default.string,
    name: _propTypes.default.string,
    addressLine1: _propTypes.default.string,
    addressLine2: _propTypes.default.string,
    addressCity: _propTypes.default.string,
    addressState: _propTypes.default.string,
    addressZip: _propTypes.default.string,
    addressCountry: _propTypes.default.string,
    country: _propTypes.default.string,
    currency: _propTypes.default.string,
    brand: _propTypes.default.string,
    last4: _propTypes.default.string,
    fingerprint: _propTypes.default.string,
    funding: _propTypes.default.string
  };
  exports.createTokenWithCardParamsPropTypes = createTokenWithCardParamsPropTypes;
  var createTokenWithBankAccountParamsPropTypes = {
    accountNumber: _propTypes.default.string.isRequired,
    countryCode: _propTypes.default.string.isRequired,
    currency: _propTypes.default.string.isRequired,
    routingNumber: _propTypes.default.string,
    accountHolderName: _propTypes.default.string,
    accountHolderType: _propTypes.default.oneOf(['company', 'individual'])
  };
  exports.createTokenWithBankAccountParamsPropTypes = createTokenWithBankAccountParamsPropTypes;
  var androidPayLineItemPropTypes = {
    currency_code: _propTypes.default.string.isRequired,
    total_price: _propTypes.default.string.isRequired,
    unit_price: _propTypes.default.string.isRequired,
    quantity: _propTypes.default.string.isRequired,
    description: _propTypes.default.string.isRequired
  };
  exports.androidPayLineItemPropTypes = androidPayLineItemPropTypes;
  var paymentRequestWithAndroidPayOptionsPropTypes = {
    total_price: _propTypes.default.string.isRequired,
    currency_code: _propTypes.default.string.isRequired,
    line_items: _propTypes.default.arrayOf(_propTypes.default.shape(androidPayLineItemPropTypes)).isRequired,
    shipping_address_required: _propTypes.default.bool,
    billing_address_required: _propTypes.default.bool
  };
  exports.paymentRequestWithAndroidPayOptionsPropTypes = paymentRequestWithAndroidPayOptionsPropTypes;
  var createSourceWithParamsPropType = {
    type: _propTypes.default.oneOf(availableSourceTypes).isRequired,
    amount: _propTypes.default.number,
    name: _propTypes.default.string,
    returnURL: _propTypes.default.string,
    statementDescriptor: _propTypes.default.string,
    currency: _propTypes.default.string,
    email: _propTypes.default.string,
    bank: _propTypes.default.string,
    iban: _propTypes.default.string,
    addressLine1: _propTypes.default.string,
    city: _propTypes.default.string,
    postalCode: _propTypes.default.string,
    country: _propTypes.default.string,
    card: _propTypes.default.string
  };
  exports.createSourceWithParamsPropType = createSourceWithParamsPropType;
},496,[1,65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var errorCodes = {
    busy: {
      errorCode: 'busy',
      description: 'Previous request is not completed'
    },
    cancelled: {
      errorCode: 'cancelled',
      description: 'Cancelled by user'
    },
    purchaseCancelled: {
      errorCode: 'purchaseCancelled',
      description: 'Purchase was cancelled'
    },
    sourceStatusCanceled: {
      errorCode: 'sourceStatusCanceled',
      description: 'Cancelled by user'
    },
    sourceStatusPending: {
      errorCode: 'sourceStatusPending',
      description: 'The source has been created and is awaiting customer action'
    },
    sourceStatusFailed: {
      errorCode: 'sourceStatusFailed',
      description: "The source status is unknown. You shouldn't encounter this value."
    },
    sourceStatusUnknown: {
      errorCode: 'sourceStatusUnknown',
      description: 'Source polling unknown error'
    },
    deviceNotSupportsNativePay: {
      errorCode: 'deviceNotSupportsNativePay',
      description: _reactNative.Platform.select({
        ios: 'This device does not support Apple Pay',
        android: 'This device does not support Google Pay'
      })
    },
    noPaymentRequest: {
      errorCode: 'noPaymentRequest',
      description: 'Missing payment request'
    },
    noMerchantIdentifier: {
      errorCode: 'noMerchantIdentifier',
      description: 'Missing merchant identifier'
    },
    noAmount: {
      errorCode: 'noAmount',
      description: 'Amount should be greater than 0'
    },
    parseResponse: {
      errorCode: 'parseResponse',
      description: 'Failed to parse JSON'
    },
    activityUnavailable: {
      errorCode: 'activityUnavailable',
      description: 'Cannot continue with no current activity'
    },
    playServicesUnavailable: {
      errorCode: 'playServicesUnavailable',
      description: 'Play services are not available'
    },
    redirectCancelled: {
      errorCode: 'redirectCancelled',
      description: 'Redirect cancelled'
    },
    redirectNoSource: {
      errorCode: 'redirectNoSource',
      description: 'Received redirect uri but there is no source to process'
    },
    redirectWrongSourceId: {
      errorCode: 'redirectWrongSourceId',
      description: 'Received wrong source id in redirect uri'
    },
    redirectCancelledByUser: {
      errorCode: 'redirectCancelledByUser',
      description: 'User cancelled source redirect'
    },
    redirectFailed: {
      errorCode: 'redirectFailed',
      description: 'Source redirect failed'
    },
    api: {
      errorCode: 'api'
    },
    apiConnection: {
      errorCode: 'apiConnection'
    },
    redirectSpecific: {
      errorCode: 'redirectSpecific'
    },
    card: {
      errorCode: 'card'
    },
    invalidRequest: {
      errorCode: 'invalidRequest'
    },
    stripe: {
      errorCode: 'stripe'
    },
    rateLimit: {
      errorCode: 'rateLimit'
    },
    authentication: {
      errorCode: 'authentication'
    },
    permission: {
      errorCode: 'permission'
    }
  };

  var _default = Object.freeze(errorCodes);

  exports.default = _default;
},497,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Easing", {
    enumerable: true,
    get: function get() {
      return _Easing.default;
    }
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _Easing = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _AnimatedClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _AnimatedCode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var base = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var derived = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10]));

  var _createAnimatedComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _decay = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _timing = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _spring = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _TimingAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _SpringAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _DecayAnimation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _ConfigHelper = _$$_REQUIRE(_dependencyMap[18]);

  var _backwardCompatibleAnimWrapper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var Animated = (0, _objectSpread2.default)({
    View: (0, _createAnimatedComponent.default)(_reactNative.View),
    Text: (0, _createAnimatedComponent.default)(_reactNative.Text),
    Image: (0, _createAnimatedComponent.default)(_reactNative.Image),
    ScrollView: (0, _createAnimatedComponent.default)(_reactNative.ScrollView),
    Code: _AnimatedCode.default,
    createAnimatedComponent: _createAnimatedComponent.default,
    Clock: _AnimatedClock.default,
    Value: _AnimatedValue.default,
    Node: _AnimatedNode.default
  }, base, derived, {
    decay: (0, _backwardCompatibleAnimWrapper.default)(_decay.default, _DecayAnimation.default),
    timing: (0, _backwardCompatibleAnimWrapper.default)(_timing.default, _TimingAnimation.default),
    spring: (0, _backwardCompatibleAnimWrapper.default)(_spring.default, _SpringAnimation.default),
    addWhitelistedNativeProps: _ConfigHelper.addWhitelistedNativeProps,
    addWhitelistedUIProps: _ConfigHelper.addWhitelistedUIProps
  });
  var _default = Animated;
  exports.default = _default;
},498,[366,1,48,5,499,512,506,504,523,500,524,535,539,540,541,542,544,546,547,548]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _base = _$$_REQUIRE(_dependencyMap[3]);

  var _AnimatedBezier = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var Easing = function () {
    function Easing() {
      (0, _classCallCheck2.default)(this, Easing);
    }

    (0, _createClass2.default)(Easing, null, [{
      key: "linear",
      value: function linear(t) {
        return t;
      }
    }, {
      key: "ease",
      value: function ease(t) {
        return new _AnimatedBezier.default(t, 0.42, 0, 1, 1);
      }
    }, {
      key: "quad",
      value: function quad(t) {
        return (0, _base.multiply)(t, t);
      }
    }, {
      key: "cubic",
      value: function cubic(t) {
        return (0, _base.multiply)(t, t, t);
      }
    }, {
      key: "poly",
      value: function poly(n) {
        return function (t) {
          return (0, _base.pow)(t, n);
        };
      }
    }, {
      key: "sin",
      value: function sin(t) {
        return (0, _base.sub)(1, (0, _base.cos)((0, _base.multiply)(t, Math.PI, 0.5)));
      }
    }, {
      key: "circle",
      value: function circle(t) {
        return (0, _base.sub)(1, (0, _base.sqrt)((0, _base.sub)(1, (0, _base.multiply)(t, t))));
      }
    }, {
      key: "exp",
      value: function exp(t) {
        return (0, _base.pow)(2, (0, _base.multiply)(10, (0, _base.sub)(t, 1)));
      }
    }, {
      key: "elastic",
      value: function elastic() {
        var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var p = bounciness * Math.PI;
        return function (t) {
          return (0, _base.sub)(1, (0, _base.multiply)((0, _base.pow)((0, _base.cos)((0, _base.multiply)(t, Math.PI, 0.5)), 3), (0, _base.cos)((0, _base.multiply)(t, p))));
        };
      }
    }, {
      key: "back",
      value: function back(s) {
        if (s === undefined) {
          s = 1.70158;
        }

        return function (t) {
          return (0, _base.multiply)(t, t, (0, _base.sub)((0, _base.multiply)((0, _base.add)(s, 1), t), s));
        };
      }
    }, {
      key: "bounce",
      value: function bounce(t) {
        var sq = function sq(v) {
          return (0, _base.multiply)(7.5625, v, v);
        };

        return (0, _base.cond)((0, _base.lessThan)(t, 0.36363636363636365), sq(t), (0, _base.cond)((0, _base.lessThan)(t, 0.7272727272727273), (0, _base.add)(0.75, sq((0, _base.sub)(t, 0.5454545454545454))), (0, _base.cond)((0, _base.lessThan)(t, 0.9057971014492754), (0, _base.add)(0.9375, sq((0, _base.sub)(t, 0.8181818181818182))), (0, _base.add)(0.984375, sq((0, _base.sub)(t, 0.9545454545454546))))));
      }
    }, {
      key: "bezier",
      value: function bezier(x1, y1, x2, y2) {
        return function (t) {
          return new _AnimatedBezier.default(t, x1, y1, x2, y2);
        };
      }
    }, {
      key: "in",
      value: function _in(easing) {
        return easing;
      }
    }, {
      key: "out",
      value: function out(easing) {
        return function (t) {
          return (0, _base.sub)(1, easing((0, _base.sub)(1, t)));
        };
      }
    }, {
      key: "inOut",
      value: function inOut(easing) {
        return function (t) {
          return (0, _base.cond)((0, _base.lessThan)(t, 0.5), (0, _base.divide)(easing((0, _base.multiply)(t, 2)), 2), (0, _base.sub)(1, (0, _base.divide)(easing((0, _base.multiply)((0, _base.sub)(1, t), 2)), 2)));
        };
      }
    }]);
    return Easing;
  }();

  exports.default = Easing;
},499,[1,21,22,500,522]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.event = exports.clockRunning = exports.stopClock = exports.concat = exports.always = exports.startClock = exports.debug = exports.call = exports.block = exports.cond = exports.set = exports.not = exports.defined = exports.or = exports.and = exports.neq = exports.greaterOrEq = exports.lessOrEq = exports.greaterThan = exports.eq = exports.lessThan = exports.round = exports.exp = exports.cos = exports.sin = exports.sqrt = exports.modulo = exports.pow = exports.divide = exports.multiply = exports.sub = exports.add = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _AnimatedCond = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _AnimatedSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _AnimatedOperator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _AnimatedStartClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedStopClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AnimatedClockTest = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _AnimatedDebug = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _AnimatedCall = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _AnimatedEvent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _AnimatedAlways = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _AnimatedConcat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _utils = _$$_REQUIRE(_dependencyMap[13]);

  function operator(name) {
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new _AnimatedOperator.default(name, args.map(_utils.adapt));
    };
  }

  var add = operator('add');
  exports.add = add;
  var sub = operator('sub');
  exports.sub = sub;
  var multiply = operator('multiply');
  exports.multiply = multiply;
  var divide = operator('divide');
  exports.divide = divide;
  var pow = operator('pow');
  exports.pow = pow;
  var modulo = operator('modulo');
  exports.modulo = modulo;
  var sqrt = operator('sqrt');
  exports.sqrt = sqrt;
  var sin = operator('sin');
  exports.sin = sin;
  var cos = operator('cos');
  exports.cos = cos;
  var exp = operator('exp');
  exports.exp = exp;
  var round = operator('round');
  exports.round = round;
  var lessThan = operator('lessThan');
  exports.lessThan = lessThan;
  var eq = operator('eq');
  exports.eq = eq;
  var greaterThan = operator('greaterThan');
  exports.greaterThan = greaterThan;
  var lessOrEq = operator('lessOrEq');
  exports.lessOrEq = lessOrEq;
  var greaterOrEq = operator('greaterOrEq');
  exports.greaterOrEq = greaterOrEq;
  var neq = operator('neq');
  exports.neq = neq;
  var and = operator('and');
  exports.and = and;
  var or = operator('or');
  exports.or = or;
  var defined = operator('defined');
  exports.defined = defined;
  var not = operator('not');
  exports.not = not;

  var set = function set(what, value) {
    return new _AnimatedSet.default(what, (0, _utils.adapt)(value));
  };

  exports.set = set;

  var cond = function cond(_cond, ifBlock, elseBlock) {
    return new _AnimatedCond.default((0, _utils.adapt)(_cond), (0, _utils.adapt)(ifBlock), elseBlock === undefined ? undefined : (0, _utils.adapt)(elseBlock));
  };

  exports.cond = cond;

  var block = function block(items) {
    return (0, _utils.adapt)(items);
  };

  exports.block = block;

  var call = function call(args, func) {
    return new _AnimatedCall.default(args, func);
  };

  exports.call = call;

  var debug = function debug(message, value) {
    return value;
  };

  exports.debug = debug;

  var startClock = function startClock(clock) {
    return new _AnimatedStartClock.default(clock);
  };

  exports.startClock = startClock;

  var always = function always(item) {
    return new _AnimatedAlways.default(item);
  };

  exports.always = always;

  var concat = function concat() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return new _AnimatedConcat.default(args.map(_utils.adapt));
  };

  exports.concat = concat;

  var stopClock = function stopClock(clock) {
    return new _AnimatedStopClock.default(clock);
  };

  exports.stopClock = stopClock;

  var clockRunning = function clockRunning(clock) {
    return new _AnimatedClockTest.default(clock);
  };

  exports.clockRunning = clockRunning;

  var event = function event(argMapping, config) {
    return new _AnimatedEvent.default(argMapping, config);
  };

  exports.event = event;
},500,[1,11,501,509,510,511,513,514,515,516,518,519,521,502]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _utils = _$$_REQUIRE(_dependencyMap[6]);

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var AnimatedCond = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedCond, _AnimatedNode);

    function AnimatedCond(condition, ifBlock, elseBlock) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedCond);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedCond).call(this, {
        type: 'cond',
        cond: condition.__nodeID,
        ifBlock: ifBlock.__nodeID,
        elseBlock: elseBlock ? elseBlock.__nodeID : undefined
      }, [condition, ifBlock, elseBlock]));
      _this._condition = condition;
      _this._ifBlock = ifBlock;
      _this._elseBlock = elseBlock;
      return _this;
    }

    (0, _createClass2.default)(AnimatedCond, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        if ((0, _utils.val)(this._condition)) {
          return (0, _utils.val)(this._ifBlock);
        } else {
          return this._elseBlock !== undefined ? (0, _utils.val)(this._elseBlock) : undefined;
        }
      }
    }]);
    return AnimatedCond;
  }(_AnimatedNode2.default);

  exports.default = AnimatedCond;
},501,[1,21,22,34,37,40,502,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.adapt = adapt;
  exports.val = val;

  var _AnimatedBlock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function nodify(v) {
    if (typeof v === 'object' && v.__isProxy) {
      if (!v.__val) {
        v.__val = new _AnimatedValue.default(0);
      }

      return v.__val;
    }

    return v instanceof _AnimatedNode.default ? v : new _AnimatedValue.default(v);
  }

  function adapt(v) {
    return Array.isArray(v) ? new _AnimatedBlock.default(v.map(function (node) {
      return adapt(node);
    })) : nodify(v);
  }

  function val(v) {
    return v && v.__getValue ? v.__getValue() : v || 0;
  }
},502,[1,503,504,506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _utils = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedBlock = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedBlock, _AnimatedNode);

    function AnimatedBlock(array) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedBlock);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedBlock).call(this, {
        type: 'block',
        block: array.map(function (n) {
          return n.__nodeID;
        })
      }, array));
      _this._array = array;
      return _this;
    }

    (0, _createClass2.default)(AnimatedBlock, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        var result;

        this._array.forEach(function (node) {
          result = (0, _utils.val)(node);
        });

        return result;
      }
    }]);
    return AnimatedBlock;
  }(_AnimatedNode2.default);

  exports.default = AnimatedBlock;
},503,[1,21,22,34,37,40,504,502]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ReanimatedModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var UPDATED_NODES = [];
  var loopID = 1;
  var propUpdatesEnqueued = null;

  function sanitizeConfig(config) {
    for (var key in config) {
      var value = config[key];

      if (value instanceof AnimatedNode) {
        config[key] = value.__nodeID;
      }
    }

    return config;
  }

  function runPropUpdates() {
    var visitedNodes = new Set();

    var findAndUpdateNodes = function findAndUpdateNodes(node) {
      if (visitedNodes.has(node)) {
        return;
      } else {
        visitedNodes.add(node);
      }

      if (typeof node.update === 'function') {
        node.update();
      } else {
        node.__getChildren().forEach(findAndUpdateNodes);
      }
    };

    for (var i = 0; i < UPDATED_NODES.length; i++) {
      var node = UPDATED_NODES[i];
      findAndUpdateNodes(node);
    }

    UPDATED_NODES.length = 0;
    propUpdatesEnqueued = null;
    loopID += 1;
  }

  var nodeCount = 0;

  var AnimatedNode = function () {
    function AnimatedNode(nodeConfig, inputNodes) {
      (0, _classCallCheck2.default)(this, AnimatedNode);
      this.__lastLoopID = 0;
      this.__memoizedValue = null;
      this.__children = [];
      this.__nodeID = ++nodeCount;
      this.__nodeConfig = sanitizeConfig(nodeConfig);
      this.__initialized = false;
      this.__inputNodes = inputNodes && inputNodes.filter(function (node) {
        return node instanceof AnimatedNode;
      });
    }

    (0, _createClass2.default)(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {
        var _this = this;

        this.__nativeInitialize();

        this.__inputNodes && this.__inputNodes.forEach(function (node) {
          return node.__addChild(_this);
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this2 = this;

        this.__inputNodes && this.__inputNodes.forEach(function (node) {
          return node.__removeChild(_this2);
        });

        this.__nativeTearDown();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        if (this.__lastLoopID < loopID) {
          this.__lastLoopID = loopID;
          return this.__memoizedValue = this.__onEvaluate();
        }

        return this.__memoizedValue;
      }
    }, {
      key: "__forceUpdateCache",
      value: function __forceUpdateCache(newValue) {
        this.__memoizedValue = newValue;

        this.__markUpdated();
      }
    }, {
      key: "__dangerouslyRescheduleEvaluate",
      value: function __dangerouslyRescheduleEvaluate() {
        this.__lastLoopID = 0;

        this.__markUpdated();
      }
    }, {
      key: "__markUpdated",
      value: function __markUpdated() {
        UPDATED_NODES.push(this);

        if (!propUpdatesEnqueued) {
          propUpdatesEnqueued = setImmediate(runPropUpdates);
        }
      }
    }, {
      key: "__nativeInitialize",
      value: function __nativeInitialize() {
        if (!this.__initialized) {
          _ReanimatedModule.default.createNode(this.__nodeID, (0, _objectSpread2.default)({}, this.__nodeConfig));

          this.__initialized = true;
        }
      }
    }, {
      key: "__nativeTearDown",
      value: function __nativeTearDown() {
        if (this.__initialized) {
          _ReanimatedModule.default.dropNode(this.__nodeID);

          this.__initialized = false;
        }
      }
    }, {
      key: "isNativelyInitialized",
      value: function isNativelyInitialized() {
        return this.__initialized;
      }
    }, {
      key: "__onEvaluate",
      value: function __onEvaluate() {
        throw new Error('Missing implementation of onEvaluate');
      }
    }, {
      key: "__getProps",
      value: function __getProps() {
        return this.__getValue();
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this.__children;
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this.__children.length === 0) {
          this.__attach();
        }

        this.__children.push(child);

        child.__nativeInitialize();

        _ReanimatedModule.default.connectNodes(this.__nodeID, child.__nodeID);
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this.__children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        _ReanimatedModule.default.disconnectNodes(this.__nodeID, child.__nodeID);

        this.__children.splice(index, 1);

        if (this.__children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "_connectAnimatedView",
      value: function _connectAnimatedView(nativeViewTag) {
        _ReanimatedModule.default.connectNodeToView(this.__nodeID, nativeViewTag);
      }
    }, {
      key: "_disconnectAnimatedView",
      value: function _disconnectAnimatedView(nativeViewTag) {
        _ReanimatedModule.default.disconnectNodeFromView(this.__nodeID, nativeViewTag);
      }
    }]);
    return AnimatedNode;
  }();

  exports.default = AnimatedNode;
},504,[1,48,21,22,505]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var ReanimatedModule = _reactNative.NativeModules.ReanimatedModule;
  var _default = ReanimatedModule;
  exports.default = _default;
},505,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _base = _$$_REQUIRE(_dependencyMap[8]);

  var _utils = _$$_REQUIRE(_dependencyMap[9]);

  var _evaluateOnce = _$$_REQUIRE(_dependencyMap[10]);

  var _interpolate2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _ReanimatedModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  function sanitizeValue(value) {
    return value === null || value === undefined || typeof value === 'string' ? value : Number(value);
  }

  var AnimatedValue = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedValue, _AnimatedNode);

    function AnimatedValue(value) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedValue);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedValue).call(this, {
        type: 'value',
        value: sanitizeValue(value)
      }));
      _this._startingValue = _this._value = value;
      _this._animation = null;
      return _this;
    }

    (0, _createClass2.default)(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        var _this2 = this;

        _ReanimatedModule.default.getValue(this.__nodeID, function (val) {
          return _this2.__nodeConfig.value = val;
        });

        this.__detachAnimation(this._animation);

        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__detachAnimation",
      value: function __detachAnimation(animation) {
        animation && animation.__detach();

        if (this._animation === animation) {
          this._animation = null;
        }
      }
    }, {
      key: "__attachAnimation",
      value: function __attachAnimation(animation) {
        this.__detachAnimation(this._animation);

        this._animation = animation;
      }
    }, {
      key: "__onEvaluate",
      value: function __onEvaluate() {
        if (this.__inputNodes && this.__inputNodes.length) {
          this.__inputNodes.forEach(_utils.val);
        }

        return this._value + this._offset;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value) {
        this._value = value;

        this.__forceUpdateCache(value);
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        this.__detachAnimation(this._animation);

        (0, _evaluateOnce.evaluateOnce)((0, _base.set)(this, value), this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return (0, _interpolate2.default)(this, config);
      }
    }]);
    return AnimatedValue;
  }(_AnimatedNode2.default);

  exports.default = AnimatedValue;
},506,[1,21,22,34,37,38,40,504,500,502,507,508,505]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.evaluateOnce = evaluateOnce;

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _base = _$$_REQUIRE(_dependencyMap[2]);

  function evaluateOnce(node) {
    var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var callback = arguments.length > 2 ? arguments[2] : undefined;

    if (!Array.isArray(input)) {
      input = [input];
    }

    var done = new _AnimatedValue.default(0);
    var evalNode = (0, _base.cond)(done, 0, (0, _base.call)([node, (0, _base.set)(done, 1)], function () {
      callback && callback();

      for (var i = 0; i < input.length; i++) {
        input[i].__removeChild(alwaysNode);

        alwaysNode.__detach();
      }
    }));
    var alwaysNode = (0, _base.always)(evalNode);

    for (var i = 0; i < input.length; i++) {
      input[i].__addChild(alwaysNode);

      alwaysNode.__attach();
    }
  }
},507,[1,506,500]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = interpolate;
  exports.Extrapolate = undefined;

  var _base = _$$_REQUIRE(_dependencyMap[1]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function interpolateInternalSingle(value, inputRange, outputRange, offset) {
    var inS = inputRange[offset];
    var inE = inputRange[offset + 1];
    var outS = outputRange[offset];
    var outE = outputRange[offset + 1];
    var progress = (0, _base.divide)((0, _base.sub)(value, inS), (0, _base.sub)(inE, inS));
    return (0, _base.add)(outS, (0, _base.multiply)(progress, (0, _base.sub)(outE, outS)));
  }

  function interpolateInternal(value, inputRange, outputRange) {
    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    if (inputRange.length - offset === 2) {
      return interpolateInternalSingle(value, inputRange, outputRange, offset);
    }

    return (0, _base.cond)((0, _base.lessThan)(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));
  }

  var Extrapolate = {
    EXTEND: 'extend',
    CLAMP: 'clamp',
    IDENTITY: 'identity'
  };
  exports.Extrapolate = Extrapolate;

  function checkNonDecreasing(name, arr) {
    for (var i = 1; i < arr.length; ++i) {
      if (arr[i] instanceof _AnimatedNode.default || arr[i - 1] instanceof _AnimatedNode.default) continue;
      (0, _invariant.default)(arr[i] >= arr[i - 1], '%s must be monotonically non-decreasing. (%s)', name, arr);
    }
  }

  function checkMinElements(name, arr) {
    (0, _invariant.default)(arr.length >= 2, '%s must have at least 2 elements. (%s)', name, arr);
  }

  function checkValidNumbers(name, arr) {
    for (var i = 0; i < arr.length; i++) {
      if (arr[i] instanceof _AnimatedNode.default) continue;
      (0, _invariant.default)(Number.isFinite(arr[i]), '%s cannot include %s. (%s)', name, arr[i], arr);
    }
  }

  function interpolate(value, config) {
    var inputRange = config.inputRange,
        outputRange = config.outputRange,
        _config$extrapolate = config.extrapolate,
        extrapolate = _config$extrapolate === undefined ? Extrapolate.EXTEND : _config$extrapolate,
        extrapolateLeft = config.extrapolateLeft,
        extrapolateRight = config.extrapolateRight;
    checkMinElements('inputRange', inputRange);
    checkValidNumbers('inputRange', inputRange);
    checkMinElements('outputRange', outputRange);
    checkValidNumbers('outputRange', outputRange);
    checkNonDecreasing('inputRange', inputRange);
    (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange and outputRange must be the same length.');
    var left = extrapolateLeft || extrapolate;
    var right = extrapolateRight || extrapolate;
    var output = interpolateInternal(value, inputRange, outputRange);

    if (left === Extrapolate.EXTEND) {} else if (left === Extrapolate.CLAMP) {
      output = (0, _base.cond)((0, _base.lessThan)(value, inputRange[0]), outputRange[0], output);
    } else if (left === Extrapolate.IDENTITY) {
      output = (0, _base.cond)((0, _base.lessThan)(value, inputRange[0]), value, output);
    }

    if (right === Extrapolate.EXTEND) {} else if (right === Extrapolate.CLAMP) {
      output = (0, _base.cond)((0, _base.greaterThan)(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);
    } else if (right === Extrapolate.IDENTITY) {
      output = (0, _base.cond)((0, _base.greaterThan)(value, inputRange[inputRange.length - 1]), value, output);
    }

    return output;
  }
},508,[1,500,6,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _utils = _$$_REQUIRE(_dependencyMap[7]);

  var AnimatedSet = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedSet, _AnimatedNode);

    function AnimatedSet(what, value) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedSet);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedSet).call(this, {
        type: 'set',
        what: what.__nodeID,
        value: value.__nodeID
      }, [value]));
      _this._what = what;
      _this._value = value;
      return _this;
    }

    (0, _createClass2.default)(AnimatedSet, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        var newValue = (0, _utils.val)(this._value);

        this._what._updateValue(newValue);

        return newValue;
      }
    }]);
    return AnimatedSet;
  }(_AnimatedNode2.default);

  exports.default = AnimatedSet;
},509,[1,21,22,34,37,40,504,502]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _utils = _$$_REQUIRE(_dependencyMap[7]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  function reduce(fn) {
    return function (input) {
      return input.reduce(function (a, b) {
        return fn((0, _utils.val)(a), (0, _utils.val)(b));
      });
    };
  }

  function reduceFrom(fn, initialValue) {
    return function (input) {
      return input.reduce(function (a, b) {
        return fn((0, _utils.val)(a), (0, _utils.val)(b));
      }, initialValue);
    };
  }

  function infix(fn) {
    return function (input) {
      return fn((0, _utils.val)(input[0]), (0, _utils.val)(input[1]));
    };
  }

  function single(fn) {
    return function (input) {
      return fn((0, _utils.val)(input[0]));
    };
  }

  var OPERATIONS = {
    add: reduce(function (a, b) {
      return a + b;
    }),
    sub: reduce(function (a, b) {
      return a - b;
    }),
    multiply: reduce(function (a, b) {
      return a * b;
    }),
    divide: reduce(function (a, b) {
      return a / b;
    }),
    pow: reduce(function (a, b) {
      return Math.pow(a, b);
    }),
    modulo: reduce(function (a, b) {
      return (a % b + b) % b;
    }),
    sqrt: single(function (a) {
      return Math.sqrt(a);
    }),
    sin: single(function (a) {
      return Math.sin(a);
    }),
    cos: single(function (a) {
      return Math.cos(a);
    }),
    exp: single(function (a) {
      return Math.exp(a);
    }),
    and: reduceFrom(function (a, b) {
      return a && b;
    }, true),
    or: reduceFrom(function (a, b) {
      return a || b;
    }, false),
    not: single(function (a) {
      return !a;
    }),
    defined: single(function (a) {
      return a !== null && a !== undefined && !isNaN(a);
    }),
    lessThan: infix(function (a, b) {
      return a < b;
    }),
    eq: infix(function (a, b) {
      return a == b;
    }),
    greaterThan: infix(function (a, b) {
      return a > b;
    }),
    lessOrEq: infix(function (a, b) {
      return a <= b;
    }),
    greaterOrEq: infix(function (a, b) {
      return a >= b;
    }),
    neq: infix(function (a, b) {
      return a != b;
    })
  };

  var AnimatedOperator = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedOperator, _AnimatedNode);

    function AnimatedOperator(operator, input) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedOperator);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedOperator).call(this, {
        type: 'op',
        op: operator,
        input: input.map(function (n) {
          return n.__nodeID;
        })
      }, input));
      _this._op = operator;
      _this._input = input;
      return _this;
    }

    (0, _createClass2.default)(AnimatedOperator, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        if (!this._operation) {
          this._operation = OPERATIONS[this._op];
          (0, _invariant.default)(this._operation, "Illegal operator '%s'", this._op);
        }

        return this._operation(this._input);
      }
    }]);
    return AnimatedOperator;
  }(_AnimatedNode2.default);

  exports.default = AnimatedOperator;
},510,[1,21,22,34,37,40,504,502,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AnimatedClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var AnimatedStartClock = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedStartClock, _AnimatedNode);

    function AnimatedStartClock(clockNode) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedStartClock);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedStartClock).call(this, {
        type: 'clockStart',
        clock: clockNode.__nodeID
      }));
      (0, _invariant.default)(clockNode instanceof _AnimatedClock.default, 'Node is not of an AnimatedClock type');
      _this._clockNode = clockNode;
      return _this;
    }

    (0, _createClass2.default)(AnimatedStartClock, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        this._clockNode.start();

        return 0;
      }
    }]);
    return AnimatedStartClock;
  }(_AnimatedNode2.default);

  exports.default = AnimatedStartClock;
},511,[1,21,22,34,37,40,504,512,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.clock = exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AnimatedValue2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _utils = _$$_REQUIRE(_dependencyMap[9]);

  var AnimatedMainClock = function (_AnimatedValue) {
    (0, _inherits2.default)(AnimatedMainClock, _AnimatedValue);

    function AnimatedMainClock() {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedMainClock);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedMainClock).call(this, {
        type: 'MAIN_CLOCK'
      }));

      _this._runFrame = function () {
        _this._updateValue(0);

        if (_this.__children.length > 0) {
          _this._frameCallback = requestAnimationFrame(_this._runFrame);
        }
      };

      return _this;
    }

    (0, _createClass2.default)(AnimatedMainClock, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        return +new Date();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedMainClock.prototype), "__attach", this).call(this);

        if (!this._frameCallback) {
          this._frameCallback = requestAnimationFrame(this._runFrame);
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this._frameCallback) {
          cancelAnimationFrame(this._frameCallback);
          this._frameCallback = null;
        }

        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedMainClock.prototype), "__detach", this).call(this);
      }
    }]);
    return AnimatedMainClock;
  }(_AnimatedValue2.default);

  var mainClock = new AnimatedMainClock();

  var AnimatedClock = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedClock, _AnimatedNode);

    function AnimatedClock() {
      (0, _classCallCheck2.default)(this, AnimatedClock);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedClock).call(this, {
        type: 'clock'
      }));
    }

    (0, _createClass2.default)(AnimatedClock, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        return (0, _utils.val)(mainClock);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedClock.prototype), "__attach", this).call(this);

        if (this._started && !this._attached) {
          mainClock.__addChild(this);
        }

        this._attached = true;
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this._started && this._attached) {
          mainClock.__removeChild(this);
        }

        this._attached = false;
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedClock.prototype), "__detach", this).call(this);
      }
    }, {
      key: "start",
      value: function start() {
        if (!this._started && this._attached) {
          mainClock.__addChild(this);
        }

        this._started = true;
      }
    }, {
      key: "stop",
      value: function stop() {
        if (this._started && this._attached) {
          mainClock.__removeChild(this);
        }

        this._started = false;
      }
    }, {
      key: "isStarted",
      value: function isStarted() {
        return this._started;
      }
    }]);
    return AnimatedClock;
  }(_AnimatedNode2.default);

  exports.default = AnimatedClock;
  var clock = mainClock;
  exports.clock = clock;
},512,[1,21,22,34,37,38,40,506,504,502]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AnimatedClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var AnimatedStopClock = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedStopClock, _AnimatedNode);

    function AnimatedStopClock(clockNode) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedStopClock);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedStopClock).call(this, {
        type: 'clockStop',
        clock: clockNode.__nodeID
      }));
      (0, _invariant.default)(clockNode instanceof _AnimatedClock.default, 'Node is not of an AnimatedClock type');
      _this._clockNode = clockNode;
      return _this;
    }

    (0, _createClass2.default)(AnimatedStopClock, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        this._clockNode.stop();

        return 0;
      }
    }]);
    return AnimatedStopClock;
  }(_AnimatedNode2.default);

  exports.default = AnimatedStopClock;
},513,[1,21,22,34,37,40,504,512,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AnimatedClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var AnimatedClockTest = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedClockTest, _AnimatedNode);

    function AnimatedClockTest(clockNode) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedClockTest);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedClockTest).call(this, {
        type: 'clockTest',
        clock: clockNode.__nodeID
      }));
      (0, _invariant.default)(clockNode instanceof _AnimatedClock.default, 'Node is not of an AnimatedClock type');
      _this._clockNode = clockNode;
      return _this;
    }

    (0, _createClass2.default)(AnimatedClockTest, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        return this._clockNode.isStarted() ? 1 : 0;
      }
    }]);
    return AnimatedClockTest;
  }(_AnimatedNode2.default);

  exports.default = AnimatedClockTest;
},514,[1,21,22,34,37,40,504,512,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _utils = _$$_REQUIRE(_dependencyMap[6]);

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var AnimatedDebug = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedDebug, _AnimatedNode);

    function AnimatedDebug(message, value) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedDebug);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedDebug).call(this, {
        type: 'debug',
        message: message,
        value: value.__nodeID
      }, [value]));
      _this._message = message;
      _this._value = value;
      return _this;
    }

    (0, _createClass2.default)(AnimatedDebug, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        var value = (0, _utils.val)(this._value);
        console.log(this._message, value);
        return value;
      }
    }]);
    return AnimatedDebug;
  }(_AnimatedNode2.default);

  exports.default = AnimatedDebug;
},515,[1,21,22,34,37,40,502,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _ReanimatedEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _utils = _$$_REQUIRE(_dependencyMap[8]);

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var NODE_MAPPING = new Map();

  function listener(data) {
    var node = NODE_MAPPING.get(data.id);
    node && node._callback(data.args);
  }

  var AnimatedCall = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedCall, _AnimatedNode);

    function AnimatedCall(args, jsFunction) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedCall);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedCall).call(this, {
        type: 'call',
        input: args.map(function (n) {
          return n.__nodeID;
        })
      }, args));
      _this._callback = jsFunction;
      _this._args = args;
      return _this;
    }

    (0, _createClass2.default)(AnimatedCall, [{
      key: "__attach",
      value: function __attach() {
        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedCall.prototype), "__attach", this).call(this);
        NODE_MAPPING.set(this.__nodeID, this);

        if (NODE_MAPPING.size === 1) {
          _ReanimatedEventEmitter.default.addListener('onReanimatedCall', listener);
        }
      }
    }, {
      key: "__detach",
      value: function __detach() {
        NODE_MAPPING.delete(this.__nodeID);

        if (NODE_MAPPING.size === 0) {
          _ReanimatedEventEmitter.default.removeAllListeners('onReanimatedCall');
        }

        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedCall.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__onEvaluate",
      value: function __onEvaluate() {
        this._callback(this._args.map(_utils.val));

        return 0;
      }
    }]);
    return AnimatedCall;
  }(_AnimatedNode2.default);

  exports.default = AnimatedCall;
},516,[1,21,22,34,37,38,40,517,502,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _ReanimatedModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _default = new _reactNative.NativeEventEmitter(_ReanimatedModule.default);

  exports.default = _default;
},517,[1,505,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);

  var _ReanimatedModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _AnimatedAlways = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _createEventObjectProxyPolyfill = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  function sanitizeArgMapping(argMapping) {
    var eventMappings = [];
    var alwaysNodes = [];

    var traverse = function traverse(value, path) {
      if (value instanceof _AnimatedValue.default) {
        eventMappings.push(path.concat(value.__nodeID));
      } else if (typeof value === 'object' && value.__val) {
        eventMappings.push(path.concat(value.__val.__nodeID));
      } else if (typeof value === 'function') {
        var node = new _AnimatedValue.default(0);
        alwaysNodes.push(new _AnimatedAlways.default(value(node)));
        eventMappings.push(path.concat(node.__nodeID));
      } else if (typeof value === 'object') {
        for (var key in value) {
          traverse(value[key], path.concat(key));
        }
      }
    };

    (0, _invariant.default)(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    var ev = argMapping[0].nativeEvent;

    if (typeof ev === 'object') {
      traverse(ev, []);
    } else if (typeof ev === 'function') {
      var proxyHandler = {
        get: function get(target, name) {
          if (name === '__isProxy') {
            return true;
          }

          if (!target[name] && name !== '__val') {
            target[name] = new Proxy({}, proxyHandler);
          }

          return target[name];
        },
        set: function set(target, prop, value) {
          if (prop === '__val') {
            target[prop] = value;
          }
        }
      };
      var proxy = typeof Proxy === 'function' ? new Proxy({}, proxyHandler) : (0, _createEventObjectProxyPolyfill.default)();
      alwaysNodes.push(new _AnimatedAlways.default(ev(proxy)));
      traverse(proxy, []);
    }

    return {
      eventMappings: eventMappings,
      alwaysNodes: alwaysNodes
    };
  }

  var AnimatedEvent = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedEvent, _AnimatedNode);

    function AnimatedEvent(argMapping) {
      var _this;

      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      (0, _classCallCheck2.default)(this, AnimatedEvent);

      var _sanitizeArgMapping = sanitizeArgMapping(argMapping),
          eventMappings = _sanitizeArgMapping.eventMappings,
          alwaysNodes = _sanitizeArgMapping.alwaysNodes;

      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedEvent).call(this, {
        type: 'event',
        argMapping: eventMappings
      }));
      _this.__isNative = true;
      _this._alwaysNodes = alwaysNodes;
      return _this;
    }

    (0, _createClass2.default)(AnimatedEvent, [{
      key: "attachEvent",
      value: function attachEvent(viewRef, eventName) {
        for (var i = 0; i < this._alwaysNodes.length; i++) {
          this._alwaysNodes[i].__attach();
        }

        this.__attach();

        var viewTag = (0, _reactNative.findNodeHandle)(viewRef);

        _ReanimatedModule.default.attachEvent(viewTag, eventName, this.__nodeID);
      }
    }, {
      key: "detachEvent",
      value: function detachEvent(viewRef, eventName) {
        for (var i = 0; i < this._alwaysNodes.length; i++) {
          this._alwaysNodes[i].isNativelyInitialized() && this._alwaysNodes[i].__detach();
        }

        var viewTag = (0, _reactNative.findNodeHandle)(viewRef);

        _ReanimatedModule.default.detachEvent(viewTag, eventName, this.__nodeID);

        this.__detach();
      }
    }]);
    return AnimatedEvent;
  }(_AnimatedNode2.default);

  exports.default = AnimatedEvent;
},518,[1,21,22,34,37,40,5,505,504,506,519,6,520]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var AnimatedAlways = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedAlways, _AnimatedNode);

    function AnimatedAlways(what) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedAlways);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedAlways).call(this, {
        type: 'always',
        what: what.__nodeID
      }, [what]));
      _this._what = what;
      return _this;
    }

    (0, _createClass2.default)(AnimatedAlways, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        return 0;
      }
    }]);
    return AnimatedAlways;
  }(_AnimatedNode2.default);

  exports.default = AnimatedAlways;
},519,[1,21,22,34,37,40,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createEventObjectProxyPolyfill;

  function createEventObjectProxyPolyfill() {
    var nodesMap = {
      translationX: {},
      translationY: {},
      state: {},
      oldState: {},
      absoluteX: {},
      absoluteY: {},
      x: {},
      y: {},
      velocityX: {},
      velocityY: {},
      scale: {},
      focalX: {},
      focalY: {},
      rotation: {},
      anchorX: {},
      anchorY: {},
      velocity: {},
      numberOfPointers: {},
      layout: {
        x: {},
        y: {},
        width: {},
        height: {}
      },
      contentOffset: {
        y: {},
        x: {}
      },
      layoutMeasurement: {
        width: {},
        height: {}
      },
      contentSize: {
        width: {},
        height: {}
      },
      zoomScale: {},
      contentInset: {
        right: {},
        top: {},
        left: {},
        bottom: {}
      }
    };

    var traverse = function traverse(obj) {
      for (var key in obj) {
        obj[key].__isProxy = true;
        traverse(obj[key]);
      }
    };

    traverse(nodesMap);
    return nodesMap;
  }
},520,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var AnimatedConcat = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedConcat, _AnimatedNode);

    function AnimatedConcat(input) {
      (0, _classCallCheck2.default)(this, AnimatedConcat);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedConcat).call(this, {
        type: 'concat',
        input: input.map(function (n) {
          return n.__nodeID;
        })
      }, input));
    }

    return AnimatedConcat;
  }(_AnimatedNode2.default);

  exports.default = AnimatedConcat;
},521,[1,21,34,37,40,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _utils = _$$_REQUIRE(_dependencyMap[6]);

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 0.1;
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  }

  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }

  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX = 0;
    var currentT = 0;
    var i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  function bezier(mX1, mY1, mX2, mY2) {
    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = 10;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }

      if (x === 0) {
        return 0;
      }

      if (x === 1) {
        return 1;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  }

  var AnimatedBezier = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedBezier, _AnimatedNode);

    function AnimatedBezier(value, mX1, mY1, mX2, mY2) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedBezier);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedBezier).call(this, {
        type: 'bezier',
        mX1: mX1,
        mY1: mY1,
        mX2: mX2,
        mY2: mY2,
        input: value.__nodeID
      }, [value]));
      _this._value = value;
      _this._bezier = bezier(mX1, mY1, mX2, mY2);
      return _this;
    }

    (0, _createClass2.default)(AnimatedBezier, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        return this._bezier((0, _utils.val)(this._value));
      }
    }]);
    return AnimatedBezier;
  }(_AnimatedNode2.default);

  exports.default = AnimatedBezier;
},522,[1,21,22,34,37,40,502,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _AnimatedAlways = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var Code = function (_React$Component) {
    (0, _inherits2.default)(Code, _React$Component);

    function Code() {
      (0, _classCallCheck2.default)(this, Code);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Code).apply(this, arguments));
    }

    (0, _createClass2.default)(Code, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.always = new _AnimatedAlways.default(this.props.exec ? this.props.exec : this.props.children());

        this.always.__attach();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.always.__detach();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return Code;
  }(_react.default.Component);

  var _default = Code;
  exports.default = _default;
},523,[1,21,22,34,37,40,51,519]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "abs", {
    enumerable: true,
    get: function get() {
      return _abs.default;
    }
  });
  Object.defineProperty(exports, "acc", {
    enumerable: true,
    get: function get() {
      return _acc.default;
    }
  });
  Object.defineProperty(exports, "color", {
    enumerable: true,
    get: function get() {
      return _color.default;
    }
  });
  Object.defineProperty(exports, "diff", {
    enumerable: true,
    get: function get() {
      return _diff.default;
    }
  });
  Object.defineProperty(exports, "diffClamp", {
    enumerable: true,
    get: function get() {
      return _diffClamp.default;
    }
  });
  Object.defineProperty(exports, "interpolate", {
    enumerable: true,
    get: function get() {
      return _interpolate.default;
    }
  });
  Object.defineProperty(exports, "Extrapolate", {
    enumerable: true,
    get: function get() {
      return _interpolate.Extrapolate;
    }
  });
  Object.defineProperty(exports, "max", {
    enumerable: true,
    get: function get() {
      return _max.default;
    }
  });
  Object.defineProperty(exports, "min", {
    enumerable: true,
    get: function get() {
      return _min.default;
    }
  });
  Object.defineProperty(exports, "onChange", {
    enumerable: true,
    get: function get() {
      return _onChange.default;
    }
  });
  Object.defineProperty(exports, "floor", {
    enumerable: true,
    get: function get() {
      return _floor.default;
    }
  });
  Object.defineProperty(exports, "ceil", {
    enumerable: true,
    get: function get() {
      return _ceil.default;
    }
  });

  var _abs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _acc = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _diff = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _diffClamp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _interpolate = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _max = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _min = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _onChange = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _floor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _ceil = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));
},524,[366,1,525,526,527,528,529,508,531,530,532,533,534]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = abs;

  var _base = _$$_REQUIRE(_dependencyMap[0]);

  function abs(a) {
    return (0, _base.cond)((0, _base.lessThan)(a, 0), (0, _base.multiply)(-1, a), a);
  }
},525,[500]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = acc;

  var _base = _$$_REQUIRE(_dependencyMap[1]);

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function acc(v) {
    var acc = new _AnimatedValue.default(0);
    return (0, _base.set)(acc, (0, _base.add)(acc, v));
  }
},526,[1,500,506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = color;

  var _base = _$$_REQUIRE(_dependencyMap[1]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function color(r, g, b) {
    var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    if (a instanceof _AnimatedNode.default) {
      a = (0, _base.round)((0, _base.multiply)(a, 255));
    } else {
      a = Math.round(a * 255);
    }

    var color = (0, _base.add)((0, _base.multiply)(a, 16777216), (0, _base.multiply)(r, 65536), (0, _base.multiply)(g, 256), b);

    if (_reactNative.Platform.OS === 'android') {
      return (0, _base.cond)((0, _base.lessThan)(color, 2147483648), color, (0, _base.sub)(color, Math.pow(2, 32)));
    }

    return color;
  }
},527,[1,500,5,504]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = diff;

  var _base = _$$_REQUIRE(_dependencyMap[1]);

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function diff(v) {
    var stash = new _AnimatedValue.default(0);
    var prev = new _AnimatedValue.default();
    return (0, _base.block)([(0, _base.set)(stash, (0, _base.cond)((0, _base.defined)(prev), (0, _base.sub)(v, prev), 0)), (0, _base.set)(prev, v), stash]);
  }
},528,[1,500,506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = diffClamp;

  var _base = _$$_REQUIRE(_dependencyMap[1]);

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _min = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _max = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _diff = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  function diffClamp(a, minVal, maxVal) {
    var value = new _AnimatedValue.default();
    return (0, _base.set)(value, (0, _min.default)((0, _max.default)((0, _base.add)((0, _base.cond)((0, _base.defined)(value), value, a), (0, _diff.default)(a)), minVal), maxVal));
  }
},529,[1,500,506,530,531,528]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = min;

  var _base = _$$_REQUIRE(_dependencyMap[0]);

  var _utils = _$$_REQUIRE(_dependencyMap[1]);

  function min(a, b) {
    a = (0, _utils.adapt)(a);
    b = (0, _utils.adapt)(b);
    return (0, _base.cond)((0, _base.lessThan)(a, b), a, b);
  }
},530,[500,502]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = max;

  var _base = _$$_REQUIRE(_dependencyMap[0]);

  var _utils = _$$_REQUIRE(_dependencyMap[1]);

  function max(a, b) {
    a = (0, _utils.adapt)(a);
    b = (0, _utils.adapt)(b);
    return (0, _base.cond)((0, _base.lessThan)(a, b), b, a);
  }
},531,[500,502]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = onChange;

  var _base = _$$_REQUIRE(_dependencyMap[1]);

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function onChange(value, action) {
    var prevValue = new _AnimatedValue.default();
    return (0, _base.block)([(0, _base.cond)((0, _base.not)((0, _base.defined)(prevValue)), (0, _base.set)(prevValue, value)), (0, _base.cond)((0, _base.neq)(value, prevValue), [(0, _base.set)(prevValue, value), action])]);
  }
},532,[1,500,506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = floor;

  var _base = _$$_REQUIRE(_dependencyMap[0]);

  function floor(a) {
    return (0, _base.round)((0, _base.sub)(a, 0.5));
  }
},533,[500]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ceil;

  var _base = _$$_REQUIRE(_dependencyMap[0]);

  function ceil(a) {
    return (0, _base.sub)(1, (0, _base.round)((0, _base.sub)(0.5, a)));
  }
},534,[500]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createAnimatedComponent;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _ReanimatedEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _ViewStylePropTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _AnimatedEvent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _AnimatedProps = _$$_REQUIRE(_dependencyMap[13]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var NODE_MAPPING = new Map();

  function listener(data) {
    var component = NODE_MAPPING.get(data.viewTag);
    component && component._updateFromNative(data.props);
  }

  function createAnimatedComponent(Component) {
    (0, _invariant.default)(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, "`createAnimatedComponent` does not support stateless functional components; use a class component instead.");

    var AnimatedComponent = function (_React$Component) {
      (0, _inherits2.default)(AnimatedComponent, _React$Component);

      function AnimatedComponent() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, AnimatedComponent);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(AnimatedComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this._invokeAnimatedPropsCallbackOnMount = false;

        _this._animatedPropsCallback = function () {
          if (_this._component == null) {
            _this._invokeAnimatedPropsCallbackOnMount = true;
          } else if (typeof _this._component.setNativeProps !== 'function') {
            _this.forceUpdate();
          } else {
            _this._component.setNativeProps(_this._propsAnimated.__getValue());
          }
        };

        _this._setComponentRef = function (c) {
          if (c !== _this._component) {
            _this._component = c;
          }
        };

        return _this;
      }

      (0, _createClass2.default)(AnimatedComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._detachPropUpdater();

          this._propsAnimated && this._propsAnimated.__detach();

          this._detachNativeEvents();
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "componentWillMount",
        value: function componentWillMount() {
          this._attachProps(this.props);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this._invokeAnimatedPropsCallbackOnMount) {
            this._invokeAnimatedPropsCallbackOnMount = false;

            this._animatedPropsCallback();
          }

          this._propsAnimated.setNativeView(this._component);

          this._attachNativeEvents();

          this._attachPropUpdater();
        }
      }, {
        key: "_getEventViewRef",
        value: function _getEventViewRef() {
          return this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;
        }
      }, {
        key: "_attachNativeEvents",
        value: function _attachNativeEvents() {
          var node = this._getEventViewRef();

          for (var key in this.props) {
            var prop = this.props[key];

            if (prop instanceof _AnimatedEvent.default) {
              prop.attachEvent(node, key);
            }
          }
        }
      }, {
        key: "_detachNativeEvents",
        value: function _detachNativeEvents() {
          var node = this._getEventViewRef();

          for (var key in this.props) {
            var prop = this.props[key];

            if (prop instanceof _AnimatedEvent.default) {
              prop.detachEvent(node, key);
            }
          }
        }
      }, {
        key: "_reattachNativeEvents",
        value: function _reattachNativeEvents(prevProps) {
          var node = this._getEventViewRef();

          var attached = new Set();
          var nextEvts = new Set();

          for (var key in this.props) {
            var prop = this.props[key];

            if (prop instanceof _AnimatedEvent.default) {
              nextEvts.add(prop.__nodeID);
            }
          }

          for (var _key2 in prevProps) {
            var _prop = this.props[_key2];

            if (_prop instanceof _AnimatedEvent.default) {
              if (!nextEvts.has(_prop.__nodeID)) {
                _prop.detachEvent(node, _key2);
              } else {
                attached.add(_prop.__nodeID);
              }
            }
          }

          for (var _key3 in this.props) {
            var _prop2 = this.props[_key3];

            if (_prop2 instanceof _AnimatedEvent.default && !attached.has(_prop2.__nodeID)) {
              _prop2.attachEvent(node, _key3);
            }
          }
        }
      }, {
        key: "_attachProps",
        value: function _attachProps(nextProps) {
          var oldPropsAnimated = this._propsAnimated;
          this._propsAnimated = (0, _AnimatedProps.createOrReusePropsNode)(nextProps, this._animatedPropsCallback, oldPropsAnimated);

          if (oldPropsAnimated !== this._propsAnimated) {
            oldPropsAnimated && oldPropsAnimated.__detach();
          }
        }
      }, {
        key: "_updateFromNative",
        value: function _updateFromNative(props) {
          this._component.setNativeProps(props);
        }
      }, {
        key: "_attachPropUpdater",
        value: function _attachPropUpdater() {
          var viewTag = (0, _reactNative.findNodeHandle)(this);
          NODE_MAPPING.set(viewTag, this);

          if (NODE_MAPPING.size === 1) {
            _ReanimatedEventEmitter.default.addListener('onReanimatedPropsChange', listener);
          }
        }
      }, {
        key: "_detachPropUpdater",
        value: function _detachPropUpdater() {
          var viewTag = (0, _reactNative.findNodeHandle)(this);
          NODE_MAPPING.delete(viewTag);

          if (NODE_MAPPING.size === 0) {
            _ReanimatedEventEmitter.default.removeAllListeners('onReanimatedPropsChange');
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          this._attachProps(this.props);

          this._reattachNativeEvents(prevProps);

          this._propsAnimated.setNativeView(this._component);
        }
      }, {
        key: "_filterNonAnimatedStyle",
        value: function _filterNonAnimatedStyle(inputStyle) {
          var style = {};

          for (var key in inputStyle) {
            var value = inputStyle[key];

            if (!(value instanceof _AnimatedNode.default) && key !== 'transform') {
              style[key] = value;
            }
          }

          return style;
        }
      }, {
        key: "_filterNonAnimatedProps",
        value: function _filterNonAnimatedProps(inputProps) {
          var props = {};

          for (var key in inputProps) {
            var value = inputProps[key];

            if (key === 'style') {
              props[key] = this._filterNonAnimatedStyle(_reactNative.StyleSheet.flatten(value));
            } else if (!(value instanceof _AnimatedNode.default)) {
              props[key] = value;
            }
          }

          return props;
        }
      }, {
        key: "render",
        value: function render() {
          var props = this._filterNonAnimatedProps(this.props);

          return _react.default.createElement(Component, (0, _extends2.default)({}, props, {
            ref: this._setComponentRef,
            collapsable: false
          }));
        }
      }, {
        key: "getNode",
        value: function getNode() {
          return this._component;
        }
      }]);
      return AnimatedComponent;
    }(_react.default.Component);

    var propTypes = Component.propTypes;
    AnimatedComponent.propTypes = {
      style: function style(props, propName, componentName) {
        if (!propTypes) {
          return;
        }

        for (var key in _ViewStylePropTypes.default) {
          if (!propTypes[key] && props[key] !== undefined) {
            console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
          }
        }
      }
    };
    return AnimatedComponent;
  }
},535,[1,3,21,22,34,37,40,51,5,517,73,518,504,536,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createOrReusePropsNode = createOrReusePropsNode;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _get2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _AnimatedEvent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _AnimatedStyle = _$$_REQUIRE(_dependencyMap[11]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _areEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  function sanitizeProps(inputProps) {
    var props = {};

    for (var key in inputProps) {
      var value = inputProps[key];

      if (value instanceof _AnimatedNode2.default && !(value instanceof _AnimatedEvent.default)) {
        props[key] = value.__nodeID;
      }
    }

    return props;
  }

  function createOrReusePropsNode(props, callback, oldNode) {
    if (props.style) {
      props = (0, _objectSpread2.default)({}, props, {
        style: (0, _AnimatedStyle.createOrReuseStyleNode)(props.style, oldNode && oldNode._props.style)
      });
    }

    var config = sanitizeProps(props);

    if (oldNode && (0, _areEqual.default)(config, oldNode._config)) {
      return oldNode;
    }

    return new AnimatedProps(props, config, callback);
  }

  var AnimatedProps = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, config, callback) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedProps);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedProps).call(this, {
        type: 'props',
        props: config
      }, Object.values(props).filter(function (n) {
        return !(n instanceof _AnimatedEvent.default);
      })));
      _this._config = config;
      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    (0, _createClass2.default)(AnimatedProps, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof _AnimatedNode2.default) {
            props[key] = value.__getValue();
          }
        }

        return props;
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var nativeViewTag = (0, _reactNative.findNodeHandle)(this._animatedView);
        (0, _invariant.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');

        this._disconnectAnimatedView(nativeViewTag);

        (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;
        var nativeViewTag = (0, _reactNative.findNodeHandle)(this._animatedView);
        (0, _invariant.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');

        this._connectAnimatedView(nativeViewTag);
      }
    }]);
    return AnimatedProps;
  }(_AnimatedNode2.default);
},536,[1,21,22,34,37,38,40,48,5,504,518,537,6,440]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createOrReuseStyleNode = createOrReuseStyleNode;
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _AnimatedTransform = _$$_REQUIRE(_dependencyMap[9]);

  var _areEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  function sanitizeStyle(inputStyle) {
    var style = {};

    for (var key in inputStyle) {
      var value = inputStyle[key];

      if (value instanceof _AnimatedNode2.default) {
        style[key] = value.__nodeID;
      }
    }

    return style;
  }

  function createOrReuseStyleNode(style, oldNode) {
    style = _reactNative.StyleSheet.flatten(style) || {};

    if (style.transform) {
      style = (0, _objectSpread2.default)({}, style, {
        transform: (0, _AnimatedTransform.createOrReuseTransformNode)(style.transform, oldNode && oldNode._style.transform)
      });
    }

    var config = sanitizeStyle(style);

    if (oldNode && (0, _areEqual.default)(config, oldNode._config)) {
      return oldNode;
    }

    return new AnimatedStyle(style, config);
  }

  var AnimatedStyle = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedStyle, _AnimatedNode);

    function AnimatedStyle(style, config) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedStyle);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedStyle).call(this, {
        type: 'style',
        style: config
      }, Object.values(style)));
      _this._config = config;
      _this._style = style;
      return _this;
    }

    (0, _createClass2.default)(AnimatedStyle, [{
      key: "_walkStyleAndGetAnimatedValues",
      value: function _walkStyleAndGetAnimatedValues(style) {
        var updatedStyle = {};

        for (var key in style) {
          var value = style[key];

          if (value instanceof _AnimatedNode2.default) {
            updatedStyle[key] = value.__getValue();
          } else if (value && !Array.isArray(value) && typeof value === 'object') {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }

        return updatedStyle;
      }
    }, {
      key: "__onEvaluate",
      value: function __onEvaluate() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    }]);
    return AnimatedStyle;
  }(_AnimatedNode2.default);

  exports.default = AnimatedStyle;
},537,[1,21,22,34,37,40,48,5,504,538,440]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createOrReuseTransformNode = createOrReuseTransformNode;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _areEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  function sanitizeTransform(inputTransform) {
    var outputTransform = [];
    inputTransform.forEach(function (transform) {
      for (var key in transform) {
        var value = transform[key];

        if (value instanceof _AnimatedNode2.default) {
          outputTransform.push({
            property: key,
            nodeID: value.__nodeID
          });
        } else {
          outputTransform.push({
            property: key,
            value: value
          });
        }
      }
    });
    return outputTransform;
  }

  function extractAnimatedParentNodes(transform) {
    var parents = [];
    transform.forEach(function (transform) {
      for (var key in transform) {
        var value = transform[key];

        if (value instanceof _AnimatedNode2.default) {
          parents.push(value);
        }
      }
    });
    return parents;
  }

  function createOrReuseTransformNode(transform, oldNode) {
    var config = sanitizeTransform(transform);

    if (oldNode && (0, _areEqual.default)(config, oldNode._config)) {
      return oldNode;
    }

    return new AnimatedTransform(transform, config);
  }

  var AnimatedTransform = function (_AnimatedNode) {
    (0, _inherits2.default)(AnimatedTransform, _AnimatedNode);

    function AnimatedTransform(transform, config) {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedTransform);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedTransform).call(this, {
        type: 'transform',
        transform: config
      }, extractAnimatedParentNodes(transform)));
      _this._config = config;
      _this._transform = transform;
      return _this;
    }

    (0, _createClass2.default)(AnimatedTransform, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        return this._transform.map(function (transform) {
          var result = {};

          for (var key in transform) {
            var value = transform[key];

            if (value instanceof _AnimatedNode2.default) {
              result[key] = value.__getValue();
            }
          }

          return result;
        });
      }
    }]);
    return AnimatedTransform;
  }(_AnimatedNode2.default);
},538,[1,21,22,34,37,40,504,440]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = decay;

  var _base = _$$_REQUIRE(_dependencyMap[0]);

  var _derived = _$$_REQUIRE(_dependencyMap[1]);

  var VELOCITY_EPS = 5;

  function decay(clock, state, config) {
    var lastTime = (0, _base.cond)(state.time, state.time, clock);
    var deltaTime = (0, _base.sub)(clock, lastTime);
    var kv = (0, _base.pow)(config.deceleration, deltaTime);
    var kx = (0, _base.divide)((0, _base.multiply)(config.deceleration, (0, _base.sub)(1, kv)), (0, _base.sub)(1, config.deceleration));
    var v0 = (0, _base.divide)(state.velocity, 1000);
    var v = (0, _base.multiply)(v0, kv, 1000);
    var x = (0, _base.add)(state.position, (0, _base.multiply)(v0, kx));
    return (0, _base.block)([(0, _base.set)(state.position, x), (0, _base.set)(state.velocity, v), (0, _base.set)(state.time, clock), (0, _base.cond)((0, _base.lessThan)((0, _derived.abs)(v), VELOCITY_EPS), (0, _base.set)(state.finished, 1))]);
  }
},539,[500,524]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = timing;

  var _base = _$$_REQUIRE(_dependencyMap[0]);

  function timing(clock, state, config) {
    var lastTime = (0, _base.cond)(state.time, state.time, clock);
    var frameTime = (0, _base.add)(state.frameTime, (0, _base.sub)(clock, lastTime));
    var progress = config.easing((0, _base.divide)(state.frameTime, config.duration));
    var distanceLeft = (0, _base.sub)(config.toValue, state.position);
    var fullDistance = (0, _base.divide)(distanceLeft, (0, _base.sub)(1, progress));
    var startPosition = (0, _base.sub)(config.toValue, fullDistance);
    var nextProgress = config.easing((0, _base.divide)(frameTime, config.duration));
    var nextPosition = (0, _base.add)(startPosition, (0, _base.multiply)(fullDistance, nextProgress));
    return (0, _base.block)([(0, _base.cond)((0, _base.greaterOrEq)(frameTime, config.duration), [(0, _base.set)(state.position, config.toValue), (0, _base.set)(state.finished, 1)], (0, _base.set)(state.position, nextPosition)), (0, _base.set)(state.frameTime, frameTime), (0, _base.set)(state.time, clock)]);
  }
},540,[500]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = spring;

  var _base = _$$_REQUIRE(_dependencyMap[1]);

  var _derived = _$$_REQUIRE(_dependencyMap[2]);

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var MAX_STEPS_MS = 64;

  function spring(clock, state, config) {
    var lastTime = (0, _base.cond)(state.time, state.time, clock);
    var deltaTime = (0, _derived.min)((0, _base.sub)(clock, lastTime), MAX_STEPS_MS);
    var c = config.damping;
    var m = config.mass;
    var k = config.stiffness;
    var v0 = (0, _base.multiply)(-1, state.velocity);
    var x0 = (0, _base.sub)(config.toValue, state.position);
    var zeta = (0, _base.divide)(c, (0, _base.multiply)(2, (0, _base.sqrt)((0, _base.multiply)(k, m))));
    var omega0 = (0, _base.sqrt)((0, _base.divide)(k, m));
    var omega1 = (0, _base.multiply)(omega0, (0, _base.sqrt)((0, _base.sub)(1, (0, _base.multiply)(zeta, zeta))));
    var t = (0, _base.divide)(deltaTime, 1000);
    var sin1 = (0, _base.sin)((0, _base.multiply)(omega1, t));
    var cos1 = (0, _base.cos)((0, _base.multiply)(omega1, t));
    var underDampedEnvelope = (0, _base.exp)((0, _base.multiply)(-1, zeta, omega0, t));
    var underDampedFrag1 = (0, _base.multiply)(underDampedEnvelope, (0, _base.add)((0, _base.multiply)(sin1, (0, _base.divide)((0, _base.add)(v0, (0, _base.multiply)(zeta, omega0, x0)), omega1)), (0, _base.multiply)(x0, cos1)));
    var underDampedPosition = (0, _base.sub)(config.toValue, underDampedFrag1);
    var underDampedVelocity = (0, _base.sub)((0, _base.multiply)(zeta, omega0, underDampedFrag1), (0, _base.multiply)(underDampedEnvelope, (0, _base.sub)((0, _base.multiply)(cos1, (0, _base.add)(v0, (0, _base.multiply)(zeta, omega0, x0))), (0, _base.multiply)(omega1, x0, sin1))));
    var criticallyDampedEnvelope = (0, _base.exp)((0, _base.multiply)(-1, omega0, t));
    var criticallyDampedPosition = (0, _base.sub)(config.toValue, (0, _base.multiply)(criticallyDampedEnvelope, (0, _base.add)(x0, (0, _base.multiply)((0, _base.add)(v0, (0, _base.multiply)(omega0, x0)), t))));
    var criticallyDampedVelocity = (0, _base.multiply)(criticallyDampedEnvelope, (0, _base.add)((0, _base.multiply)(v0, (0, _base.sub)((0, _base.multiply)(t, omega0), 1)), (0, _base.multiply)(t, x0, omega0, omega0)));
    var prevPosition = new _AnimatedValue.default(0);
    var isOvershooting = (0, _base.cond)((0, _base.and)(config.overshootClamping, (0, _base.neq)(config.stiffness, 0)), (0, _base.cond)((0, _base.lessThan)(prevPosition, config.toValue), (0, _base.greaterThan)(state.position, config.toValue), (0, _base.lessThan)(state.position, config.toValue)));
    var isVelocity = (0, _base.lessThan)((0, _derived.abs)(state.velocity), config.restSpeedThreshold);
    var isDisplacement = (0, _base.or)((0, _base.eq)(config.stiffness, 0), (0, _base.lessThan)((0, _derived.abs)((0, _base.sub)(config.toValue, state.position)), config.restDisplacementThreshold));
    return (0, _base.block)([(0, _base.set)(prevPosition, state.position), (0, _base.cond)((0, _base.lessThan)(zeta, 1), [(0, _base.set)(state.position, underDampedPosition), (0, _base.set)(state.velocity, underDampedVelocity)], [(0, _base.set)(state.position, criticallyDampedPosition), (0, _base.set)(state.velocity, criticallyDampedVelocity)]), (0, _base.set)(state.time, clock), (0, _base.cond)((0, _base.or)(isOvershooting, (0, _base.and)(isVelocity, isDisplacement)), [(0, _base.cond)((0, _base.neq)(config.stiffness, 0), [(0, _base.set)(state.velocity, 0), (0, _base.set)(state.position, config.toValue)]), (0, _base.set)(state.finished, 1)])]);
  }
},541,[1,500,524,506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _timing = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _base = _$$_REQUIRE(_dependencyMap[8]);

  var _AnimatedClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _Easing = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _Animation2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var easeInOut = _Easing.default.inOut(_Easing.default.ease);

  var TimingAnimation = function (_Animation) {
    (0, _inherits2.default)(TimingAnimation, _Animation);

    function TimingAnimation(config) {
      var _this;

      (0, _classCallCheck2.default)(this, TimingAnimation);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TimingAnimation).call(this));
      _this._toValue = config.toValue;
      _this._easing = config.easing !== undefined ? config.easing : easeInOut;
      _this._duration = config.duration !== undefined ? config.duration : 500;
      return _this;
    }

    (0, _createClass2.default)(TimingAnimation, [{
      key: "start",
      value: function start(value) {
        this._clock = new _AnimatedClock.default();
        var state = {
          finished: new _AnimatedValue.default(0),
          position: value,
          time: new _AnimatedValue.default(0),
          frameTime: new _AnimatedValue.default(0)
        };
        var config = {
          duration: this._duration,
          toValue: this._toValue,
          easing: this._easing
        };
        return (0, _base.block)([(0, _base.cond)((0, _base.clockRunning)(this._clock), 0, [(0, _base.startClock)(this._clock)]), (0, _timing.default)(this._clock, state, config), (0, _base.cond)(state.finished, (0, _base.stopClock)(this._clock))]);
      }
    }, {
      key: "stop",
      value: function stop() {}
    }], [{
      key: "getDefaultState",
      value: function getDefaultState() {
        return {
          position: new _AnimatedValue.default(0),
          finished: new _AnimatedValue.default(0),
          time: new _AnimatedValue.default(0),
          frameTime: new _AnimatedValue.default(0)
        };
      }
    }]);
    return TimingAnimation;
  }(_Animation2.default);

  exports.default = TimingAnimation;
},542,[1,21,22,34,37,40,506,540,500,512,499,543]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var Animation = function () {
    function Animation() {
      (0, _classCallCheck2.default)(this, Animation);
    }

    (0, _createClass2.default)(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
    }, {
      key: "stop",
      value: function stop() {}
    }]);
    return Animation;
  }();

  var _default = Animation;
  exports.default = _default;
},543,[1,21,22]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _Animation2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _SpringConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _spring = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _base = _$$_REQUIRE(_dependencyMap[10]);

  var _AnimatedClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    (0, _inherits2.default)(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      var _this;

      (0, _classCallCheck2.default)(this, SpringAnimation);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SpringAnimation).call(this));
      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');

        var springConfig = _SpringConfig.default.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));

        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = _SpringConfig.default.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      (0, _invariant.default)(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      (0, _invariant.default)(_this._damping > 0, 'Damping value must be greater than 0');
      (0, _invariant.default)(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    (0, _createClass2.default)(SpringAnimation, [{
      key: "start",
      value: function start(value) {
        this._clock = new _AnimatedClock.default();
        var state = {
          finished: new _AnimatedValue.default(0),
          velocity: new _AnimatedValue.default(this._initialVelocity),
          position: value,
          time: new _AnimatedValue.default(0)
        };
        var config = {
          damping: this._damping,
          mass: this._mass,
          stiffness: this._stiffness,
          toValue: this._toValue,
          overshootClamping: this._overshootClamping,
          restSpeedThreshold: this._restSpeedThreshold,
          restDisplacementThreshold: this._restDisplacementThreshold
        };
        return (0, _base.block)([(0, _base.cond)((0, _base.clockRunning)(this._clock), 0, [(0, _base.startClock)(this._clock)]), (0, _spring.default)(this._clock, state, config), (0, _base.cond)(state.finished, (0, _base.stopClock)(this._clock))]);
      }
    }, {
      key: "stop",
      value: function stop() {}
    }], [{
      key: "getDefaultState",
      value: function getDefaultState() {
        return {
          position: new _AnimatedValue.default(0),
          finished: new _AnimatedValue.default(0),
          velocity: new _AnimatedValue.default(0),
          time: new _AnimatedValue.default(0)
        };
      }
    }]);
    return SpringAnimation;
  }(_Animation2.default);

  exports.default = SpringAnimation;
},544,[1,21,22,34,37,40,506,543,545,541,500,512,6]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }

  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }

  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }

  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }

    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }

    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }

    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }

    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }

    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }

    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }

    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }

    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }

  module.exports = {
    fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
    fromBouncinessAndSpeed: fromBouncinessAndSpeed
  };
},545,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _Animation2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _decay = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _base = _$$_REQUIRE(_dependencyMap[8]);

  var _AnimatedClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _AnimatedValue = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var DecayAnimation = function (_Animation) {
    (0, _inherits2.default)(DecayAnimation, _Animation);

    function DecayAnimation(config) {
      var _this;

      (0, _classCallCheck2.default)(this, DecayAnimation);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DecayAnimation).call(this));
      _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
      _this._velocity = config.velocity;
      return _this;
    }

    (0, _createClass2.default)(DecayAnimation, [{
      key: "start",
      value: function start(value) {
        this._clock = new _AnimatedClock.default();
        var state = {
          finished: new _AnimatedValue.default(0),
          velocity: new _AnimatedValue.default(this._velocity),
          position: value,
          time: new _AnimatedValue.default(0)
        };
        var config = {
          deceleration: this._deceleration
        };
        return (0, _base.block)([(0, _base.cond)((0, _base.clockRunning)(this._clock), 0, [(0, _base.startClock)(this._clock)]), (0, _decay.default)(this._clock, state, config), (0, _base.cond)(state.finished, (0, _base.stopClock)(this._clock))]);
      }
    }, {
      key: "stop",
      value: function stop() {}
    }], [{
      key: "getDefaultState",
      value: function getDefaultState() {
        return {
          position: new _AnimatedValue.default(0),
          finished: new _AnimatedValue.default(0),
          time: new _AnimatedValue.default(0),
          velocity: new _AnimatedValue.default(0)
        };
      }
    }]);
    return DecayAnimation;
  }(_Animation2.default);

  var _default = DecayAnimation;
  exports.default = _default;
},546,[1,21,22,34,37,40,543,539,500,512,506]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addWhitelistedNativeProps = addWhitelistedNativeProps;
  exports.addWhitelistedUIProps = addWhitelistedUIProps;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ReanimatedModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var UI_THREAD_PROPS_WHITELIST = {
    opacity: true,
    transform: true,
    backgroundColor: true,
    borderRightColor: true,
    borderBottomColor: true,
    borderColor: true,
    borderEndColor: true,
    borderLeftColor: true,
    borderStartColor: true,
    borderTopColor: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var NATIVE_THREAD_PROPS_WHITELIST = {
    borderBottomWidth: true,
    borderEndWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    borderStartWidth: true,
    borderTopWidth: true,
    borderWidth: true,
    bottom: true,
    flex: true,
    flexGrow: true,
    flexShrink: true,
    height: true,
    left: true,
    margin: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true,
    padding: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    right: true,
    start: true,
    top: true,
    width: true,
    zIndex: true,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    opacity: true,
    elevation: true,
    fontSize: true,
    lineHeight: true,
    textShadowRadius: true,
    letterSpacing: true,
    display: true,
    backfaceVisibility: true,
    overflow: true,
    resizeMode: true,
    fontStyle: true,
    fontWeight: true,
    textAlign: true,
    textDecorationLine: true,
    fontFamily: true,
    textAlignVertical: true,
    fontVariant: true,
    textDecorationStyle: true,
    textTransform: true,
    writingDirection: true,
    color: true
  };

  function configureProps() {
    _ReanimatedModule.default.configureProps(Object.keys(NATIVE_THREAD_PROPS_WHITELIST), Object.keys(UI_THREAD_PROPS_WHITELIST));
  }

  function addWhitelistedNativeProps(props) {
    NATIVE_THREAD_PROPS_WHITELIST = (0, _objectSpread2.default)({}, NATIVE_THREAD_PROPS_WHITELIST, props);
    configureProps();
  }

  function addWhitelistedUIProps(props) {
    UI_THREAD_PROPS_WHITELIST = (0, _objectSpread2.default)({}, UI_THREAD_PROPS_WHITELIST, props);
    configureProps();
  }

  configureProps();
},547,[1,48,505]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = backwardsCompatibleAnimWrapper;

  var _base = _$$_REQUIRE(_dependencyMap[1]);

  var _AnimatedClock = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _evaluateOnce = _$$_REQUIRE(_dependencyMap[3]);

  function createOldAnimationObject(node, AnimationClass, value, config) {
    var newClock = new _AnimatedClock.default();
    var currentState = AnimationClass.getDefaultState();
    var alwaysNode;
    var isStarted = false;
    var isDone = false;
    var wasStopped = false;
    var animationCallback;
    var animation = {
      start: function start(currentAnimationCallback) {
        animationCallback = currentAnimationCallback;

        if (isStarted) {
          animationCallback && animationCallback({
            finished: false
          });
          return;
        }

        if (isDone) {
          console.warn('Animation has been finished before');
          return;
        }

        if (!value.isNativelyInitialized()) {
          return;
        }

        isStarted = true;
        (0, _evaluateOnce.evaluateOnce)((0, _base.set)(currentState.position, value), currentState.position, function () {
          alwaysNode = (0, _base.always)((0, _base.set)(value, (0, _base.block)([(0, _base.cond)((0, _base.clockRunning)(newClock), 0, (0, _base.startClock)(newClock)), node(newClock, currentState, config), (0, _base.cond)(currentState.finished, [(0, _base.call)([], function () {
            isStarted = false;

            if (!wasStopped) {
              isDone = true;
            }

            value.__detachAnimation(animation);

            isDone = true;

            if (!wasStopped) {
              wasStopped = false;
            }
          }), (0, _base.stopClock)(newClock)]), currentState.position])));

          value.__attachAnimation(animation);

          alwaysNode.__addChild(value);
        });
      },
      __detach: function __detach() {
        animationCallback && animationCallback({
          finished: isDone
        });
        animationCallback = null;

        alwaysNode.__removeChild(value);
      },
      stop: function stop() {
        if (isDone) {
          console.warn('Calling stop has no effect as the animation has already completed');
          return;
        }

        if (!isStarted) {
          console.warn("Calling stop has no effect as the animation hasn't been started");
          return;
        }

        wasStopped = true;
        (0, _evaluateOnce.evaluateOnce)((0, _base.set)(currentState.finished, 1), currentState.finished);
      },
      __stopImmediately_testOnly: function __stopImmediately_testOnly(result) {
        animation.stop();
        isDone = result;

        value.__detachAnimation(animation);
      }
    };
    return animation;
  }

  function backwardsCompatibleAnimWrapper(node, AnimationClass) {
    return function (clock, state, config) {
      if (config !== undefined) {
        return node(clock, state, config);
      }

      return createOldAnimationObject(node, AnimationClass, clock, state);
    };
  }
},548,[1,500,512,507]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.useScreens = useScreens;
  exports.screensEnabled = screensEnabled;
  exports.ScreenContainer = exports.Screen = exports.NativeScreenContainer = exports.NativeScreen = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _ReactNativeVersion = _$$_REQUIRE(_dependencyMap[10]);

  var USE_SCREENS = false;

  var getViewManagerConfigCompat = function getViewManagerConfigCompat(name) {
    return typeof _reactNative.UIManager.getViewManagerConfig !== 'undefined' ? _reactNative.UIManager.getViewManagerConfig(name) : _reactNative.UIManager[name];
  };

  function useScreens() {
    var shouldUseScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    USE_SCREENS = shouldUseScreens;

    if (USE_SCREENS && !getViewManagerConfigCompat('RNSScreen')) {
      console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details");
    }
  }

  function screensEnabled() {
    return USE_SCREENS;
  }

  var NativeScreen = (0, _reactNative.requireNativeComponent)('RNSScreen', null);
  exports.NativeScreen = NativeScreen;

  var AnimatedNativeScreen = _reactNative.Animated.createAnimatedComponent(NativeScreen);

  var NativeScreenContainer = (0, _reactNative.requireNativeComponent)('RNSScreenContainer', null);
  exports.NativeScreenContainer = NativeScreenContainer;

  var Screen = function (_React$Component) {
    (0, _inherits2.default)(Screen, _React$Component);

    function Screen() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, Screen);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Screen)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setRef = function (ref) {
        _this._ref = ref;
        _this.props.onComponentRef && _this.props.onComponentRef(ref);
      };

      return _this;
    }

    (0, _createClass2.default)(Screen, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        this._ref.setNativeProps(props);
      }
    }, {
      key: "render",
      value: function render() {
        if (!USE_SCREENS) {
          var _this$props = this.props,
              active = _this$props.active,
              onComponentRef = _this$props.onComponentRef,
              props = (0, _objectWithoutProperties2.default)(_this$props, ["active", "onComponentRef"]);
          return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, props, {
            ref: this.setRef
          }));
        } else if (_ReactNativeVersion.version.minor >= 57) {
          return _react.default.createElement(AnimatedNativeScreen, this.props);
        } else {
          var _this$props2 = this.props,
              style = _this$props2.style,
              children = _this$props2.children,
              rest = (0, _objectWithoutProperties2.default)(_this$props2, ["style", "children"]);
          return _react.default.createElement(AnimatedNativeScreen, (0, _extends2.default)({}, rest, {
            ref: this.setRef,
            style: _reactNative.StyleSheet.absoluteFill
          }), _react.default.createElement(_reactNative.Animated.View, {
            style: style
          }, children));
        }
      }
    }]);
    return Screen;
  }(_react.default.Component);

  exports.Screen = Screen;

  var ScreenContainer = function (_React$Component2) {
    (0, _inherits2.default)(ScreenContainer, _React$Component2);

    function ScreenContainer() {
      (0, _classCallCheck2.default)(this, ScreenContainer);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(ScreenContainer).apply(this, arguments));
    }

    (0, _createClass2.default)(ScreenContainer, [{
      key: "render",
      value: function render() {
        if (!USE_SCREENS) {
          return _react.default.createElement(_reactNative.View, this.props);
        } else {
          return _react.default.createElement(NativeScreenContainer, this.props);
        }
      }
    }]);
    return ScreenContainer;
  }(_react.default.Component);

  exports.ScreenContainer = ScreenContainer;
},549,[1,3,9,21,22,34,37,40,51,5,98]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getDocumentAsync = getDocumentAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  function getDocumentAsync() {
    var _ref,
        _ref$type,
        type,
        _args = arguments;

    return _regenerator.default.async(function getDocumentAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref$type = _ref.type, type = _ref$type === undefined ? '*/*' : _ref$type;
            _context.next = 3;
            return _regenerator.default.awrap(_reactNative.NativeModules.ExponentDocumentPicker.getDocumentAsync({
              type: type
            }));

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},550,[1,130,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _expoErrors = _$$_REQUIRE(_dependencyMap[1]);

  var _ExponentErrorRecovery = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = {
    setRecoveryProps: function setRecoveryProps(props) {
      if (!_ExponentErrorRecovery.default.setRecoveryProps) {
        throw new _expoErrors.UnavailabilityError('ErrorRecovery', 'setRecoveryProps');
      }

      return _ExponentErrorRecovery.default.setRecoveryProps(props);
    }
  };
  exports.default = _default;
},551,[1,368,552]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentErrorRecovery;
  exports.default = _default;
},552,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.logInWithReadPermissionsAsync = logInWithReadPermissionsAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[2]);

  var _ExponentFacebook = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function logInWithReadPermissionsAsync(appId, options) {
    return _regenerator.default.async(function logInWithReadPermissionsAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (_ExponentFacebook.default.logInWithReadPermissionsAsync) {
              _context.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Facebook', 'logInWithReadPermissionsAsync');

          case 2:
            if (typeof appId !== 'string') {
              console.warn("logInWithReadPermissionsAsync: parameter 'appId' must be a string, was '" + typeof appId + "''.");
              appId = String(appId);
            }

            if (!options || typeof options !== 'object') {
              options = {};
            }

            return _context.abrupt("return", _ExponentFacebook.default.logInWithReadPermissionsAsync(appId, options));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},553,[1,130,368,554]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentFacebook;
  exports.default = _default;
},554,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.logInAsync = logInAsync;
  exports.logOutAsync = logOutAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _expoAppAuth = _$$_REQUIRE(_dependencyMap[4]);

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[6]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  function logInAsync(config) {
    var _config$behavior, behavior, userDefinedScopes, requiredScopes, scopes, clientId, logInResult, userInfoResponse, userInfo;

    return _regenerator.default.async(function logInAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (_expoAppAuth.AppAuth.authAsync) {
              _context.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('AppAuth', 'logInAsync');

          case 2:
            _config$behavior = config.behavior, behavior = _config$behavior === undefined ? 'web' : _config$behavior;

            if (behavior !== 'web') {
              if (_expoConstants.default.appOwnership === 'expo') {
                console.warn('Native Google Sign-In is only available in ExpoKit projects. Falling back to `web` behavior');
              } else {
                console.warn("Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior");
              }
            }

            userDefinedScopes = config.scopes || [];
            requiredScopes = [].concat((0, _toConsumableArray2.default)(userDefinedScopes), ['profile', 'email', 'openid']);
            scopes = (0, _toConsumableArray2.default)(new Set(requiredScopes));
            clientId = config.clientId || _reactNative.Platform.select({
              ios: config.iosClientId,
              android: config.androidClientId,
              web: config.clientId
            });
            _context.prev = 8;
            _context.next = 11;
            return _regenerator.default.awrap(_expoAppAuth.AppAuth.authAsync({
              issuer: 'https://accounts.google.com',
              scopes: scopes,
              clientId: clientId
            }));

          case 11:
            logInResult = _context.sent;
            _context.next = 14;
            return _regenerator.default.awrap(fetch('https://www.googleapis.com/userinfo/v2/me', {
              headers: {
                Authorization: "Bearer " + logInResult.accessToken
              }
            }));

          case 14:
            userInfoResponse = _context.sent;
            _context.next = 17;
            return _regenerator.default.awrap(userInfoResponse.json());

          case 17:
            userInfo = _context.sent;
            return _context.abrupt("return", (0, _objectSpread2.default)({
              type: 'success'
            }, logInResult, {
              user: {
                id: userInfo.id,
                name: userInfo.name,
                givenName: userInfo.given_name,
                familyName: userInfo.family_name,
                photoUrl: userInfo.picture,
                email: userInfo.email
              }
            }));

          case 21:
            _context.prev = 21;
            _context.t0 = _context["catch"](8);

            if (!(_context.t0.message.toLowerCase().indexOf('user cancelled') > -1)) {
              _context.next = 25;
              break;
            }

            return _context.abrupt("return", {
              type: 'cancel'
            });

          case 25:
            throw _context.t0;

          case 26:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[8, 21]]);
  }

  function logOutAsync(_ref) {
    var accessToken, clientId, config;
    return _regenerator.default.async(function logOutAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            accessToken = _ref.accessToken, clientId = _ref.clientId;
            config = {
              issuer: 'https://accounts.google.com',
              clientId: clientId
            };
            _context2.next = 4;
            return _regenerator.default.awrap(_expoAppAuth.AppAuth.revokeAsync(config, {
              token: accessToken,
              isClientIdProvided: !!clientId
            }));

          case 4:
            return _context2.abrupt("return", _context2.sent);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }
},555,[1,130,48,17,379,329,368,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.notification = notification;
  exports.impact = impact;
  exports.selection = selection;
  exports.ImpactFeedbackStyle = exports.NotificationFeedbackType = undefined;

  var _expoErrors = _$$_REQUIRE(_dependencyMap[1]);

  var _ExponentHaptic = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var NotificationFeedbackType;
  exports.NotificationFeedbackType = NotificationFeedbackType;

  (function (NotificationFeedbackType) {
    NotificationFeedbackType["Success"] = "success";
    NotificationFeedbackType["Warning"] = "warning";
    NotificationFeedbackType["Error"] = "error";
  })(NotificationFeedbackType || (exports.NotificationFeedbackType = NotificationFeedbackType = {}));

  var ImpactFeedbackStyle;
  exports.ImpactFeedbackStyle = ImpactFeedbackStyle;

  (function (ImpactFeedbackStyle) {
    ImpactFeedbackStyle["Light"] = "light";
    ImpactFeedbackStyle["Medium"] = "medium";
    ImpactFeedbackStyle["Heavy"] = "heavy";
  })(ImpactFeedbackStyle || (exports.ImpactFeedbackStyle = ImpactFeedbackStyle = {}));

  function notification() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NotificationFeedbackType.Success;

    if (!_ExponentHaptic.default || _ExponentHaptic.default.notification) {
      throw new _expoErrors.UnavailabilityError('Haptic', 'notification');
    }

    return _ExponentHaptic.default.notification(type);
  }

  function impact() {
    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ImpactFeedbackStyle.Medium;

    if (!_ExponentHaptic.default || !_ExponentHaptic.default.impact) {
      throw new _expoErrors.UnavailabilityError('Haptic', 'impact');
    }

    return _ExponentHaptic.default.impact(style);
  }

  function selection() {
    if (!_ExponentHaptic.default || !_ExponentHaptic.default.selection) {
      throw new _expoErrors.UnavailabilityError('Haptic', 'selection');
    }

    return _ExponentHaptic.default.selection();
  }
},556,[1,368,557]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentHaptic;
  exports.default = _default;
},557,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _vectorIcons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _default = _vectorIcons.default;
  exports.default = _default;
},558,[1,559]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get AntDesign() {
      return _$$_REQUIRE(_dependencyMap[0]).default;
    },

    get Entypo() {
      return _$$_REQUIRE(_dependencyMap[1]).default;
    },

    get EvilIcons() {
      return _$$_REQUIRE(_dependencyMap[2]).default;
    },

    get Feather() {
      return _$$_REQUIRE(_dependencyMap[3]).default;
    },

    get FontAwesome() {
      return _$$_REQUIRE(_dependencyMap[4]).default;
    },

    get Foundation() {
      return _$$_REQUIRE(_dependencyMap[5]).default;
    },

    get Ionicons() {
      return _$$_REQUIRE(_dependencyMap[6]).default;
    },

    get MaterialCommunityIcons() {
      return _$$_REQUIRE(_dependencyMap[7]).default;
    },

    get MaterialIcons() {
      return _$$_REQUIRE(_dependencyMap[8]).default;
    },

    get Octicons() {
      return _$$_REQUIRE(_dependencyMap[9]).default;
    },

    get SimpleLineIcons() {
      return _$$_REQUIRE(_dependencyMap[10]).default;
    },

    get Zocial() {
      return _$$_REQUIRE(_dependencyMap[11]).default;
    },

    get createIconSet() {
      return _$$_REQUIRE(_dependencyMap[12]).default;
    },

    get createIconSetFromFontello() {
      return _$$_REQUIRE(_dependencyMap[13]).default;
    },

    get createIconSetFromIcoMoon() {
      return _$$_REQUIRE(_dependencyMap[14]).default;
    }

  };
},559,[560,727,730,733,736,739,742,745,748,751,754,757,562,760,762]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _AntDesign = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_AntDesign.default, 'anticon', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},560,[1,561,562,726]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "stepforward": 58880,
  "stepbackward": 58881,
  "forward": 58882,
  "banckward": 58883,
  "caretright": 58884,
  "caretleft": 58885,
  "caretdown": 58886,
  "caretup": 58887,
  "rightcircle": 58888,
  "leftcircle": 58889,
  "upcircle": 58890,
  "downcircle": 58891,
  "rightcircleo": 58892,
  "leftcircleo": 58893,
  "upcircleo": 58894,
  "downcircleo": 58895,
  "verticleleft": 58896,
  "verticleright": 58897,
  "back": 58898,
  "retweet": 58899,
  "shrink": 58900,
  "arrowsalt": 58901,
  "doubleright": 58903,
  "doubleleft": 58904,
  "arrowdown": 58905,
  "arrowup": 58906,
  "arrowright": 58907,
  "arrowleft": 58908,
  "down": 58909,
  "up": 58910,
  "right": 58911,
  "left": 58912,
  "minussquareo": 58913,
  "minuscircle": 58914,
  "minuscircleo": 58915,
  "minus": 58916,
  "pluscircleo": 58917,
  "pluscircle": 58918,
  "plus": 58919,
  "infocirlce": 58920,
  "infocirlceo": 58921,
  "info": 58922,
  "exclamation": 58923,
  "exclamationcircle": 58924,
  "exclamationcircleo": 58925,
  "closecircle": 58926,
  "closecircleo": 58927,
  "checkcircle": 58928,
  "checkcircleo": 58929,
  "check": 58930,
  "close": 58931,
  "customerservice": 58932,
  "creditcard": 58933,
  "codesquareo": 58934,
  "book": 58935,
  "barschart": 58936,
  "bars": 58937,
  "question": 58938,
  "questioncircle": 58939,
  "questioncircleo": 58940,
  "pause": 58941,
  "pausecircle": 58942,
  "pausecircleo": 58943,
  "clockcircle": 58944,
  "clockcircleo": 58945,
  "swap": 58946,
  "swapleft": 58947,
  "swapright": 58948,
  "plussquareo": 58949,
  "frown": 58950,
  "menufold": 58968,
  "mail": 58969,
  "link": 58971,
  "areachart": 58972,
  "linechart": 58973,
  "home": 58974,
  "laptop": 58975,
  "star": 58976,
  "staro": 58977,
  "filter": 58979,
  "meho": 58982,
  "meh": 58983,
  "shoppingcart": 58984,
  "save": 58985,
  "user": 58986,
  "videocamera": 58987,
  "totop": 58988,
  "team": 58989,
  "sharealt": 58993,
  "setting": 58994,
  "picture": 58996,
  "phone": 58997,
  "paperclip": 58998,
  "notification": 58999,
  "menuunfold": 59001,
  "inbox": 59002,
  "lock": 59003,
  "qrcode": 59004,
  "tags": 59005,
  "tagso": 59006,
  "cloudo": 59007,
  "cloud": 59008,
  "cloudupload": 59009,
  "clouddownload": 59010,
  "clouddownloado": 59011,
  "clouduploado": 59012,
  "enviroment": 59013,
  "enviromento": 59014,
  "eye": 59015,
  "eyeo": 59016,
  "camera": 59017,
  "camerao": 59018,
  "windows": 59019,
  "export2": 59024,
  "export": 59025,
  "circledowno": 59027,
  "circledown": 59028,
  "hdd": 59034,
  "ie": 59035,
  "delete": 59039,
  "enter": 59040,
  "pushpino": 59041,
  "pushpin": 59042,
  "heart": 59043,
  "hearto": 59044,
  "smile-circle": 59047,
  "smileo": 59048,
  "frowno": 59049,
  "calculator": 59050,
  "chrome": 59052,
  "github": 59053,
  "iconfontdesktop": 59060,
  "caretcircleoup": 59061,
  "upload": 59062,
  "download": 59063,
  "piechart": 59064,
  "lock1": 59065,
  "unlock": 59066,
  "windowso": 59068,
  "dotchart": 59069,
  "barchart": 59070,
  "codesquare": 59071,
  "plussquare": 59072,
  "minussquare": 59073,
  "closesquare": 59074,
  "closesquareo": 59075,
  "checksquare": 59076,
  "checksquareo": 59077,
  "fastbackward": 59078,
  "fastforward": 59079,
  "upsquare": 59080,
  "downsquare": 59081,
  "leftsquare": 59082,
  "rightsquare": 59083,
  "rightsquareo": 59084,
  "leftsquareo": 59085,
  "down-square-o": 59086,
  "up-square-o": 59087,
  "play": 59088,
  "playcircleo": 59089,
  "tag": 59090,
  "tago": 59091,
  "addfile": 59664,
  "folder1": 58978,
  "file1": 58980,
  "switcher": 59667,
  "addfolder": 59668,
  "folderopen": 59033,
  "search1": 58992,
  "ellipsis1": 58951,
  "calendar": 59067,
  "filetext1": 59032,
  "copy1": 58952,
  "jpgfile1": 59036,
  "pdffile1": 59059,
  "exclefile1": 59056,
  "pptfile1": 59057,
  "unknowfile1": 59055,
  "wordfile1": 59058,
  "dingding": 59683,
  "dingding-o": 59685,
  "mobile1": 59000,
  "tablet1": 58990,
  "bells": 58958,
  "disconnect": 58959,
  "database": 58960,
  "barcode": 58962,
  "hourglass": 58963,
  "key": 58964,
  "flag": 58965,
  "layout": 58966,
  "printer": 58995,
  "USB": 59095,
  "skin": 59096,
  "tool": 59097,
  "car": 59100,
  "addusergroup": 59101,
  "carryout": 59103,
  "deleteuser": 59104,
  "deleteusergroup": 59105,
  "man": 59106,
  "isv": 59107,
  "gift": 59108,
  "idcard": 59109,
  "medicinebox": 59110,
  "redenvelopes": 59111,
  "rest": 59112,
  "Safety": 59114,
  "wallet": 59115,
  "woman": 59116,
  "adduser": 59117,
  "bank": 59118,
  "Trophy": 59119,
  "loading1": 59054,
  "loading2": 58957,
  "like2": 59037,
  "dislike2": 59038,
  "like1": 58956,
  "dislike1": 58955,
  "bulb1": 58953,
  "rocket1": 59663,
  "select1": 58954,
  "apple1": 59020,
  "apple-o": 59092,
  "android1": 59704,
  "android": 59021,
  "aliwangwang-o1": 59023,
  "aliwangwang": 59022,
  "pay-circle1": 59045,
  "pay-circle-o1": 59046,
  "poweroff": 59093,
  "trademark": 58961,
  "find": 59099,
  "copyright": 59102,
  "sound": 59113,
  "earth": 59121,
  "wifi": 59094,
  "sync": 59098,
  "login": 58967,
  "logout": 58970,
  "reload1": 58902,
  "message1": 59051,
  "shake": 59727,
  "API": 59729,
  "appstore-o": 59029,
  "appstore1": 59030,
  "scan1": 59031,
  "exception1": 58981,
  "contacts": 59120,
  "solution1": 58991,
  "fork": 59122,
  "edit": 59026,
  "form": 59798,
  "warning": 59799,
  "table": 59800,
  "profile": 59801,
  "dashboard": 59802,
  "indent-left": 59814,
  "indent-right": 59815,
  "menu-unfold": 59820,
  "menu-fold": 59821,
  "antdesign": 59826,
  "alipay-square": 59827,
  "codepen-circle": 59828,
  "google": 59829,
  "amazon": 59830,
  "codepen": 59831,
  "facebook-square": 59832,
  "dropbox": 59833,
  "googleplus": 59834,
  "linkedin-square": 59835,
  "medium-monogram": 59836,
  "gitlab": 59837,
  "medium-wordmark": 59838,
  "QQ": 59839,
  "skype": 59840,
  "taobao-square": 59841,
  "alipay-circle": 59842,
  "youtube": 59843,
  "wechat": 59844,
  "twitter": 59845,
  "weibo": 59846,
  "HTML": 59847,
  "taobao-circle": 59123,
  "weibo-circle": 59124,
  "weibo-square": 59125,
  "CodeSandbox": 59860,
  "aliyun": 59892,
  "zhihu": 59139,
  "behance": 59143,
  "dribbble": 59145,
  "dribbble-square": 59146,
  "behance-square": 59144,
  "file-markdown": 59140,
  "instagram": 59147,
  "yuque": 59148,
  "slack": 59141,
  "slack-square": 59142
};
},561,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var Font = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _iconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  function _default(glyphMap, fontName, expoAssetId) {
    var font = (0, _defineProperty2.default)({}, fontName, expoAssetId);
    var RNVIconComponent = (0, _createIconSet.default)(glyphMap, fontName);

    var Icon = function (_React$Component) {
      (0, _inherits2.default)(Icon, _React$Component);

      function Icon() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, Icon);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Icon)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          fontIsLoaded: Font.isLoaded(fontName)
        };
        return _this;
      }

      (0, _createClass2.default)(Icon, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          return _regenerator.default.async(function componentWillMount$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this._mounted = true;

                  if (this.state.fontIsLoaded) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 4;
                  return _regenerator.default.awrap(Font.loadAsync(font));

                case 4:
                  this._mounted && this.setState({
                    fontIsLoaded: true
                  });

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._mounted = false;
        }
      }, {
        key: "setNativeProps",
        value: function setNativeProps(props) {
          if (this._icon) {
            this._icon.setNativeProps(props);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;

          if (!this.state.fontIsLoaded) {
            return _react.default.createElement(_reactNative.Text, null);
          }

          return _react.default.createElement(RNVIconComponent, (0, _extends2.default)({
            ref: function ref(view) {
              _this2._icon = view;
            }
          }, this.props));
        }
      }]);
      return Icon;
    }(_react.default.Component);

    Icon.propTypes = RNVIconComponent.propTypes;
    Icon.defaultProps = RNVIconComponent.defaultProps;

    function getRawGlyphMap() {
      return glyphMap;
    }

    Icon.Button = (0, _iconButton.default)(Icon);
    Icon.glyphMap = glyphMap;
    Icon.getRawGlyphMap = getRawGlyphMap;

    Icon.getFontFamily = function () {
      return fontName;
    };

    Icon.loadFont = function () {
      return Font.loadAsync(font);
    };

    Icon.font = font;
    return Icon;
  }
},562,[366,1,3,130,21,22,34,37,40,49,51,5,394,563,566]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconSet;
  exports.DEFAULT_ICON_COLOR = exports.DEFAULT_ICON_SIZE = exports.NativeIconAPI = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _ensureNativeModuleAvailable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _iconButton = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _tabBarItemIos = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _toolbarAndroid = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;
  exports.NativeIconAPI = NativeIconAPI;
  var DEFAULT_ICON_SIZE = 12;
  exports.DEFAULT_ICON_SIZE = DEFAULT_ICON_SIZE;
  var DEFAULT_ICON_COLOR = 'black';
  exports.DEFAULT_ICON_COLOR = DEFAULT_ICON_COLOR;

  function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {
    var fontBasename = fontFile ? fontFile.replace(/\.(otf|ttf)$/, '') : fontFamily;

    var fontReference = _reactNative.Platform.select({
      windows: "Assets/" + fontFile + "#" + fontFamily,
      android: fontBasename,
      web: fontBasename,
      default: fontFamily
    });

    var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));

    var Icon = function (_PureComponent) {
      (0, _inherits2.default)(Icon, _PureComponent);

      function Icon() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, Icon);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Icon)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.root = null;

        _this.handleRef = function (ref) {
          _this.root = ref;
        };

        return _this;
      }

      (0, _createClass2.default)(Icon, [{
        key: "setNativeProps",
        value: function setNativeProps(nativeProps) {
          if (this.root) {
            this.root.setNativeProps(nativeProps);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props,
              name = _this$props.name,
              size = _this$props.size,
              color = _this$props.color,
              style = _this$props.style,
              children = _this$props.children,
              props = (0, _objectWithoutProperties2.default)(_this$props, ["name", "size", "color", "style", "children"]);
          var glyph = name ? glyphMap[name] || '?' : '';

          if (typeof glyph === 'number') {
            glyph = String.fromCharCode(glyph);
          }

          var styleDefaults = {
            fontSize: size,
            color: color
          };
          var styleOverrides = {
            fontFamily: fontReference,
            fontWeight: 'normal',
            fontStyle: 'normal'
          };
          props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];
          props.ref = this.handleRef;
          return _react.default.createElement(_reactNative.Text, props, glyph, children);
        }
      }]);
      return Icon;
    }(_react.PureComponent);

    Icon.propTypes = {
      allowFontScaling: _propTypes.default.bool,
      name: IconNamePropType,
      size: _propTypes.default.number,
      color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      children: _propTypes.default.node,
      style: _propTypes.default.any
    };
    Icon.defaultProps = {
      size: DEFAULT_ICON_SIZE,
      allowFontScaling: false
    };
    var imageSourceCache = {};

    function getImageSource(name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      (0, _ensureNativeModuleAvailable.default)();
      var glyph = glyphMap[name] || '?';

      if (typeof glyph === 'number') {
        glyph = String.fromCharCode(glyph);
      }

      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = glyph + ":" + size + ":" + processedColor;

      var scale = _reactNative.PixelRatio.get();

      return new Promise(function (resolve, reject) {
        var cached = imageSourceCache[cacheKey];

        if (typeof cached !== 'undefined') {
          if (!cached || cached instanceof Error) {
            reject(cached);
          } else {
            resolve({
              uri: cached,
              scale: scale
            });
          }
        } else {
          NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {
            var error = typeof err === 'string' ? new Error(err) : err;
            imageSourceCache[cacheKey] = image || error || false;

            if (!error && image) {
              resolve({
                uri: image,
                scale: scale
              });
            } else {
              reject(error);
            }
          });
        }
      });
    }

    function loadFont() {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;

      if (_reactNative.Platform.OS === 'ios') {
        (0, _ensureNativeModuleAvailable.default)();

        if (!file) {
          return Promise.reject(new Error('Unable to load font, because no file was specified. '));
        }

        return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, (0, _toConsumableArray2.default)(file.split('.')));
      }

      return Promise.resolve();
    }

    function hasIcon(name) {
      return Object.prototype.hasOwnProperty.call(glyphMap, name);
    }

    function getRawGlyphMap() {
      return glyphMap;
    }

    function getFontFamily() {
      return fontReference;
    }

    Icon.Button = (0, _iconButton.default)(Icon);
    Icon.TabBarItem = (0, _tabBarItemIos.default)(IconNamePropType, getImageSource);
    Icon.TabBarItemIOS = Icon.TabBarItem;
    Icon.ToolbarAndroid = (0, _toolbarAndroid.default)(IconNamePropType, getImageSource);
    Icon.getImageSource = getImageSource;
    Icon.loadFont = loadFont;
    Icon.hasIcon = hasIcon;
    Icon.getRawGlyphMap = getRawGlyphMap;
    Icon.getFontFamily = getFontFamily;
    return Icon;
  }
},563,[366,1,17,9,21,22,34,37,40,51,65,564,565,566,711,725]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  Object.keys(_reactNative).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _reactNative[key];
      }
    });
  });
},564,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ensureNativeModuleAvailable;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;

  function ensureNativeModuleAvailable() {
    if (!NativeIconAPI) {
      if (_reactNative.Platform.OS === 'android') {
        throw new Error('RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.');
      }

      throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.');
    }
  }
},565,[564]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconButtonComponent;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _isString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _omit = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _pick = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[14]);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      justifyContent: 'flex-start',
      alignItems: 'center',
      padding: 8
    },
    touchable: {
      overflow: 'hidden'
    },
    icon: {
      marginRight: 10
    },
    text: {
      fontWeight: '600',
      backgroundColor: 'transparent'
    }
  });

  var IOS7_BLUE = '#007AFF';
  var TEXT_PROP_NAMES = ['ellipsizeMode', 'numberOfLines', 'textBreakStrategy', 'selectable', 'suppressHighlighting', 'allowFontScaling', 'adjustsFontSizeToFit', 'minimumFontScale'];
  var TOUCHABLE_PROP_NAMES = ['accessible', 'accessibilityLabel', 'accessibilityHint', 'accessibilityComponentType', 'accessibilityRole', 'accessibilityStates', 'accessibilityTraits', 'onFocus', 'onBlur', 'disabled', 'onPress', 'onPressIn', 'onPressOut', 'onLayout', 'onLongPress', 'nativeID', 'testID', 'delayPressIn', 'delayPressOut', 'delayLongPress', 'activeOpacity', 'underlayColor', 'selectionColor', 'onShowUnderlay', 'onHideUnderlay', 'hasTVPreferredFocus', 'tvParallaxProperties'];

  function createIconButtonComponent(Icon) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      (0, _inherits2.default)(IconButton, _PureComponent);

      function IconButton() {
        (0, _classCallCheck2.default)(this, IconButton);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(IconButton).apply(this, arguments));
      }

      (0, _createClass2.default)(IconButton, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
              style = _this$props.style,
              iconStyle = _this$props.iconStyle,
              children = _this$props.children,
              restProps = (0, _objectWithoutProperties2.default)(_this$props, ["style", "iconStyle", "children"]);
          var iconProps = (0, _pick.default)(restProps, TEXT_PROP_NAMES, 'style', 'name', 'size', 'color');
          var touchableProps = (0, _pick.default)(restProps, TOUCHABLE_PROP_NAMES);
          var props = (0, _omit.default)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
          iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;
          var colorStyle = (0, _pick.default)(this.props, 'color');
          var blockStyle = (0, _pick.default)(this.props, 'backgroundColor', 'borderRadius');
          return _react.default.createElement(_reactNative.TouchableHighlight, (0, _extends2.default)({
            style: [styles.touchable, blockStyle]
          }, touchableProps), _react.default.createElement(_reactNative.View, (0, _extends2.default)({
            style: [styles.container, blockStyle, style]
          }, props), _react.default.createElement(Icon, iconProps), (0, _isString.default)(children) ? _react.default.createElement(_reactNative.Text, {
            style: [styles.text, colorStyle]
          }, children) : children));
        }
      }]);
      return IconButton;
    }(_react.PureComponent), _class.propTypes = {
      backgroundColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      borderRadius: _propTypes.default.number,
      color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      size: _propTypes.default.number,
      iconStyle: _propTypes.default.any,
      style: _propTypes.default.any,
      children: _propTypes.default.node
    }, _class.defaultProps = {
      backgroundColor: IOS7_BLUE,
      borderRadius: 5,
      color: 'white',
      size: 20
    }, _temp;
  }
},566,[366,1,3,9,21,22,34,37,40,567,576,704,51,65,564]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isArray = _$$_REQUIRE(_dependencyMap[1]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[2]);

  var stringTag = '[object String]';

  function isString(value) {
    return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
  }

  module.exports = isString;
},567,[568,574,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]),
      getRawTag = _$$_REQUIRE(_dependencyMap[1]),
      objectToString = _$$_REQUIRE(_dependencyMap[2]);

  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';
  var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }

  module.exports = baseGetTag;
},568,[569,572,573]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]);

  var Symbol = root.Symbol;
  module.exports = Symbol;
},569,[570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var freeGlobal = _$$_REQUIRE(_dependencyMap[0]);

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  module.exports = root;
},570,[571]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  module.exports = freeGlobal;
},571,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  module.exports = getRawTag;
},572,[569]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  module.exports = objectToString;
},573,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArray = Array.isArray;
  module.exports = isArray;
},574,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  module.exports = isObjectLike;
},575,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayMap = _$$_REQUIRE(_dependencyMap[0]),
      baseClone = _$$_REQUIRE(_dependencyMap[1]),
      baseUnset = _$$_REQUIRE(_dependencyMap[2]),
      castPath = _$$_REQUIRE(_dependencyMap[3]),
      copyObject = _$$_REQUIRE(_dependencyMap[4]),
      customOmitClone = _$$_REQUIRE(_dependencyMap[5]),
      flatRest = _$$_REQUIRE(_dependencyMap[6]),
      getAllKeysIn = _$$_REQUIRE(_dependencyMap[7]);

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var omit = flatRest(function (object, paths) {
    var result = {};

    if (object == null) {
      return result;
    }

    var isDeep = false;
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);

    if (isDeep) {
      result = baseClone(result, 7, customOmitClone);
    }

    var length = paths.length;

    while (length--) {
      baseUnset(result, paths[length]);
    }

    return result;
  });
  module.exports = omit;
},576,[577,578,677,678,622,691,693,657]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  module.exports = arrayMap;
},577,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Stack = _$$_REQUIRE(_dependencyMap[0]),
      arrayEach = _$$_REQUIRE(_dependencyMap[1]),
      assignValue = _$$_REQUIRE(_dependencyMap[2]),
      baseAssign = _$$_REQUIRE(_dependencyMap[3]),
      baseAssignIn = _$$_REQUIRE(_dependencyMap[4]),
      cloneBuffer = _$$_REQUIRE(_dependencyMap[5]),
      copyArray = _$$_REQUIRE(_dependencyMap[6]),
      copySymbols = _$$_REQUIRE(_dependencyMap[7]),
      copySymbolsIn = _$$_REQUIRE(_dependencyMap[8]),
      getAllKeys = _$$_REQUIRE(_dependencyMap[9]),
      getAllKeysIn = _$$_REQUIRE(_dependencyMap[10]),
      getTag = _$$_REQUIRE(_dependencyMap[11]),
      initCloneArray = _$$_REQUIRE(_dependencyMap[12]),
      initCloneByTag = _$$_REQUIRE(_dependencyMap[13]),
      initCloneObject = _$$_REQUIRE(_dependencyMap[14]),
      isArray = _$$_REQUIRE(_dependencyMap[15]),
      isBuffer = _$$_REQUIRE(_dependencyMap[16]),
      isMap = _$$_REQUIRE(_dependencyMap[17]),
      isObject = _$$_REQUIRE(_dependencyMap[18]),
      isSet = _$$_REQUIRE(_dependencyMap[19]),
      keys = _$$_REQUIRE(_dependencyMap[20]);

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject(value)) {
      return value;
    }

    var isArr = isArray(value);

    if (isArr) {
      result = initCloneArray(value);

      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }

      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);

        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = initCloneByTag(value, tag, isDeep);
      }
    }

    stack || (stack = new Stack());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
      return result;
    }

    if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }

      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  module.exports = baseClone;
},578,[579,617,618,621,641,645,646,647,651,655,657,658,663,664,671,574,628,673,597,675,623]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ListCache = _$$_REQUIRE(_dependencyMap[0]),
      stackClear = _$$_REQUIRE(_dependencyMap[1]),
      stackDelete = _$$_REQUIRE(_dependencyMap[2]),
      stackGet = _$$_REQUIRE(_dependencyMap[3]),
      stackHas = _$$_REQUIRE(_dependencyMap[4]),
      stackSet = _$$_REQUIRE(_dependencyMap[5]);

  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  module.exports = Stack;
},579,[580,588,589,590,591,592]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var listCacheClear = _$$_REQUIRE(_dependencyMap[0]),
      listCacheDelete = _$$_REQUIRE(_dependencyMap[1]),
      listCacheGet = _$$_REQUIRE(_dependencyMap[2]),
      listCacheHas = _$$_REQUIRE(_dependencyMap[3]),
      listCacheSet = _$$_REQUIRE(_dependencyMap[4]);

  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  module.exports = ListCache;
},580,[581,582,585,586,587]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  module.exports = listCacheClear;
},581,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assocIndexOf = _$$_REQUIRE(_dependencyMap[0]);

  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  module.exports = listCacheDelete;
},582,[583]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var eq = _$$_REQUIRE(_dependencyMap[0]);

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  module.exports = assocIndexOf;
},583,[584]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = eq;
},584,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assocIndexOf = _$$_REQUIRE(_dependencyMap[0]);

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  module.exports = listCacheGet;
},585,[583]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assocIndexOf = _$$_REQUIRE(_dependencyMap[0]);

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  module.exports = listCacheHas;
},586,[583]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assocIndexOf = _$$_REQUIRE(_dependencyMap[0]);

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  module.exports = listCacheSet;
},587,[583]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ListCache = _$$_REQUIRE(_dependencyMap[0]);

  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  module.exports = stackClear;
},588,[580]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  module.exports = stackDelete;
},589,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stackGet(key) {
    return this.__data__.get(key);
  }

  module.exports = stackGet;
},590,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stackHas(key) {
    return this.__data__.has(key);
  }

  module.exports = stackHas;
},591,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var ListCache = _$$_REQUIRE(_dependencyMap[0]),
      Map = _$$_REQUIRE(_dependencyMap[1]),
      MapCache = _$$_REQUIRE(_dependencyMap[2]);

  var LARGE_ARRAY_SIZE = 200;

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache) {
      var pairs = data.__data__;

      if (!Map || pairs.length < 199) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  module.exports = stackSet;
},592,[580,593,602]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var Map = getNative(root, 'Map');
  module.exports = Map;
},593,[594,570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsNative = _$$_REQUIRE(_dependencyMap[0]),
      getValue = _$$_REQUIRE(_dependencyMap[1]);

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  module.exports = getNative;
},594,[595,601]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isFunction = _$$_REQUIRE(_dependencyMap[0]),
      isMasked = _$$_REQUIRE(_dependencyMap[1]),
      isObject = _$$_REQUIRE(_dependencyMap[2]),
      toSource = _$$_REQUIRE(_dependencyMap[3]);

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = baseIsNative;
},595,[596,598,597,600]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isObject = _$$_REQUIRE(_dependencyMap[1]);

  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }

    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  module.exports = isFunction;
},596,[568,597]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
},597,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var coreJsData = _$$_REQUIRE(_dependencyMap[0]);

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  module.exports = isMasked;
},598,[599]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]);

  var coreJsData = root['__core-js_shared__'];
  module.exports = coreJsData;
},599,[570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  module.exports = toSource;
},600,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  module.exports = getValue;
},601,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var mapCacheClear = _$$_REQUIRE(_dependencyMap[0]),
      mapCacheDelete = _$$_REQUIRE(_dependencyMap[1]),
      mapCacheGet = _$$_REQUIRE(_dependencyMap[2]),
      mapCacheHas = _$$_REQUIRE(_dependencyMap[3]),
      mapCacheSet = _$$_REQUIRE(_dependencyMap[4]);

  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  module.exports = MapCache;
},602,[603,611,614,615,616]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Hash = _$$_REQUIRE(_dependencyMap[0]),
      ListCache = _$$_REQUIRE(_dependencyMap[1]),
      Map = _$$_REQUIRE(_dependencyMap[2]);

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  module.exports = mapCacheClear;
},603,[604,580,593]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var hashClear = _$$_REQUIRE(_dependencyMap[0]),
      hashDelete = _$$_REQUIRE(_dependencyMap[1]),
      hashGet = _$$_REQUIRE(_dependencyMap[2]),
      hashHas = _$$_REQUIRE(_dependencyMap[3]),
      hashSet = _$$_REQUIRE(_dependencyMap[4]);

  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  module.exports = Hash;
},604,[605,607,608,609,610]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var nativeCreate = _$$_REQUIRE(_dependencyMap[0]);

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  module.exports = hashClear;
},605,[606]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]);

  var nativeCreate = getNative(Object, 'create');
  module.exports = nativeCreate;
},606,[594]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = hashDelete;
},607,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var nativeCreate = _$$_REQUIRE(_dependencyMap[0]);

  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashGet(key) {
    var data = this.__data__;

    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }

    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  module.exports = hashGet;
},608,[606]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var nativeCreate = _$$_REQUIRE(_dependencyMap[0]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  module.exports = hashHas;
},609,[606]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var nativeCreate = _$$_REQUIRE(_dependencyMap[0]);

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  module.exports = hashSet;
},610,[606]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getMapData = _$$_REQUIRE(_dependencyMap[0]);

  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = mapCacheDelete;
},611,[612]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isKeyable = _$$_REQUIRE(_dependencyMap[0]);

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  module.exports = getMapData;
},612,[613]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  module.exports = isKeyable;
},613,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getMapData = _$$_REQUIRE(_dependencyMap[0]);

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  module.exports = mapCacheGet;
},614,[612]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getMapData = _$$_REQUIRE(_dependencyMap[0]);

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  module.exports = mapCacheHas;
},615,[612]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getMapData = _$$_REQUIRE(_dependencyMap[0]);

  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  module.exports = mapCacheSet;
},616,[612]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  module.exports = arrayEach;
},617,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseAssignValue = _$$_REQUIRE(_dependencyMap[0]),
      eq = _$$_REQUIRE(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  module.exports = assignValue;
},618,[619,584]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var defineProperty = _$$_REQUIRE(_dependencyMap[0]);

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  module.exports = baseAssignValue;
},619,[620]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]);

  var defineProperty = function () {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  module.exports = defineProperty;
},620,[594]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var copyObject = _$$_REQUIRE(_dependencyMap[0]),
      keys = _$$_REQUIRE(_dependencyMap[1]);

  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  module.exports = baseAssign;
},621,[622,623]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assignValue = _$$_REQUIRE(_dependencyMap[0]),
      baseAssignValue = _$$_REQUIRE(_dependencyMap[1]);

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }

    return object;
  }

  module.exports = copyObject;
},622,[618,619]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayLikeKeys = _$$_REQUIRE(_dependencyMap[0]),
      baseKeys = _$$_REQUIRE(_dependencyMap[1]),
      isArrayLike = _$$_REQUIRE(_dependencyMap[2]);

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  module.exports = keys;
},623,[624,636,640]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseTimes = _$$_REQUIRE(_dependencyMap[0]),
      isArguments = _$$_REQUIRE(_dependencyMap[1]),
      isArray = _$$_REQUIRE(_dependencyMap[2]),
      isBuffer = _$$_REQUIRE(_dependencyMap[3]),
      isIndex = _$$_REQUIRE(_dependencyMap[4]),
      isTypedArray = _$$_REQUIRE(_dependencyMap[5]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = arrayLikeKeys;
},624,[625,626,574,628,630,631]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  module.exports = baseTimes;
},625,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsArguments = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var isArguments = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  };
  module.exports = isArguments;
},626,[627,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var argsTag = '[object Arguments]';

  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  module.exports = baseIsArguments;
},627,[568,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]),
      stubFalse = _$$_REQUIRE(_dependencyMap[1]);

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  var isBuffer = nativeIsBuffer || stubFalse;
  module.exports = isBuffer;
},628,[570,629]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stubFalse() {
    return false;
  }

  module.exports = stubFalse;
},629,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
},630,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsTypedArray = _$$_REQUIRE(_dependencyMap[0]),
      baseUnary = _$$_REQUIRE(_dependencyMap[1]),
      nodeUtil = _$$_REQUIRE(_dependencyMap[2]);

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  module.exports = isTypedArray;
},631,[632,634,635]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isLength = _$$_REQUIRE(_dependencyMap[1]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[2]);

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  module.exports = baseIsTypedArray;
},632,[568,633,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
},633,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  module.exports = baseUnary;
},634,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var freeGlobal = _$$_REQUIRE(_dependencyMap[0]);

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  module.exports = nodeUtil;
},635,[571]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isPrototype = _$$_REQUIRE(_dependencyMap[0]),
      nativeKeys = _$$_REQUIRE(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeys;
},636,[637,638]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
  }

  module.exports = isPrototype;
},637,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var overArg = _$$_REQUIRE(_dependencyMap[0]);

  var nativeKeys = overArg(Object.keys, Object);
  module.exports = nativeKeys;
},638,[639]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  module.exports = overArg;
},639,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isFunction = _$$_REQUIRE(_dependencyMap[0]),
      isLength = _$$_REQUIRE(_dependencyMap[1]);

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  module.exports = isArrayLike;
},640,[596,633]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var copyObject = _$$_REQUIRE(_dependencyMap[0]),
      keysIn = _$$_REQUIRE(_dependencyMap[1]);

  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }

  module.exports = baseAssignIn;
},641,[622,642]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayLikeKeys = _$$_REQUIRE(_dependencyMap[0]),
      baseKeysIn = _$$_REQUIRE(_dependencyMap[1]),
      isArrayLike = _$$_REQUIRE(_dependencyMap[2]);

  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  module.exports = keysIn;
},642,[624,643,640]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isObject = _$$_REQUIRE(_dependencyMap[0]),
      isPrototype = _$$_REQUIRE(_dependencyMap[1]),
      nativeKeysIn = _$$_REQUIRE(_dependencyMap[2]);

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = baseKeysIn;
},643,[597,637,644]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  module.exports = nativeKeysIn;
},644,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]);

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }

    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
},645,[570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function copyArray(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  module.exports = copyArray;
},646,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var copyObject = _$$_REQUIRE(_dependencyMap[0]),
      getSymbols = _$$_REQUIRE(_dependencyMap[1]);

  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  module.exports = copySymbols;
},647,[622,648]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayFilter = _$$_REQUIRE(_dependencyMap[0]),
      stubArray = _$$_REQUIRE(_dependencyMap[1]);

  var objectProto = Object.prototype;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  module.exports = getSymbols;
},648,[649,650]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  module.exports = arrayFilter;
},649,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function stubArray() {
    return [];
  }

  module.exports = stubArray;
},650,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var copyObject = _$$_REQUIRE(_dependencyMap[0]),
      getSymbolsIn = _$$_REQUIRE(_dependencyMap[1]);

  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }

  module.exports = copySymbolsIn;
},651,[622,652]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayPush = _$$_REQUIRE(_dependencyMap[0]),
      getPrototype = _$$_REQUIRE(_dependencyMap[1]),
      getSymbols = _$$_REQUIRE(_dependencyMap[2]),
      stubArray = _$$_REQUIRE(_dependencyMap[3]);

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype(object);
    }

    return result;
  };
  module.exports = getSymbolsIn;
},652,[653,654,648,650]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  module.exports = arrayPush;
},653,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var overArg = _$$_REQUIRE(_dependencyMap[0]);

  var getPrototype = overArg(Object.getPrototypeOf, Object);
  module.exports = getPrototype;
},654,[639]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetAllKeys = _$$_REQUIRE(_dependencyMap[0]),
      getSymbols = _$$_REQUIRE(_dependencyMap[1]),
      keys = _$$_REQUIRE(_dependencyMap[2]);

  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  module.exports = getAllKeys;
},655,[656,648,623]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayPush = _$$_REQUIRE(_dependencyMap[0]),
      isArray = _$$_REQUIRE(_dependencyMap[1]);

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  module.exports = baseGetAllKeys;
},656,[653,574]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetAllKeys = _$$_REQUIRE(_dependencyMap[0]),
      getSymbolsIn = _$$_REQUIRE(_dependencyMap[1]),
      keysIn = _$$_REQUIRE(_dependencyMap[2]);

  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }

  module.exports = getAllKeysIn;
},657,[656,652,642]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var DataView = _$$_REQUIRE(_dependencyMap[0]),
      Map = _$$_REQUIRE(_dependencyMap[1]),
      Promise = _$$_REQUIRE(_dependencyMap[2]),
      Set = _$$_REQUIRE(_dependencyMap[3]),
      WeakMap = _$$_REQUIRE(_dependencyMap[4]),
      baseGetTag = _$$_REQUIRE(_dependencyMap[5]),
      toSource = _$$_REQUIRE(_dependencyMap[6]);

  var mapTag = '[object Map]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      setTag = '[object Set]',
      weakMapTag = '[object WeakMap]';
  var dataViewTag = '[object DataView]';
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);
  var getTag = baseGetTag;

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = baseGetTag(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;

          case mapCtorString:
            return mapTag;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag;

          case weakMapCtorString:
            return weakMapTag;
        }
      }

      return result;
    };
  }

  module.exports = getTag;
},658,[659,593,660,661,662,568,600]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var DataView = getNative(root, 'DataView');
  module.exports = DataView;
},659,[594,570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var Promise = getNative(root, 'Promise');
  module.exports = Promise;
},660,[594,570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var Set = getNative(root, 'Set');
  module.exports = Set;
},661,[594,570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getNative = _$$_REQUIRE(_dependencyMap[0]),
      root = _$$_REQUIRE(_dependencyMap[1]);

  var WeakMap = getNative(root, 'WeakMap');
  module.exports = WeakMap;
},662,[594,570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  module.exports = initCloneArray;
},663,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var cloneArrayBuffer = _$$_REQUIRE(_dependencyMap[0]),
      cloneDataView = _$$_REQUIRE(_dependencyMap[1]),
      cloneRegExp = _$$_REQUIRE(_dependencyMap[2]),
      cloneSymbol = _$$_REQUIRE(_dependencyMap[3]),
      cloneTypedArray = _$$_REQUIRE(_dependencyMap[4]);

  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case dataViewTag:
        return cloneDataView(object, isDeep);

      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);

      case mapTag:
        return new Ctor();

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        return cloneRegExp(object);

      case setTag:
        return new Ctor();

      case symbolTag:
        return cloneSymbol(object);
    }
  }

  module.exports = initCloneByTag;
},664,[665,667,668,669,670]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Uint8Array = _$$_REQUIRE(_dependencyMap[0]);

  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  module.exports = cloneArrayBuffer;
},665,[666]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var root = _$$_REQUIRE(_dependencyMap[0]);

  var Uint8Array = root.Uint8Array;
  module.exports = Uint8Array;
},666,[570]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var cloneArrayBuffer = _$$_REQUIRE(_dependencyMap[0]);

  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  module.exports = cloneDataView;
},667,[665]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var reFlags = /\w*$/;

  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  module.exports = cloneRegExp;
},668,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]);

  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  module.exports = cloneSymbol;
},669,[569]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var cloneArrayBuffer = _$$_REQUIRE(_dependencyMap[0]);

  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  module.exports = cloneTypedArray;
},670,[665]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseCreate = _$$_REQUIRE(_dependencyMap[0]),
      getPrototype = _$$_REQUIRE(_dependencyMap[1]),
      isPrototype = _$$_REQUIRE(_dependencyMap[2]);

  function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }

  module.exports = initCloneObject;
},671,[672,654,637]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isObject = _$$_REQUIRE(_dependencyMap[0]);

  var objectCreate = Object.create;

  var baseCreate = function () {
    function object() {}

    return function (proto) {
      if (!isObject(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  module.exports = baseCreate;
},672,[597]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsMap = _$$_REQUIRE(_dependencyMap[0]),
      baseUnary = _$$_REQUIRE(_dependencyMap[1]),
      nodeUtil = _$$_REQUIRE(_dependencyMap[2]);

  var nodeIsMap = nodeUtil && nodeUtil.isMap;
  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  module.exports = isMap;
},673,[674,634,635]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getTag = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var mapTag = '[object Map]';

  function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
  }

  module.exports = baseIsMap;
},674,[658,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsSet = _$$_REQUIRE(_dependencyMap[0]),
      baseUnary = _$$_REQUIRE(_dependencyMap[1]),
      nodeUtil = _$$_REQUIRE(_dependencyMap[2]);

  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  module.exports = isSet;
},675,[676,634,635]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getTag = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var setTag = '[object Set]';

  function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
  }

  module.exports = baseIsSet;
},676,[658,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var castPath = _$$_REQUIRE(_dependencyMap[0]),
      last = _$$_REQUIRE(_dependencyMap[1]),
      parent = _$$_REQUIRE(_dependencyMap[2]),
      toKey = _$$_REQUIRE(_dependencyMap[3]);

  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }

  module.exports = baseUnset;
},677,[678,686,687,689]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArray = _$$_REQUIRE(_dependencyMap[0]),
      isKey = _$$_REQUIRE(_dependencyMap[1]),
      stringToPath = _$$_REQUIRE(_dependencyMap[2]),
      toString = _$$_REQUIRE(_dependencyMap[3]);

  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }

    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }

  module.exports = castPath;
},678,[574,679,681,684]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isArray = _$$_REQUIRE(_dependencyMap[0]),
      isSymbol = _$$_REQUIRE(_dependencyMap[1]);

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }

    var type = typeof value;

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  module.exports = isKey;
},679,[574,680]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  var symbolTag = '[object Symbol]';

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
  }

  module.exports = isSymbol;
},680,[568,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var memoizeCapped = _$$_REQUIRE(_dependencyMap[0]);

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46) {
        result.push('');
      }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  module.exports = stringToPath;
},681,[682]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var memoize = _$$_REQUIRE(_dependencyMap[0]);

  var MAX_MEMOIZE_SIZE = 500;

  function memoizeCapped(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  module.exports = memoizeCapped;
},682,[683]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MapCache = _$$_REQUIRE(_dependencyMap[0]);

  var FUNC_ERROR_TEXT = 'Expected a function';

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;
  module.exports = memoize;
},683,[602]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseToString = _$$_REQUIRE(_dependencyMap[0]);

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  module.exports = toString;
},684,[685]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]),
      arrayMap = _$$_REQUIRE(_dependencyMap[1]),
      isArray = _$$_REQUIRE(_dependencyMap[2]),
      isSymbol = _$$_REQUIRE(_dependencyMap[3]);

  var INFINITY = 1 / 0;
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }

    if (isArray(value)) {
      return arrayMap(value, baseToString) + '';
    }

    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  module.exports = baseToString;
},685,[569,577,574,680]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  module.exports = last;
},686,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGet = _$$_REQUIRE(_dependencyMap[0]),
      baseSlice = _$$_REQUIRE(_dependencyMap[1]);

  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }

  module.exports = parent;
},687,[688,690]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var castPath = _$$_REQUIRE(_dependencyMap[0]),
      toKey = _$$_REQUIRE(_dependencyMap[1]);

  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  module.exports = baseGet;
},688,[678,689]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isSymbol = _$$_REQUIRE(_dependencyMap[0]);

  var INFINITY = 1 / 0;

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
  }

  module.exports = toKey;
},689,[680]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  module.exports = baseSlice;
},690,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isPlainObject = _$$_REQUIRE(_dependencyMap[0]);

  function customOmitClone(value) {
    return isPlainObject(value) ? undefined : value;
  }

  module.exports = customOmitClone;
},691,[692]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGetTag = _$$_REQUIRE(_dependencyMap[0]),
      getPrototype = _$$_REQUIRE(_dependencyMap[1]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[2]);

  var objectTag = '[object Object]';
  var funcProto = Function.prototype,
      objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);

  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }

    var proto = getPrototype(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  module.exports = isPlainObject;
},692,[568,654,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var flatten = _$$_REQUIRE(_dependencyMap[0]),
      overRest = _$$_REQUIRE(_dependencyMap[1]),
      setToString = _$$_REQUIRE(_dependencyMap[2]);

  function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  module.exports = flatRest;
},693,[694,697,699]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseFlatten = _$$_REQUIRE(_dependencyMap[0]);

  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  module.exports = flatten;
},694,[695]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayPush = _$$_REQUIRE(_dependencyMap[0]),
      isFlattenable = _$$_REQUIRE(_dependencyMap[1]);

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  module.exports = baseFlatten;
},695,[653,696]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]),
      isArguments = _$$_REQUIRE(_dependencyMap[1]),
      isArray = _$$_REQUIRE(_dependencyMap[2]);

  var spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined;

  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  module.exports = isFlattenable;
},696,[569,626,574]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var apply = _$$_REQUIRE(_dependencyMap[0]);

  var nativeMax = Math.max;

  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  module.exports = overRest;
},697,[698]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  module.exports = apply;
},698,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseSetToString = _$$_REQUIRE(_dependencyMap[0]),
      shortOut = _$$_REQUIRE(_dependencyMap[1]);

  var setToString = shortOut(baseSetToString);
  module.exports = setToString;
},699,[700,703]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var constant = _$$_REQUIRE(_dependencyMap[0]),
      defineProperty = _$$_REQUIRE(_dependencyMap[1]),
      identity = _$$_REQUIRE(_dependencyMap[2]);

  var baseSetToString = !defineProperty ? identity : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  module.exports = baseSetToString;
},700,[701,620,702]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function constant(value) {
    return function () {
      return value;
    };
  }

  module.exports = constant;
},701,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function identity(value) {
    return value;
  }

  module.exports = identity;
},702,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  var nativeNow = Date.now;

  function shortOut(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  module.exports = shortOut;
},703,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var basePick = _$$_REQUIRE(_dependencyMap[0]),
      flatRest = _$$_REQUIRE(_dependencyMap[1]);

  var pick = flatRest(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  module.exports = pick;
},704,[705,693]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var basePickBy = _$$_REQUIRE(_dependencyMap[0]),
      hasIn = _$$_REQUIRE(_dependencyMap[1]);

  function basePick(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn(object, path);
    });
  }

  module.exports = basePick;
},705,[706,708]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseGet = _$$_REQUIRE(_dependencyMap[0]),
      baseSet = _$$_REQUIRE(_dependencyMap[1]),
      castPath = _$$_REQUIRE(_dependencyMap[2]);

  function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = baseGet(object, path);

      if (predicate(value, path)) {
        baseSet(result, castPath(path, object), value);
      }
    }

    return result;
  }

  module.exports = basePickBy;
},706,[688,707,678]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assignValue = _$$_REQUIRE(_dependencyMap[0]),
      castPath = _$$_REQUIRE(_dependencyMap[1]),
      isIndex = _$$_REQUIRE(_dependencyMap[2]),
      isObject = _$$_REQUIRE(_dependencyMap[3]),
      toKey = _$$_REQUIRE(_dependencyMap[4]);

  function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
      return object;
    }

    path = castPath(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey(path[index]),
          newValue = value;

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }

      assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  module.exports = baseSet;
},707,[618,678,630,597,689]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseHasIn = _$$_REQUIRE(_dependencyMap[0]),
      hasPath = _$$_REQUIRE(_dependencyMap[1]);

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  module.exports = hasIn;
},708,[709,710]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  module.exports = baseHasIn;
},709,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var castPath = _$$_REQUIRE(_dependencyMap[0]),
      isArguments = _$$_REQUIRE(_dependencyMap[1]),
      isArray = _$$_REQUIRE(_dependencyMap[2]),
      isIndex = _$$_REQUIRE(_dependencyMap[3]),
      isLength = _$$_REQUIRE(_dependencyMap[4]),
      toKey = _$$_REQUIRE(_dependencyMap[5]);

  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  module.exports = hasPath;
},710,[678,626,574,630,633,689]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createTabBarItemIOSComponent;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _isEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _pick = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[13]);

  var ICON_PROP_NAMES = ['iconName', 'iconSize', 'iconColor'];
  var SELECTED_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['selectedIconName', 'selectedIconColor']);

  var arePropsEqual = function arePropsEqual(keys) {
    return function (prevProps, nextProps) {
      return (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys));
    };
  };

  var areIconPropsEqual = arePropsEqual(ICON_PROP_NAMES);
  var areSelectedIconPropsEqual = arePropsEqual(SELECTED_ICON_PROP_NAMES);

  function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      (0, _inherits2.default)(TabBarItemIOS, _PureComponent);

      function TabBarItemIOS() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, TabBarItemIOS);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabBarItemIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          icon: undefined,
          selectedIcon: undefined
        };
        return _this;
      }

      (0, _createClass2.default)(TabBarItemIOS, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateIconSource();
          this.updateSelectedIconSource();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (!areIconPropsEqual(prevProps, this.props)) {
            this.updateIconSource();
          }

          if (!areSelectedIconPropsEqual(prevProps, this.props)) {
            this.updateSelectedIconSource();
          }
        }
      }, {
        key: "updateIconSource",
        value: function updateIconSource() {
          var _this$props, iconName, iconSize, iconColor, icon;

          return _regenerator.default.async(function updateIconSource$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _this$props = this.props, iconName = _this$props.iconName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor;

                  if (!iconName) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 4;
                  return _regenerator.default.awrap(getImageSource(iconName, iconSize, iconColor));

                case 4:
                  icon = _context.sent;
                  this.setState({
                    icon: icon
                  });
                  _context.next = 9;
                  break;

                case 8:
                  if (this.state.icon) {
                    this.setState({
                      icon: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "updateSelectedIconSource",
        value: function updateSelectedIconSource() {
          var _this$props2, iconName, iconColor, iconSize, selectedIconName, selectedIconColor, selectedIcon;

          return _regenerator.default.async(function updateSelectedIconSource$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _this$props2 = this.props, iconName = _this$props2.iconName, iconColor = _this$props2.iconColor, iconSize = _this$props2.iconSize, selectedIconName = _this$props2.selectedIconName, selectedIconColor = _this$props2.selectedIconColor;

                  if (!(selectedIconName || selectedIconColor)) {
                    _context2.next = 8;
                    break;
                  }

                  _context2.next = 4;
                  return _regenerator.default.awrap(getImageSource(selectedIconName || iconName, iconSize, selectedIconColor || iconColor));

                case 4:
                  selectedIcon = _context2.sent;
                  this.setState({
                    selectedIcon: selectedIcon
                  });
                  _context2.next = 9;
                  break;

                case 8:
                  if (this.state.selectedIcon) {
                    this.setState({
                      selectedIcon: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "render",
        value: function render() {
          return _react.default.createElement(_reactNative.TabBarIOS.Item, (0, _extends2.default)({}, this.state, this.props));
        }
      }]);
      return TabBarItemIOS;
    }(_react.PureComponent), _class.propTypes = {
      iconName: IconNamePropType.isRequired,
      selectedIconName: IconNamePropType,
      iconSize: _propTypes.default.number,
      iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      selectedIconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    }, _class.defaultProps = {
      iconSize: 30
    }, _temp;
  }
},711,[366,1,3,130,21,22,34,37,40,712,704,51,65,564]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsEqual = _$$_REQUIRE(_dependencyMap[0]);

  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  module.exports = isEqual;
},712,[713]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var baseIsEqualDeep = _$$_REQUIRE(_dependencyMap[0]),
      isObjectLike = _$$_REQUIRE(_dependencyMap[1]);

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  module.exports = baseIsEqual;
},713,[714,575]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Stack = _$$_REQUIRE(_dependencyMap[0]),
      equalArrays = _$$_REQUIRE(_dependencyMap[1]),
      equalByTag = _$$_REQUIRE(_dependencyMap[2]),
      equalObjects = _$$_REQUIRE(_dependencyMap[3]),
      getTag = _$$_REQUIRE(_dependencyMap[4]),
      isArray = _$$_REQUIRE(_dependencyMap[5]),
      isBuffer = _$$_REQUIRE(_dependencyMap[6]),
      isTypedArray = _$$_REQUIRE(_dependencyMap[7]);

  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  module.exports = baseIsEqualDeep;
},714,[579,715,721,724,658,574,628,631]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var SetCache = _$$_REQUIRE(_dependencyMap[0]),
      arraySome = _$$_REQUIRE(_dependencyMap[1]),
      cacheHas = _$$_REQUIRE(_dependencyMap[2]);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  module.exports = equalArrays;
},715,[716,719,720]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var MapCache = _$$_REQUIRE(_dependencyMap[0]),
      setCacheAdd = _$$_REQUIRE(_dependencyMap[1]),
      setCacheHas = _$$_REQUIRE(_dependencyMap[2]);

  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  module.exports = SetCache;
},716,[602,717,718]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  module.exports = setCacheAdd;
},717,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  module.exports = setCacheHas;
},718,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  module.exports = arraySome;
},719,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  module.exports = cacheHas;
},720,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var Symbol = _$$_REQUIRE(_dependencyMap[0]),
      Uint8Array = _$$_REQUIRE(_dependencyMap[1]),
      eq = _$$_REQUIRE(_dependencyMap[2]),
      equalArrays = _$$_REQUIRE(_dependencyMap[3]),
      mapToArray = _$$_REQUIRE(_dependencyMap[4]),
      setToArray = _$$_REQUIRE(_dependencyMap[5]);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  module.exports = equalByTag;
},721,[569,666,584,715,722,723]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;
},722,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;
},723,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getAllKeys = _$$_REQUIRE(_dependencyMap[0]);

  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);

    if (stacked && stack.get(other)) {
      return stacked == other;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  module.exports = equalObjects;
},724,[655]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createToolbarAndroidComponent;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _isEqual = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _pick = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[14]);

  var ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];
  var LOGO_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['logoName']);
  var NAV_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['navIconName']);
  var OVERFLOW_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['overflowIconName']);
  var ACTIONS_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['actions']);

  var arePropsEqual = function arePropsEqual(keys) {
    return function (prevProps, nextProps) {
      return (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys));
    };
  };

  var areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);
  var areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);
  var areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);
  var areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);

  function createToolbarAndroidComponent(IconNamePropType, getImageSource) {
    var _class, _temp;

    return _temp = _class = function (_PureComponent) {
      (0, _inherits2.default)(IconToolbarAndroid, _PureComponent);

      function IconToolbarAndroid() {
        var _getPrototypeOf2;

        var _this;

        (0, _classCallCheck2.default)(this, IconToolbarAndroid);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(IconToolbarAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this.state = {
          logo: undefined,
          navIcon: undefined,
          overflowIcon: undefined,
          actions: undefined
        };
        return _this;
      }

      (0, _createClass2.default)(IconToolbarAndroid, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateLogoIconSource();
          this.updateNavIconSource();
          this.updateOverflowIconSource();
          this.updateActionIconSources();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (!areLogoIconPropsEqual(prevProps, this.props)) {
            this.updateLogoIconSource();
          }

          if (!areNavIconPropsEqual(prevProps, this.props)) {
            this.updateNavIconSource();
          }

          if (!areOverflowIconPropsEqual(prevProps, this.props)) {
            this.updateOverflowIconSource();
          }

          if (!areActionPropsEqual(prevProps, this.props)) {
            this.updateActionIconSources();
          }
        }
      }, {
        key: "updateLogoIconSource",
        value: function updateLogoIconSource() {
          var _this$props, logoName, iconSize, iconColor, titleColor, logo;

          return _regenerator.default.async(function updateLogoIconSource$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _this$props = this.props, logoName = _this$props.logoName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor, titleColor = _this$props.titleColor;

                  if (!logoName) {
                    _context.next = 8;
                    break;
                  }

                  _context.next = 4;
                  return _regenerator.default.awrap(getImageSource(logoName, iconSize, iconColor || titleColor));

                case 4:
                  logo = _context.sent;
                  this.setState({
                    logo: logo
                  });
                  _context.next = 9;
                  break;

                case 8:
                  if (this.state.logo) {
                    this.setState({
                      logo: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "updateNavIconSource",
        value: function updateNavIconSource() {
          var _this$props2, navIconName, iconSize, iconColor, titleColor, navIcon;

          return _regenerator.default.async(function updateNavIconSource$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _this$props2 = this.props, navIconName = _this$props2.navIconName, iconSize = _this$props2.iconSize, iconColor = _this$props2.iconColor, titleColor = _this$props2.titleColor;

                  if (!navIconName) {
                    _context2.next = 8;
                    break;
                  }

                  _context2.next = 4;
                  return _regenerator.default.awrap(getImageSource(navIconName, iconSize, iconColor || titleColor));

                case 4:
                  navIcon = _context2.sent;
                  this.setState({
                    navIcon: navIcon
                  });
                  _context2.next = 9;
                  break;

                case 8:
                  if (this.state.navIcon) {
                    this.setState({
                      navIcon: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "updateOverflowIconSource",
        value: function updateOverflowIconSource() {
          var _this$props3, overflowIconName, iconSize, iconColor, titleColor, overflowIcon;

          return _regenerator.default.async(function updateOverflowIconSource$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _this$props3 = this.props, overflowIconName = _this$props3.overflowIconName, iconSize = _this$props3.iconSize, iconColor = _this$props3.iconColor, titleColor = _this$props3.titleColor;

                  if (!overflowIconName) {
                    _context3.next = 8;
                    break;
                  }

                  _context3.next = 4;
                  return _regenerator.default.awrap(getImageSource(overflowIconName, iconSize, iconColor || titleColor));

                case 4:
                  overflowIcon = _context3.sent;
                  this.setState({
                    overflowIcon: overflowIcon
                  });
                  _context3.next = 9;
                  break;

                case 8:
                  if (this.state.overflowIcon) {
                    this.setState({
                      overflowIcon: undefined
                    });
                  }

                case 9:
                case "end":
                  return _context3.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "updateActionIconSources",
        value: function updateActionIconSources() {
          var _this$props4, actions, iconSize, iconColor, titleColor, updatedActions;

          return _regenerator.default.async(function updateActionIconSources$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _this$props4 = this.props, actions = _this$props4.actions, iconSize = _this$props4.iconSize, iconColor = _this$props4.iconColor, titleColor = _this$props4.titleColor;
                  _context4.next = 3;
                  return _regenerator.default.awrap(Promise.all((actions || []).map(function (action) {
                    if (action.iconName) {
                      return getImageSource(action.iconName, action.iconSize || iconSize, action.iconColor || iconColor || titleColor).then(function (icon) {
                        return (0, _objectSpread2.default)({}, action, {
                          icon: icon
                        });
                      });
                    }

                    return Promise.resolve(action);
                  })));

                case 3:
                  updatedActions = _context4.sent;
                  this.setState({
                    actions: updatedActions
                  });

                case 5:
                case "end":
                  return _context4.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "render",
        value: function render() {
          return _react.default.createElement(_reactNative.ToolbarAndroid, (0, _extends2.default)({}, this.props, this.state));
        }
      }]);
      return IconToolbarAndroid;
    }(_react.PureComponent), _class.propTypes = {
      logoName: IconNamePropType,
      navIconName: IconNamePropType,
      overflowIconName: IconNamePropType,
      actions: _propTypes.default.arrayOf(_propTypes.default.shape({
        title: _propTypes.default.string.isRequired,
        iconName: IconNamePropType,
        iconSize: _propTypes.default.number,
        iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
        show: _propTypes.default.oneOf(['always', 'ifRoom', 'never']),
        showWithText: _propTypes.default.bool
      })),
      iconSize: _propTypes.default.number,
      iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      titleColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
    }, _class.defaultProps = {
      iconSize: 24
    }, _temp;
  }
},725,[366,1,3,48,130,21,22,34,37,40,712,704,51,65,564]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "3a2ba31570920eeb9b1d217cabe58315",
    "name": "AntDesign",
    "type": "ttf",
    "fileHashes": ["3a2ba31570920eeb9b1d217cabe58315"]
  });
},726,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _Entypo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_Entypo.default, 'entypo', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},727,[1,728,562,729]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "500px": 61696,
  "500px-with-circle": 61697,
  "add-to-list": 61698,
  "add-user": 61699,
  "address": 61700,
  "adjust": 61701,
  "air": 61702,
  "aircraft": 61703,
  "aircraft-landing": 61704,
  "aircraft-take-off": 61705,
  "align-bottom": 61706,
  "align-horizontal-middle": 61707,
  "align-left": 61708,
  "align-right": 61709,
  "align-top": 61710,
  "align-vertical-middle": 61711,
  "app-store": 61712,
  "archive": 61713,
  "area-graph": 61714,
  "arrow-bold-down": 61715,
  "arrow-bold-left": 61716,
  "arrow-bold-right": 61717,
  "arrow-bold-up": 61718,
  "arrow-down": 61719,
  "arrow-left": 61720,
  "arrow-long-down": 61721,
  "arrow-long-left": 61722,
  "arrow-long-right": 61723,
  "arrow-long-up": 61724,
  "arrow-right": 61725,
  "arrow-up": 61726,
  "arrow-with-circle-down": 61727,
  "arrow-with-circle-left": 61728,
  "arrow-with-circle-right": 61729,
  "arrow-with-circle-up": 61730,
  "attachment": 61731,
  "awareness-ribbon": 61732,
  "back": 61733,
  "back-in-time": 61734,
  "baidu": 61735,
  "bar-graph": 61736,
  "basecamp": 61737,
  "battery": 61738,
  "beamed-note": 61739,
  "behance": 61740,
  "bell": 61741,
  "blackboard": 61742,
  "block": 61743,
  "book": 61744,
  "bookmark": 61745,
  "bookmarks": 61746,
  "bowl": 61747,
  "box": 61748,
  "briefcase": 61749,
  "browser": 61750,
  "brush": 61751,
  "bucket": 61752,
  "bug": 61753,
  "cake": 61754,
  "calculator": 61755,
  "calendar": 61756,
  "camera": 61757,
  "ccw": 61758,
  "chat": 61759,
  "check": 61760,
  "chevron-down": 61761,
  "chevron-left": 61762,
  "chevron-right": 61763,
  "chevron-small-down": 61764,
  "chevron-small-left": 61765,
  "chevron-small-right": 61766,
  "chevron-small-up": 61767,
  "chevron-thin-down": 61768,
  "chevron-thin-left": 61769,
  "chevron-thin-right": 61770,
  "chevron-thin-up": 61771,
  "chevron-up": 61772,
  "chevron-with-circle-down": 61773,
  "chevron-with-circle-left": 61774,
  "chevron-with-circle-right": 61775,
  "chevron-with-circle-up": 61776,
  "circle": 61777,
  "circle-with-cross": 61778,
  "circle-with-minus": 61779,
  "circle-with-plus": 61780,
  "circular-graph": 61781,
  "clapperboard": 61782,
  "classic-computer": 61783,
  "clipboard": 61784,
  "clock": 61785,
  "cloud": 61786,
  "code": 61787,
  "cog": 61788,
  "colours": 61789,
  "compass": 61790,
  "controller-fast-backward": 61791,
  "controller-fast-forward": 61792,
  "controller-jump-to-start": 61793,
  "controller-next": 61794,
  "controller-paus": 61795,
  "controller-play": 61796,
  "controller-record": 61797,
  "controller-stop": 61798,
  "controller-volume": 61799,
  "copy": 61800,
  "creative-cloud": 61801,
  "creative-commons": 61802,
  "creative-commons-attribution": 61803,
  "creative-commons-noderivs": 61804,
  "creative-commons-noncommercial-eu": 61805,
  "creative-commons-noncommercial-us": 61806,
  "creative-commons-public-domain": 61807,
  "creative-commons-remix": 61808,
  "creative-commons-share": 61809,
  "creative-commons-sharealike": 61810,
  "credit": 61811,
  "credit-card": 61812,
  "crop": 61813,
  "cross": 61814,
  "cup": 61815,
  "cw": 61816,
  "cycle": 61817,
  "database": 61818,
  "dial-pad": 61819,
  "direction": 61820,
  "document": 61821,
  "document-landscape": 61822,
  "documents": 61823,
  "dot-single": 61824,
  "dots-three-horizontal": 61825,
  "dots-three-vertical": 61826,
  "dots-two-horizontal": 61827,
  "dots-two-vertical": 61828,
  "download": 61829,
  "dribbble": 61830,
  "dribbble-with-circle": 61831,
  "drink": 61832,
  "drive": 61833,
  "drop": 61834,
  "dropbox": 61835,
  "edit": 61836,
  "email": 61837,
  "emoji-flirt": 61838,
  "emoji-happy": 61839,
  "emoji-neutral": 61840,
  "emoji-sad": 61841,
  "erase": 61842,
  "eraser": 61843,
  "evernote": 61844,
  "export": 61845,
  "eye": 61846,
  "eye-with-line": 61847,
  "facebook": 61848,
  "facebook-with-circle": 61849,
  "feather": 61850,
  "fingerprint": 61851,
  "flag": 61852,
  "flash": 61853,
  "flashlight": 61854,
  "flat-brush": 61855,
  "flattr": 61856,
  "flickr": 61857,
  "flickr-with-circle": 61858,
  "flow-branch": 61859,
  "flow-cascade": 61860,
  "flow-line": 61861,
  "flow-parallel": 61862,
  "flow-tree": 61863,
  "flower": 61864,
  "folder": 61865,
  "folder-images": 61866,
  "folder-music": 61867,
  "folder-video": 61868,
  "forward": 61869,
  "foursquare": 61870,
  "funnel": 61871,
  "game-controller": 61872,
  "gauge": 61873,
  "github": 61874,
  "github-with-circle": 61875,
  "globe": 61876,
  "google-": 61877,
  "google--with-circle": 61878,
  "google-drive": 61879,
  "google-hangouts": 61880,
  "google-play": 61881,
  "graduation-cap": 61882,
  "grid": 61883,
  "grooveshark": 61884,
  "hair-cross": 61885,
  "hand": 61886,
  "heart": 61887,
  "heart-outlined": 61888,
  "help": 61889,
  "help-with-circle": 61890,
  "home": 61891,
  "hour-glass": 61892,
  "houzz": 61893,
  "icloud": 61894,
  "image": 61895,
  "image-inverted": 61896,
  "images": 61897,
  "inbox": 61898,
  "infinity": 61899,
  "info": 61900,
  "info-with-circle": 61901,
  "instagram": 61902,
  "instagram-with-circle": 61903,
  "install": 61904,
  "key": 61905,
  "keyboard": 61906,
  "lab-flask": 61907,
  "landline": 61908,
  "language": 61909,
  "laptop": 61910,
  "lastfm": 61911,
  "lastfm-with-circle": 61912,
  "layers": 61913,
  "leaf": 61914,
  "level-down": 61915,
  "level-up": 61916,
  "lifebuoy": 61917,
  "light-bulb": 61918,
  "light-down": 61919,
  "light-up": 61920,
  "line-graph": 61921,
  "link": 61922,
  "linkedin": 61923,
  "linkedin-with-circle": 61924,
  "list": 61925,
  "location": 61926,
  "location-pin": 61927,
  "lock": 61928,
  "lock-open": 61929,
  "log-out": 61930,
  "login": 61931,
  "loop": 61932,
  "magnet": 61933,
  "magnifying-glass": 61934,
  "mail": 61935,
  "mail-with-circle": 61936,
  "man": 61937,
  "map": 61938,
  "mask": 61939,
  "medal": 61940,
  "medium": 61941,
  "medium-with-circle": 61942,
  "megaphone": 61943,
  "menu": 61944,
  "merge": 61945,
  "message": 61946,
  "mic": 61947,
  "minus": 61948,
  "mixi": 61949,
  "mobile": 61950,
  "modern-mic": 61951,
  "moon": 61952,
  "mouse": 61953,
  "mouse-pointer": 61954,
  "music": 61955,
  "network": 61956,
  "new": 61957,
  "new-message": 61958,
  "news": 61959,
  "newsletter": 61960,
  "note": 61961,
  "notification": 61962,
  "notifications-off": 61963,
  "old-mobile": 61964,
  "old-phone": 61965,
  "onedrive": 61966,
  "open-book": 61967,
  "palette": 61968,
  "paper-plane": 61969,
  "paypal": 61970,
  "pencil": 61971,
  "phone": 61972,
  "picasa": 61973,
  "pie-chart": 61974,
  "pin": 61975,
  "pinterest": 61976,
  "pinterest-with-circle": 61977,
  "plus": 61978,
  "popup": 61979,
  "power-plug": 61980,
  "price-ribbon": 61981,
  "price-tag": 61982,
  "print": 61983,
  "progress-empty": 61984,
  "progress-full": 61985,
  "progress-one": 61986,
  "progress-two": 61987,
  "publish": 61988,
  "qq": 61989,
  "qq-with-circle": 61990,
  "quote": 61991,
  "radio": 61992,
  "raft": 61993,
  "raft-with-circle": 61994,
  "rainbow": 61995,
  "rdio": 61996,
  "rdio-with-circle": 61997,
  "remove-user": 61998,
  "renren": 61999,
  "reply": 62000,
  "reply-all": 62001,
  "resize-100-": 62002,
  "resize-full-screen": 62003,
  "retweet": 62004,
  "rocket": 62005,
  "round-brush": 62006,
  "rss": 62007,
  "ruler": 62008,
  "save": 62009,
  "scissors": 62010,
  "scribd": 62011,
  "select-arrows": 62012,
  "share": 62013,
  "share-alternative": 62014,
  "shareable": 62015,
  "shield": 62016,
  "shop": 62017,
  "shopping-bag": 62018,
  "shopping-basket": 62019,
  "shopping-cart": 62020,
  "shuffle": 62021,
  "signal": 62022,
  "sina-weibo": 62023,
  "skype": 62024,
  "skype-with-circle": 62025,
  "slideshare": 62026,
  "smashing": 62027,
  "sound": 62028,
  "sound-mix": 62029,
  "sound-mute": 62030,
  "soundcloud": 62031,
  "sports-club": 62032,
  "spotify": 62033,
  "spotify-with-circle": 62034,
  "spreadsheet": 62035,
  "squared-cross": 62036,
  "squared-minus": 62037,
  "squared-plus": 62038,
  "star": 62039,
  "star-outlined": 62040,
  "stopwatch": 62041,
  "stumbleupon": 62042,
  "stumbleupon-with-circle": 62043,
  "suitcase": 62044,
  "swap": 62045,
  "swarm": 62046,
  "sweden": 62047,
  "switch": 62048,
  "tablet": 62049,
  "tablet-mobile-combo": 62050,
  "tag": 62051,
  "text": 62052,
  "text-document": 62053,
  "text-document-inverted": 62054,
  "thermometer": 62055,
  "thumbs-down": 62056,
  "thumbs-up": 62057,
  "thunder-cloud": 62058,
  "ticket": 62059,
  "time-slot": 62060,
  "tools": 62061,
  "traffic-cone": 62062,
  "trash": 62063,
  "tree": 62064,
  "triangle-down": 62065,
  "triangle-left": 62066,
  "triangle-right": 62067,
  "triangle-up": 62068,
  "tripadvisor": 62069,
  "trophy": 62070,
  "tumblr": 62071,
  "tumblr-with-circle": 62072,
  "tv": 62073,
  "twitter": 62074,
  "twitter-with-circle": 62075,
  "typing": 62076,
  "uninstall": 62077,
  "unread": 62078,
  "untag": 62079,
  "upload": 62080,
  "upload-to-cloud": 62081,
  "user": 62082,
  "users": 62083,
  "v-card": 62084,
  "video": 62085,
  "video-camera": 62086,
  "vimeo": 62087,
  "vimeo-with-circle": 62088,
  "vine": 62089,
  "vine-with-circle": 62090,
  "vinyl": 62091,
  "vk": 62092,
  "vk-alternitive": 62093,
  "vk-with-circle": 62094,
  "voicemail": 62095,
  "wallet": 62096,
  "warning": 62097,
  "water": 62098,
  "windows-store": 62099,
  "xing": 62100,
  "xing-with-circle": 62101,
  "yelp": 62102,
  "youko": 62103,
  "youko-with-circle": 62104,
  "youtube": 62105,
  "youtube-with-circle": 62106
};
},728,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "744ce60078c17d86006dd0edabcd59a7",
    "name": "Entypo",
    "type": "ttf",
    "fileHashes": ["744ce60078c17d86006dd0edabcd59a7"]
  });
},729,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _EvilIcons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_EvilIcons.default, 'evilicons', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},730,[1,731,562,732]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "archive": 61696,
  "arrow-down": 61697,
  "arrow-left": 61698,
  "arrow-right": 61699,
  "arrow-up": 61700,
  "bell": 61701,
  "calendar": 61702,
  "camera": 61703,
  "cart": 61704,
  "chart": 61705,
  "check": 61706,
  "chevron-down": 61707,
  "chevron-left": 61708,
  "chevron-right": 61709,
  "chevron-up": 61710,
  "clock": 61711,
  "close": 61712,
  "close-o": 61713,
  "comment": 61714,
  "credit-card": 61715,
  "envelope": 61716,
  "exclamation": 61717,
  "external-link": 61718,
  "eye": 61719,
  "gear": 61720,
  "heart": 61721,
  "image": 61722,
  "like": 61723,
  "link": 61724,
  "location": 61725,
  "lock": 61726,
  "minus": 61727,
  "navicon": 61728,
  "paperclip": 61729,
  "pencil": 61730,
  "play": 61731,
  "plus": 61732,
  "pointer": 61733,
  "question": 61734,
  "redo": 61735,
  "refresh": 61736,
  "retweet": 61737,
  "sc-facebook": 61738,
  "sc-github": 61739,
  "sc-google-plus": 61740,
  "sc-instagram": 61741,
  "sc-linkedin": 61742,
  "sc-odnoklassniki": 61743,
  "sc-pinterest": 61744,
  "sc-skype": 61745,
  "sc-soundcloud": 61746,
  "sc-telegram": 61747,
  "sc-tumblr": 61748,
  "sc-twitter": 61749,
  "sc-vimeo": 61750,
  "sc-vk": 61751,
  "sc-youtube": 61752,
  "search": 61753,
  "share-apple": 61754,
  "share-google": 61755,
  "spinner": 61756,
  "spinner-2": 61757,
  "spinner-3": 61758,
  "star": 61759,
  "tag": 61760,
  "trash": 61761,
  "trophy": 61762,
  "undo": 61763,
  "unlock": 61764,
  "user": 61765
};
},731,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "140c53a7643ea949007aa9a282153849",
    "name": "EvilIcons",
    "type": "ttf",
    "fileHashes": ["140c53a7643ea949007aa9a282153849"]
  });
},732,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _Feather = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_Feather.default, 'feather', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},733,[1,734,562,735]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "activity": 59648,
  "airplay": 59649,
  "alert-circle": 59650,
  "alert-octagon": 59651,
  "alert-triangle": 59652,
  "align-center": 59653,
  "align-justify": 59654,
  "align-left": 59655,
  "align-right": 59656,
  "anchor": 59657,
  "aperture": 59658,
  "archive": 59659,
  "arrow-down": 59660,
  "arrow-down-circle": 59661,
  "arrow-down-left": 59662,
  "arrow-down-right": 59663,
  "arrow-left": 59664,
  "arrow-left-circle": 59665,
  "arrow-right": 59666,
  "arrow-right-circle": 59667,
  "arrow-up": 59668,
  "arrow-up-circle": 59669,
  "arrow-up-left": 59670,
  "arrow-up-right": 59671,
  "at-sign": 59672,
  "award": 59673,
  "bar-chart": 59674,
  "bar-chart-2": 59675,
  "battery": 59676,
  "battery-charging": 59677,
  "bell": 59678,
  "bell-off": 59679,
  "bluetooth": 59680,
  "bold": 59681,
  "book": 59682,
  "book-open": 59683,
  "bookmark": 59684,
  "box": 59685,
  "briefcase": 59686,
  "calendar": 59687,
  "camera": 59688,
  "camera-off": 59689,
  "cast": 59690,
  "check": 59691,
  "check-circle": 59692,
  "check-square": 59693,
  "chevron-down": 59694,
  "chevron-left": 59695,
  "chevron-right": 59696,
  "chevron-up": 59697,
  "chevrons-down": 59698,
  "chevrons-left": 59699,
  "chevrons-right": 59700,
  "chevrons-up": 59701,
  "chrome": 59702,
  "circle": 59703,
  "clipboard": 59704,
  "clock": 59705,
  "cloud": 59706,
  "cloud-drizzle": 59707,
  "cloud-lightning": 59708,
  "cloud-off": 59709,
  "cloud-rain": 59710,
  "cloud-snow": 59711,
  "code": 59712,
  "codepen": 59713,
  "command": 59714,
  "compass": 59715,
  "copy": 59716,
  "corner-down-left": 59717,
  "corner-down-right": 59718,
  "corner-left-down": 59719,
  "corner-left-up": 59720,
  "corner-right-down": 59721,
  "corner-right-up": 59722,
  "corner-up-left": 59723,
  "corner-up-right": 59724,
  "cpu": 59725,
  "credit-card": 59726,
  "crop": 59727,
  "crosshair": 59728,
  "database": 59729,
  "delete": 59730,
  "disc": 59731,
  "dollar-sign": 59732,
  "download": 59733,
  "download-cloud": 59734,
  "droplet": 59735,
  "edit": 59736,
  "edit-2": 59737,
  "edit-3": 59738,
  "external-link": 59739,
  "eye": 59740,
  "eye-off": 59741,
  "facebook": 59742,
  "fast-forward": 59743,
  "feather": 59744,
  "file": 59745,
  "file-minus": 59746,
  "file-plus": 59747,
  "file-text": 59748,
  "film": 59749,
  "filter": 59750,
  "flag": 59751,
  "folder": 59752,
  "folder-minus": 59753,
  "folder-plus": 59754,
  "gift": 59755,
  "git-branch": 59756,
  "git-commit": 59757,
  "git-merge": 59758,
  "git-pull-request": 59759,
  "github": 59760,
  "gitlab": 59761,
  "globe": 59762,
  "grid": 59763,
  "hard-drive": 59764,
  "hash": 59765,
  "headphones": 59766,
  "heart": 59767,
  "help-circle": 59768,
  "home": 59769,
  "image": 59770,
  "inbox": 59771,
  "info": 59772,
  "instagram": 59773,
  "italic": 59774,
  "layers": 59775,
  "layout": 59776,
  "life-buoy": 59777,
  "link": 59778,
  "link-2": 59779,
  "linkedin": 59780,
  "list": 59781,
  "loader": 59782,
  "lock": 59783,
  "log-in": 59784,
  "log-out": 59785,
  "mail": 59786,
  "map": 59787,
  "map-pin": 59788,
  "maximize": 59789,
  "maximize-2": 59790,
  "menu": 59791,
  "message-circle": 59792,
  "message-square": 59793,
  "mic": 59794,
  "mic-off": 59795,
  "minimize": 59796,
  "minimize-2": 59797,
  "minus": 59798,
  "minus-circle": 59799,
  "minus-square": 59800,
  "monitor": 59801,
  "moon": 59802,
  "more-horizontal": 59803,
  "more-vertical": 59804,
  "move": 59805,
  "music": 59806,
  "navigation": 59807,
  "navigation-2": 59808,
  "octagon": 59809,
  "package": 59810,
  "paperclip": 59811,
  "pause": 59812,
  "pause-circle": 59813,
  "percent": 59814,
  "phone": 59815,
  "phone-call": 59816,
  "phone-forwarded": 59817,
  "phone-incoming": 59818,
  "phone-missed": 59819,
  "phone-off": 59820,
  "phone-outgoing": 59821,
  "pie-chart": 59822,
  "play": 59823,
  "play-circle": 59824,
  "plus": 59825,
  "plus-circle": 59826,
  "plus-square": 59827,
  "pocket": 59828,
  "power": 59829,
  "printer": 59830,
  "radio": 59831,
  "refresh-ccw": 59832,
  "refresh-cw": 59833,
  "repeat": 59834,
  "rewind": 59835,
  "rotate-ccw": 59836,
  "rotate-cw": 59837,
  "rss": 59838,
  "save": 59839,
  "scissors": 59840,
  "search": 59841,
  "send": 59842,
  "server": 59843,
  "settings": 59844,
  "share": 59845,
  "share-2": 59846,
  "shield": 59847,
  "shield-off": 59848,
  "shopping-bag": 59849,
  "shopping-cart": 59850,
  "shuffle": 59851,
  "sidebar": 59852,
  "skip-back": 59853,
  "skip-forward": 59854,
  "slack": 59855,
  "slash": 59856,
  "sliders": 59857,
  "smartphone": 59858,
  "speaker": 59859,
  "square": 59860,
  "star": 59861,
  "stop-circle": 59862,
  "sun": 59863,
  "sunrise": 59864,
  "sunset": 59865,
  "tablet": 59866,
  "tag": 59867,
  "target": 59868,
  "terminal": 59869,
  "thermometer": 59870,
  "thumbs-down": 59871,
  "thumbs-up": 59872,
  "toggle-left": 59873,
  "toggle-right": 59874,
  "trash": 59875,
  "trash-2": 59876,
  "trending-down": 59877,
  "trending-up": 59878,
  "triangle": 59879,
  "truck": 59880,
  "tv": 59881,
  "twitter": 59882,
  "type": 59883,
  "umbrella": 59884,
  "underline": 59885,
  "unlock": 59886,
  "upload": 59887,
  "upload-cloud": 59888,
  "user": 59889,
  "user-check": 59890,
  "user-minus": 59891,
  "user-plus": 59892,
  "user-x": 59893,
  "users": 59894,
  "video": 59895,
  "video-off": 59896,
  "voicemail": 59897,
  "volume": 59898,
  "volume-1": 59899,
  "volume-2": 59900,
  "volume-x": 59901,
  "watch": 59902,
  "wifi": 59903,
  "wifi-off": 59904,
  "wind": 59905,
  "x": 59906,
  "x-circle": 59907,
  "x-square": 59908,
  "youtube": 59909,
  "zap": 59910,
  "zap-off": 59911,
  "zoom-in": 59912,
  "zoom-out": 59913
};
},734,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "6beba7e6834963f7f171d3bdd075c915",
    "name": "Feather",
    "type": "ttf",
    "fileHashes": ["6beba7e6834963f7f171d3bdd075c915"]
  });
},735,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _FontAwesome = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_FontAwesome.default, 'FontAwesome', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},736,[1,737,562,738]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "glass": 61440,
  "music": 61441,
  "search": 61442,
  "envelope-o": 61443,
  "heart": 61444,
  "star": 61445,
  "star-o": 61446,
  "user": 61447,
  "film": 61448,
  "th-large": 61449,
  "th": 61450,
  "th-list": 61451,
  "check": 61452,
  "remove": 61453,
  "close": 61453,
  "times": 61453,
  "search-plus": 61454,
  "search-minus": 61456,
  "power-off": 61457,
  "signal": 61458,
  "gear": 61459,
  "cog": 61459,
  "trash-o": 61460,
  "home": 61461,
  "file-o": 61462,
  "clock-o": 61463,
  "road": 61464,
  "download": 61465,
  "arrow-circle-o-down": 61466,
  "arrow-circle-o-up": 61467,
  "inbox": 61468,
  "play-circle-o": 61469,
  "rotate-right": 61470,
  "repeat": 61470,
  "refresh": 61473,
  "list-alt": 61474,
  "lock": 61475,
  "flag": 61476,
  "headphones": 61477,
  "volume-off": 61478,
  "volume-down": 61479,
  "volume-up": 61480,
  "qrcode": 61481,
  "barcode": 61482,
  "tag": 61483,
  "tags": 61484,
  "book": 61485,
  "bookmark": 61486,
  "print": 61487,
  "camera": 61488,
  "font": 61489,
  "bold": 61490,
  "italic": 61491,
  "text-height": 61492,
  "text-width": 61493,
  "align-left": 61494,
  "align-center": 61495,
  "align-right": 61496,
  "align-justify": 61497,
  "list": 61498,
  "dedent": 61499,
  "outdent": 61499,
  "indent": 61500,
  "video-camera": 61501,
  "photo": 61502,
  "image": 61502,
  "picture-o": 61502,
  "pencil": 61504,
  "map-marker": 61505,
  "adjust": 61506,
  "tint": 61507,
  "edit": 61508,
  "pencil-square-o": 61508,
  "share-square-o": 61509,
  "check-square-o": 61510,
  "arrows": 61511,
  "step-backward": 61512,
  "fast-backward": 61513,
  "backward": 61514,
  "play": 61515,
  "pause": 61516,
  "stop": 61517,
  "forward": 61518,
  "fast-forward": 61520,
  "step-forward": 61521,
  "eject": 61522,
  "chevron-left": 61523,
  "chevron-right": 61524,
  "plus-circle": 61525,
  "minus-circle": 61526,
  "times-circle": 61527,
  "check-circle": 61528,
  "question-circle": 61529,
  "info-circle": 61530,
  "crosshairs": 61531,
  "times-circle-o": 61532,
  "check-circle-o": 61533,
  "ban": 61534,
  "arrow-left": 61536,
  "arrow-right": 61537,
  "arrow-up": 61538,
  "arrow-down": 61539,
  "mail-forward": 61540,
  "share": 61540,
  "expand": 61541,
  "compress": 61542,
  "plus": 61543,
  "minus": 61544,
  "asterisk": 61545,
  "exclamation-circle": 61546,
  "gift": 61547,
  "leaf": 61548,
  "fire": 61549,
  "eye": 61550,
  "eye-slash": 61552,
  "warning": 61553,
  "exclamation-triangle": 61553,
  "plane": 61554,
  "calendar": 61555,
  "random": 61556,
  "comment": 61557,
  "magnet": 61558,
  "chevron-up": 61559,
  "chevron-down": 61560,
  "retweet": 61561,
  "shopping-cart": 61562,
  "folder": 61563,
  "folder-open": 61564,
  "arrows-v": 61565,
  "arrows-h": 61566,
  "bar-chart-o": 61568,
  "bar-chart": 61568,
  "twitter-square": 61569,
  "facebook-square": 61570,
  "camera-retro": 61571,
  "key": 61572,
  "gears": 61573,
  "cogs": 61573,
  "comments": 61574,
  "thumbs-o-up": 61575,
  "thumbs-o-down": 61576,
  "star-half": 61577,
  "heart-o": 61578,
  "sign-out": 61579,
  "linkedin-square": 61580,
  "thumb-tack": 61581,
  "external-link": 61582,
  "sign-in": 61584,
  "trophy": 61585,
  "github-square": 61586,
  "upload": 61587,
  "lemon-o": 61588,
  "phone": 61589,
  "square-o": 61590,
  "bookmark-o": 61591,
  "phone-square": 61592,
  "twitter": 61593,
  "facebook-f": 61594,
  "facebook": 61594,
  "github": 61595,
  "unlock": 61596,
  "credit-card": 61597,
  "feed": 61598,
  "rss": 61598,
  "hdd-o": 61600,
  "bullhorn": 61601,
  "bell": 61683,
  "certificate": 61603,
  "hand-o-right": 61604,
  "hand-o-left": 61605,
  "hand-o-up": 61606,
  "hand-o-down": 61607,
  "arrow-circle-left": 61608,
  "arrow-circle-right": 61609,
  "arrow-circle-up": 61610,
  "arrow-circle-down": 61611,
  "globe": 61612,
  "wrench": 61613,
  "tasks": 61614,
  "filter": 61616,
  "briefcase": 61617,
  "arrows-alt": 61618,
  "group": 61632,
  "users": 61632,
  "chain": 61633,
  "link": 61633,
  "cloud": 61634,
  "flask": 61635,
  "cut": 61636,
  "scissors": 61636,
  "copy": 61637,
  "files-o": 61637,
  "paperclip": 61638,
  "save": 61639,
  "floppy-o": 61639,
  "square": 61640,
  "navicon": 61641,
  "reorder": 61641,
  "bars": 61641,
  "list-ul": 61642,
  "list-ol": 61643,
  "strikethrough": 61644,
  "underline": 61645,
  "table": 61646,
  "magic": 61648,
  "truck": 61649,
  "pinterest": 61650,
  "pinterest-square": 61651,
  "google-plus-square": 61652,
  "google-plus": 61653,
  "money": 61654,
  "caret-down": 61655,
  "caret-up": 61656,
  "caret-left": 61657,
  "caret-right": 61658,
  "columns": 61659,
  "unsorted": 61660,
  "sort": 61660,
  "sort-down": 61661,
  "sort-desc": 61661,
  "sort-up": 61662,
  "sort-asc": 61662,
  "envelope": 61664,
  "linkedin": 61665,
  "rotate-left": 61666,
  "undo": 61666,
  "legal": 61667,
  "gavel": 61667,
  "dashboard": 61668,
  "tachometer": 61668,
  "comment-o": 61669,
  "comments-o": 61670,
  "flash": 61671,
  "bolt": 61671,
  "sitemap": 61672,
  "umbrella": 61673,
  "paste": 61674,
  "clipboard": 61674,
  "lightbulb-o": 61675,
  "exchange": 61676,
  "cloud-download": 61677,
  "cloud-upload": 61678,
  "user-md": 61680,
  "stethoscope": 61681,
  "suitcase": 61682,
  "bell-o": 61602,
  "coffee": 61684,
  "cutlery": 61685,
  "file-text-o": 61686,
  "building-o": 61687,
  "hospital-o": 61688,
  "ambulance": 61689,
  "medkit": 61690,
  "fighter-jet": 61691,
  "beer": 61692,
  "h-square": 61693,
  "plus-square": 61694,
  "angle-double-left": 61696,
  "angle-double-right": 61697,
  "angle-double-up": 61698,
  "angle-double-down": 61699,
  "angle-left": 61700,
  "angle-right": 61701,
  "angle-up": 61702,
  "angle-down": 61703,
  "desktop": 61704,
  "laptop": 61705,
  "tablet": 61706,
  "mobile-phone": 61707,
  "mobile": 61707,
  "circle-o": 61708,
  "quote-left": 61709,
  "quote-right": 61710,
  "spinner": 61712,
  "circle": 61713,
  "mail-reply": 61714,
  "reply": 61714,
  "github-alt": 61715,
  "folder-o": 61716,
  "folder-open-o": 61717,
  "smile-o": 61720,
  "frown-o": 61721,
  "meh-o": 61722,
  "gamepad": 61723,
  "keyboard-o": 61724,
  "flag-o": 61725,
  "flag-checkered": 61726,
  "terminal": 61728,
  "code": 61729,
  "mail-reply-all": 61730,
  "reply-all": 61730,
  "star-half-empty": 61731,
  "star-half-full": 61731,
  "star-half-o": 61731,
  "location-arrow": 61732,
  "crop": 61733,
  "code-fork": 61734,
  "unlink": 61735,
  "chain-broken": 61735,
  "question": 61736,
  "info": 61737,
  "exclamation": 61738,
  "superscript": 61739,
  "subscript": 61740,
  "eraser": 61741,
  "puzzle-piece": 61742,
  "microphone": 61744,
  "microphone-slash": 61745,
  "shield": 61746,
  "calendar-o": 61747,
  "fire-extinguisher": 61748,
  "rocket": 61749,
  "maxcdn": 61750,
  "chevron-circle-left": 61751,
  "chevron-circle-right": 61752,
  "chevron-circle-up": 61753,
  "chevron-circle-down": 61754,
  "html5": 61755,
  "css3": 61756,
  "anchor": 61757,
  "unlock-alt": 61758,
  "bullseye": 61760,
  "ellipsis-h": 61761,
  "ellipsis-v": 61762,
  "rss-square": 61763,
  "play-circle": 61764,
  "ticket": 61765,
  "minus-square": 61766,
  "minus-square-o": 61767,
  "level-up": 61768,
  "level-down": 61769,
  "check-square": 61770,
  "pencil-square": 61771,
  "external-link-square": 61772,
  "share-square": 61773,
  "compass": 61774,
  "toggle-down": 61776,
  "caret-square-o-down": 61776,
  "toggle-up": 61777,
  "caret-square-o-up": 61777,
  "toggle-right": 61778,
  "caret-square-o-right": 61778,
  "euro": 61779,
  "eur": 61779,
  "gbp": 61780,
  "dollar": 61781,
  "usd": 61781,
  "rupee": 61782,
  "inr": 61782,
  "cny": 61783,
  "rmb": 61783,
  "yen": 61783,
  "jpy": 61783,
  "ruble": 61784,
  "rouble": 61784,
  "rub": 61784,
  "won": 61785,
  "krw": 61785,
  "bitcoin": 61786,
  "btc": 61786,
  "file": 61787,
  "file-text": 61788,
  "sort-alpha-asc": 61789,
  "sort-alpha-desc": 61790,
  "sort-amount-asc": 61792,
  "sort-amount-desc": 61793,
  "sort-numeric-asc": 61794,
  "sort-numeric-desc": 61795,
  "thumbs-up": 61796,
  "thumbs-down": 61797,
  "youtube-square": 61798,
  "youtube": 61799,
  "xing": 61800,
  "xing-square": 61801,
  "youtube-play": 61802,
  "dropbox": 61803,
  "stack-overflow": 61804,
  "instagram": 61805,
  "flickr": 61806,
  "adn": 61808,
  "bitbucket": 61809,
  "bitbucket-square": 61810,
  "tumblr": 61811,
  "tumblr-square": 61812,
  "long-arrow-down": 61813,
  "long-arrow-up": 61814,
  "long-arrow-left": 61815,
  "long-arrow-right": 61816,
  "apple": 61817,
  "windows": 61818,
  "android": 61819,
  "linux": 61820,
  "dribbble": 61821,
  "skype": 61822,
  "foursquare": 61824,
  "trello": 61825,
  "female": 61826,
  "male": 61827,
  "gittip": 61828,
  "gratipay": 61828,
  "sun-o": 61829,
  "moon-o": 61830,
  "archive": 61831,
  "bug": 61832,
  "vk": 61833,
  "weibo": 61834,
  "renren": 61835,
  "pagelines": 61836,
  "stack-exchange": 61837,
  "arrow-circle-o-right": 61838,
  "arrow-circle-o-left": 61840,
  "toggle-left": 61841,
  "caret-square-o-left": 61841,
  "dot-circle-o": 61842,
  "wheelchair": 61843,
  "vimeo-square": 61844,
  "turkish-lira": 61845,
  "try": 61845,
  "plus-square-o": 61846,
  "space-shuttle": 61847,
  "slack": 61848,
  "envelope-square": 61849,
  "wordpress": 61850,
  "openid": 61851,
  "institution": 61852,
  "bank": 61852,
  "university": 61852,
  "mortar-board": 61853,
  "graduation-cap": 61853,
  "yahoo": 61854,
  "google": 61856,
  "reddit": 61857,
  "reddit-square": 61858,
  "stumbleupon-circle": 61859,
  "stumbleupon": 61860,
  "delicious": 61861,
  "digg": 61862,
  "pied-piper-pp": 61863,
  "pied-piper-alt": 61864,
  "drupal": 61865,
  "joomla": 61866,
  "language": 61867,
  "fax": 61868,
  "building": 61869,
  "child": 61870,
  "paw": 61872,
  "spoon": 61873,
  "cube": 61874,
  "cubes": 61875,
  "behance": 61876,
  "behance-square": 61877,
  "steam": 61878,
  "steam-square": 61879,
  "recycle": 61880,
  "automobile": 61881,
  "car": 61881,
  "cab": 61882,
  "taxi": 61882,
  "tree": 61883,
  "spotify": 61884,
  "deviantart": 61885,
  "soundcloud": 61886,
  "database": 61888,
  "file-pdf-o": 61889,
  "file-word-o": 61890,
  "file-excel-o": 61891,
  "file-powerpoint-o": 61892,
  "file-photo-o": 61893,
  "file-picture-o": 61893,
  "file-image-o": 61893,
  "file-zip-o": 61894,
  "file-archive-o": 61894,
  "file-sound-o": 61895,
  "file-audio-o": 61895,
  "file-movie-o": 61896,
  "file-video-o": 61896,
  "file-code-o": 61897,
  "vine": 61898,
  "codepen": 61899,
  "jsfiddle": 61900,
  "life-bouy": 61901,
  "life-buoy": 61901,
  "life-saver": 61901,
  "support": 61901,
  "life-ring": 61901,
  "circle-o-notch": 61902,
  "ra": 61904,
  "resistance": 61904,
  "rebel": 61904,
  "ge": 61905,
  "empire": 61905,
  "git-square": 61906,
  "git": 61907,
  "y-combinator-square": 61908,
  "yc-square": 61908,
  "hacker-news": 61908,
  "tencent-weibo": 61909,
  "qq": 61910,
  "wechat": 61911,
  "weixin": 61911,
  "send": 61912,
  "paper-plane": 61912,
  "send-o": 61913,
  "paper-plane-o": 61913,
  "history": 61914,
  "circle-thin": 61915,
  "header": 61916,
  "paragraph": 61917,
  "sliders": 61918,
  "share-alt": 61920,
  "share-alt-square": 61921,
  "bomb": 61922,
  "soccer-ball-o": 61923,
  "futbol-o": 61923,
  "tty": 61924,
  "binoculars": 61925,
  "plug": 61926,
  "slideshare": 61927,
  "twitch": 61928,
  "yelp": 61929,
  "newspaper-o": 61930,
  "wifi": 61931,
  "calculator": 61932,
  "paypal": 61933,
  "google-wallet": 61934,
  "cc-visa": 61936,
  "cc-mastercard": 61937,
  "cc-discover": 61938,
  "cc-amex": 61939,
  "cc-paypal": 61940,
  "cc-stripe": 61941,
  "bell-slash": 61942,
  "bell-slash-o": 61943,
  "trash": 61944,
  "copyright": 61945,
  "at": 61946,
  "eyedropper": 61947,
  "paint-brush": 61948,
  "birthday-cake": 61949,
  "area-chart": 61950,
  "pie-chart": 61952,
  "line-chart": 61953,
  "lastfm": 61954,
  "lastfm-square": 61955,
  "toggle-off": 61956,
  "toggle-on": 61957,
  "bicycle": 61958,
  "bus": 61959,
  "ioxhost": 61960,
  "angellist": 61961,
  "cc": 61962,
  "shekel": 61963,
  "sheqel": 61963,
  "ils": 61963,
  "meanpath": 61964,
  "buysellads": 61965,
  "connectdevelop": 61966,
  "dashcube": 61968,
  "forumbee": 61969,
  "leanpub": 61970,
  "sellsy": 61971,
  "shirtsinbulk": 61972,
  "simplybuilt": 61973,
  "skyatlas": 61974,
  "cart-plus": 61975,
  "cart-arrow-down": 61976,
  "diamond": 61977,
  "ship": 61978,
  "user-secret": 61979,
  "motorcycle": 61980,
  "street-view": 61981,
  "heartbeat": 61982,
  "venus": 61985,
  "mars": 61986,
  "mercury": 61987,
  "intersex": 61988,
  "transgender": 61988,
  "transgender-alt": 61989,
  "venus-double": 61990,
  "mars-double": 61991,
  "venus-mars": 61992,
  "mars-stroke": 61993,
  "mars-stroke-v": 61994,
  "mars-stroke-h": 61995,
  "neuter": 61996,
  "genderless": 61997,
  "facebook-official": 62000,
  "pinterest-p": 62001,
  "whatsapp": 62002,
  "server": 62003,
  "user-plus": 62004,
  "user-times": 62005,
  "hotel": 62006,
  "bed": 62006,
  "viacoin": 62007,
  "train": 62008,
  "subway": 62009,
  "medium": 62010,
  "yc": 62011,
  "y-combinator": 62011,
  "optin-monster": 62012,
  "opencart": 62013,
  "expeditedssl": 62014,
  "battery-4": 62016,
  "battery": 62016,
  "battery-full": 62016,
  "battery-3": 62017,
  "battery-three-quarters": 62017,
  "battery-2": 62018,
  "battery-half": 62018,
  "battery-1": 62019,
  "battery-quarter": 62019,
  "battery-0": 62020,
  "battery-empty": 62020,
  "mouse-pointer": 62021,
  "i-cursor": 62022,
  "object-group": 62023,
  "object-ungroup": 62024,
  "sticky-note": 62025,
  "sticky-note-o": 62026,
  "cc-jcb": 62027,
  "cc-diners-club": 62028,
  "clone": 62029,
  "balance-scale": 62030,
  "hourglass-o": 62032,
  "hourglass-1": 62033,
  "hourglass-start": 62033,
  "hourglass-2": 62034,
  "hourglass-half": 62034,
  "hourglass-3": 62035,
  "hourglass-end": 62035,
  "hourglass": 62036,
  "hand-grab-o": 62037,
  "hand-rock-o": 62037,
  "hand-stop-o": 62038,
  "hand-paper-o": 62038,
  "hand-scissors-o": 62039,
  "hand-lizard-o": 62040,
  "hand-spock-o": 62041,
  "hand-pointer-o": 62042,
  "hand-peace-o": 62043,
  "trademark": 62044,
  "registered": 62045,
  "creative-commons": 62046,
  "gg": 62048,
  "gg-circle": 62049,
  "tripadvisor": 62050,
  "odnoklassniki": 62051,
  "odnoklassniki-square": 62052,
  "get-pocket": 62053,
  "wikipedia-w": 62054,
  "safari": 62055,
  "chrome": 62056,
  "firefox": 62057,
  "opera": 62058,
  "internet-explorer": 62059,
  "tv": 62060,
  "television": 62060,
  "contao": 62061,
  "500px": 62062,
  "amazon": 62064,
  "calendar-plus-o": 62065,
  "calendar-minus-o": 62066,
  "calendar-times-o": 62067,
  "calendar-check-o": 62068,
  "industry": 62069,
  "map-pin": 62070,
  "map-signs": 62071,
  "map-o": 62072,
  "map": 62073,
  "commenting": 62074,
  "commenting-o": 62075,
  "houzz": 62076,
  "vimeo": 62077,
  "black-tie": 62078,
  "fonticons": 62080,
  "reddit-alien": 62081,
  "edge": 62082,
  "credit-card-alt": 62083,
  "codiepie": 62084,
  "modx": 62085,
  "fort-awesome": 62086,
  "usb": 62087,
  "product-hunt": 62088,
  "mixcloud": 62089,
  "scribd": 62090,
  "pause-circle": 62091,
  "pause-circle-o": 62092,
  "stop-circle": 62093,
  "stop-circle-o": 62094,
  "shopping-bag": 62096,
  "shopping-basket": 62097,
  "hashtag": 62098,
  "bluetooth": 62099,
  "bluetooth-b": 62100,
  "percent": 62101,
  "gitlab": 62102,
  "wpbeginner": 62103,
  "wpforms": 62104,
  "envira": 62105,
  "universal-access": 62106,
  "wheelchair-alt": 62107,
  "question-circle-o": 62108,
  "blind": 62109,
  "audio-description": 62110,
  "volume-control-phone": 62112,
  "braille": 62113,
  "assistive-listening-systems": 62114,
  "asl-interpreting": 62115,
  "american-sign-language-interpreting": 62115,
  "deafness": 62116,
  "hard-of-hearing": 62116,
  "deaf": 62116,
  "glide": 62117,
  "glide-g": 62118,
  "signing": 62119,
  "sign-language": 62119,
  "low-vision": 62120,
  "viadeo": 62121,
  "viadeo-square": 62122,
  "snapchat": 62123,
  "snapchat-ghost": 62124,
  "snapchat-square": 62125,
  "pied-piper": 62126,
  "first-order": 62128,
  "yoast": 62129,
  "themeisle": 62130,
  "google-plus-circle": 62131,
  "google-plus-official": 62131,
  "fa": 62132,
  "font-awesome": 62132,
  "handshake-o": 62133,
  "envelope-open": 62134,
  "envelope-open-o": 62135,
  "linode": 62136,
  "address-book": 62137,
  "address-book-o": 62138,
  "vcard": 62139,
  "address-card": 62139,
  "vcard-o": 62140,
  "address-card-o": 62140,
  "user-circle": 62141,
  "user-circle-o": 62142,
  "user-o": 62144,
  "id-badge": 62145,
  "drivers-license": 62146,
  "id-card": 62146,
  "drivers-license-o": 62147,
  "id-card-o": 62147,
  "quora": 62148,
  "free-code-camp": 62149,
  "telegram": 62150,
  "thermometer-4": 62151,
  "thermometer": 62151,
  "thermometer-full": 62151,
  "thermometer-3": 62152,
  "thermometer-three-quarters": 62152,
  "thermometer-2": 62153,
  "thermometer-half": 62153,
  "thermometer-1": 62154,
  "thermometer-quarter": 62154,
  "thermometer-0": 62155,
  "thermometer-empty": 62155,
  "shower": 62156,
  "bathtub": 62157,
  "s15": 62157,
  "bath": 62157,
  "podcast": 62158,
  "window-maximize": 62160,
  "window-minimize": 62161,
  "window-restore": 62162,
  "times-rectangle": 62163,
  "window-close": 62163,
  "times-rectangle-o": 62164,
  "window-close-o": 62164,
  "bandcamp": 62165,
  "grav": 62166,
  "etsy": 62167,
  "imdb": 62168,
  "ravelry": 62169,
  "eercast": 62170,
  "microchip": 62171,
  "snowflake-o": 62172,
  "superpowers": 62173,
  "wpexplorer": 62174,
  "meetup": 62176
};
},737,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "b06871f281fee6b241d60582ae9369b9",
    "name": "FontAwesome",
    "type": "ttf",
    "fileHashes": ["b06871f281fee6b241d60582ae9369b9"]
  });
},738,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _Foundation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_Foundation.default, 'foundation', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},739,[1,740,562,741]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "address-book": 61696,
  "alert": 61697,
  "align-center": 61698,
  "align-justify": 61699,
  "align-left": 61700,
  "align-right": 61701,
  "anchor": 61702,
  "annotate": 61703,
  "archive": 61704,
  "arrow-down": 61705,
  "arrow-left": 61706,
  "arrow-right": 61707,
  "arrow-up": 61708,
  "arrows-compress": 61709,
  "arrows-expand": 61710,
  "arrows-in": 61711,
  "arrows-out": 61712,
  "asl": 61713,
  "asterisk": 61714,
  "at-sign": 61715,
  "background-color": 61716,
  "battery-empty": 61717,
  "battery-full": 61718,
  "battery-half": 61719,
  "bitcoin-circle": 61720,
  "bitcoin": 61721,
  "blind": 61722,
  "bluetooth": 61723,
  "bold": 61724,
  "book-bookmark": 61725,
  "book": 61726,
  "bookmark": 61727,
  "braille": 61728,
  "burst-new": 61729,
  "burst-sale": 61730,
  "burst": 61731,
  "calendar": 61732,
  "camera": 61733,
  "check": 61734,
  "checkbox": 61735,
  "clipboard-notes": 61736,
  "clipboard-pencil": 61737,
  "clipboard": 61738,
  "clock": 61739,
  "closed-caption": 61740,
  "cloud": 61741,
  "comment-minus": 61742,
  "comment-quotes": 61743,
  "comment-video": 61744,
  "comment": 61745,
  "comments": 61746,
  "compass": 61747,
  "contrast": 61748,
  "credit-card": 61749,
  "crop": 61750,
  "crown": 61751,
  "css3": 61752,
  "database": 61753,
  "die-five": 61754,
  "die-four": 61755,
  "die-one": 61756,
  "die-six": 61757,
  "die-three": 61758,
  "die-two": 61759,
  "dislike": 61760,
  "dollar-bill": 61761,
  "dollar": 61762,
  "download": 61763,
  "eject": 61764,
  "elevator": 61765,
  "euro": 61766,
  "eye": 61767,
  "fast-forward": 61768,
  "female-symbol": 61769,
  "female": 61770,
  "filter": 61771,
  "first-aid": 61772,
  "flag": 61773,
  "folder-add": 61774,
  "folder-lock": 61775,
  "folder": 61776,
  "foot": 61777,
  "foundation": 61778,
  "graph-bar": 61779,
  "graph-horizontal": 61780,
  "graph-pie": 61781,
  "graph-trend": 61782,
  "guide-dog": 61783,
  "hearing-aid": 61784,
  "heart": 61785,
  "home": 61786,
  "html5": 61787,
  "indent-less": 61788,
  "indent-more": 61789,
  "info": 61790,
  "italic": 61791,
  "key": 61792,
  "laptop": 61793,
  "layout": 61794,
  "lightbulb": 61795,
  "like": 61796,
  "link": 61797,
  "list-bullet": 61798,
  "list-number": 61799,
  "list-thumbnails": 61800,
  "list": 61801,
  "lock": 61802,
  "loop": 61803,
  "magnifying-glass": 61804,
  "mail": 61805,
  "male-female": 61806,
  "male-symbol": 61807,
  "male": 61808,
  "map": 61809,
  "marker": 61810,
  "megaphone": 61811,
  "microphone": 61812,
  "minus-circle": 61813,
  "minus": 61814,
  "mobile-signal": 61815,
  "mobile": 61816,
  "monitor": 61817,
  "mountains": 61818,
  "music": 61819,
  "next": 61820,
  "no-dogs": 61821,
  "no-smoking": 61822,
  "page-add": 61823,
  "page-copy": 61824,
  "page-csv": 61825,
  "page-delete": 61826,
  "page-doc": 61827,
  "page-edit": 61828,
  "page-export-csv": 61829,
  "page-export-doc": 61830,
  "page-export-pdf": 61831,
  "page-export": 61832,
  "page-filled": 61833,
  "page-multiple": 61834,
  "page-pdf": 61835,
  "page-remove": 61836,
  "page-search": 61837,
  "page": 61838,
  "paint-bucket": 61839,
  "paperclip": 61840,
  "pause": 61841,
  "paw": 61842,
  "paypal": 61843,
  "pencil": 61844,
  "photo": 61845,
  "play-circle": 61846,
  "play-video": 61847,
  "play": 61848,
  "plus": 61849,
  "pound": 61850,
  "power": 61851,
  "previous": 61852,
  "price-tag": 61853,
  "pricetag-multiple": 61854,
  "print": 61855,
  "prohibited": 61856,
  "projection-screen": 61857,
  "puzzle": 61858,
  "quote": 61859,
  "record": 61860,
  "refresh": 61861,
  "results-demographics": 61862,
  "results": 61863,
  "rewind-ten": 61864,
  "rewind": 61865,
  "rss": 61866,
  "safety-cone": 61867,
  "save": 61868,
  "share": 61869,
  "sheriff-badge": 61870,
  "shield": 61871,
  "shopping-bag": 61872,
  "shopping-cart": 61873,
  "shuffle": 61874,
  "skull": 61875,
  "social-500px": 61876,
  "social-adobe": 61877,
  "social-amazon": 61878,
  "social-android": 61879,
  "social-apple": 61880,
  "social-behance": 61881,
  "social-bing": 61882,
  "social-blogger": 61883,
  "social-delicious": 61884,
  "social-designer-news": 61885,
  "social-deviant-art": 61886,
  "social-digg": 61887,
  "social-dribbble": 61888,
  "social-drive": 61889,
  "social-dropbox": 61890,
  "social-evernote": 61891,
  "social-facebook": 61892,
  "social-flickr": 61893,
  "social-forrst": 61894,
  "social-foursquare": 61895,
  "social-game-center": 61896,
  "social-github": 61897,
  "social-google-plus": 61898,
  "social-hacker-news": 61899,
  "social-hi5": 61900,
  "social-instagram": 61901,
  "social-joomla": 61902,
  "social-lastfm": 61903,
  "social-linkedin": 61904,
  "social-medium": 61905,
  "social-myspace": 61906,
  "social-orkut": 61907,
  "social-path": 61908,
  "social-picasa": 61909,
  "social-pinterest": 61910,
  "social-rdio": 61911,
  "social-reddit": 61912,
  "social-skillshare": 61913,
  "social-skype": 61914,
  "social-smashing-mag": 61915,
  "social-snapchat": 61916,
  "social-spotify": 61917,
  "social-squidoo": 61918,
  "social-stack-overflow": 61919,
  "social-steam": 61920,
  "social-stumbleupon": 61921,
  "social-treehouse": 61922,
  "social-tumblr": 61923,
  "social-twitter": 61924,
  "social-vimeo": 61925,
  "social-windows": 61926,
  "social-xbox": 61927,
  "social-yahoo": 61928,
  "social-yelp": 61929,
  "social-youtube": 61930,
  "social-zerply": 61931,
  "social-zurb": 61932,
  "sound": 61933,
  "star": 61934,
  "stop": 61935,
  "strikethrough": 61936,
  "subscript": 61937,
  "superscript": 61938,
  "tablet-landscape": 61939,
  "tablet-portrait": 61940,
  "target-two": 61941,
  "target": 61942,
  "telephone-accessible": 61943,
  "telephone": 61944,
  "text-color": 61945,
  "thumbnails": 61946,
  "ticket": 61947,
  "torso-business": 61948,
  "torso-female": 61949,
  "torso": 61950,
  "torsos-all-female": 61951,
  "torsos-all": 61952,
  "torsos-female-male": 61953,
  "torsos-male-female": 61954,
  "torsos": 61955,
  "trash": 61956,
  "trees": 61957,
  "trophy": 61958,
  "underline": 61959,
  "universal-access": 61960,
  "unlink": 61961,
  "unlock": 61962,
  "upload-cloud": 61963,
  "upload": 61964,
  "usb": 61965,
  "video": 61966,
  "volume-none": 61967,
  "volume-strike": 61968,
  "volume": 61969,
  "web": 61970,
  "wheelchair": 61971,
  "widget": 61972,
  "wrench": 61973,
  "x-circle": 61974,
  "x": 61975,
  "yen": 61976,
  "zoom-in": 61977,
  "zoom-out": 61978
};
},740,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "e20945d7c929279ef7a6f1db184a4470",
    "name": "Foundation",
    "type": "ttf",
    "fileHashes": ["e20945d7c929279ef7a6f1db184a4470"]
  });
},741,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _Ionicons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_Ionicons.default, 'ionicons', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},742,[1,743,562,744]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "ios-add": 61698,
  "ios-add-circle": 61697,
  "ios-add-circle-outline": 61696,
  "ios-airplane": 61751,
  "ios-alarm": 62408,
  "ios-albums": 62410,
  "ios-alert": 61700,
  "ios-american-football": 61702,
  "ios-analytics": 62414,
  "ios-aperture": 61704,
  "ios-apps": 61706,
  "ios-appstore": 61708,
  "ios-archive": 61710,
  "ios-arrow-back": 62415,
  "ios-arrow-down": 62416,
  "ios-arrow-dropdown": 61712,
  "ios-arrow-dropdown-circle": 61733,
  "ios-arrow-dropleft": 61714,
  "ios-arrow-dropleft-circle": 61737,
  "ios-arrow-dropright": 61716,
  "ios-arrow-dropright-circle": 61739,
  "ios-arrow-dropup": 61718,
  "ios-arrow-dropup-circle": 61741,
  "ios-arrow-forward": 62417,
  "ios-arrow-round-back": 61719,
  "ios-arrow-round-down": 61720,
  "ios-arrow-round-forward": 61721,
  "ios-arrow-round-up": 61722,
  "ios-arrow-up": 62424,
  "ios-at": 62426,
  "ios-attach": 61723,
  "ios-backspace": 61725,
  "ios-barcode": 62428,
  "ios-baseball": 62430,
  "ios-basket": 61727,
  "ios-basketball": 62432,
  "ios-battery-charging": 61728,
  "ios-battery-dead": 61729,
  "ios-battery-full": 61730,
  "ios-beaker": 61732,
  "ios-bed": 61753,
  "ios-beer": 61734,
  "ios-bicycle": 61735,
  "ios-bluetooth": 61736,
  "ios-boat": 61738,
  "ios-body": 62436,
  "ios-bonfire": 61740,
  "ios-book": 62440,
  "ios-bookmark": 61742,
  "ios-bookmarks": 62442,
  "ios-bowtie": 61744,
  "ios-briefcase": 62446,
  "ios-browsers": 62448,
  "ios-brush": 61746,
  "ios-bug": 61748,
  "ios-build": 61750,
  "ios-bulb": 61752,
  "ios-bus": 61754,
  "ios-business": 61859,
  "ios-cafe": 61756,
  "ios-calculator": 62450,
  "ios-calendar": 62452,
  "ios-call": 61758,
  "ios-camera": 62454,
  "ios-car": 61760,
  "ios-card": 61762,
  "ios-cart": 62456,
  "ios-cash": 61764,
  "ios-cellular": 61757,
  "ios-chatboxes": 62458,
  "ios-chatbubbles": 61766,
  "ios-checkbox": 61768,
  "ios-checkbox-outline": 61767,
  "ios-checkmark": 62463,
  "ios-checkmark-circle": 61770,
  "ios-checkmark-circle-outline": 61769,
  "ios-clipboard": 61772,
  "ios-clock": 62467,
  "ios-close": 62470,
  "ios-close-circle": 61774,
  "ios-close-circle-outline": 61773,
  "ios-cloud": 62476,
  "ios-cloud-circle": 61778,
  "ios-cloud-done": 61780,
  "ios-cloud-download": 62472,
  "ios-cloud-outline": 62473,
  "ios-cloud-upload": 62475,
  "ios-cloudy": 62480,
  "ios-cloudy-night": 62478,
  "ios-code": 61783,
  "ios-code-download": 61781,
  "ios-code-working": 61782,
  "ios-cog": 62482,
  "ios-color-fill": 61785,
  "ios-color-filter": 62484,
  "ios-color-palette": 61787,
  "ios-color-wand": 62486,
  "ios-compass": 61789,
  "ios-construct": 61791,
  "ios-contact": 62490,
  "ios-contacts": 61793,
  "ios-contract": 61794,
  "ios-contrast": 61795,
  "ios-copy": 62492,
  "ios-create": 61797,
  "ios-crop": 62494,
  "ios-cube": 61800,
  "ios-cut": 61802,
  "ios-desktop": 61804,
  "ios-disc": 61806,
  "ios-document": 61808,
  "ios-done-all": 61809,
  "ios-download": 62496,
  "ios-easel": 61811,
  "ios-egg": 61813,
  "ios-exit": 61815,
  "ios-expand": 61816,
  "ios-eye": 62501,
  "ios-eye-off": 61818,
  "ios-fastforward": 62503,
  "ios-female": 61819,
  "ios-filing": 62505,
  "ios-film": 62507,
  "ios-finger-print": 61820,
  "ios-fitness": 61867,
  "ios-flag": 62509,
  "ios-flame": 62511,
  "ios-flash": 61822,
  "ios-flash-off": 61743,
  "ios-flashlight": 61761,
  "ios-flask": 62513,
  "ios-flower": 62515,
  "ios-folder": 62517,
  "ios-folder-open": 61824,
  "ios-football": 62519,
  "ios-funnel": 61826,
  "ios-gift": 61841,
  "ios-git-branch": 61827,
  "ios-git-commit": 61828,
  "ios-git-compare": 61829,
  "ios-git-merge": 61830,
  "ios-git-network": 61831,
  "ios-git-pull-request": 61832,
  "ios-glasses": 62527,
  "ios-globe": 61834,
  "ios-grid": 61836,
  "ios-hammer": 61838,
  "ios-hand": 61840,
  "ios-happy": 61842,
  "ios-headset": 61844,
  "ios-heart": 62531,
  "ios-heart-dislike": 61759,
  "ios-heart-empty": 61851,
  "ios-heart-half": 61853,
  "ios-help": 62534,
  "ios-help-buoy": 61846,
  "ios-help-circle": 61848,
  "ios-help-circle-outline": 61847,
  "ios-home": 62536,
  "ios-hourglass": 61699,
  "ios-ice-cream": 61850,
  "ios-image": 61852,
  "ios-images": 61854,
  "ios-infinite": 62538,
  "ios-information": 62541,
  "ios-information-circle": 61856,
  "ios-information-circle-outline": 61855,
  "ios-jet": 61861,
  "ios-journal": 61833,
  "ios-key": 61863,
  "ios-keypad": 62544,
  "ios-laptop": 61864,
  "ios-leaf": 61866,
  "ios-link": 61994,
  "ios-list": 62548,
  "ios-list-box": 61763,
  "ios-locate": 61870,
  "ios-lock": 61872,
  "ios-log-in": 61873,
  "ios-log-out": 61874,
  "ios-magnet": 61876,
  "ios-mail": 61880,
  "ios-mail-open": 61878,
  "ios-mail-unread": 61765,
  "ios-male": 61881,
  "ios-man": 61883,
  "ios-map": 61885,
  "ios-medal": 61887,
  "ios-medical": 62556,
  "ios-medkit": 62558,
  "ios-megaphone": 61889,
  "ios-menu": 61891,
  "ios-mic": 62561,
  "ios-mic-off": 62559,
  "ios-microphone": 61894,
  "ios-moon": 62568,
  "ios-more": 61896,
  "ios-move": 61899,
  "ios-musical-note": 62571,
  "ios-musical-notes": 62572,
  "ios-navigate": 62574,
  "ios-notifications": 61907,
  "ios-notifications-off": 61905,
  "ios-notifications-outline": 61747,
  "ios-nuclear": 61909,
  "ios-nutrition": 62576,
  "ios-open": 61911,
  "ios-options": 61913,
  "ios-outlet": 61915,
  "ios-paper": 62578,
  "ios-paper-plane": 61917,
  "ios-partly-sunny": 61919,
  "ios-pause": 62584,
  "ios-paw": 62586,
  "ios-people": 62588,
  "ios-person": 62590,
  "ios-person-add": 61921,
  "ios-phone-landscape": 61922,
  "ios-phone-portrait": 61923,
  "ios-photos": 62594,
  "ios-pie": 62596,
  "ios-pin": 61925,
  "ios-pint": 62598,
  "ios-pizza": 61927,
  "ios-planet": 61931,
  "ios-play": 62600,
  "ios-play-circle": 61715,
  "ios-podium": 61933,
  "ios-power": 61935,
  "ios-pricetag": 62605,
  "ios-pricetags": 62607,
  "ios-print": 61937,
  "ios-pulse": 62611,
  "ios-qr-scanner": 61939,
  "ios-quote": 61941,
  "ios-radio": 61945,
  "ios-radio-button-off": 61942,
  "ios-radio-button-on": 61943,
  "ios-rainy": 62613,
  "ios-recording": 62615,
  "ios-redo": 62617,
  "ios-refresh": 62620,
  "ios-refresh-circle": 61749,
  "ios-remove": 61948,
  "ios-remove-circle": 61947,
  "ios-remove-circle-outline": 61946,
  "ios-reorder": 61949,
  "ios-repeat": 61950,
  "ios-resize": 61951,
  "ios-restaurant": 61953,
  "ios-return-left": 61954,
  "ios-return-right": 61955,
  "ios-reverse-camera": 62623,
  "ios-rewind": 62625,
  "ios-ribbon": 61957,
  "ios-rocket": 61771,
  "ios-rose": 62627,
  "ios-sad": 61959,
  "ios-save": 61862,
  "ios-school": 61961,
  "ios-search": 62629,
  "ios-send": 61964,
  "ios-settings": 62631,
  "ios-share": 61969,
  "ios-share-alt": 61967,
  "ios-shirt": 61971,
  "ios-shuffle": 62633,
  "ios-skip-backward": 61973,
  "ios-skip-forward": 61975,
  "ios-snow": 61976,
  "ios-speedometer": 62640,
  "ios-square": 61978,
  "ios-square-outline": 61788,
  "ios-star": 62643,
  "ios-star-half": 62641,
  "ios-star-outline": 62642,
  "ios-stats": 61980,
  "ios-stopwatch": 62645,
  "ios-subway": 61982,
  "ios-sunny": 62647,
  "ios-swap": 61983,
  "ios-switch": 61985,
  "ios-sync": 61986,
  "ios-tablet-landscape": 61987,
  "ios-tablet-portrait": 62030,
  "ios-tennisball": 62651,
  "ios-text": 62032,
  "ios-thermometer": 62034,
  "ios-thumbs-down": 62036,
  "ios-thumbs-up": 62038,
  "ios-thunderstorm": 62653,
  "ios-time": 62655,
  "ios-timer": 62657,
  "ios-today": 61775,
  "ios-train": 62040,
  "ios-transgender": 62041,
  "ios-trash": 62661,
  "ios-trending-down": 62042,
  "ios-trending-up": 62043,
  "ios-trophy": 62045,
  "ios-tv": 61717,
  "ios-umbrella": 62047,
  "ios-undo": 62663,
  "ios-unlock": 62049,
  "ios-videocam": 62669,
  "ios-volume-high": 61724,
  "ios-volume-low": 61726,
  "ios-volume-mute": 62051,
  "ios-volume-off": 62052,
  "ios-walk": 62054,
  "ios-wallet": 61835,
  "ios-warning": 62056,
  "ios-watch": 62057,
  "ios-water": 62059,
  "ios-wifi": 62061,
  "ios-wine": 62063,
  "ios-woman": 62065,
  "logo-android": 61989,
  "logo-angular": 61991,
  "logo-apple": 61993,
  "logo-bitbucket": 61843,
  "logo-bitcoin": 61995,
  "logo-buffer": 61997,
  "logo-chrome": 61999,
  "logo-closed-captioning": 61701,
  "logo-codepen": 62000,
  "logo-css3": 62001,
  "logo-designernews": 62002,
  "logo-dribbble": 62003,
  "logo-dropbox": 62004,
  "logo-euro": 62005,
  "logo-facebook": 62006,
  "logo-flickr": 61703,
  "logo-foursquare": 62007,
  "logo-freebsd-devil": 62008,
  "logo-game-controller-a": 61755,
  "logo-game-controller-b": 61825,
  "logo-github": 62009,
  "logo-google": 62010,
  "logo-googleplus": 62011,
  "logo-hackernews": 62012,
  "logo-html5": 62013,
  "logo-instagram": 62014,
  "logo-ionic": 61776,
  "logo-ionitron": 61777,
  "logo-javascript": 62015,
  "logo-linkedin": 62016,
  "logo-markdown": 62017,
  "logo-model-s": 61779,
  "logo-no-smoking": 61705,
  "logo-nodejs": 62018,
  "logo-npm": 61845,
  "logo-octocat": 62019,
  "logo-pinterest": 62020,
  "logo-playstation": 62021,
  "logo-polymer": 61790,
  "logo-python": 62022,
  "logo-reddit": 62023,
  "logo-rss": 62024,
  "logo-sass": 62025,
  "logo-skype": 62026,
  "logo-slack": 61707,
  "logo-snapchat": 62027,
  "logo-steam": 62028,
  "logo-tumblr": 62029,
  "logo-tux": 62126,
  "logo-twitch": 62127,
  "logo-twitter": 62128,
  "logo-usd": 62129,
  "logo-vimeo": 62148,
  "logo-vk": 61709,
  "logo-whatsapp": 62149,
  "logo-windows": 62255,
  "logo-wordpress": 62256,
  "logo-xbox": 62284,
  "logo-xing": 61711,
  "logo-yahoo": 62285,
  "logo-yen": 62286,
  "logo-youtube": 62287,
  "md-add": 62067,
  "md-add-circle": 62066,
  "md-add-circle-outline": 61784,
  "md-airplane": 61786,
  "md-alarm": 62068,
  "md-albums": 62069,
  "md-alert": 62070,
  "md-american-football": 62071,
  "md-analytics": 62072,
  "md-aperture": 62073,
  "md-apps": 62074,
  "md-appstore": 62075,
  "md-archive": 62076,
  "md-arrow-back": 62077,
  "md-arrow-down": 62078,
  "md-arrow-dropdown": 62080,
  "md-arrow-dropdown-circle": 62079,
  "md-arrow-dropleft": 62082,
  "md-arrow-dropleft-circle": 62081,
  "md-arrow-dropright": 62084,
  "md-arrow-dropright-circle": 62083,
  "md-arrow-dropup": 62086,
  "md-arrow-dropup-circle": 62085,
  "md-arrow-forward": 62087,
  "md-arrow-round-back": 62088,
  "md-arrow-round-down": 62089,
  "md-arrow-round-forward": 62090,
  "md-arrow-round-up": 62091,
  "md-arrow-up": 62092,
  "md-at": 62093,
  "md-attach": 62094,
  "md-backspace": 62095,
  "md-barcode": 62096,
  "md-baseball": 62097,
  "md-basket": 62098,
  "md-basketball": 62099,
  "md-battery-charging": 62100,
  "md-battery-dead": 62101,
  "md-battery-full": 62102,
  "md-beaker": 62103,
  "md-bed": 61792,
  "md-beer": 62104,
  "md-bicycle": 62105,
  "md-bluetooth": 62106,
  "md-boat": 62107,
  "md-body": 62108,
  "md-bonfire": 62109,
  "md-book": 62110,
  "md-bookmark": 62111,
  "md-bookmarks": 62112,
  "md-bowtie": 62113,
  "md-briefcase": 62114,
  "md-browsers": 62115,
  "md-brush": 62116,
  "md-bug": 62117,
  "md-build": 62118,
  "md-bulb": 62119,
  "md-bus": 62120,
  "md-business": 61860,
  "md-cafe": 62121,
  "md-calculator": 62122,
  "md-calendar": 62123,
  "md-call": 62124,
  "md-camera": 62125,
  "md-car": 62130,
  "md-card": 62131,
  "md-cart": 62132,
  "md-cash": 62133,
  "md-cellular": 61796,
  "md-chatboxes": 62134,
  "md-chatbubbles": 62135,
  "md-checkbox": 62137,
  "md-checkbox-outline": 62136,
  "md-checkmark": 62140,
  "md-checkmark-circle": 62139,
  "md-checkmark-circle-outline": 62138,
  "md-clipboard": 62141,
  "md-clock": 62142,
  "md-close": 62144,
  "md-close-circle": 62143,
  "md-close-circle-outline": 61798,
  "md-cloud": 62153,
  "md-cloud-circle": 62146,
  "md-cloud-done": 62147,
  "md-cloud-download": 62150,
  "md-cloud-outline": 62151,
  "md-cloud-upload": 62152,
  "md-cloudy": 62155,
  "md-cloudy-night": 62154,
  "md-code": 62158,
  "md-code-download": 62156,
  "md-code-working": 62157,
  "md-cog": 62159,
  "md-color-fill": 62160,
  "md-color-filter": 62161,
  "md-color-palette": 62162,
  "md-color-wand": 62163,
  "md-compass": 62164,
  "md-construct": 62165,
  "md-contact": 62166,
  "md-contacts": 62167,
  "md-contract": 62168,
  "md-contrast": 62169,
  "md-copy": 62170,
  "md-create": 62171,
  "md-crop": 62172,
  "md-cube": 62173,
  "md-cut": 62174,
  "md-desktop": 62175,
  "md-disc": 62176,
  "md-document": 62177,
  "md-done-all": 62178,
  "md-download": 62179,
  "md-easel": 62180,
  "md-egg": 62181,
  "md-exit": 62182,
  "md-expand": 62183,
  "md-eye": 62185,
  "md-eye-off": 62184,
  "md-fastforward": 62186,
  "md-female": 62187,
  "md-filing": 62188,
  "md-film": 62189,
  "md-finger-print": 62190,
  "md-fitness": 61868,
  "md-flag": 62191,
  "md-flame": 62192,
  "md-flash": 62193,
  "md-flash-off": 61801,
  "md-flashlight": 61803,
  "md-flask": 62194,
  "md-flower": 62195,
  "md-folder": 62197,
  "md-folder-open": 62196,
  "md-football": 62198,
  "md-funnel": 62199,
  "md-gift": 61849,
  "md-git-branch": 62202,
  "md-git-commit": 62203,
  "md-git-compare": 62204,
  "md-git-merge": 62205,
  "md-git-network": 62206,
  "md-git-pull-request": 62207,
  "md-glasses": 62208,
  "md-globe": 62209,
  "md-grid": 62210,
  "md-hammer": 62211,
  "md-hand": 62212,
  "md-happy": 62213,
  "md-headset": 62214,
  "md-heart": 62216,
  "md-heart-dislike": 61799,
  "md-heart-empty": 61857,
  "md-heart-half": 61858,
  "md-help": 62219,
  "md-help-buoy": 62217,
  "md-help-circle": 62218,
  "md-help-circle-outline": 61805,
  "md-home": 62220,
  "md-hourglass": 61713,
  "md-ice-cream": 62221,
  "md-image": 62222,
  "md-images": 62223,
  "md-infinite": 62224,
  "md-information": 62226,
  "md-information-circle": 62225,
  "md-information-circle-outline": 61807,
  "md-jet": 62229,
  "md-journal": 61837,
  "md-key": 62230,
  "md-keypad": 62231,
  "md-laptop": 62232,
  "md-leaf": 62233,
  "md-link": 61998,
  "md-list": 62235,
  "md-list-box": 62234,
  "md-locate": 62236,
  "md-lock": 62237,
  "md-log-in": 62238,
  "md-log-out": 62239,
  "md-magnet": 62240,
  "md-mail": 62242,
  "md-mail-open": 62241,
  "md-mail-unread": 61810,
  "md-male": 62243,
  "md-man": 62244,
  "md-map": 62245,
  "md-medal": 62246,
  "md-medical": 62247,
  "md-medkit": 62248,
  "md-megaphone": 62249,
  "md-menu": 62250,
  "md-mic": 62252,
  "md-mic-off": 62251,
  "md-microphone": 62253,
  "md-moon": 62254,
  "md-more": 61897,
  "md-move": 62257,
  "md-musical-note": 62258,
  "md-musical-notes": 62259,
  "md-navigate": 62260,
  "md-notifications": 62264,
  "md-notifications-off": 62262,
  "md-notifications-outline": 62263,
  "md-nuclear": 62265,
  "md-nutrition": 62266,
  "md-open": 62267,
  "md-options": 62268,
  "md-outlet": 62269,
  "md-paper": 62271,
  "md-paper-plane": 62270,
  "md-partly-sunny": 62272,
  "md-pause": 62273,
  "md-paw": 62274,
  "md-people": 62275,
  "md-person": 62277,
  "md-person-add": 62276,
  "md-phone-landscape": 62278,
  "md-phone-portrait": 62279,
  "md-photos": 62280,
  "md-pie": 62281,
  "md-pin": 62282,
  "md-pint": 62283,
  "md-pizza": 62292,
  "md-planet": 62294,
  "md-play": 62295,
  "md-play-circle": 61812,
  "md-podium": 62296,
  "md-power": 62297,
  "md-pricetag": 62298,
  "md-pricetags": 62299,
  "md-print": 62300,
  "md-pulse": 62301,
  "md-qr-scanner": 62302,
  "md-quote": 62303,
  "md-radio": 62306,
  "md-radio-button-off": 62304,
  "md-radio-button-on": 62305,
  "md-rainy": 62307,
  "md-recording": 62308,
  "md-redo": 62309,
  "md-refresh": 62310,
  "md-refresh-circle": 61992,
  "md-remove": 62312,
  "md-remove-circle": 62311,
  "md-remove-circle-outline": 61814,
  "md-reorder": 62313,
  "md-repeat": 62314,
  "md-resize": 62315,
  "md-restaurant": 62316,
  "md-return-left": 62317,
  "md-return-right": 62318,
  "md-reverse-camera": 62319,
  "md-rewind": 62320,
  "md-ribbon": 62321,
  "md-rocket": 61817,
  "md-rose": 62322,
  "md-sad": 62323,
  "md-save": 61865,
  "md-school": 62324,
  "md-search": 62325,
  "md-send": 62326,
  "md-settings": 62327,
  "md-share": 62329,
  "md-share-alt": 62328,
  "md-shirt": 62330,
  "md-shuffle": 62331,
  "md-skip-backward": 62332,
  "md-skip-forward": 62333,
  "md-snow": 62334,
  "md-speedometer": 62335,
  "md-square": 62337,
  "md-square-outline": 62336,
  "md-star": 62340,
  "md-star-half": 62338,
  "md-star-outline": 62339,
  "md-stats": 62341,
  "md-stopwatch": 62342,
  "md-subway": 62343,
  "md-sunny": 62344,
  "md-swap": 62345,
  "md-switch": 62346,
  "md-sync": 62347,
  "md-tablet-landscape": 62348,
  "md-tablet-portrait": 62349,
  "md-tennisball": 62350,
  "md-text": 62351,
  "md-thermometer": 62352,
  "md-thumbs-down": 62353,
  "md-thumbs-up": 62354,
  "md-thunderstorm": 62355,
  "md-time": 62356,
  "md-timer": 62357,
  "md-today": 61821,
  "md-train": 62358,
  "md-transgender": 62359,
  "md-trash": 62360,
  "md-trending-down": 62361,
  "md-trending-up": 62362,
  "md-trophy": 62363,
  "md-tv": 61823,
  "md-umbrella": 62364,
  "md-undo": 62365,
  "md-unlock": 62366,
  "md-videocam": 62367,
  "md-volume-high": 61731,
  "md-volume-low": 61745,
  "md-volume-mute": 62369,
  "md-volume-off": 62370,
  "md-walk": 62372,
  "md-wallet": 61839,
  "md-warning": 62373,
  "md-watch": 62374,
  "md-water": 62375,
  "md-wifi": 62376,
  "md-wine": 62377,
  "md-woman": 62378
};
},743,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "b2e0fc821c6886fb3940f85a3320003e",
    "name": "Ionicons",
    "type": "ttf",
    "fileHashes": ["b2e0fc821c6886fb3940f85a3320003e"]
  });
},744,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _MaterialCommunityIcons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_MaterialCommunityIcons.default, 'material-community', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},745,[1,746,562,747]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "access-point": 61442,
  "access-point-network": 61443,
  "account": 61444,
  "account-alert": 61445,
  "account-box": 61446,
  "account-box-multiple": 63795,
  "account-box-outline": 61447,
  "account-card-details": 62930,
  "account-check": 61448,
  "account-child": 64136,
  "account-child-circle": 64137,
  "account-circle": 61449,
  "account-convert": 61450,
  "account-details": 63025,
  "account-edit": 63163,
  "account-group": 63560,
  "account-heart": 63640,
  "account-key": 61451,
  "account-location": 61452,
  "account-minus": 61453,
  "account-minus-outline": 64235,
  "account-multiple": 61454,
  "account-multiple-check": 63684,
  "account-multiple-minus": 62931,
  "account-multiple-outline": 61455,
  "account-multiple-plus": 61456,
  "account-multiple-plus-outline": 63487,
  "account-network": 61457,
  "account-off": 61458,
  "account-outline": 61459,
  "account-plus": 61460,
  "account-plus-outline": 63488,
  "account-remove": 61461,
  "account-remove-outline": 64236,
  "account-search": 61462,
  "account-search-outline": 63796,
  "account-settings": 63024,
  "account-star": 61463,
  "account-supervisor": 64138,
  "account-supervisor-circle": 64139,
  "account-switch": 61465,
  "accusoft": 63561,
  "adjust": 61466,
  "adobe": 63797,
  "air-conditioner": 61467,
  "airballoon": 61468,
  "airplane": 61469,
  "airplane-landing": 62932,
  "airplane-off": 61470,
  "airplane-takeoff": 62933,
  "airplay": 61471,
  "airport": 63562,
  "alarm": 61472,
  "alarm-bell": 63373,
  "alarm-check": 61473,
  "alarm-light": 63374,
  "alarm-multiple": 61474,
  "alarm-off": 61475,
  "alarm-plus": 61476,
  "alarm-snooze": 63117,
  "album": 61477,
  "alert": 61478,
  "alert-box": 61479,
  "alert-circle": 61480,
  "alert-circle-outline": 62934,
  "alert-decagram": 63164,
  "alert-octagon": 61481,
  "alert-octagram": 63334,
  "alert-outline": 61482,
  "alien": 63641,
  "all-inclusive": 63165,
  "alpha": 61483,
  "alpha-a": 65,
  "alpha-a-box": 64237,
  "alpha-b": 66,
  "alpha-b-box": 64238,
  "alpha-c": 67,
  "alpha-c-box": 64239,
  "alpha-d": 68,
  "alpha-d-box": 64240,
  "alpha-e": 69,
  "alpha-e-box": 64241,
  "alpha-f": 70,
  "alpha-f-box": 64242,
  "alpha-g": 71,
  "alpha-g-box": 64243,
  "alpha-h": 72,
  "alpha-h-box": 64244,
  "alpha-i": 73,
  "alpha-i-box": 64245,
  "alpha-j": 74,
  "alpha-j-box": 64246,
  "alpha-k": 75,
  "alpha-k-box": 64247,
  "alpha-l": 76,
  "alpha-l-box": 64248,
  "alpha-m": 77,
  "alpha-m-box": 64249,
  "alpha-n": 78,
  "alpha-n-box": 64250,
  "alpha-o": 79,
  "alpha-o-box": 64251,
  "alpha-p": 80,
  "alpha-p-box": 64252,
  "alpha-q": 81,
  "alpha-q-box": 64253,
  "alpha-r": 82,
  "alpha-r-box": 64254,
  "alpha-s": 83,
  "alpha-s-box": 64255,
  "alpha-t": 84,
  "alpha-t-box": 64256,
  "alpha-u": 85,
  "alpha-u-box": 64257,
  "alpha-v": 86,
  "alpha-v-box": 64258,
  "alpha-w": 87,
  "alpha-w-box": 64259,
  "alpha-x": 88,
  "alpha-x-box": 64260,
  "alpha-y": 89,
  "alpha-y-box": 64261,
  "alpha-z": 90,
  "alpha-z-box": 64262,
  "alphabetical": 61484,
  "altimeter": 62935,
  "amazon": 61485,
  "amazon-alexa": 63685,
  "amazon-drive": 61486,
  "ambulance": 61487,
  "ampersand": 64140,
  "amplifier": 61488,
  "anchor": 61489,
  "android": 61490,
  "android-auto": 64141,
  "android-debug-bridge": 61491,
  "android-head": 63375,
  "android-studio": 61492,
  "angle-acute": 63798,
  "angle-obtuse": 63799,
  "angle-right": 63800,
  "angular": 63153,
  "angularjs": 63166,
  "animation": 62936,
  "animation-outline": 64142,
  "animation-play": 63801,
  "animation-play-outline": 64143,
  "anvil": 63642,
  "apple": 61493,
  "apple-finder": 61494,
  "apple-icloud": 61496,
  "apple-ios": 61495,
  "apple-keyboard-caps": 63026,
  "apple-keyboard-command": 63027,
  "apple-keyboard-control": 63028,
  "apple-keyboard-option": 63029,
  "apple-keyboard-shift": 63030,
  "apple-safari": 61497,
  "application": 62996,
  "apps": 61499,
  "arch": 63686,
  "archive": 61500,
  "arrange-bring-forward": 61501,
  "arrange-bring-to-front": 61502,
  "arrange-send-backward": 61503,
  "arrange-send-to-back": 61504,
  "arrow-all": 61505,
  "arrow-bottom-left": 61506,
  "arrow-bottom-left-bold-outline": 63926,
  "arrow-bottom-left-thick": 63927,
  "arrow-bottom-right": 61507,
  "arrow-bottom-right-bold-outline": 63928,
  "arrow-bottom-right-thick": 63929,
  "arrow-collapse": 62997,
  "arrow-collapse-all": 61508,
  "arrow-collapse-down": 63377,
  "arrow-collapse-horizontal": 63563,
  "arrow-collapse-left": 63378,
  "arrow-collapse-right": 63379,
  "arrow-collapse-up": 63380,
  "arrow-collapse-vertical": 63564,
  "arrow-decision": 63930,
  "arrow-decision-auto": 63931,
  "arrow-decision-auto-outline": 63932,
  "arrow-decision-outline": 63933,
  "arrow-down": 61509,
  "arrow-down-bold": 63277,
  "arrow-down-bold-box": 63278,
  "arrow-down-bold-box-outline": 63279,
  "arrow-down-bold-circle": 61511,
  "arrow-down-bold-circle-outline": 61512,
  "arrow-down-bold-hexagon-outline": 61513,
  "arrow-down-bold-outline": 63934,
  "arrow-down-box": 63167,
  "arrow-down-drop-circle": 61514,
  "arrow-down-drop-circle-outline": 61515,
  "arrow-down-thick": 61510,
  "arrow-expand": 62998,
  "arrow-expand-all": 61516,
  "arrow-expand-down": 63381,
  "arrow-expand-horizontal": 63565,
  "arrow-expand-left": 63382,
  "arrow-expand-right": 63383,
  "arrow-expand-up": 63384,
  "arrow-expand-vertical": 63566,
  "arrow-left": 61517,
  "arrow-left-bold": 63280,
  "arrow-left-bold-box": 63281,
  "arrow-left-bold-box-outline": 63282,
  "arrow-left-bold-circle": 61519,
  "arrow-left-bold-circle-outline": 61520,
  "arrow-left-bold-hexagon-outline": 61521,
  "arrow-left-bold-outline": 63935,
  "arrow-left-box": 63168,
  "arrow-left-drop-circle": 61522,
  "arrow-left-drop-circle-outline": 61523,
  "arrow-left-right-bold-outline": 63936,
  "arrow-left-thick": 61518,
  "arrow-right": 61524,
  "arrow-right-bold": 63283,
  "arrow-right-bold-box": 63284,
  "arrow-right-bold-box-outline": 63285,
  "arrow-right-bold-circle": 61526,
  "arrow-right-bold-circle-outline": 61527,
  "arrow-right-bold-hexagon-outline": 61528,
  "arrow-right-bold-outline": 63937,
  "arrow-right-box": 63169,
  "arrow-right-drop-circle": 61529,
  "arrow-right-drop-circle-outline": 61530,
  "arrow-right-thick": 61525,
  "arrow-split-horizontal": 63802,
  "arrow-split-vertical": 63803,
  "arrow-top-left": 61531,
  "arrow-top-left-bold-outline": 63938,
  "arrow-top-left-thick": 63939,
  "arrow-top-right": 61532,
  "arrow-top-right-bold-outline": 63940,
  "arrow-top-right-thick": 63941,
  "arrow-up": 61533,
  "arrow-up-bold": 63286,
  "arrow-up-bold-box": 63287,
  "arrow-up-bold-box-outline": 63288,
  "arrow-up-bold-circle": 61535,
  "arrow-up-bold-circle-outline": 61536,
  "arrow-up-bold-hexagon-outline": 61537,
  "arrow-up-bold-outline": 63942,
  "arrow-up-box": 63170,
  "arrow-up-down-bold-outline": 63943,
  "arrow-up-drop-circle": 61538,
  "arrow-up-drop-circle-outline": 61539,
  "arrow-up-thick": 61534,
  "artist": 63490,
  "aspect-ratio": 64035,
  "assistant": 61540,
  "asterisk": 63171,
  "at": 61541,
  "atlassian": 63491,
  "atom": 63335,
  "attachment": 61542,
  "audio-video": 63804,
  "audiobook": 61543,
  "augmented-reality": 63567,
  "auto-fix": 61544,
  "auto-upload": 61545,
  "autorenew": 61546,
  "av-timer": 61547,
  "axe": 63687,
  "azure": 63492,
  "babel": 64036,
  "baby": 61548,
  "baby-buggy": 63118,
  "backburger": 61549,
  "backspace": 61550,
  "backup-restore": 61551,
  "badminton": 63568,
  "balloon": 64037,
  "ballot": 63944,
  "ballot-outline": 63945,
  "bandcamp": 63092,
  "bank": 61552,
  "bank-transfer": 64038,
  "bank-transfer-in": 64039,
  "bank-transfer-out": 64040,
  "barcode": 61553,
  "barcode-scan": 61554,
  "barley": 61555,
  "barrel": 61556,
  "baseball": 63569,
  "baseball-bat": 63570,
  "basecamp": 61557,
  "basket": 61558,
  "basket-fill": 61559,
  "basket-unfill": 61560,
  "basketball": 63493,
  "battery": 61561,
  "battery-10": 61562,
  "battery-10-bluetooth": 63805,
  "battery-20": 61563,
  "battery-20-bluetooth": 63806,
  "battery-30": 61564,
  "battery-30-bluetooth": 63807,
  "battery-40": 61565,
  "battery-40-bluetooth": 63808,
  "battery-50": 61566,
  "battery-50-bluetooth": 63809,
  "battery-60": 61567,
  "battery-60-bluetooth": 63810,
  "battery-70": 61568,
  "battery-70-bluetooth": 63811,
  "battery-80": 61569,
  "battery-80-bluetooth": 63812,
  "battery-90": 61570,
  "battery-90-bluetooth": 63813,
  "battery-alert": 61571,
  "battery-alert-bluetooth": 63814,
  "battery-bluetooth": 63815,
  "battery-bluetooth-variant": 63816,
  "battery-charging": 61572,
  "battery-charging-10": 63643,
  "battery-charging-100": 61573,
  "battery-charging-20": 61574,
  "battery-charging-30": 61575,
  "battery-charging-40": 61576,
  "battery-charging-50": 63644,
  "battery-charging-60": 61577,
  "battery-charging-70": 63645,
  "battery-charging-80": 61578,
  "battery-charging-90": 61579,
  "battery-charging-outline": 63646,
  "battery-charging-wireless": 63494,
  "battery-charging-wireless-10": 63495,
  "battery-charging-wireless-20": 63496,
  "battery-charging-wireless-30": 63497,
  "battery-charging-wireless-40": 63498,
  "battery-charging-wireless-50": 63499,
  "battery-charging-wireless-60": 63500,
  "battery-charging-wireless-70": 63501,
  "battery-charging-wireless-80": 63502,
  "battery-charging-wireless-90": 63503,
  "battery-charging-wireless-alert": 63504,
  "battery-charging-wireless-outline": 63505,
  "battery-minus": 61580,
  "battery-negative": 61581,
  "battery-outline": 61582,
  "battery-plus": 61583,
  "battery-positive": 61584,
  "battery-unknown": 61585,
  "battery-unknown-bluetooth": 63817,
  "beach": 61586,
  "beaker": 63119,
  "beats": 61591,
  "bed-empty": 63647,
  "beer": 61592,
  "behance": 61593,
  "bell": 61594,
  "bell-off": 61595,
  "bell-off-outline": 64144,
  "bell-outline": 61596,
  "bell-plus": 61597,
  "bell-plus-outline": 64145,
  "bell-ring": 61598,
  "bell-ring-outline": 61599,
  "bell-sleep": 61600,
  "bell-sleep-outline": 64146,
  "beta": 61601,
  "betamax": 63946,
  "bible": 61602,
  "bike": 61603,
  "bing": 61604,
  "binoculars": 61605,
  "bio": 61606,
  "biohazard": 61607,
  "bitbucket": 61608,
  "bitcoin": 63506,
  "black-mesa": 61609,
  "blackberry": 61610,
  "blender": 61611,
  "blinds": 61612,
  "block-helper": 61613,
  "blogger": 61614,
  "bluetooth": 61615,
  "bluetooth-audio": 61616,
  "bluetooth-connect": 61617,
  "bluetooth-off": 61618,
  "bluetooth-settings": 61619,
  "bluetooth-transfer": 61620,
  "blur": 61621,
  "blur-linear": 61622,
  "blur-off": 61623,
  "blur-radial": 61624,
  "bomb": 63120,
  "bomb-off": 63172,
  "bone": 61625,
  "book": 61626,
  "book-lock": 63385,
  "book-lock-open": 63386,
  "book-minus": 62937,
  "book-multiple": 61627,
  "book-multiple-minus": 64147,
  "book-multiple-plus": 64148,
  "book-multiple-remove": 64149,
  "book-multiple-variant": 61628,
  "book-open": 61629,
  "book-open-page-variant": 62938,
  "book-open-variant": 61630,
  "book-plus": 62939,
  "book-remove": 64150,
  "book-variant": 61631,
  "bookmark": 61632,
  "bookmark-check": 61633,
  "bookmark-minus": 63947,
  "bookmark-minus-outline": 63948,
  "bookmark-music": 61634,
  "bookmark-off": 63949,
  "bookmark-off-outline": 63950,
  "bookmark-outline": 61635,
  "bookmark-plus": 61637,
  "bookmark-plus-outline": 61636,
  "bookmark-remove": 61638,
  "boombox": 62940,
  "bootstrap": 63173,
  "border-all": 61639,
  "border-all-variant": 63648,
  "border-bottom": 61640,
  "border-bottom-variant": 63649,
  "border-color": 61641,
  "border-horizontal": 61642,
  "border-inside": 61643,
  "border-left": 61644,
  "border-left-variant": 63650,
  "border-none": 61645,
  "border-none-variant": 63651,
  "border-outside": 61646,
  "border-right": 61647,
  "border-right-variant": 63652,
  "border-style": 61648,
  "border-top": 61649,
  "border-top-variant": 63653,
  "border-vertical": 61650,
  "bottle-wine": 63571,
  "bow-tie": 63095,
  "bowl": 62999,
  "bowling": 61651,
  "box": 61652,
  "box-cutter": 61653,
  "box-shadow": 63031,
  "braille": 63951,
  "brain": 63952,
  "bridge": 63000,
  "briefcase": 61654,
  "briefcase-check": 61655,
  "briefcase-download": 61656,
  "briefcase-edit": 64151,
  "briefcase-minus": 64041,
  "briefcase-outline": 63507,
  "briefcase-plus": 64042,
  "briefcase-remove": 64043,
  "briefcase-search": 64044,
  "briefcase-upload": 61657,
  "brightness-1": 61658,
  "brightness-2": 61659,
  "brightness-3": 61660,
  "brightness-4": 61661,
  "brightness-5": 61662,
  "brightness-6": 61663,
  "brightness-7": 61664,
  "brightness-auto": 61665,
  "broom": 61666,
  "brush": 61667,
  "buddhism": 63818,
  "buffer": 63001,
  "bug": 61668,
  "bug-check": 64045,
  "bug-check-outline": 64046,
  "bug-outline": 64047,
  "bulldozer": 64263,
  "bulletin-board": 61669,
  "bullhorn": 61670,
  "bullhorn-outline": 64264,
  "bullseye": 62941,
  "bullseye-arrow": 63688,
  "bus": 61671,
  "bus-alert": 64152,
  "bus-articulated-end": 63387,
  "bus-articulated-front": 63388,
  "bus-clock": 63689,
  "bus-double-decker": 63389,
  "bus-school": 63390,
  "bus-side": 63391,
  "cached": 61672,
  "cake": 61673,
  "cake-layered": 61674,
  "cake-variant": 61675,
  "calculator": 61676,
  "calculator-variant": 64153,
  "calendar": 61677,
  "calendar-alert": 64048,
  "calendar-blank": 61678,
  "calendar-check": 61679,
  "calendar-clock": 61680,
  "calendar-edit": 63654,
  "calendar-export": 64265,
  "calendar-heart": 63953,
  "calendar-import": 64266,
  "calendar-multiple": 61681,
  "calendar-multiple-check": 61682,
  "calendar-multiselect": 64049,
  "calendar-plus": 61683,
  "calendar-question": 63121,
  "calendar-range": 63096,
  "calendar-remove": 61684,
  "calendar-search": 63819,
  "calendar-star": 63954,
  "calendar-text": 61685,
  "calendar-today": 61686,
  "calendar-week": 64050,
  "calendar-week-begin": 64051,
  "call-made": 61687,
  "call-merge": 61688,
  "call-missed": 61689,
  "call-received": 61690,
  "call-split": 61691,
  "camcorder": 61692,
  "camcorder-box": 61693,
  "camcorder-box-off": 61694,
  "camcorder-off": 61695,
  "camera": 61696,
  "camera-account": 63690,
  "camera-burst": 63122,
  "camera-enhance": 61697,
  "camera-front": 61698,
  "camera-front-variant": 61699,
  "camera-gopro": 63392,
  "camera-image": 63691,
  "camera-iris": 61700,
  "camera-metering-center": 63393,
  "camera-metering-matrix": 63394,
  "camera-metering-partial": 63395,
  "camera-metering-spot": 63396,
  "camera-off": 62943,
  "camera-party-mode": 61701,
  "camera-rear": 61702,
  "camera-rear-variant": 61703,
  "camera-switch": 61704,
  "camera-timer": 61705,
  "cancel": 63289,
  "candle": 62946,
  "candycane": 61706,
  "cannabis": 63397,
  "caps-lock": 64154,
  "car": 61707,
  "car-battery": 61708,
  "car-connected": 61709,
  "car-convertible": 63398,
  "car-estate": 63399,
  "car-hatchback": 63400,
  "car-limousine": 63692,
  "car-pickup": 63401,
  "car-side": 63402,
  "car-sports": 63403,
  "car-wash": 61710,
  "caravan": 63404,
  "cards": 63032,
  "cards-club": 63693,
  "cards-diamond": 63694,
  "cards-heart": 63695,
  "cards-outline": 63033,
  "cards-playing-outline": 63034,
  "cards-spade": 63696,
  "cards-variant": 63174,
  "carrot": 61711,
  "cart": 61712,
  "cart-off": 63083,
  "cart-outline": 61713,
  "cart-plus": 61714,
  "case-sensitive-alt": 61715,
  "cash": 61716,
  "cash-100": 61717,
  "cash-multiple": 61718,
  "cash-refund": 64155,
  "cash-usd": 61719,
  "cassette": 63955,
  "cast": 61720,
  "cast-connected": 61721,
  "cast-off": 63369,
  "castle": 61722,
  "cat": 61723,
  "cctv": 63405,
  "ceiling-light": 63336,
  "cellphone": 61724,
  "cellphone-android": 61725,
  "cellphone-arrow-down": 63956,
  "cellphone-basic": 61726,
  "cellphone-dock": 61727,
  "cellphone-erase": 63820,
  "cellphone-iphone": 61728,
  "cellphone-key": 63821,
  "cellphone-link": 61729,
  "cellphone-link-off": 61730,
  "cellphone-lock": 63822,
  "cellphone-message": 63698,
  "cellphone-off": 63823,
  "cellphone-screenshot": 64052,
  "cellphone-settings": 61731,
  "cellphone-settings-variant": 63824,
  "cellphone-sound": 63825,
  "cellphone-text": 63697,
  "cellphone-wireless": 63508,
  "certificate": 61732,
  "chair-school": 61733,
  "chart-arc": 61734,
  "chart-areaspline": 61735,
  "chart-bar": 61736,
  "chart-bar-stacked": 63337,
  "chart-bubble": 62947,
  "chart-donut": 63406,
  "chart-donut-variant": 63407,
  "chart-gantt": 63084,
  "chart-histogram": 61737,
  "chart-line": 61738,
  "chart-line-stacked": 63338,
  "chart-line-variant": 63408,
  "chart-multiline": 63699,
  "chart-pie": 61739,
  "chart-scatterplot-hexbin": 63085,
  "chart-timeline": 63086,
  "check": 61740,
  "check-all": 61741,
  "check-circle": 62944,
  "check-circle-outline": 62945,
  "check-decagram": 63376,
  "check-outline": 63572,
  "checkbook": 64156,
  "checkbox-blank": 61742,
  "checkbox-blank-circle": 61743,
  "checkbox-blank-circle-outline": 61744,
  "checkbox-blank-outline": 61745,
  "checkbox-intermediate": 63573,
  "checkbox-marked": 61746,
  "checkbox-marked-circle": 61747,
  "checkbox-marked-circle-outline": 61748,
  "checkbox-marked-outline": 61749,
  "checkbox-multiple-blank": 61750,
  "checkbox-multiple-blank-circle": 63035,
  "checkbox-multiple-blank-circle-outline": 63036,
  "checkbox-multiple-blank-outline": 61751,
  "checkbox-multiple-marked": 61752,
  "checkbox-multiple-marked-circle": 63037,
  "checkbox-multiple-marked-circle-outline": 63038,
  "checkbox-multiple-marked-outline": 61753,
  "checkerboard": 61754,
  "chemical-weapon": 61755,
  "chess-bishop": 63579,
  "chess-king": 63574,
  "chess-knight": 63575,
  "chess-pawn": 63576,
  "chess-queen": 63577,
  "chess-rook": 63578,
  "chevron-double-down": 61756,
  "chevron-double-left": 61757,
  "chevron-double-right": 61758,
  "chevron-double-up": 61759,
  "chevron-down": 61760,
  "chevron-down-box": 63957,
  "chevron-down-box-outline": 63958,
  "chevron-down-circle": 64267,
  "chevron-down-circle-outline": 64268,
  "chevron-left": 61761,
  "chevron-left-box": 63959,
  "chevron-left-box-outline": 63960,
  "chevron-left-circle": 64269,
  "chevron-left-circle-outline": 64270,
  "chevron-right": 61762,
  "chevron-right-box": 63961,
  "chevron-right-box-outline": 63962,
  "chevron-right-circle": 64271,
  "chevron-right-circle-outline": 64272,
  "chevron-up": 61763,
  "chevron-up-box": 63963,
  "chevron-up-box-outline": 63964,
  "chevron-up-circle": 64273,
  "chevron-up-circle-outline": 64274,
  "chili-hot": 63409,
  "chili-medium": 63410,
  "chili-mild": 63411,
  "chip": 63002,
  "christianity": 63826,
  "church": 61764,
  "circle": 63332,
  "circle-edit-outline": 63700,
  "circle-medium": 63965,
  "circle-outline": 63333,
  "circle-slice-1": 64157,
  "circle-slice-2": 64158,
  "circle-slice-3": 64159,
  "circle-slice-4": 64160,
  "circle-slice-5": 64161,
  "circle-slice-6": 64162,
  "circle-slice-7": 64163,
  "circle-slice-8": 64164,
  "circle-small": 63966,
  "cisco-webex": 61765,
  "city": 61766,
  "city-variant": 64053,
  "city-variant-outline": 64054,
  "clipboard": 61767,
  "clipboard-account": 61768,
  "clipboard-alert": 61769,
  "clipboard-arrow-down": 61770,
  "clipboard-arrow-left": 61771,
  "clipboard-check": 61772,
  "clipboard-check-outline": 63655,
  "clipboard-flow": 63175,
  "clipboard-outline": 61773,
  "clipboard-plus": 63312,
  "clipboard-pulse": 63580,
  "clipboard-pulse-outline": 63581,
  "clipboard-text": 61774,
  "clipboard-text-outline": 64055,
  "clippy": 61775,
  "clock": 63827,
  "clock-alert": 63828,
  "clock-alert-outline": 62926,
  "clock-end": 61777,
  "clock-fast": 61778,
  "clock-in": 61779,
  "clock-out": 61780,
  "clock-outline": 61776,
  "clock-start": 61781,
  "close": 61782,
  "close-box": 61783,
  "close-box-outline": 61784,
  "close-circle": 61785,
  "close-circle-outline": 61786,
  "close-network": 61787,
  "close-octagon": 61788,
  "close-octagon-outline": 61789,
  "close-outline": 63176,
  "closed-caption": 61790,
  "cloud": 61791,
  "cloud-alert": 63967,
  "cloud-braces": 63412,
  "cloud-check": 61792,
  "cloud-circle": 61793,
  "cloud-download": 61794,
  "cloud-off-outline": 61796,
  "cloud-outline": 61795,
  "cloud-print": 61797,
  "cloud-print-outline": 61798,
  "cloud-question": 64056,
  "cloud-search": 63829,
  "cloud-search-outline": 63830,
  "cloud-sync": 63039,
  "cloud-tags": 63413,
  "cloud-upload": 61799,
  "clover": 63509,
  "code-array": 61800,
  "code-braces": 61801,
  "code-brackets": 61802,
  "code-equal": 61803,
  "code-greater-than": 61804,
  "code-greater-than-or-equal": 61805,
  "code-less-than": 61806,
  "code-less-than-or-equal": 61807,
  "code-not-equal": 61808,
  "code-not-equal-variant": 61809,
  "code-parentheses": 61810,
  "code-string": 61811,
  "code-tags": 61812,
  "code-tags-check": 63123,
  "codepen": 61813,
  "coffee": 61814,
  "coffee-outline": 63177,
  "coffee-to-go": 61815,
  "cogs": 63701,
  "coin": 61816,
  "coins": 63124,
  "collage": 63040,
  "collapse-all": 64165,
  "collapse-all-outline": 64166,
  "color-helper": 61817,
  "comment": 61818,
  "comment-account": 61819,
  "comment-account-outline": 61820,
  "comment-alert": 61821,
  "comment-alert-outline": 61822,
  "comment-arrow-left": 63968,
  "comment-arrow-left-outline": 63969,
  "comment-arrow-right": 63970,
  "comment-arrow-right-outline": 63971,
  "comment-check": 61823,
  "comment-check-outline": 61824,
  "comment-eye": 64057,
  "comment-eye-outline": 64058,
  "comment-multiple": 63582,
  "comment-multiple-outline": 61825,
  "comment-outline": 61826,
  "comment-plus": 63972,
  "comment-plus-outline": 61827,
  "comment-processing": 61828,
  "comment-processing-outline": 61829,
  "comment-question": 63510,
  "comment-question-outline": 61830,
  "comment-remove": 62942,
  "comment-remove-outline": 61831,
  "comment-search": 64059,
  "comment-search-outline": 64060,
  "comment-text": 61832,
  "comment-text-multiple": 63583,
  "comment-text-multiple-outline": 63584,
  "comment-text-outline": 61833,
  "compare": 61834,
  "compass": 61835,
  "compass-outline": 61836,
  "console": 61837,
  "console-line": 63414,
  "console-network": 63656,
  "contact-mail": 61838,
  "contacts": 63178,
  "contain": 64061,
  "contain-end": 64062,
  "contain-start": 64063,
  "content-copy": 61839,
  "content-cut": 61840,
  "content-duplicate": 61841,
  "content-paste": 61842,
  "content-save": 61843,
  "content-save-all": 61844,
  "content-save-outline": 63511,
  "content-save-settings": 63003,
  "content-save-settings-outline": 64275,
  "contrast": 61845,
  "contrast-box": 61846,
  "contrast-circle": 61847,
  "cookie": 61848,
  "copyright": 62950,
  "cordova": 63831,
  "corn": 63415,
  "counter": 61849,
  "cow": 61850,
  "crane": 63585,
  "creation": 61897,
  "credit-card": 61851,
  "credit-card-multiple": 61852,
  "credit-card-off": 62948,
  "credit-card-plus": 63093,
  "credit-card-refund": 64167,
  "credit-card-scan": 61853,
  "credit-card-settings": 63702,
  "crop": 61854,
  "crop-free": 61855,
  "crop-landscape": 61856,
  "crop-portrait": 61857,
  "crop-rotate": 63125,
  "crop-square": 61858,
  "crosshairs": 61859,
  "crosshairs-gps": 61860,
  "crown": 61861,
  "cryengine": 63832,
  "crystal-ball": 64276,
  "cube": 61862,
  "cube-outline": 61863,
  "cube-send": 61864,
  "cube-unfolded": 61865,
  "cup": 61866,
  "cup-off": 62949,
  "cup-water": 61867,
  "cupcake": 63833,
  "curling": 63586,
  "currency-bdt": 63587,
  "currency-btc": 61868,
  "currency-chf": 63416,
  "currency-cny": 63417,
  "currency-eth": 63418,
  "currency-eur": 61869,
  "currency-gbp": 61870,
  "currency-inr": 61871,
  "currency-jpy": 63419,
  "currency-krw": 63420,
  "currency-kzt": 63588,
  "currency-ngn": 61872,
  "currency-php": 63973,
  "currency-rub": 61873,
  "currency-sign": 63421,
  "currency-try": 61874,
  "currency-twd": 63422,
  "currency-usd": 61875,
  "currency-usd-off": 63097,
  "current-ac": 63834,
  "current-dc": 63835,
  "cursor-default": 61876,
  "cursor-default-outline": 61877,
  "cursor-move": 61878,
  "cursor-pointer": 61879,
  "cursor-text": 62951,
  "database": 61880,
  "database-check": 64168,
  "database-export": 63837,
  "database-import": 63836,
  "database-lock": 64169,
  "database-minus": 61881,
  "database-plus": 61882,
  "database-search": 63589,
  "death-star": 63703,
  "death-star-variant": 63704,
  "debian": 63705,
  "debug-step-into": 61883,
  "debug-step-out": 61884,
  "debug-step-over": 61885,
  "decagram": 63339,
  "decagram-outline": 63340,
  "decimal-decrease": 61886,
  "decimal-increase": 61887,
  "delete": 61888,
  "delete-circle": 63106,
  "delete-empty": 63179,
  "delete-forever": 62952,
  "delete-outline": 63974,
  "delete-restore": 63512,
  "delete-sweep": 62953,
  "delete-variant": 61889,
  "delta": 61890,
  "desk-lamp": 63838,
  "deskphone": 61891,
  "desktop-classic": 63423,
  "desktop-mac": 61892,
  "desktop-mac-dashboard": 63975,
  "desktop-tower": 61893,
  "desktop-tower-monitor": 64170,
  "details": 61894,
  "developer-board": 63126,
  "deviantart": 61895,
  "dialpad": 63004,
  "diamond": 61896,
  "dice-1": 61898,
  "dice-2": 61899,
  "dice-3": 61900,
  "dice-4": 61901,
  "dice-5": 61902,
  "dice-6": 61903,
  "dice-d10": 63342,
  "dice-d12": 63590,
  "dice-d20": 62954,
  "dice-d4": 62955,
  "dice-d6": 62956,
  "dice-d8": 62957,
  "dice-multiple": 63341,
  "dictionary": 63005,
  "dip-switch": 63424,
  "directions": 61904,
  "directions-fork": 63041,
  "disc": 62958,
  "disc-alert": 61905,
  "disc-player": 63839,
  "discord": 63087,
  "dishwasher": 64171,
  "disqus": 61906,
  "disqus-outline": 61907,
  "division": 61908,
  "division-box": 61909,
  "dlna": 64064,
  "dna": 63107,
  "dns": 61910,
  "do-not-disturb": 63127,
  "do-not-disturb-off": 63128,
  "docker": 63591,
  "doctor": 64065,
  "dog": 64066,
  "dog-service": 64172,
  "dog-side": 64067,
  "dolby": 63154,
  "domain": 61911,
  "donkey": 63425,
  "door": 63513,
  "door-closed": 63514,
  "door-open": 63515,
  "doorbell-video": 63592,
  "dot-net": 64173,
  "dots-horizontal": 61912,
  "dots-horizontal-circle": 63426,
  "dots-vertical": 61913,
  "dots-vertical-circle": 63427,
  "douban": 63129,
  "download": 61914,
  "download-multiple": 63976,
  "download-network": 63219,
  "drag": 61915,
  "drag-horizontal": 61916,
  "drag-vertical": 61917,
  "drawing": 61918,
  "drawing-box": 61919,
  "dribbble": 61920,
  "dribbble-box": 61921,
  "drone": 61922,
  "dropbox": 61923,
  "drupal": 61924,
  "duck": 61925,
  "dumbbell": 61926,
  "ear-hearing": 63428,
  "ear-hearing-off": 64068,
  "earth": 61927,
  "earth-box": 63180,
  "earth-box-off": 63181,
  "earth-off": 61928,
  "edge": 61929,
  "egg": 64174,
  "egg-easter": 64175,
  "eight-track": 63977,
  "eject": 61930,
  "elephant": 63429,
  "elevation-decline": 61931,
  "elevation-rise": 61932,
  "elevator": 61933,
  "email": 61934,
  "email-alert": 63182,
  "email-check": 64176,
  "email-check-outline": 64177,
  "email-lock": 61937,
  "email-open": 61935,
  "email-open-outline": 62959,
  "email-outline": 61936,
  "email-plus": 63978,
  "email-plus-outline": 63979,
  "email-search": 63840,
  "email-search-outline": 63841,
  "email-variant": 62960,
  "ember": 64277,
  "emby": 63155,
  "emoticon": 61938,
  "emoticon-cool": 61939,
  "emoticon-dead": 63130,
  "emoticon-devil": 61940,
  "emoticon-excited": 63131,
  "emoticon-happy": 61941,
  "emoticon-neutral": 61942,
  "emoticon-poop": 61943,
  "emoticon-sad": 61944,
  "emoticon-tongue": 61945,
  "engine": 61946,
  "engine-off": 64069,
  "engine-off-outline": 64070,
  "engine-outline": 61947,
  "equal": 61948,
  "equal-box": 61949,
  "eraser": 61950,
  "eraser-variant": 63042,
  "escalator": 61951,
  "et": 64178,
  "ethereum": 63593,
  "ethernet": 61952,
  "ethernet-cable": 61953,
  "ethernet-cable-off": 61954,
  "etsy": 61955,
  "ev-station": 62961,
  "eventbrite": 63430,
  "evernote": 61956,
  "exclamation": 61957,
  "exit-run": 64071,
  "exit-to-app": 61958,
  "expand-all": 64179,
  "expand-all-outline": 64180,
  "exponent": 63842,
  "exponent-box": 63843,
  "export": 61959,
  "eye": 61960,
  "eye-off": 61961,
  "eye-off-outline": 63184,
  "eye-outline": 63183,
  "eye-plus": 63594,
  "eye-plus-outline": 63595,
  "eye-settings": 63596,
  "eye-settings-outline": 63597,
  "eyedropper": 61962,
  "eyedropper-variant": 61963,
  "face": 63043,
  "face-profile": 63044,
  "facebook": 61964,
  "facebook-box": 61965,
  "facebook-messenger": 61966,
  "facebook-workplace": 64278,
  "factory": 61967,
  "fan": 61968,
  "fan-off": 63516,
  "fast-forward": 61969,
  "fast-forward-outline": 63185,
  "fax": 61970,
  "feather": 63186,
  "feature-search": 64072,
  "feature-search-outline": 64073,
  "fedora": 63706,
  "ferry": 61971,
  "file": 61972,
  "file-account": 63290,
  "file-alert": 64074,
  "file-alert-outline": 64075,
  "file-cabinet": 64181,
  "file-chart": 61973,
  "file-check": 61974,
  "file-cloud": 61975,
  "file-compare": 63657,
  "file-delimited": 61976,
  "file-document": 61977,
  "file-document-box": 61978,
  "file-document-box-multiple": 64182,
  "file-document-box-multiple-outline": 64183,
  "file-document-box-outline": 63980,
  "file-document-outline": 63981,
  "file-download": 63844,
  "file-download-outline": 63845,
  "file-excel": 61979,
  "file-excel-box": 61980,
  "file-export": 61981,
  "file-find": 61982,
  "file-hidden": 62995,
  "file-image": 61983,
  "file-import": 61984,
  "file-lock": 61985,
  "file-move": 64184,
  "file-multiple": 61986,
  "file-music": 61987,
  "file-outline": 61988,
  "file-pdf": 61989,
  "file-pdf-box": 61990,
  "file-percent": 63517,
  "file-plus": 63313,
  "file-powerpoint": 61991,
  "file-powerpoint-box": 61992,
  "file-presentation-box": 61993,
  "file-question": 63598,
  "file-replace": 64279,
  "file-replace-outline": 64280,
  "file-restore": 63088,
  "file-send": 61994,
  "file-tree": 63045,
  "file-undo": 63707,
  "file-upload": 64076,
  "file-upload-outline": 64077,
  "file-video": 61995,
  "file-word": 61996,
  "file-word-box": 61997,
  "file-xml": 61998,
  "film": 61999,
  "filmstrip": 62000,
  "filmstrip-off": 62001,
  "filter": 62002,
  "filter-outline": 62003,
  "filter-remove": 62004,
  "filter-remove-outline": 62005,
  "filter-variant": 62006,
  "finance": 63518,
  "find-replace": 63187,
  "fingerprint": 62007,
  "fire": 62008,
  "fire-truck": 63658,
  "firebase": 63846,
  "firefox": 62009,
  "fish": 62010,
  "flag": 62011,
  "flag-checkered": 62012,
  "flag-outline": 62013,
  "flag-triangle": 62015,
  "flag-variant": 62016,
  "flag-variant-outline": 62014,
  "flash": 62017,
  "flash-auto": 62018,
  "flash-circle": 63519,
  "flash-off": 62019,
  "flash-outline": 63188,
  "flash-red-eye": 63098,
  "flashlight": 62020,
  "flashlight-off": 62021,
  "flask": 61587,
  "flask-empty": 61588,
  "flask-empty-outline": 61589,
  "flask-outline": 61590,
  "flattr": 62022,
  "flip-to-back": 62023,
  "flip-to-front": 62024,
  "floor-lamp": 63708,
  "floor-plan": 63520,
  "floppy": 62025,
  "floppy-variant": 63982,
  "flower": 62026,
  "flower-outline": 63983,
  "flower-tulip": 63984,
  "flower-tulip-outline": 63985,
  "folder": 62027,
  "folder-account": 62028,
  "folder-clock": 64185,
  "folder-clock-outline": 64186,
  "folder-download": 62029,
  "folder-edit": 63709,
  "folder-google-drive": 62030,
  "folder-image": 62031,
  "folder-key": 63659,
  "folder-key-network": 63660,
  "folder-lock": 62032,
  "folder-lock-open": 62033,
  "folder-move": 62034,
  "folder-multiple": 62035,
  "folder-multiple-image": 62036,
  "folder-multiple-outline": 62037,
  "folder-network": 63599,
  "folder-open": 63343,
  "folder-outline": 62038,
  "folder-plus": 62039,
  "folder-remove": 62040,
  "folder-search": 63847,
  "folder-search-outline": 63848,
  "folder-star": 63132,
  "folder-upload": 62041,
  "font-awesome": 61498,
  "food": 62042,
  "food-apple": 62043,
  "food-croissant": 63431,
  "food-fork-drink": 62962,
  "food-off": 62963,
  "food-variant": 62044,
  "football": 62045,
  "football-australian": 62046,
  "football-helmet": 62047,
  "forklift": 63432,
  "format-align-bottom": 63314,
  "format-align-center": 62048,
  "format-align-justify": 62049,
  "format-align-left": 62050,
  "format-align-middle": 63315,
  "format-align-right": 62051,
  "format-align-top": 63316,
  "format-annotation-minus": 64187,
  "format-annotation-plus": 63046,
  "format-bold": 62052,
  "format-clear": 62053,
  "format-color-fill": 62054,
  "format-color-text": 63133,
  "format-columns": 63710,
  "format-float-center": 62055,
  "format-float-left": 62056,
  "format-float-none": 62057,
  "format-float-right": 62058,
  "format-font": 63189,
  "format-font-size-decrease": 63986,
  "format-font-size-increase": 63987,
  "format-header-1": 62059,
  "format-header-2": 62060,
  "format-header-3": 62061,
  "format-header-4": 62062,
  "format-header-5": 62063,
  "format-header-6": 62064,
  "format-header-decrease": 62065,
  "format-header-equal": 62066,
  "format-header-increase": 62067,
  "format-header-pound": 62068,
  "format-horizontal-align-center": 63006,
  "format-horizontal-align-left": 63007,
  "format-horizontal-align-right": 63008,
  "format-indent-decrease": 62069,
  "format-indent-increase": 62070,
  "format-italic": 62071,
  "format-letter-case": 64281,
  "format-letter-case-lower": 64282,
  "format-letter-case-upper": 64283,
  "format-line-spacing": 62072,
  "format-line-style": 62920,
  "format-line-weight": 62921,
  "format-list-bulleted": 62073,
  "format-list-bulleted-type": 62074,
  "format-list-checkbox": 63849,
  "format-list-checks": 63317,
  "format-list-numbers": 62075,
  "format-page-break": 63190,
  "format-paint": 62076,
  "format-paragraph": 62077,
  "format-pilcrow": 63191,
  "format-quote-close": 62078,
  "format-quote-open": 63318,
  "format-rotate-90": 63145,
  "format-section": 63134,
  "format-size": 62079,
  "format-strikethrough": 62080,
  "format-strikethrough-variant": 62081,
  "format-subscript": 62082,
  "format-superscript": 62083,
  "format-text": 62084,
  "format-textdirection-l-to-r": 62085,
  "format-textdirection-r-to-l": 62086,
  "format-title": 62964,
  "format-underline": 62087,
  "format-vertical-align-bottom": 63009,
  "format-vertical-align-center": 63010,
  "format-vertical-align-top": 63011,
  "format-wrap-inline": 62088,
  "format-wrap-square": 62089,
  "format-wrap-tight": 62090,
  "format-wrap-top-bottom": 62091,
  "forum": 62092,
  "forum-outline": 63521,
  "forward": 62093,
  "fountain": 63850,
  "foursquare": 62094,
  "freebsd": 63711,
  "fridge": 62095,
  "fridge-filled": 62096,
  "fridge-filled-bottom": 62097,
  "fridge-filled-top": 62098,
  "fuel": 63433,
  "fullscreen": 62099,
  "fullscreen-exit": 62100,
  "function": 62101,
  "function-variant": 63600,
  "gamepad": 62102,
  "gamepad-variant": 62103,
  "garage": 63192,
  "garage-alert": 63601,
  "garage-open": 63193,
  "gas-cylinder": 63047,
  "gas-station": 62104,
  "gate": 62105,
  "gate-and": 63712,
  "gate-nand": 63713,
  "gate-nor": 63714,
  "gate-not": 63715,
  "gate-or": 63716,
  "gate-xnor": 63717,
  "gate-xor": 63718,
  "gauge": 62106,
  "gauge-empty": 63602,
  "gauge-full": 63603,
  "gauge-low": 63604,
  "gavel": 62107,
  "gender-female": 62108,
  "gender-male": 62109,
  "gender-male-female": 62110,
  "gender-transgender": 62111,
  "gentoo": 63719,
  "gesture": 63434,
  "gesture-double-tap": 63291,
  "gesture-pinch": 64188,
  "gesture-spread": 64189,
  "gesture-swipe-down": 63292,
  "gesture-swipe-horizontal": 64190,
  "gesture-swipe-left": 63293,
  "gesture-swipe-right": 63294,
  "gesture-swipe-up": 63295,
  "gesture-swipe-vertical": 64191,
  "gesture-tap": 63296,
  "gesture-two-double-tap": 63297,
  "gesture-two-tap": 63298,
  "ghost": 62112,
  "ghost-off": 63988,
  "gift": 62113,
  "git": 62114,
  "github-box": 62115,
  "github-circle": 62116,
  "github-face": 63194,
  "glass-cocktail": 62294,
  "glass-flute": 62117,
  "glass-mug": 62118,
  "glass-stange": 62119,
  "glass-tulip": 62120,
  "glass-wine": 63605,
  "glassdoor": 62121,
  "glasses": 62122,
  "globe-model": 63720,
  "gmail": 62123,
  "gnome": 62124,
  "golf": 63522,
  "gondola": 63109,
  "google": 62125,
  "google-allo": 63489,
  "google-analytics": 63435,
  "google-assistant": 63436,
  "google-cardboard": 62126,
  "google-chrome": 62127,
  "google-circles": 62128,
  "google-circles-communities": 62129,
  "google-circles-extended": 62130,
  "google-circles-group": 62131,
  "google-controller": 62132,
  "google-controller-off": 62133,
  "google-drive": 62134,
  "google-earth": 62135,
  "google-fit": 63851,
  "google-glass": 62136,
  "google-hangouts": 62153,
  "google-home": 63523,
  "google-keep": 63195,
  "google-lens": 63989,
  "google-maps": 62965,
  "google-nearby": 62137,
  "google-pages": 62138,
  "google-photos": 63196,
  "google-physical-web": 62139,
  "google-play": 62140,
  "google-plus": 62141,
  "google-plus-box": 62142,
  "google-spreadsheet": 63990,
  "google-translate": 62143,
  "google-wallet": 62144,
  "gpu": 63661,
  "gradient": 63135,
  "graphql": 63606,
  "grease-pencil": 63048,
  "greater-than": 63852,
  "greater-than-or-equal": 63853,
  "grid": 62145,
  "grid-large": 63319,
  "grid-off": 62146,
  "group": 62147,
  "guitar-acoustic": 63344,
  "guitar-electric": 62148,
  "guitar-pick": 62149,
  "guitar-pick-outline": 62150,
  "guy-fawkes-mask": 63524,
  "hackernews": 63012,
  "hail": 64192,
  "hamburger": 63108,
  "hammer": 63721,
  "hand": 64078,
  "hand-okay": 64079,
  "hand-peace": 64080,
  "hand-peace-variant": 64081,
  "hand-pointing-down": 64082,
  "hand-pointing-left": 64083,
  "hand-pointing-right": 62151,
  "hand-pointing-up": 64084,
  "hanger": 62152,
  "hard-hat": 63854,
  "harddisk": 62154,
  "headphones": 62155,
  "headphones-bluetooth": 63855,
  "headphones-box": 62156,
  "headphones-off": 63437,
  "headphones-settings": 62157,
  "headset": 62158,
  "headset-dock": 62159,
  "headset-off": 62160,
  "heart": 62161,
  "heart-box": 62162,
  "heart-box-outline": 62163,
  "heart-broken": 62164,
  "heart-circle": 63856,
  "heart-circle-outline": 63857,
  "heart-half": 63198,
  "heart-half-full": 63197,
  "heart-half-outline": 63199,
  "heart-multiple": 64085,
  "heart-multiple-outline": 64086,
  "heart-off": 63320,
  "heart-outline": 62165,
  "heart-pulse": 62966,
  "helicopter": 64193,
  "help": 62166,
  "help-box": 63370,
  "help-circle": 62167,
  "help-circle-outline": 63013,
  "help-network": 63220,
  "hexagon": 62168,
  "hexagon-multiple": 63200,
  "hexagon-outline": 62169,
  "hexagon-slice-1": 64194,
  "hexagon-slice-2": 64195,
  "hexagon-slice-3": 64196,
  "hexagon-slice-4": 64197,
  "hexagon-slice-5": 64198,
  "hexagon-slice-6": 64199,
  "hexagram": 64200,
  "hexagram-outline": 64201,
  "high-definition": 63438,
  "high-definition-box": 63607,
  "highway": 62967,
  "hinduism": 63858,
  "history": 62170,
  "hockey-puck": 63608,
  "hockey-sticks": 63609,
  "hololens": 62171,
  "home": 62172,
  "home-account": 63525,
  "home-alert": 63610,
  "home-assistant": 63439,
  "home-automation": 63440,
  "home-circle": 63441,
  "home-currency-usd": 63662,
  "home-heart": 63526,
  "home-lock": 63722,
  "home-lock-open": 63723,
  "home-map-marker": 62968,
  "home-minus": 63859,
  "home-modern": 62173,
  "home-outline": 63136,
  "home-plus": 63860,
  "home-variant": 62174,
  "hook": 63201,
  "hook-off": 63202,
  "hops": 62175,
  "horseshoe": 64087,
  "hospital": 62176,
  "hospital-building": 62177,
  "hospital-marker": 62178,
  "hot-tub": 63527,
  "hotel": 62179,
  "houzz": 62180,
  "houzz-box": 62181,
  "hulu": 63528,
  "human": 62182,
  "human-child": 62183,
  "human-female": 63049,
  "human-female-boy": 64088,
  "human-female-female": 64089,
  "human-female-girl": 64090,
  "human-greeting": 63050,
  "human-handsdown": 63051,
  "human-handsup": 63052,
  "human-male": 63053,
  "human-male-boy": 64091,
  "human-male-female": 62184,
  "human-male-girl": 64092,
  "human-male-male": 64093,
  "human-pregnant": 62927,
  "humble-bundle": 63299,
  "ice-cream": 63529,
  "image": 62185,
  "image-album": 62186,
  "image-area": 62187,
  "image-area-close": 62188,
  "image-broken": 62189,
  "image-broken-variant": 62190,
  "image-filter": 62191,
  "image-filter-black-white": 62192,
  "image-filter-center-focus": 62193,
  "image-filter-center-focus-weak": 62194,
  "image-filter-drama": 62195,
  "image-filter-frames": 62196,
  "image-filter-hdr": 62197,
  "image-filter-none": 62198,
  "image-filter-tilt-shift": 62199,
  "image-filter-vintage": 62200,
  "image-move": 63991,
  "image-multiple": 62201,
  "image-off": 63530,
  "image-outline": 63861,
  "image-plus": 63611,
  "image-search": 63862,
  "image-search-outline": 63863,
  "import": 62202,
  "inbox": 63110,
  "inbox-arrow-down": 62203,
  "inbox-arrow-up": 62417,
  "inbox-multiple": 63663,
  "incognito": 62969,
  "infinity": 63203,
  "information": 62204,
  "information-outline": 62205,
  "information-variant": 63054,
  "instagram": 62206,
  "instapaper": 62207,
  "internet-explorer": 62208,
  "invert-colors": 62209,
  "ip": 64094,
  "ip-network": 64095,
  "islam": 63864,
  "itunes": 63094,
  "jeepney": 62210,
  "jira": 62211,
  "jquery": 63612,
  "jsfiddle": 62212,
  "json": 63014,
  "judaism": 63865,
  "karate": 63531,
  "keg": 62213,
  "kettle": 62970,
  "key": 62214,
  "key-change": 62215,
  "key-minus": 62216,
  "key-plus": 62217,
  "key-remove": 62218,
  "key-variant": 62219,
  "keyboard": 62220,
  "keyboard-backspace": 62221,
  "keyboard-caps": 62222,
  "keyboard-close": 62223,
  "keyboard-off": 62224,
  "keyboard-outline": 63866,
  "keyboard-return": 62225,
  "keyboard-settings": 63992,
  "keyboard-settings-outline": 63993,
  "keyboard-tab": 62226,
  "keyboard-variant": 62227,
  "kickstarter": 63300,
  "knife": 63994,
  "knife-military": 63995,
  "kodi": 62228,
  "label": 62229,
  "label-off": 64202,
  "label-off-outline": 64203,
  "label-outline": 62230,
  "label-variant": 64204,
  "label-variant-outline": 64205,
  "ladybug": 63532,
  "lambda": 63015,
  "lamp": 63156,
  "lan": 62231,
  "lan-connect": 62232,
  "lan-disconnect": 62233,
  "lan-pending": 62234,
  "language-c": 63089,
  "language-cpp": 63090,
  "language-csharp": 62235,
  "language-css3": 62236,
  "language-go": 63442,
  "language-html5": 62237,
  "language-java": 64284,
  "language-javascript": 62238,
  "language-lua": 63664,
  "language-php": 62239,
  "language-python": 62240,
  "language-python-text": 62241,
  "language-r": 63443,
  "language-ruby-on-rails": 64206,
  "language-swift": 63204,
  "language-typescript": 63205,
  "laptop": 62242,
  "laptop-chromebook": 62243,
  "laptop-mac": 62244,
  "laptop-off": 63206,
  "laptop-windows": 62245,
  "laravel": 64207,
  "lastfm": 62246,
  "lastpass": 62534,
  "launch": 62247,
  "lava-lamp": 63444,
  "layers": 62248,
  "layers-off": 62249,
  "layers-off-outline": 63996,
  "layers-outline": 63997,
  "lead-pencil": 63055,
  "leaf": 62250,
  "led-off": 62251,
  "led-on": 62252,
  "led-outline": 62253,
  "led-strip": 63445,
  "led-variant-off": 62254,
  "led-variant-on": 62255,
  "led-variant-outline": 62256,
  "less-than": 63867,
  "less-than-or-equal": 63868,
  "library": 62257,
  "library-books": 62258,
  "library-music": 62259,
  "library-plus": 62260,
  "lifebuoy": 63613,
  "light-switch": 63869,
  "lightbulb": 62261,
  "lightbulb-on": 63207,
  "lightbulb-on-outline": 63208,
  "lightbulb-outline": 62262,
  "lighthouse": 63998,
  "lighthouse-on": 63999,
  "link": 62263,
  "link-off": 62264,
  "link-variant": 62265,
  "link-variant-off": 62266,
  "linkedin": 62267,
  "linkedin-box": 62268,
  "linux": 62269,
  "linux-mint": 63724,
  "litecoin": 64096,
  "loading": 63345,
  "lock": 62270,
  "lock-alert": 63725,
  "lock-clock": 63870,
  "lock-open": 62271,
  "lock-open-outline": 62272,
  "lock-outline": 62273,
  "lock-pattern": 63209,
  "lock-plus": 62971,
  "lock-question": 63726,
  "lock-reset": 63346,
  "lock-smart": 63665,
  "locker": 63446,
  "locker-multiple": 63447,
  "login": 62274,
  "login-variant": 62972,
  "logout": 62275,
  "logout-variant": 62973,
  "looks": 62276,
  "loop": 63210,
  "loupe": 62277,
  "lumx": 62278,
  "lyft": 64285,
  "magnet": 62279,
  "magnet-on": 62280,
  "magnify": 62281,
  "magnify-close": 63871,
  "magnify-minus": 62282,
  "magnify-minus-cursor": 64097,
  "magnify-minus-outline": 63211,
  "magnify-plus": 62283,
  "magnify-plus-cursor": 64098,
  "magnify-plus-outline": 63212,
  "mail-ru": 62284,
  "mailbox": 63213,
  "map": 62285,
  "map-legend": 64000,
  "map-marker": 62286,
  "map-marker-circle": 62287,
  "map-marker-distance": 63727,
  "map-marker-minus": 63056,
  "map-marker-multiple": 62288,
  "map-marker-off": 62289,
  "map-marker-outline": 63448,
  "map-marker-plus": 63057,
  "map-marker-radius": 62290,
  "map-minus": 63872,
  "map-outline": 63873,
  "map-plus": 63874,
  "map-search": 63875,
  "map-search-outline": 63876,
  "margin": 62291,
  "markdown": 62292,
  "marker": 63058,
  "marker-check": 62293,
  "mastodon": 64208,
  "mastodon-variant": 64209,
  "material-design": 63877,
  "material-ui": 62295,
  "math-compass": 62296,
  "matrix": 63016,
  "maxcdn": 62297,
  "medal": 63878,
  "medical-bag": 63214,
  "medium": 62298,
  "meetup": 64210,
  "memory": 62299,
  "menu": 62300,
  "menu-down": 62301,
  "menu-down-outline": 63157,
  "menu-left": 62302,
  "menu-left-outline": 64001,
  "menu-right": 62303,
  "menu-right-outline": 64002,
  "menu-swap": 64099,
  "menu-swap-outline": 64100,
  "menu-up": 62304,
  "menu-up-outline": 63158,
  "message": 62305,
  "message-alert": 62306,
  "message-alert-outline": 64003,
  "message-bulleted": 63137,
  "message-bulleted-off": 63138,
  "message-draw": 62307,
  "message-image": 62308,
  "message-outline": 62309,
  "message-plus": 63059,
  "message-processing": 62310,
  "message-reply": 62311,
  "message-reply-text": 62312,
  "message-settings": 63215,
  "message-settings-variant": 63216,
  "message-text": 62313,
  "message-text-outline": 62314,
  "message-video": 62315,
  "meteor": 63017,
  "metronome": 63449,
  "metronome-tick": 63450,
  "micro-sd": 63451,
  "microphone": 62316,
  "microphone-minus": 63666,
  "microphone-off": 62317,
  "microphone-outline": 62318,
  "microphone-plus": 63667,
  "microphone-settings": 62319,
  "microphone-variant": 62320,
  "microphone-variant-off": 62321,
  "microscope": 63060,
  "microsoft": 62322,
  "microsoft-dynamics": 63879,
  "midi": 63728,
  "midi-port": 63729,
  "minecraft": 62323,
  "mini-sd": 64004,
  "minidisc": 64005,
  "minus": 62324,
  "minus-box": 62325,
  "minus-box-outline": 63217,
  "minus-circle": 62326,
  "minus-circle-outline": 62327,
  "minus-network": 62328,
  "mixcloud": 63018,
  "mixed-reality": 63614,
  "mixer": 63452,
  "monitor": 62329,
  "monitor-cellphone": 63880,
  "monitor-cellphone-star": 63881,
  "monitor-dashboard": 64006,
  "monitor-multiple": 62330,
  "more": 62331,
  "motorbike": 62332,
  "mouse": 62333,
  "mouse-bluetooth": 63882,
  "mouse-off": 62334,
  "mouse-variant": 62335,
  "mouse-variant-off": 62336,
  "move-resize": 63061,
  "move-resize-variant": 63062,
  "movie": 62337,
  "movie-roll": 63453,
  "muffin": 63883,
  "multiplication": 62338,
  "multiplication-box": 62339,
  "mushroom": 63454,
  "mushroom-outline": 63455,
  "music": 63321,
  "music-box": 62340,
  "music-box-outline": 62341,
  "music-circle": 62342,
  "music-circle-outline": 64211,
  "music-note": 62343,
  "music-note-bluetooth": 62974,
  "music-note-bluetooth-off": 62975,
  "music-note-eighth": 62344,
  "music-note-half": 62345,
  "music-note-off": 62346,
  "music-note-quarter": 62347,
  "music-note-sixteenth": 62348,
  "music-note-whole": 62349,
  "music-off": 63322,
  "nas": 63730,
  "nativescript": 63615,
  "nature": 62350,
  "nature-people": 62351,
  "navigation": 62352,
  "near-me": 62925,
  "needle": 62353,
  "netflix": 63301,
  "network": 63218,
  "network-strength-1": 63731,
  "network-strength-1-alert": 63732,
  "network-strength-2": 63733,
  "network-strength-2-alert": 63734,
  "network-strength-3": 63735,
  "network-strength-3-alert": 63736,
  "network-strength-4": 63737,
  "network-strength-4-alert": 63738,
  "network-strength-off": 63739,
  "network-strength-off-outline": 63740,
  "network-strength-outline": 63741,
  "new-box": 62356,
  "newspaper": 62357,
  "nfc": 62358,
  "nfc-tap": 62359,
  "nfc-variant": 62360,
  "ninja": 63347,
  "nintendo-switch": 63456,
  "nodejs": 62361,
  "not-equal": 63884,
  "not-equal-variant": 63885,
  "note": 62362,
  "note-multiple": 63159,
  "note-multiple-outline": 63160,
  "note-outline": 62363,
  "note-plus": 62364,
  "note-plus-outline": 62365,
  "note-text": 62366,
  "notebook": 63533,
  "notification-clear-all": 62367,
  "npm": 63222,
  "npm-variant": 63886,
  "npm-variant-outline": 63887,
  "nuke": 63139,
  "null": 63457,
  "numeric": 62368,
  "numeric-0": 48,
  "numeric-0-box": 62369,
  "numeric-0-box-multiple-outline": 62370,
  "numeric-0-box-outline": 62371,
  "numeric-1": 49,
  "numeric-1-box": 62372,
  "numeric-1-box-multiple-outline": 62373,
  "numeric-1-box-outline": 62374,
  "numeric-2": 50,
  "numeric-2-box": 62375,
  "numeric-2-box-multiple-outline": 62376,
  "numeric-2-box-outline": 62377,
  "numeric-3": 51,
  "numeric-3-box": 62378,
  "numeric-3-box-multiple-outline": 62379,
  "numeric-3-box-outline": 62380,
  "numeric-4": 52,
  "numeric-4-box": 62381,
  "numeric-4-box-multiple-outline": 62382,
  "numeric-4-box-outline": 62383,
  "numeric-5": 53,
  "numeric-5-box": 62384,
  "numeric-5-box-multiple-outline": 62385,
  "numeric-5-box-outline": 62386,
  "numeric-6": 54,
  "numeric-6-box": 62387,
  "numeric-6-box-multiple-outline": 62388,
  "numeric-6-box-outline": 62389,
  "numeric-7": 55,
  "numeric-7-box": 62390,
  "numeric-7-box-multiple-outline": 62391,
  "numeric-7-box-outline": 62392,
  "numeric-8": 56,
  "numeric-8-box": 62393,
  "numeric-8-box-multiple-outline": 62394,
  "numeric-8-box-outline": 62395,
  "numeric-9": 57,
  "numeric-9-box": 62396,
  "numeric-9-box-multiple-outline": 62397,
  "numeric-9-box-outline": 62398,
  "numeric-9-plus-box": 62399,
  "numeric-9-plus-box-multiple-outline": 62400,
  "numeric-9-plus-box-outline": 62401,
  "nut": 63223,
  "nutrition": 62402,
  "oar": 63099,
  "octagon": 62403,
  "octagon-outline": 62404,
  "octagram": 63224,
  "octagram-outline": 63348,
  "odnoklassniki": 62405,
  "office": 62406,
  "office-building": 63888,
  "oil": 62407,
  "oil-temperature": 62408,
  "omega": 62409,
  "onedrive": 62410,
  "onenote": 63302,
  "onepassword": 63616,
  "opacity": 62924,
  "open-in-app": 62411,
  "open-in-new": 62412,
  "openid": 62413,
  "opera": 62414,
  "orbit": 61464,
  "origin": 64299,
  "ornament": 62415,
  "ornament-variant": 62416,
  "owl": 62418,
  "package": 62419,
  "package-down": 62420,
  "package-up": 62421,
  "package-variant": 62422,
  "package-variant-closed": 62423,
  "page-first": 62976,
  "page-last": 62977,
  "page-layout-body": 63225,
  "page-layout-footer": 63226,
  "page-layout-header": 63227,
  "page-layout-sidebar-left": 63228,
  "page-layout-sidebar-right": 63229,
  "palette": 62424,
  "palette-advanced": 62425,
  "palette-swatch": 63668,
  "panda": 62426,
  "pandora": 62427,
  "panorama": 62428,
  "panorama-fisheye": 62429,
  "panorama-horizontal": 62430,
  "panorama-vertical": 62431,
  "panorama-wide-angle": 62432,
  "paper-cut-vertical": 62433,
  "paperclip": 62434,
  "parking": 62435,
  "passport": 63458,
  "patreon": 63617,
  "pause": 62436,
  "pause-circle": 62437,
  "pause-circle-outline": 62438,
  "pause-octagon": 62439,
  "pause-octagon-outline": 62440,
  "paw": 62441,
  "paw-off": 63063,
  "paypal": 63618,
  "peace": 63619,
  "pen": 62442,
  "pencil": 62443,
  "pencil-box": 62444,
  "pencil-box-outline": 62445,
  "pencil-circle": 63230,
  "pencil-circle-outline": 63349,
  "pencil-lock": 62446,
  "pencil-off": 62447,
  "pentagon": 63231,
  "pentagon-outline": 63232,
  "percent": 62448,
  "periodic-table": 63669,
  "periodic-table-co2": 63459,
  "periscope": 63303,
  "pharmacy": 62449,
  "phone": 62450,
  "phone-bluetooth": 62451,
  "phone-classic": 62978,
  "phone-forward": 62452,
  "phone-hangup": 62453,
  "phone-in-talk": 62454,
  "phone-incoming": 62455,
  "phone-lock": 62456,
  "phone-log": 62457,
  "phone-minus": 63064,
  "phone-missed": 62458,
  "phone-outgoing": 62459,
  "phone-paused": 62460,
  "phone-plus": 63065,
  "phone-return": 63534,
  "phone-rotate-landscape": 63620,
  "phone-rotate-portrait": 63621,
  "phone-settings": 62461,
  "phone-voip": 62462,
  "pi": 62463,
  "pi-box": 62464,
  "piano": 63100,
  "pickaxe": 63670,
  "pier": 63622,
  "pier-crane": 63623,
  "pig": 62465,
  "pill": 62466,
  "pillar": 63233,
  "pin": 62467,
  "pin-off": 62468,
  "pin-off-outline": 63791,
  "pin-outline": 63792,
  "pine-tree": 62469,
  "pine-tree-box": 62470,
  "pinterest": 62471,
  "pinterest-box": 62472,
  "pinwheel": 64212,
  "pinwheel-outline": 64213,
  "pipe": 63460,
  "pipe-disconnected": 63461,
  "pipe-leak": 63624,
  "pirate": 64007,
  "pistol": 63234,
  "piston": 63625,
  "pizza": 62473,
  "plane-shield": 63162,
  "play": 62474,
  "play-box-outline": 62475,
  "play-circle": 62476,
  "play-circle-outline": 62477,
  "play-network": 63626,
  "play-pause": 62478,
  "play-protected-content": 62479,
  "play-speed": 63742,
  "playlist-check": 62919,
  "playlist-edit": 63743,
  "playlist-minus": 62480,
  "playlist-play": 62481,
  "playlist-plus": 62482,
  "playlist-remove": 62483,
  "playstation": 62484,
  "plex": 63161,
  "plus": 62485,
  "plus-box": 62486,
  "plus-box-outline": 63235,
  "plus-circle": 62487,
  "plus-circle-multiple-outline": 62488,
  "plus-circle-outline": 62489,
  "plus-minus": 63889,
  "plus-minus-box": 63890,
  "plus-network": 62490,
  "plus-one": 62491,
  "plus-outline": 63236,
  "pocket": 62492,
  "podcast": 63891,
  "pokeball": 62493,
  "pokemon-go": 64008,
  "poker-chip": 63535,
  "polaroid": 62494,
  "poll": 62495,
  "poll-box": 62496,
  "polymer": 62497,
  "pool": 62982,
  "popcorn": 62498,
  "pot": 63066,
  "pot-mix": 63067,
  "pound": 62499,
  "pound-box": 62500,
  "power": 62501,
  "power-cycle": 63744,
  "power-off": 63745,
  "power-on": 63746,
  "power-plug": 63140,
  "power-plug-off": 63141,
  "power-settings": 62502,
  "power-sleep": 63747,
  "power-socket": 62503,
  "power-socket-au": 63748,
  "power-socket-eu": 63462,
  "power-socket-uk": 63463,
  "power-socket-us": 63464,
  "power-standby": 63749,
  "powershell": 64009,
  "prescription": 63237,
  "presentation": 62504,
  "presentation-play": 62505,
  "printer": 62506,
  "printer-3d": 62507,
  "printer-alert": 62508,
  "printer-settings": 63238,
  "printer-wireless": 64010,
  "priority-high": 62979,
  "priority-low": 62980,
  "professional-hexagon": 62509,
  "progress-check": 63892,
  "progress-clock": 63893,
  "progress-download": 63894,
  "progress-upload": 63895,
  "projector": 62510,
  "projector-screen": 62511,
  "publish": 63142,
  "pulse": 62512,
  "puzzle": 62513,
  "puzzle-outline": 64101,
  "qi": 63896,
  "qqchat": 62981,
  "qrcode": 62514,
  "qrcode-edit": 63671,
  "qrcode-scan": 62515,
  "quadcopter": 62516,
  "quality-high": 62517,
  "quality-low": 64011,
  "quality-medium": 64012,
  "quicktime": 62518,
  "rabbit": 63750,
  "radar": 62519,
  "radiator": 62520,
  "radiator-disabled": 64214,
  "radiator-off": 64215,
  "radio": 62521,
  "radio-handheld": 62522,
  "radio-tower": 62523,
  "radioactive": 62524,
  "radiobox-blank": 62525,
  "radiobox-marked": 62526,
  "raspberrypi": 62527,
  "ray-end": 62528,
  "ray-end-arrow": 62529,
  "ray-start": 62530,
  "ray-start-arrow": 62531,
  "ray-start-end": 62532,
  "ray-vertex": 62533,
  "react": 63239,
  "read": 62535,
  "receipt": 62537,
  "record": 62538,
  "record-player": 63897,
  "record-rec": 62539,
  "recycle": 62540,
  "reddit": 62541,
  "redo": 62542,
  "redo-variant": 62543,
  "reflect-horizontal": 64013,
  "reflect-vertical": 64014,
  "refresh": 62544,
  "regex": 62545,
  "registered-trademark": 64102,
  "relative-scale": 62546,
  "reload": 62547,
  "reminder": 63627,
  "remote": 62548,
  "remote-desktop": 63672,
  "rename-box": 62549,
  "reorder-horizontal": 63111,
  "reorder-vertical": 63112,
  "repeat": 62550,
  "repeat-off": 62551,
  "repeat-once": 62552,
  "replay": 62553,
  "reply": 62554,
  "reply-all": 62555,
  "reproduction": 62556,
  "resistor": 64287,
  "resistor-nodes": 64288,
  "resize": 64103,
  "resize-bottom-right": 62557,
  "responsive": 62558,
  "restart": 63240,
  "restore": 63898,
  "restore-clock": 63143,
  "rewind": 62559,
  "rewind-outline": 63241,
  "rhombus": 63242,
  "rhombus-medium": 64015,
  "rhombus-outline": 63243,
  "rhombus-split": 64016,
  "ribbon": 62560,
  "rice": 63465,
  "ring": 63466,
  "road": 62561,
  "road-variant": 62562,
  "robot": 63144,
  "robot-industrial": 64289,
  "robot-vacuum": 63244,
  "robot-vacuum-variant": 63751,
  "rocket": 62563,
  "room-service": 63628,
  "rotate-3d": 62564,
  "rotate-left": 62565,
  "rotate-left-variant": 62566,
  "rotate-right": 62567,
  "rotate-right-variant": 62568,
  "rounded-corner": 62983,
  "router-wireless": 62569,
  "router-wireless-settings": 64104,
  "routes": 62570,
  "rowing": 62984,
  "rss": 62571,
  "rss-box": 62572,
  "ruler": 62573,
  "run": 63245,
  "run-fast": 62574,
  "safe": 64105,
  "sale": 62575,
  "salesforce": 63629,
  "sass": 63467,
  "satellite": 62576,
  "satellite-uplink": 63752,
  "satellite-variant": 62577,
  "sausage": 63673,
  "saxophone": 62985,
  "scale": 62578,
  "scale-balance": 62929,
  "scale-bathroom": 62579,
  "scanner": 63146,
  "scanner-off": 63753,
  "school": 62580,
  "scissors-cutting": 64106,
  "screen-rotation": 62581,
  "screen-rotation-lock": 62582,
  "screwdriver": 62583,
  "script": 62584,
  "sd": 62585,
  "seal": 62586,
  "search-web": 63246,
  "seat-flat": 62587,
  "seat-flat-angled": 62588,
  "seat-individual-suite": 62589,
  "seat-legroom-extra": 62590,
  "seat-legroom-normal": 62591,
  "seat-legroom-reduced": 62592,
  "seat-recline-extra": 62593,
  "seat-recline-normal": 62594,
  "security": 62595,
  "security-account": 63630,
  "security-account-outline": 64017,
  "security-close": 63899,
  "security-home": 63113,
  "security-lock": 63900,
  "security-network": 62596,
  "security-off": 63901,
  "select": 62597,
  "select-all": 62598,
  "select-compare": 64216,
  "select-drag": 64107,
  "select-inverse": 62599,
  "select-off": 62600,
  "selection": 62601,
  "selection-drag": 64108,
  "selection-off": 63350,
  "send": 62602,
  "send-lock": 63468,
  "serial-port": 63068,
  "server": 62603,
  "server-minus": 62604,
  "server-network": 62605,
  "server-network-off": 62606,
  "server-off": 62607,
  "server-plus": 62608,
  "server-remove": 62609,
  "server-security": 62610,
  "set-all": 63351,
  "set-center": 63352,
  "set-center-right": 63353,
  "set-left": 63354,
  "set-left-center": 63355,
  "set-left-right": 63356,
  "set-none": 63357,
  "set-right": 63358,
  "set-top-box": 63902,
  "settings": 62611,
  "settings-box": 62612,
  "settings-helper": 64109,
  "settings-outline": 63674,
  "shape": 63536,
  "shape-circle-plus": 63069,
  "shape-outline": 63537,
  "shape-plus": 62613,
  "shape-polygon-plus": 63070,
  "shape-rectangle-plus": 63071,
  "shape-square-plus": 63072,
  "share": 62614,
  "share-outline": 63793,
  "share-variant": 62615,
  "shield": 62616,
  "shield-half-full": 63359,
  "shield-outline": 62617,
  "shield-plus": 64217,
  "shield-plus-outline": 64218,
  "shield-remove": 64219,
  "shield-remove-outline": 64220,
  "ship-wheel": 63538,
  "shoe-formal": 64290,
  "shoe-heel": 64291,
  "shopify": 64221,
  "shopping": 62618,
  "shopping-music": 62619,
  "shovel": 63247,
  "shovel-off": 63248,
  "shower": 63903,
  "shower-head": 63904,
  "shredder": 62620,
  "shuffle": 62621,
  "shuffle-disabled": 62622,
  "shuffle-variant": 62623,
  "sigma": 62624,
  "sigma-lower": 63019,
  "sign-caution": 62625,
  "sign-direction": 63360,
  "sign-text": 63361,
  "signal": 62626,
  "signal-2g": 63249,
  "signal-3g": 63250,
  "signal-4g": 63251,
  "signal-5g": 64110,
  "signal-cellular-1": 63675,
  "signal-cellular-2": 63676,
  "signal-cellular-3": 63677,
  "signal-cellular-outline": 63678,
  "signal-hspa": 63252,
  "signal-hspa-plus": 63253,
  "signal-off": 63362,
  "signal-variant": 62986,
  "silo": 64292,
  "silverware": 62627,
  "silverware-fork": 62628,
  "silverware-fork-knife": 64111,
  "silverware-spoon": 62629,
  "silverware-variant": 62630,
  "sim": 62631,
  "sim-alert": 62632,
  "sim-off": 62633,
  "sina-weibo": 64222,
  "sitemap": 62634,
  "skip-backward": 62635,
  "skip-forward": 62636,
  "skip-next": 62637,
  "skip-next-circle": 63073,
  "skip-next-circle-outline": 63074,
  "skip-previous": 62638,
  "skip-previous-circle": 63075,
  "skip-previous-circle-outline": 63076,
  "skull": 63115,
  "skype": 62639,
  "skype-business": 62640,
  "slack": 62641,
  "slackware": 63754,
  "sleep": 62642,
  "sleep-off": 62643,
  "smog": 64112,
  "smoke-detector": 62354,
  "smoking": 62644,
  "smoking-off": 62645,
  "snapchat": 62646,
  "snowflake": 63254,
  "snowman": 62647,
  "soccer": 62648,
  "soccer-field": 63539,
  "sofa": 62649,
  "solar-power": 64113,
  "solid": 63116,
  "sort": 62650,
  "sort-alphabetical": 62651,
  "sort-ascending": 62652,
  "sort-descending": 62653,
  "sort-numeric": 62654,
  "sort-variant": 62655,
  "soundcloud": 62656,
  "source-branch": 63020,
  "source-commit": 63255,
  "source-commit-end": 63256,
  "source-commit-end-local": 63257,
  "source-commit-local": 63258,
  "source-commit-next-local": 63259,
  "source-commit-start": 63260,
  "source-commit-start-next-local": 63261,
  "source-fork": 62657,
  "source-merge": 63021,
  "source-pull": 62658,
  "soy-sauce": 63469,
  "speaker": 62659,
  "speaker-bluetooth": 63905,
  "speaker-off": 62660,
  "speaker-wireless": 63262,
  "speedometer": 62661,
  "spellcheck": 62662,
  "spotify": 62663,
  "spotlight": 62664,
  "spotlight-beam": 62665,
  "spray": 63077,
  "spray-bottle": 64223,
  "square": 63331,
  "square-edit-outline": 63755,
  "square-inc": 62666,
  "square-inc-cash": 62667,
  "square-medium": 64018,
  "square-medium-outline": 64019,
  "square-outline": 63330,
  "square-root": 63363,
  "square-root-box": 63906,
  "square-small": 64020,
  "squeegee": 64224,
  "ssh": 63679,
  "stack-exchange": 62987,
  "stack-overflow": 62668,
  "stadium": 63263,
  "stairs": 62669,
  "standard-definition": 63470,
  "star": 62670,
  "star-box": 64114,
  "star-box-outline": 64115,
  "star-circle": 62671,
  "star-circle-outline": 63907,
  "star-face": 63908,
  "star-four-points": 64225,
  "star-four-points-outline": 64226,
  "star-half": 62672,
  "star-off": 62673,
  "star-outline": 62674,
  "star-three-points": 64227,
  "star-three-points-outline": 64228,
  "steam": 62675,
  "steam-box": 63756,
  "steering": 62676,
  "steering-off": 63757,
  "step-backward": 62677,
  "step-backward-2": 62678,
  "step-forward": 62679,
  "step-forward-2": 62680,
  "stethoscope": 62681,
  "sticker": 62928,
  "sticker-emoji": 63364,
  "stocking": 62682,
  "stop": 62683,
  "stop-circle": 63078,
  "stop-circle-outline": 63079,
  "store": 62684,
  "store-24-hour": 62685,
  "stove": 62686,
  "strava": 64293,
  "subdirectory-arrow-left": 62988,
  "subdirectory-arrow-right": 62989,
  "subtitles": 64021,
  "subtitles-outline": 64022,
  "subway": 63147,
  "subway-variant": 62687,
  "summit": 63365,
  "sunglasses": 62688,
  "surround-sound": 62917,
  "surround-sound-2-0": 63471,
  "surround-sound-3-1": 63472,
  "surround-sound-5-1": 63473,
  "surround-sound-7-1": 63474,
  "svg": 63264,
  "swap-horizontal": 62689,
  "swap-horizontal-variant": 63680,
  "swap-vertical": 62690,
  "swap-vertical-variant": 63681,
  "swim": 62691,
  "switch": 62692,
  "sword": 62693,
  "sword-cross": 63366,
  "symfony": 64229,
  "sync": 62694,
  "sync-alert": 62695,
  "sync-off": 62696,
  "tab": 62697,
  "tab-minus": 64294,
  "tab-plus": 63323,
  "tab-remove": 64295,
  "tab-unselected": 62698,
  "table": 62699,
  "table-border": 64023,
  "table-column": 63540,
  "table-column-plus-after": 62700,
  "table-column-plus-before": 62701,
  "table-column-remove": 62702,
  "table-column-width": 62703,
  "table-edit": 62704,
  "table-large": 62705,
  "table-merge-cells": 63909,
  "table-of-contents": 63541,
  "table-plus": 64116,
  "table-remove": 64117,
  "table-row": 63542,
  "table-row-height": 62706,
  "table-row-plus-after": 62707,
  "table-row-plus-before": 62708,
  "table-row-remove": 62709,
  "table-search": 63758,
  "table-settings": 63543,
  "tablet": 62710,
  "tablet-android": 62711,
  "tablet-cellphone": 63910,
  "tablet-ipad": 62712,
  "taco": 63329,
  "tag": 62713,
  "tag-faces": 62714,
  "tag-heart": 63114,
  "tag-minus": 63759,
  "tag-multiple": 62715,
  "tag-outline": 62716,
  "tag-plus": 63265,
  "tag-remove": 63266,
  "tag-text-outline": 62717,
  "tape-measure": 64296,
  "target": 62718,
  "target-variant": 64118,
  "taxi": 62719,
  "teach": 63631,
  "teamviewer": 62720,
  "telegram": 62721,
  "telescope": 64297,
  "television": 62722,
  "television-box": 63544,
  "television-classic": 63475,
  "television-classic-off": 63545,
  "television-guide": 62723,
  "television-off": 63546,
  "temperature-celsius": 62724,
  "temperature-fahrenheit": 62725,
  "temperature-kelvin": 62726,
  "tennis": 62727,
  "tent": 62728,
  "terrain": 62729,
  "test-tube": 63080,
  "test-tube-empty": 63760,
  "test-tube-off": 63761,
  "text": 63911,
  "text-shadow": 63081,
  "text-short": 63912,
  "text-subject": 63913,
  "text-to-speech": 62730,
  "text-to-speech-off": 62731,
  "textbox": 62990,
  "textbox-password": 63476,
  "texture": 62732,
  "theater": 62733,
  "theme-light-dark": 62734,
  "thermometer": 62735,
  "thermometer-lines": 62736,
  "thermostat": 62355,
  "thermostat-box": 63632,
  "thought-bubble": 63477,
  "thought-bubble-outline": 63478,
  "thumb-down": 62737,
  "thumb-down-outline": 62738,
  "thumb-up": 62739,
  "thumb-up-outline": 62740,
  "thumbs-up-down": 62741,
  "ticket": 62742,
  "ticket-account": 62743,
  "ticket-confirmation": 62744,
  "ticket-outline": 63762,
  "ticket-percent": 63267,
  "tie": 62745,
  "tilde": 63268,
  "timelapse": 62746,
  "timer": 62747,
  "timer-10": 62748,
  "timer-3": 62749,
  "timer-off": 62750,
  "timer-sand": 62751,
  "timer-sand-empty": 63148,
  "timer-sand-full": 63371,
  "timetable": 62752,
  "toggle-switch": 62753,
  "toggle-switch-off": 62754,
  "toggle-switch-off-outline": 64024,
  "toggle-switch-outline": 64025,
  "toilet": 63914,
  "toolbox": 63915,
  "toolbox-outline": 63916,
  "tooltip": 62755,
  "tooltip-edit": 62756,
  "tooltip-image": 62757,
  "tooltip-outline": 62758,
  "tooltip-outline-plus": 62759,
  "tooltip-text": 62760,
  "tooth": 63682,
  "tooth-outline": 62761,
  "tor": 62762,
  "tournament": 63917,
  "tower-beach": 63104,
  "tower-fire": 63105,
  "towing": 63547,
  "track-light": 63763,
  "trackpad": 63479,
  "trackpad-lock": 63794,
  "tractor": 63633,
  "trademark": 64119,
  "traffic-light": 62763,
  "train": 62764,
  "train-variant": 63683,
  "tram": 62765,
  "transcribe": 62766,
  "transcribe-close": 62767,
  "transfer": 62768,
  "transit-transfer": 63149,
  "transition": 63764,
  "transition-masked": 63765,
  "translate": 62922,
  "trash-can": 64120,
  "trash-can-outline": 64121,
  "treasure-chest": 63269,
  "tree": 62769,
  "trello": 62770,
  "trending-down": 62771,
  "trending-neutral": 62772,
  "trending-up": 62773,
  "triangle": 62774,
  "triangle-outline": 62775,
  "trophy": 62776,
  "trophy-award": 62777,
  "trophy-outline": 62778,
  "trophy-variant": 62779,
  "trophy-variant-outline": 62780,
  "truck": 62781,
  "truck-delivery": 62782,
  "truck-fast": 63367,
  "truck-trailer": 63270,
  "tshirt-crew": 64122,
  "tshirt-crew-outline": 62783,
  "tshirt-v": 64123,
  "tshirt-v-outline": 62784,
  "tumble-dryer": 63766,
  "tumblr": 62785,
  "tumblr-box": 63767,
  "tumblr-reblog": 62786,
  "tune": 63022,
  "tune-vertical": 63082,
  "twitch": 62787,
  "twitter": 62788,
  "twitter-box": 62789,
  "twitter-circle": 62790,
  "twitter-retweet": 62791,
  "two-factor-authentication": 63918,
  "uber": 63304,
  "ubuntu": 62792,
  "ultra-high-definition": 63480,
  "umbraco": 62793,
  "umbrella": 62794,
  "umbrella-closed": 63919,
  "umbrella-outline": 62795,
  "undo": 62796,
  "undo-variant": 62797,
  "unfold-less-horizontal": 62798,
  "unfold-less-vertical": 63327,
  "unfold-more-horizontal": 62799,
  "unfold-more-vertical": 63328,
  "ungroup": 62800,
  "unity": 63150,
  "unreal": 63920,
  "untappd": 62801,
  "update": 63151,
  "upload": 62802,
  "upload-multiple": 63548,
  "upload-network": 63221,
  "usb": 62803,
  "van-passenger": 63481,
  "van-utility": 63482,
  "vanish": 63483,
  "variable": 64230,
  "vector-arrange-above": 62804,
  "vector-arrange-below": 62805,
  "vector-bezier": 64231,
  "vector-circle": 62806,
  "vector-circle-variant": 62807,
  "vector-combine": 62808,
  "vector-curve": 62809,
  "vector-difference": 62810,
  "vector-difference-ab": 62811,
  "vector-difference-ba": 62812,
  "vector-ellipse": 63634,
  "vector-intersection": 62813,
  "vector-line": 62814,
  "vector-point": 62815,
  "vector-polygon": 62816,
  "vector-polyline": 62817,
  "vector-radius": 63305,
  "vector-rectangle": 62918,
  "vector-selection": 62818,
  "vector-square": 61441,
  "vector-triangle": 62819,
  "vector-union": 62820,
  "venmo": 62840,
  "verified": 62821,
  "vhs": 64026,
  "vibrate": 62822,
  "video": 62823,
  "video-3d": 63484,
  "video-4k-box": 63549,
  "video-account": 63768,
  "video-image": 63769,
  "video-input-antenna": 63550,
  "video-input-component": 63551,
  "video-input-hdmi": 63552,
  "video-input-svideo": 63553,
  "video-minus": 63921,
  "video-off": 62824,
  "video-plus": 63922,
  "video-stabilization": 63770,
  "video-switch": 62825,
  "video-vintage": 64027,
  "view-agenda": 62826,
  "view-array": 62827,
  "view-carousel": 62828,
  "view-column": 62829,
  "view-dashboard": 62830,
  "view-dashboard-outline": 64028,
  "view-dashboard-variant": 63554,
  "view-day": 62831,
  "view-grid": 62832,
  "view-headline": 62833,
  "view-list": 62834,
  "view-module": 62835,
  "view-parallel": 63271,
  "view-quilt": 62836,
  "view-sequential": 63272,
  "view-stream": 62837,
  "view-week": 62838,
  "vimeo": 62839,
  "violin": 62991,
  "virtual-reality": 63635,
  "visual-studio": 62992,
  "visual-studio-code": 64029,
  "vk": 62841,
  "vk-box": 62842,
  "vk-circle": 62843,
  "vlc": 62844,
  "voice": 62923,
  "voicemail": 62845,
  "volleyball": 63923,
  "volume-high": 62846,
  "volume-low": 62847,
  "volume-medium": 62848,
  "volume-minus": 63325,
  "volume-mute": 63326,
  "volume-off": 62849,
  "volume-plus": 63324,
  "vote": 64030,
  "vote-outline": 64031,
  "vpn": 62850,
  "vuejs": 63555,
  "walk": 62851,
  "wall": 63485,
  "wall-sconce": 63771,
  "wall-sconce-flat": 63772,
  "wall-sconce-variant": 63773,
  "wallet": 62852,
  "wallet-giftcard": 62853,
  "wallet-membership": 62854,
  "wallet-travel": 62855,
  "wan": 62856,
  "washing-machine": 63273,
  "watch": 62857,
  "watch-export": 62858,
  "watch-export-variant": 63636,
  "watch-import": 62859,
  "watch-import-variant": 63637,
  "watch-variant": 63638,
  "watch-vibrate": 63152,
  "water": 62860,
  "water-off": 62861,
  "water-percent": 62862,
  "water-pump": 62863,
  "watermark": 62994,
  "waves": 63372,
  "weather-cloudy": 62864,
  "weather-fog": 62865,
  "weather-hail": 62866,
  "weather-hurricane": 63639,
  "weather-lightning": 62867,
  "weather-lightning-rainy": 63101,
  "weather-night": 62868,
  "weather-partlycloudy": 62869,
  "weather-pouring": 62870,
  "weather-rainy": 62871,
  "weather-snowy": 62872,
  "weather-snowy-rainy": 63102,
  "weather-sunny": 62873,
  "weather-sunset": 62874,
  "weather-sunset-down": 62875,
  "weather-sunset-up": 62876,
  "weather-windy": 62877,
  "weather-windy-variant": 62878,
  "web": 62879,
  "webcam": 62880,
  "webhook": 63023,
  "webpack": 63274,
  "wechat": 62993,
  "weight": 62881,
  "weight-kilogram": 62882,
  "weight-pound": 63924,
  "whatsapp": 62883,
  "wheelchair-accessibility": 62884,
  "whistle": 63925,
  "white-balance-auto": 62885,
  "white-balance-incandescent": 62886,
  "white-balance-iridescent": 62887,
  "white-balance-sunny": 62888,
  "widgets": 63275,
  "wifi": 62889,
  "wifi-off": 62890,
  "wifi-strength-1": 63774,
  "wifi-strength-1-alert": 63775,
  "wifi-strength-1-lock": 63776,
  "wifi-strength-2": 63777,
  "wifi-strength-2-alert": 63778,
  "wifi-strength-2-lock": 63779,
  "wifi-strength-3": 63780,
  "wifi-strength-3-alert": 63781,
  "wifi-strength-3-lock": 63782,
  "wifi-strength-4": 63783,
  "wifi-strength-4-alert": 63784,
  "wifi-strength-4-lock": 63785,
  "wifi-strength-alert-outline": 63786,
  "wifi-strength-lock-outline": 63787,
  "wifi-strength-off": 63788,
  "wifi-strength-off-outline": 63789,
  "wifi-strength-outline": 63790,
  "wii": 62891,
  "wiiu": 63276,
  "wikipedia": 62892,
  "window-close": 62893,
  "window-closed": 62894,
  "window-maximize": 62895,
  "window-minimize": 62896,
  "window-open": 62897,
  "window-restore": 62898,
  "windows": 62899,
  "windows-classic": 64032,
  "wiper": 64232,
  "wordpress": 62900,
  "worker": 62901,
  "wrap": 62902,
  "wrench": 62903,
  "wunderlist": 62904,
  "xamarin": 63556,
  "xamarin-outline": 63557,
  "xaml": 63091,
  "xbox": 62905,
  "xbox-controller": 62906,
  "xbox-controller-battery-alert": 63306,
  "xbox-controller-battery-charging": 64033,
  "xbox-controller-battery-empty": 63307,
  "xbox-controller-battery-full": 63308,
  "xbox-controller-battery-low": 63309,
  "xbox-controller-battery-medium": 63310,
  "xbox-controller-battery-unknown": 63311,
  "xbox-controller-off": 62907,
  "xda": 62908,
  "xing": 62909,
  "xing-box": 62910,
  "xing-circle": 62911,
  "xml": 62912,
  "xmpp": 63486,
  "yahoo": 64298,
  "yammer": 63368,
  "yeast": 62913,
  "yelp": 62914,
  "yin-yang": 63103,
  "youtube": 62915,
  "youtube-creator-studio": 63558,
  "youtube-gaming": 63559,
  "youtube-tv": 62536,
  "z-wave": 64233,
  "zend": 64234,
  "zip-box": 62916,
  "zip-disk": 64034,
  "zodiac-aquarius": 64124,
  "zodiac-aries": 64125,
  "zodiac-cancer": 64126,
  "zodiac-capricorn": 64127,
  "zodiac-gemini": 64128,
  "zodiac-leo": 64129,
  "zodiac-libra": 64130,
  "zodiac-pisces": 64131,
  "zodiac-sagittarius": 64132,
  "zodiac-scorpio": 64133,
  "zodiac-taurus": 64134,
  "zodiac-virgo": 64135,
  "blank": 63116
};
},746,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "d15c1216957060fac577af6151fb8cfe",
    "name": "MaterialCommunityIcons",
    "type": "ttf",
    "fileHashes": ["d15c1216957060fac577af6151fb8cfe"]
  });
},747,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _MaterialIcons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_MaterialIcons.default, 'material', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},748,[1,749,562,750]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "3d-rotation": 59469,
  "ac-unit": 60219,
  "access-alarm": 57744,
  "access-alarms": 57745,
  "access-time": 57746,
  "accessibility": 59470,
  "accessible": 59668,
  "account-balance": 59471,
  "account-balance-wallet": 59472,
  "account-box": 59473,
  "account-circle": 59475,
  "adb": 58894,
  "add": 57669,
  "add-a-photo": 58425,
  "add-alarm": 57747,
  "add-alert": 57347,
  "add-box": 57670,
  "add-circle": 57671,
  "add-circle-outline": 57672,
  "add-location": 58727,
  "add-shopping-cart": 59476,
  "add-to-photos": 58269,
  "add-to-queue": 57436,
  "adjust": 58270,
  "airline-seat-flat": 58928,
  "airline-seat-flat-angled": 58929,
  "airline-seat-individual-suite": 58930,
  "airline-seat-legroom-extra": 58931,
  "airline-seat-legroom-normal": 58932,
  "airline-seat-legroom-reduced": 58933,
  "airline-seat-recline-extra": 58934,
  "airline-seat-recline-normal": 58935,
  "airplanemode-active": 57749,
  "airplanemode-inactive": 57748,
  "airplay": 57429,
  "airport-shuttle": 60220,
  "alarm": 59477,
  "alarm-add": 59478,
  "alarm-off": 59479,
  "alarm-on": 59480,
  "album": 57369,
  "all-inclusive": 60221,
  "all-out": 59659,
  "android": 59481,
  "announcement": 59482,
  "apps": 58819,
  "archive": 57673,
  "arrow-back": 58820,
  "arrow-downward": 58843,
  "arrow-drop-down": 58821,
  "arrow-drop-down-circle": 58822,
  "arrow-drop-up": 58823,
  "arrow-forward": 58824,
  "arrow-upward": 58840,
  "art-track": 57440,
  "aspect-ratio": 59483,
  "assessment": 59484,
  "assignment": 59485,
  "assignment-ind": 59486,
  "assignment-late": 59487,
  "assignment-return": 59488,
  "assignment-returned": 59489,
  "assignment-turned-in": 59490,
  "assistant": 58271,
  "assistant-photo": 58272,
  "attach-file": 57894,
  "attach-money": 57895,
  "attachment": 58044,
  "audiotrack": 58273,
  "autorenew": 59491,
  "av-timer": 57371,
  "backspace": 57674,
  "backup": 59492,
  "battery-alert": 57756,
  "battery-charging-full": 57763,
  "battery-full": 57764,
  "battery-std": 57765,
  "battery-unknown": 57766,
  "beach-access": 60222,
  "beenhere": 58669,
  "block": 57675,
  "bluetooth": 57767,
  "bluetooth-audio": 58895,
  "bluetooth-connected": 57768,
  "bluetooth-disabled": 57769,
  "bluetooth-searching": 57770,
  "blur-circular": 58274,
  "blur-linear": 58275,
  "blur-off": 58276,
  "blur-on": 58277,
  "book": 59493,
  "bookmark": 59494,
  "bookmark-border": 59495,
  "border-all": 57896,
  "border-bottom": 57897,
  "border-clear": 57898,
  "border-color": 57899,
  "border-horizontal": 57900,
  "border-inner": 57901,
  "border-left": 57902,
  "border-outer": 57903,
  "border-right": 57904,
  "border-style": 57905,
  "border-top": 57906,
  "border-vertical": 57907,
  "branding-watermark": 57451,
  "brightness-1": 58278,
  "brightness-2": 58279,
  "brightness-3": 58280,
  "brightness-4": 58281,
  "brightness-5": 58282,
  "brightness-6": 58283,
  "brightness-7": 58284,
  "brightness-auto": 57771,
  "brightness-high": 57772,
  "brightness-low": 57773,
  "brightness-medium": 57774,
  "broken-image": 58285,
  "brush": 58286,
  "bubble-chart": 59101,
  "bug-report": 59496,
  "build": 59497,
  "burst-mode": 58428,
  "business": 57519,
  "business-center": 60223,
  "cached": 59498,
  "cake": 59369,
  "call": 57520,
  "call-end": 57521,
  "call-made": 57522,
  "call-merge": 57523,
  "call-missed": 57524,
  "call-missed-outgoing": 57572,
  "call-received": 57525,
  "call-split": 57526,
  "call-to-action": 57452,
  "camera": 58287,
  "camera-alt": 58288,
  "camera-enhance": 59644,
  "camera-front": 58289,
  "camera-rear": 58290,
  "camera-roll": 58291,
  "cancel": 58825,
  "card-giftcard": 59638,
  "card-membership": 59639,
  "card-travel": 59640,
  "casino": 60224,
  "cast": 58119,
  "cast-connected": 58120,
  "center-focus-strong": 58292,
  "center-focus-weak": 58293,
  "change-history": 59499,
  "chat": 57527,
  "chat-bubble": 57546,
  "chat-bubble-outline": 57547,
  "check": 58826,
  "check-box": 59444,
  "check-box-outline-blank": 59445,
  "check-circle": 59500,
  "chevron-left": 58827,
  "chevron-right": 58828,
  "child-care": 60225,
  "child-friendly": 60226,
  "chrome-reader-mode": 59501,
  "class": 59502,
  "clear": 57676,
  "clear-all": 57528,
  "close": 58829,
  "closed-caption": 57372,
  "cloud": 58045,
  "cloud-circle": 58046,
  "cloud-done": 58047,
  "cloud-download": 58048,
  "cloud-off": 58049,
  "cloud-queue": 58050,
  "cloud-upload": 58051,
  "code": 59503,
  "collections": 58294,
  "collections-bookmark": 58417,
  "color-lens": 58295,
  "colorize": 58296,
  "comment": 57529,
  "compare": 58297,
  "compare-arrows": 59669,
  "computer": 58122,
  "confirmation-number": 58936,
  "contact-mail": 57552,
  "contact-phone": 57551,
  "contacts": 57530,
  "content-copy": 57677,
  "content-cut": 57678,
  "content-paste": 57679,
  "control-point": 58298,
  "control-point-duplicate": 58299,
  "copyright": 59660,
  "create": 57680,
  "create-new-folder": 58060,
  "credit-card": 59504,
  "crop": 58302,
  "crop-16-9": 58300,
  "crop-3-2": 58301,
  "crop-5-4": 58303,
  "crop-7-5": 58304,
  "crop-din": 58305,
  "crop-free": 58306,
  "crop-landscape": 58307,
  "crop-original": 58308,
  "crop-portrait": 58309,
  "crop-rotate": 58423,
  "crop-square": 58310,
  "dashboard": 59505,
  "data-usage": 57775,
  "date-range": 59670,
  "dehaze": 58311,
  "delete": 59506,
  "delete-forever": 59691,
  "delete-sweep": 57708,
  "description": 59507,
  "desktop-mac": 58123,
  "desktop-windows": 58124,
  "details": 58312,
  "developer-board": 58125,
  "developer-mode": 57776,
  "device-hub": 58165,
  "devices": 57777,
  "devices-other": 58167,
  "dialer-sip": 57531,
  "dialpad": 57532,
  "directions": 58670,
  "directions-bike": 58671,
  "directions-boat": 58674,
  "directions-bus": 58672,
  "directions-car": 58673,
  "directions-railway": 58676,
  "directions-run": 58726,
  "directions-subway": 58675,
  "directions-transit": 58677,
  "directions-walk": 58678,
  "disc-full": 58896,
  "dns": 59509,
  "do-not-disturb": 58898,
  "do-not-disturb-alt": 58897,
  "do-not-disturb-off": 58947,
  "do-not-disturb-on": 58948,
  "dock": 58126,
  "domain": 59374,
  "done": 59510,
  "done-all": 59511,
  "donut-large": 59671,
  "donut-small": 59672,
  "drafts": 57681,
  "drag-handle": 57949,
  "drive-eta": 58899,
  "dvr": 57778,
  "edit": 58313,
  "edit-location": 58728,
  "eject": 59643,
  "email": 57534,
  "enhanced-encryption": 58943,
  "equalizer": 57373,
  "error": 57344,
  "error-outline": 57345,
  "euro-symbol": 59686,
  "ev-station": 58733,
  "event": 59512,
  "event-available": 58900,
  "event-busy": 58901,
  "event-note": 58902,
  "event-seat": 59651,
  "exit-to-app": 59513,
  "expand-less": 58830,
  "expand-more": 58831,
  "explicit": 57374,
  "explore": 59514,
  "exposure": 58314,
  "exposure-neg-1": 58315,
  "exposure-neg-2": 58316,
  "exposure-plus-1": 58317,
  "exposure-plus-2": 58318,
  "exposure-zero": 58319,
  "extension": 59515,
  "face": 59516,
  "fast-forward": 57375,
  "fast-rewind": 57376,
  "favorite": 59517,
  "favorite-border": 59518,
  "featured-play-list": 57453,
  "featured-video": 57454,
  "feedback": 59519,
  "fiber-dvr": 57437,
  "fiber-manual-record": 57441,
  "fiber-new": 57438,
  "fiber-pin": 57450,
  "fiber-smart-record": 57442,
  "file-download": 58052,
  "file-upload": 58054,
  "filter": 58323,
  "filter-1": 58320,
  "filter-2": 58321,
  "filter-3": 58322,
  "filter-4": 58324,
  "filter-5": 58325,
  "filter-6": 58326,
  "filter-7": 58327,
  "filter-8": 58328,
  "filter-9": 58329,
  "filter-9-plus": 58330,
  "filter-b-and-w": 58331,
  "filter-center-focus": 58332,
  "filter-drama": 58333,
  "filter-frames": 58334,
  "filter-hdr": 58335,
  "filter-list": 57682,
  "filter-none": 58336,
  "filter-tilt-shift": 58338,
  "filter-vintage": 58339,
  "find-in-page": 59520,
  "find-replace": 59521,
  "fingerprint": 59661,
  "first-page": 58844,
  "fitness-center": 60227,
  "flag": 57683,
  "flare": 58340,
  "flash-auto": 58341,
  "flash-off": 58342,
  "flash-on": 58343,
  "flight": 58681,
  "flight-land": 59652,
  "flight-takeoff": 59653,
  "flip": 58344,
  "flip-to-back": 59522,
  "flip-to-front": 59523,
  "folder": 58055,
  "folder-open": 58056,
  "folder-shared": 58057,
  "folder-special": 58903,
  "font-download": 57703,
  "format-align-center": 57908,
  "format-align-justify": 57909,
  "format-align-left": 57910,
  "format-align-right": 57911,
  "format-bold": 57912,
  "format-clear": 57913,
  "format-color-fill": 57914,
  "format-color-reset": 57915,
  "format-color-text": 57916,
  "format-indent-decrease": 57917,
  "format-indent-increase": 57918,
  "format-italic": 57919,
  "format-line-spacing": 57920,
  "format-list-bulleted": 57921,
  "format-list-numbered": 57922,
  "format-paint": 57923,
  "format-quote": 57924,
  "format-shapes": 57950,
  "format-size": 57925,
  "format-strikethrough": 57926,
  "format-textdirection-l-to-r": 57927,
  "format-textdirection-r-to-l": 57928,
  "format-underlined": 57929,
  "forum": 57535,
  "forward": 57684,
  "forward-10": 57430,
  "forward-30": 57431,
  "forward-5": 57432,
  "free-breakfast": 60228,
  "fullscreen": 58832,
  "fullscreen-exit": 58833,
  "functions": 57930,
  "g-translate": 59687,
  "gamepad": 58127,
  "games": 57377,
  "gavel": 59662,
  "gesture": 57685,
  "get-app": 59524,
  "gif": 59656,
  "golf-course": 60229,
  "gps-fixed": 57779,
  "gps-not-fixed": 57780,
  "gps-off": 57781,
  "grade": 59525,
  "gradient": 58345,
  "grain": 58346,
  "graphic-eq": 57784,
  "grid-off": 58347,
  "grid-on": 58348,
  "group": 59375,
  "group-add": 59376,
  "group-work": 59526,
  "hd": 57426,
  "hdr-off": 58349,
  "hdr-on": 58350,
  "hdr-strong": 58353,
  "hdr-weak": 58354,
  "headset": 58128,
  "headset-mic": 58129,
  "healing": 58355,
  "hearing": 57379,
  "help": 59527,
  "help-outline": 59645,
  "high-quality": 57380,
  "highlight": 57951,
  "highlight-off": 59528,
  "history": 59529,
  "home": 59530,
  "hot-tub": 60230,
  "hotel": 58682,
  "hourglass-empty": 59531,
  "hourglass-full": 59532,
  "http": 59650,
  "https": 59533,
  "image": 58356,
  "image-aspect-ratio": 58357,
  "import-contacts": 57568,
  "import-export": 57539,
  "important-devices": 59666,
  "inbox": 57686,
  "indeterminate-check-box": 59657,
  "info": 59534,
  "info-outline": 59535,
  "input": 59536,
  "insert-chart": 57931,
  "insert-comment": 57932,
  "insert-drive-file": 57933,
  "insert-emoticon": 57934,
  "insert-invitation": 57935,
  "insert-link": 57936,
  "insert-photo": 57937,
  "invert-colors": 59537,
  "invert-colors-off": 57540,
  "iso": 58358,
  "keyboard": 58130,
  "keyboard-arrow-down": 58131,
  "keyboard-arrow-left": 58132,
  "keyboard-arrow-right": 58133,
  "keyboard-arrow-up": 58134,
  "keyboard-backspace": 58135,
  "keyboard-capslock": 58136,
  "keyboard-hide": 58138,
  "keyboard-return": 58139,
  "keyboard-tab": 58140,
  "keyboard-voice": 58141,
  "kitchen": 60231,
  "label": 59538,
  "label-outline": 59539,
  "landscape": 58359,
  "language": 59540,
  "laptop": 58142,
  "laptop-chromebook": 58143,
  "laptop-mac": 58144,
  "laptop-windows": 58145,
  "last-page": 58845,
  "launch": 59541,
  "layers": 58683,
  "layers-clear": 58684,
  "leak-add": 58360,
  "leak-remove": 58361,
  "lens": 58362,
  "library-add": 57390,
  "library-books": 57391,
  "library-music": 57392,
  "lightbulb-outline": 59663,
  "line-style": 59673,
  "line-weight": 59674,
  "linear-scale": 57952,
  "link": 57687,
  "linked-camera": 58424,
  "list": 59542,
  "live-help": 57542,
  "live-tv": 58937,
  "local-activity": 58687,
  "local-airport": 58685,
  "local-atm": 58686,
  "local-bar": 58688,
  "local-cafe": 58689,
  "local-car-wash": 58690,
  "local-convenience-store": 58691,
  "local-dining": 58710,
  "local-drink": 58692,
  "local-florist": 58693,
  "local-gas-station": 58694,
  "local-grocery-store": 58695,
  "local-hospital": 58696,
  "local-hotel": 58697,
  "local-laundry-service": 58698,
  "local-library": 58699,
  "local-mall": 58700,
  "local-movies": 58701,
  "local-offer": 58702,
  "local-parking": 58703,
  "local-pharmacy": 58704,
  "local-phone": 58705,
  "local-pizza": 58706,
  "local-play": 58707,
  "local-post-office": 58708,
  "local-printshop": 58709,
  "local-see": 58711,
  "local-shipping": 58712,
  "local-taxi": 58713,
  "location-city": 59377,
  "location-disabled": 57782,
  "location-off": 57543,
  "location-on": 57544,
  "location-searching": 57783,
  "lock": 59543,
  "lock-open": 59544,
  "lock-outline": 59545,
  "looks": 58364,
  "looks-3": 58363,
  "looks-4": 58365,
  "looks-5": 58366,
  "looks-6": 58367,
  "looks-one": 58368,
  "looks-two": 58369,
  "loop": 57384,
  "loupe": 58370,
  "low-priority": 57709,
  "loyalty": 59546,
  "mail": 57688,
  "mail-outline": 57569,
  "map": 58715,
  "markunread": 57689,
  "markunread-mailbox": 59547,
  "memory": 58146,
  "menu": 58834,
  "merge-type": 57938,
  "message": 57545,
  "mic": 57385,
  "mic-none": 57386,
  "mic-off": 57387,
  "mms": 58904,
  "mode-comment": 57939,
  "mode-edit": 57940,
  "monetization-on": 57955,
  "money-off": 57948,
  "monochrome-photos": 58371,
  "mood": 59378,
  "mood-bad": 59379,
  "more": 58905,
  "more-horiz": 58835,
  "more-vert": 58836,
  "motorcycle": 59675,
  "mouse": 58147,
  "move-to-inbox": 57704,
  "movie": 57388,
  "movie-creation": 58372,
  "movie-filter": 58426,
  "multiline-chart": 59103,
  "music-note": 58373,
  "music-video": 57443,
  "my-location": 58716,
  "nature": 58374,
  "nature-people": 58375,
  "navigate-before": 58376,
  "navigate-next": 58377,
  "navigation": 58717,
  "near-me": 58729,
  "network-cell": 57785,
  "network-check": 58944,
  "network-locked": 58906,
  "network-wifi": 57786,
  "new-releases": 57393,
  "next-week": 57706,
  "nfc": 57787,
  "no-encryption": 58945,
  "no-sim": 57548,
  "not-interested": 57395,
  "note": 57455,
  "note-add": 59548,
  "notifications": 59380,
  "notifications-active": 59383,
  "notifications-none": 59381,
  "notifications-off": 59382,
  "notifications-paused": 59384,
  "offline-pin": 59658,
  "ondemand-video": 58938,
  "opacity": 59676,
  "open-in-browser": 59549,
  "open-in-new": 59550,
  "open-with": 59551,
  "pages": 59385,
  "pageview": 59552,
  "palette": 58378,
  "pan-tool": 59685,
  "panorama": 58379,
  "panorama-fish-eye": 58380,
  "panorama-horizontal": 58381,
  "panorama-vertical": 58382,
  "panorama-wide-angle": 58383,
  "party-mode": 59386,
  "pause": 57396,
  "pause-circle-filled": 57397,
  "pause-circle-outline": 57398,
  "payment": 59553,
  "people": 59387,
  "people-outline": 59388,
  "perm-camera-mic": 59554,
  "perm-contact-calendar": 59555,
  "perm-data-setting": 59556,
  "perm-device-information": 59557,
  "perm-identity": 59558,
  "perm-media": 59559,
  "perm-phone-msg": 59560,
  "perm-scan-wifi": 59561,
  "person": 59389,
  "person-add": 59390,
  "person-outline": 59391,
  "person-pin": 58714,
  "person-pin-circle": 58730,
  "personal-video": 58939,
  "pets": 59677,
  "phone": 57549,
  "phone-android": 58148,
  "phone-bluetooth-speaker": 58907,
  "phone-forwarded": 58908,
  "phone-in-talk": 58909,
  "phone-iphone": 58149,
  "phone-locked": 58910,
  "phone-missed": 58911,
  "phone-paused": 58912,
  "phonelink": 58150,
  "phonelink-erase": 57563,
  "phonelink-lock": 57564,
  "phonelink-off": 58151,
  "phonelink-ring": 57565,
  "phonelink-setup": 57566,
  "photo": 58384,
  "photo-album": 58385,
  "photo-camera": 58386,
  "photo-filter": 58427,
  "photo-library": 58387,
  "photo-size-select-actual": 58418,
  "photo-size-select-large": 58419,
  "photo-size-select-small": 58420,
  "picture-as-pdf": 58389,
  "picture-in-picture": 59562,
  "picture-in-picture-alt": 59665,
  "pie-chart": 59076,
  "pie-chart-outlined": 59077,
  "pin-drop": 58718,
  "place": 58719,
  "play-arrow": 57399,
  "play-circle-filled": 57400,
  "play-circle-outline": 57401,
  "play-for-work": 59654,
  "playlist-add": 57403,
  "playlist-add-check": 57445,
  "playlist-play": 57439,
  "plus-one": 59392,
  "poll": 59393,
  "polymer": 59563,
  "pool": 60232,
  "portable-wifi-off": 57550,
  "portrait": 58390,
  "power": 58940,
  "power-input": 58166,
  "power-settings-new": 59564,
  "pregnant-woman": 59678,
  "present-to-all": 57567,
  "print": 59565,
  "priority-high": 58949,
  "public": 59403,
  "publish": 57941,
  "query-builder": 59566,
  "question-answer": 59567,
  "queue": 57404,
  "queue-music": 57405,
  "queue-play-next": 57446,
  "radio": 57406,
  "radio-button-checked": 59447,
  "radio-button-unchecked": 59446,
  "rate-review": 58720,
  "receipt": 59568,
  "recent-actors": 57407,
  "record-voice-over": 59679,
  "redeem": 59569,
  "redo": 57690,
  "refresh": 58837,
  "remove": 57691,
  "remove-circle": 57692,
  "remove-circle-outline": 57693,
  "remove-from-queue": 57447,
  "remove-red-eye": 58391,
  "remove-shopping-cart": 59688,
  "reorder": 59646,
  "repeat": 57408,
  "repeat-one": 57409,
  "replay": 57410,
  "replay-10": 57433,
  "replay-30": 57434,
  "replay-5": 57435,
  "reply": 57694,
  "reply-all": 57695,
  "report": 57696,
  "report-problem": 59570,
  "restaurant": 58732,
  "restaurant-menu": 58721,
  "restore": 59571,
  "restore-page": 59689,
  "ring-volume": 57553,
  "room": 59572,
  "room-service": 60233,
  "rotate-90-degrees-ccw": 58392,
  "rotate-left": 58393,
  "rotate-right": 58394,
  "rounded-corner": 59680,
  "router": 58152,
  "rowing": 59681,
  "rss-feed": 57573,
  "rv-hookup": 58946,
  "satellite": 58722,
  "save": 57697,
  "scanner": 58153,
  "schedule": 59573,
  "school": 59404,
  "screen-lock-landscape": 57790,
  "screen-lock-portrait": 57791,
  "screen-lock-rotation": 57792,
  "screen-rotation": 57793,
  "screen-share": 57570,
  "sd-card": 58915,
  "sd-storage": 57794,
  "search": 59574,
  "security": 58154,
  "select-all": 57698,
  "send": 57699,
  "sentiment-dissatisfied": 59409,
  "sentiment-neutral": 59410,
  "sentiment-satisfied": 59411,
  "sentiment-very-dissatisfied": 59412,
  "sentiment-very-satisfied": 59413,
  "settings": 59576,
  "settings-applications": 59577,
  "settings-backup-restore": 59578,
  "settings-bluetooth": 59579,
  "settings-brightness": 59581,
  "settings-cell": 59580,
  "settings-ethernet": 59582,
  "settings-input-antenna": 59583,
  "settings-input-component": 59584,
  "settings-input-composite": 59585,
  "settings-input-hdmi": 59586,
  "settings-input-svideo": 59587,
  "settings-overscan": 59588,
  "settings-phone": 59589,
  "settings-power": 59590,
  "settings-remote": 59591,
  "settings-system-daydream": 57795,
  "settings-voice": 59592,
  "share": 59405,
  "shop": 59593,
  "shop-two": 59594,
  "shopping-basket": 59595,
  "shopping-cart": 59596,
  "short-text": 57953,
  "show-chart": 59105,
  "shuffle": 57411,
  "signal-cellular-4-bar": 57800,
  "signal-cellular-connected-no-internet-4-bar": 57805,
  "signal-cellular-no-sim": 57806,
  "signal-cellular-null": 57807,
  "signal-cellular-off": 57808,
  "signal-wifi-4-bar": 57816,
  "signal-wifi-4-bar-lock": 57817,
  "signal-wifi-off": 57818,
  "sim-card": 58155,
  "sim-card-alert": 58916,
  "skip-next": 57412,
  "skip-previous": 57413,
  "slideshow": 58395,
  "slow-motion-video": 57448,
  "smartphone": 58156,
  "smoke-free": 60234,
  "smoking-rooms": 60235,
  "sms": 58917,
  "sms-failed": 58918,
  "snooze": 57414,
  "sort": 57700,
  "sort-by-alpha": 57427,
  "spa": 60236,
  "space-bar": 57942,
  "speaker": 58157,
  "speaker-group": 58158,
  "speaker-notes": 59597,
  "speaker-notes-off": 59690,
  "speaker-phone": 57554,
  "spellcheck": 59598,
  "star": 59448,
  "star-border": 59450,
  "star-half": 59449,
  "stars": 59600,
  "stay-current-landscape": 57555,
  "stay-current-portrait": 57556,
  "stay-primary-landscape": 57557,
  "stay-primary-portrait": 57558,
  "stop": 57415,
  "stop-screen-share": 57571,
  "storage": 57819,
  "store": 59601,
  "store-mall-directory": 58723,
  "straighten": 58396,
  "streetview": 58734,
  "strikethrough-s": 57943,
  "style": 58397,
  "subdirectory-arrow-left": 58841,
  "subdirectory-arrow-right": 58842,
  "subject": 59602,
  "subscriptions": 57444,
  "subtitles": 57416,
  "subway": 58735,
  "supervisor-account": 59603,
  "surround-sound": 57417,
  "swap-calls": 57559,
  "swap-horiz": 59604,
  "swap-vert": 59605,
  "swap-vertical-circle": 59606,
  "switch-camera": 58398,
  "switch-video": 58399,
  "sync": 58919,
  "sync-disabled": 58920,
  "sync-problem": 58921,
  "system-update": 58922,
  "system-update-alt": 59607,
  "tab": 59608,
  "tab-unselected": 59609,
  "tablet": 58159,
  "tablet-android": 58160,
  "tablet-mac": 58161,
  "tag-faces": 58400,
  "tap-and-play": 58923,
  "terrain": 58724,
  "text-fields": 57954,
  "text-format": 57701,
  "textsms": 57560,
  "texture": 58401,
  "theaters": 59610,
  "thumb-down": 59611,
  "thumb-up": 59612,
  "thumbs-up-down": 59613,
  "time-to-leave": 58924,
  "timelapse": 58402,
  "timeline": 59682,
  "timer": 58405,
  "timer-10": 58403,
  "timer-3": 58404,
  "timer-off": 58406,
  "title": 57956,
  "toc": 59614,
  "today": 59615,
  "toll": 59616,
  "tonality": 58407,
  "touch-app": 59667,
  "toys": 58162,
  "track-changes": 59617,
  "traffic": 58725,
  "train": 58736,
  "tram": 58737,
  "transfer-within-a-station": 58738,
  "transform": 58408,
  "translate": 59618,
  "trending-down": 59619,
  "trending-flat": 59620,
  "trending-up": 59621,
  "tune": 58409,
  "turned-in": 59622,
  "turned-in-not": 59623,
  "tv": 58163,
  "unarchive": 57705,
  "undo": 57702,
  "unfold-less": 58838,
  "unfold-more": 58839,
  "update": 59683,
  "usb": 57824,
  "verified-user": 59624,
  "vertical-align-bottom": 57944,
  "vertical-align-center": 57945,
  "vertical-align-top": 57946,
  "vibration": 58925,
  "video-call": 57456,
  "video-label": 57457,
  "video-library": 57418,
  "videocam": 57419,
  "videocam-off": 57420,
  "videogame-asset": 58168,
  "view-agenda": 59625,
  "view-array": 59626,
  "view-carousel": 59627,
  "view-column": 59628,
  "view-comfy": 58410,
  "view-compact": 58411,
  "view-day": 59629,
  "view-headline": 59630,
  "view-list": 59631,
  "view-module": 59632,
  "view-quilt": 59633,
  "view-stream": 59634,
  "view-week": 59635,
  "vignette": 58421,
  "visibility": 59636,
  "visibility-off": 59637,
  "voice-chat": 58926,
  "voicemail": 57561,
  "volume-down": 57421,
  "volume-mute": 57422,
  "volume-off": 57423,
  "volume-up": 57424,
  "vpn-key": 57562,
  "vpn-lock": 58927,
  "wallpaper": 57788,
  "warning": 57346,
  "watch": 58164,
  "watch-later": 59684,
  "wb-auto": 58412,
  "wb-cloudy": 58413,
  "wb-incandescent": 58414,
  "wb-iridescent": 58422,
  "wb-sunny": 58416,
  "wc": 58941,
  "web": 57425,
  "web-asset": 57449,
  "weekend": 57707,
  "whatshot": 59406,
  "widgets": 57789,
  "wifi": 58942,
  "wifi-lock": 57825,
  "wifi-tethering": 57826,
  "work": 59641,
  "wrap-text": 57947,
  "youtube-searched-for": 59642,
  "zoom-in": 59647,
  "zoom-out": 59648,
  "zoom-out-map": 58731
};
},749,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "a37b0c01c0baf1888ca812cc0508f6e2",
    "name": "MaterialIcons",
    "type": "ttf",
    "fileHashes": ["a37b0c01c0baf1888ca812cc0508f6e2"]
  });
},750,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _Octicons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_Octicons.default, 'octicons', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},751,[1,752,562,753]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "alert": 61696,
  "archive": 61697,
  "arrow-down": 61698,
  "arrow-left": 61699,
  "arrow-right": 61700,
  "arrow-small-down": 61701,
  "arrow-small-left": 61702,
  "arrow-small-right": 61703,
  "arrow-small-up": 61704,
  "arrow-up": 61705,
  "beaker": 61706,
  "bell": 61707,
  "bold": 61708,
  "book": 61709,
  "bookmark": 61710,
  "briefcase": 61711,
  "broadcast": 61712,
  "browser": 61713,
  "bug": 61714,
  "calendar": 61715,
  "check": 61716,
  "checklist": 61717,
  "chevron-down": 61718,
  "chevron-left": 61719,
  "chevron-right": 61720,
  "chevron-up": 61721,
  "circle-slash": 61722,
  "circuit-board": 61723,
  "clippy": 61724,
  "clock": 61725,
  "cloud-download": 61726,
  "cloud-upload": 61727,
  "code": 61728,
  "comment": 61729,
  "comment-discussion": 61730,
  "credit-card": 61731,
  "dash": 61732,
  "dashboard": 61733,
  "database": 61734,
  "desktop-download": 61735,
  "device-camera": 61736,
  "device-camera-video": 61737,
  "device-desktop": 61738,
  "device-mobile": 61739,
  "diff": 61740,
  "diff-added": 61741,
  "diff-ignored": 61742,
  "diff-modified": 61743,
  "diff-removed": 61744,
  "diff-renamed": 61745,
  "ellipsis": 61746,
  "eye": 61747,
  "file": 61748,
  "file-binary": 61749,
  "file-code": 61750,
  "file-directory": 61751,
  "file-media": 61752,
  "file-pdf": 61753,
  "file-submodule": 61754,
  "file-symlink-directory": 61755,
  "file-symlink-file": 61756,
  "file-zip": 61757,
  "flame": 61758,
  "fold": 61759,
  "gear": 61760,
  "gift": 61761,
  "gist": 61762,
  "gist-secret": 61763,
  "git-branch": 61764,
  "git-commit": 61765,
  "git-compare": 61766,
  "git-merge": 61767,
  "git-pull-request": 61768,
  "globe": 61769,
  "grabber": 61770,
  "graph": 61771,
  "heart": 61772,
  "history": 61773,
  "home": 61774,
  "horizontal-rule": 61775,
  "hubot": 61776,
  "inbox": 61777,
  "info": 61778,
  "issue-closed": 61779,
  "issue-opened": 61780,
  "issue-reopened": 61781,
  "italic": 61782,
  "jersey": 61783,
  "kebab-horizontal": 61784,
  "kebab-vertical": 61785,
  "key": 61786,
  "keyboard": 61787,
  "law": 61788,
  "light-bulb": 61789,
  "link": 61790,
  "link-external": 61791,
  "list-ordered": 61792,
  "list-unordered": 61793,
  "location": 61794,
  "lock": 61795,
  "logo-gist": 61796,
  "logo-github": 61797,
  "mail": 61798,
  "mail-read": 61799,
  "mark-github": 61800,
  "markdown": 61801,
  "megaphone": 61802,
  "mention": 61803,
  "milestone": 61804,
  "mirror": 61805,
  "mortar-board": 61806,
  "mute": 61807,
  "no-newline": 61808,
  "note": 61809,
  "octoface": 61810,
  "organization": 61811,
  "package": 61812,
  "paintcan": 61813,
  "pencil": 61814,
  "person": 61815,
  "pin": 61816,
  "plug": 61817,
  "plus": 61818,
  "plus-small": 61819,
  "primitive-dot": 61820,
  "primitive-square": 61821,
  "project": 61822,
  "pulse": 61823,
  "question": 61824,
  "quote": 61825,
  "radio-tower": 61826,
  "reply": 61827,
  "repo": 61828,
  "repo-clone": 61829,
  "repo-force-push": 61830,
  "repo-forked": 61831,
  "repo-pull": 61832,
  "repo-push": 61833,
  "report": 61834,
  "rocket": 61835,
  "rss": 61836,
  "ruby": 61837,
  "screen-full": 61838,
  "screen-normal": 61839,
  "search": 61840,
  "server": 61841,
  "settings": 61842,
  "shield": 61843,
  "sign-in": 61844,
  "sign-out": 61845,
  "smiley": 61846,
  "squirrel": 61847,
  "star": 61848,
  "stop": 61849,
  "sync": 61850,
  "tag": 61851,
  "tasklist": 61852,
  "telescope": 61853,
  "terminal": 61854,
  "text-size": 61855,
  "three-bars": 61856,
  "thumbsdown": 61857,
  "thumbsup": 61858,
  "tools": 61859,
  "trashcan": 61860,
  "triangle-down": 61861,
  "triangle-left": 61862,
  "triangle-right": 61863,
  "triangle-up": 61864,
  "unfold": 61865,
  "unmute": 61866,
  "unverified": 61867,
  "verified": 61868,
  "versions": 61869,
  "watch": 61870,
  "x": 61871,
  "zap": 61872
};
},752,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "73b8cff012825060b308d2162f31dbb2",
    "name": "Octicons",
    "type": "ttf",
    "fileHashes": ["73b8cff012825060b308d2162f31dbb2"]
  });
},753,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _SimpleLineIcons = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_SimpleLineIcons.default, 'simple-line-icons', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},754,[1,755,562,756]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "user": 57349,
  "people": 57345,
  "user-female": 57344,
  "user-follow": 57346,
  "user-following": 57347,
  "user-unfollow": 57348,
  "login": 57446,
  "logout": 57445,
  "emotsmile": 57377,
  "phone": 58880,
  "call-end": 57416,
  "call-in": 57415,
  "call-out": 57414,
  "map": 57395,
  "location-pin": 57494,
  "direction": 57410,
  "directions": 57409,
  "compass": 57413,
  "layers": 57396,
  "menu": 58881,
  "list": 57447,
  "options-vertical": 58882,
  "options": 58883,
  "arrow-down": 58884,
  "arrow-left": 58885,
  "arrow-right": 58886,
  "arrow-up": 58887,
  "arrow-up-circle": 57464,
  "arrow-left-circle": 57466,
  "arrow-right-circle": 57465,
  "arrow-down-circle": 57467,
  "check": 57472,
  "clock": 57473,
  "plus": 57493,
  "minus": 58901,
  "close": 57474,
  "event": 58905,
  "exclamation": 58903,
  "organization": 58902,
  "trophy": 57350,
  "screen-smartphone": 57360,
  "screen-desktop": 57361,
  "plane": 57362,
  "notebook": 57363,
  "mustache": 57364,
  "mouse": 57365,
  "magnet": 57366,
  "energy": 57376,
  "disc": 57378,
  "cursor": 57454,
  "cursor-move": 57379,
  "crop": 57380,
  "chemistry": 57382,
  "speedometer": 57351,
  "shield": 57358,
  "screen-tablet": 57359,
  "magic-wand": 57367,
  "hourglass": 57368,
  "graduation": 57369,
  "ghost": 57370,
  "game-controller": 57371,
  "fire": 57372,
  "eyeglass": 57373,
  "envelope-open": 57374,
  "envelope-letter": 57375,
  "bell": 57383,
  "badge": 57384,
  "anchor": 57385,
  "wallet": 57386,
  "vector": 57387,
  "speech": 57388,
  "puzzle": 57389,
  "printer": 57390,
  "present": 57391,
  "playlist": 57392,
  "pin": 57393,
  "picture": 57394,
  "handbag": 57397,
  "globe-alt": 57398,
  "globe": 57399,
  "folder-alt": 57401,
  "folder": 57481,
  "film": 57402,
  "feed": 57403,
  "drop": 57406,
  "drawer": 57407,
  "docs": 57408,
  "doc": 57477,
  "diamond": 57411,
  "cup": 57412,
  "calculator": 57417,
  "bubbles": 57418,
  "briefcase": 57419,
  "book-open": 57420,
  "basket-loaded": 57421,
  "basket": 57422,
  "bag": 57423,
  "action-undo": 57424,
  "action-redo": 57425,
  "wrench": 57426,
  "umbrella": 57427,
  "trash": 57428,
  "tag": 57429,
  "support": 57430,
  "frame": 57400,
  "size-fullscreen": 57431,
  "size-actual": 57432,
  "shuffle": 57433,
  "share-alt": 57434,
  "share": 57435,
  "rocket": 57436,
  "question": 57437,
  "pie-chart": 57438,
  "pencil": 57439,
  "note": 57440,
  "loop": 57444,
  "home": 57449,
  "grid": 57450,
  "graph": 57451,
  "microphone": 57443,
  "music-tone-alt": 57441,
  "music-tone": 57442,
  "earphones-alt": 57404,
  "earphones": 57405,
  "equalizer": 57452,
  "like": 57448,
  "dislike": 57453,
  "control-start": 57455,
  "control-rewind": 57456,
  "control-play": 57457,
  "control-pause": 57458,
  "control-forward": 57459,
  "control-end": 57460,
  "volume-1": 57503,
  "volume-2": 57504,
  "volume-off": 57505,
  "calendar": 57461,
  "bulb": 57462,
  "chart": 57463,
  "ban": 57468,
  "bubble": 57469,
  "camrecorder": 57470,
  "camera": 57471,
  "cloud-download": 57475,
  "cloud-upload": 57476,
  "envelope": 57478,
  "eye": 57479,
  "flag": 57480,
  "heart": 57482,
  "info": 57483,
  "key": 57484,
  "link": 57485,
  "lock": 57486,
  "lock-open": 57487,
  "magnifier": 57488,
  "magnifier-add": 57489,
  "magnifier-remove": 57490,
  "paper-clip": 57491,
  "paper-plane": 57492,
  "power": 57495,
  "refresh": 57496,
  "reload": 57497,
  "settings": 57498,
  "star": 57499,
  "symbol-female": 57500,
  "symbol-male": 57501,
  "target": 57502,
  "credit-card": 57381,
  "paypal": 58888,
  "social-tumblr": 57354,
  "social-twitter": 57353,
  "social-facebook": 57355,
  "social-instagram": 58889,
  "social-linkedin": 58890,
  "social-pinterest": 58891,
  "social-github": 58892,
  "social-google": 58893,
  "social-reddit": 58894,
  "social-skype": 58895,
  "social-dribbble": 57357,
  "social-behance": 58896,
  "social-foursqare": 58897,
  "social-soundcloud": 58898,
  "social-spotify": 58899,
  "social-stumbleupon": 58900,
  "social-youtube": 57352,
  "social-dropbox": 57356,
  "social-vkontakte": 58904,
  "social-steam": 58912
};
},755,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "d2285965fe34b05465047401b8595dd0",
    "name": "SimpleLineIcons",
    "type": "ttf",
    "fileHashes": ["d2285965fe34b05465047401b8595dd0"]
  });
},756,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _Zocial = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _default = (0, _createIconSet.default)(_Zocial.default, 'zocial', _$$_REQUIRE(_dependencyMap[3]));

  exports.default = _default;
},757,[1,758,562,759]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "acrobat": 61696,
  "amazon": 61697,
  "android": 61698,
  "angellist": 61699,
  "aol": 61700,
  "appnet": 61701,
  "appstore": 61702,
  "bitbucket": 61703,
  "bitcoin": 61704,
  "blogger": 61705,
  "buffer": 61706,
  "cal": 61707,
  "call": 61708,
  "cart": 61709,
  "chrome": 61710,
  "cloudapp": 61711,
  "creativecommons": 61712,
  "delicious": 61713,
  "digg": 61714,
  "disqus": 61715,
  "dribbble": 61716,
  "dropbox": 61717,
  "drupal": 61718,
  "dwolla": 61720,
  "email": 61721,
  "eventasaurus": 61722,
  "eventbrite": 61723,
  "eventful": 61724,
  "evernote": 61725,
  "facebook": 61726,
  "fivehundredpx": 61727,
  "flattr": 61728,
  "flickr": 61729,
  "forrst": 61730,
  "foursquare": 61731,
  "github": 61732,
  "gmail": 61733,
  "google": 61734,
  "googleplay": 61735,
  "googleplus": 61736,
  "gowalla": 61737,
  "grooveshark": 61738,
  "guest": 61739,
  "html5": 61740,
  "ie": 61741,
  "instagram": 61742,
  "instapaper": 61743,
  "intensedebate": 61744,
  "itunes": 61745,
  "klout": 61746,
  "lanyrd": 61747,
  "lastfm": 61748,
  "lego": 61749,
  "linkedin": 61750,
  "lkdto": 61751,
  "logmein": 61752,
  "macstore": 61753,
  "meetup": 61754,
  "myspace": 61755,
  "ninetyninedesigns": 61756,
  "openid": 61757,
  "opentable": 61758,
  "paypal": 61759,
  "persona": 61796,
  "pinboard": 61760,
  "pinterest": 61761,
  "plancast": 61762,
  "plurk": 61763,
  "pocket": 61764,
  "podcast": 61765,
  "posterous": 61766,
  "print": 61767,
  "quora": 61768,
  "reddit": 61769,
  "rss": 61770,
  "scribd": 61771,
  "skype": 61772,
  "smashing": 61773,
  "songkick": 61774,
  "soundcloud": 61775,
  "spotify": 61776,
  "stackoverflow": 61777,
  "statusnet": 61778,
  "steam": 61779,
  "stripe": 61780,
  "stumbleupon": 61781,
  "tumblr": 61782,
  "twitter": 61783,
  "viadeo": 61784,
  "vimeo": 61785,
  "vk": 61786,
  "weibo": 61787,
  "wikipedia": 61788,
  "windows": 61789,
  "wordpress": 61790,
  "xing": 61791,
  "yahoo": 61792,
  "ycombinator": 61793,
  "yelp": 61794,
  "youtube": 61795
};
},758,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]).registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/@expo/vector-icons/fonts",
    "scales": [1],
    "hash": "5cdf883b18a5651a29a4d1ef276d2457",
    "name": "Zocial",
    "type": "ttf",
    "fileHashes": ["5cdf883b18a5651a29a4d1ef276d2457"]
  });
},759,[153]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _createIconSetFromFontello = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _default(config, expoFontName, expoAssetId) {
    return (0, _createIconSetFromFontello.default)(config, expoFontName, expoAssetId);
  }
},760,[1,761]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconSetFromFontello;

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function createIconSetFromFontello(config, fontFamilyArg, fontFile) {
    var glyphMap = {};
    config.glyphs.forEach(function (glyph) {
      glyphMap[glyph.css] = glyph.code;
    });
    var fontFamily = fontFamilyArg || config.name || 'fontello';
    return (0, _createIconSet.default)(glyphMap, fontFamily, fontFile || fontFamily + ".ttf");
  }
},761,[1,563]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _createIconSetFromIcomoon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _default(config, expoFontName, expoAssetId) {
    return (0, _createIconSetFromIcomoon.default)(config, expoFontName, expoAssetId);
  }
},762,[1,763]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createIconSetFromIcoMoon;

  var _createIconSet = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function createIconSetFromIcoMoon(config, fontFamilyArg, fontFile) {
    var glyphMap = {};
    config.icons.forEach(function (icon) {
      glyphMap[icon.properties.name] = icon.properties.code;
    });
    var fontFamily = fontFamilyArg || config.preferences.fontPref.metadata.fontFamily;
    return (0, _createIconSet.default)(glyphMap, fontFamily, fontFile || fontFamily + ".ttf");
  }
},763,[1,563]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.manipulateAsync = manipulateAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ExponentImageManipulator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[3]);

  function manipulateAsync(uri) {
    var actions,
        saveOptions,
        _args = arguments;
    return _regenerator.default.async(function manipulateAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            actions = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];
            saveOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};

            if (typeof uri === 'string') {
              _context.next = 4;
              break;
            }

            throw new TypeError("The \"uri\" argument must be a string");

          case 4:
            if (_ExponentImageManipulator.default.manipulate) {
              _context.next = 6;
              break;
            }

            throw new _expoErrors.UnavailabilityError('ImageManipulator', 'manipulateAsync');

          case 6:
            _context.next = 8;
            return _regenerator.default.awrap(_ExponentImageManipulator.default.manipulate(uri, actions, saveOptions));

          case 8:
            return _context.abrupt("return", _context.sent);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},764,[1,130,765,368]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentImageManipulator;
  exports.default = _default;
},765,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.launchImageLibraryAsync = launchImageLibraryAsync;
  exports.launchCameraAsync = launchCameraAsync;
  exports.MediaTypeOptions = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[2]);

  var _ExponentImagePicker = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var MEDIA_TYPE_OPTIONS = {
    All: 'All',
    Videos: 'Videos',
    Images: 'Images'
  };

  function launchImageLibraryAsync() {
    var options,
        _args = arguments;
    return _regenerator.default.async(function launchImageLibraryAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};

            if (_ExponentImagePicker.default.launchImageLibraryAsync) {
              _context.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');

          case 3:
            return _context.abrupt("return", _ExponentImagePicker.default.launchImageLibraryAsync(options));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function launchCameraAsync() {
    var options,
        _args2 = arguments;
    return _regenerator.default.async(function launchCameraAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};

            if (_ExponentImagePicker.default.launchCameraAsync) {
              _context2.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('ImagePicker', 'launchCameraAsync');

          case 3:
            return _context2.abrupt("return", _ExponentImagePicker.default.launchCameraAsync(options));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  var MediaTypeOptions = MEDIA_TYPE_OPTIONS;
  exports.MediaTypeOptions = MediaTypeOptions;
},766,[1,130,368,767]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentImagePicker;
  exports.default = _default;
},767,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.startActivityAsync = startActivityAsync;
  exports.ACTION_ZEN_MODE_SETTINGS = exports.ACTION_ZEN_MODE_SCHEDULE_RULE_SETTINGS = exports.ACTION_ZEN_MODE_PRIORITY_SETTINGS = exports.ACTION_ZEN_MODE_EXTERNAL_RULE_SETTINGS = exports.ACTION_ZEN_MODE_EVENT_RULE_SETTINGS = exports.ACTION_ZEN_MODE_AUTOMATION_SETTINGS = exports.ACTION_WIRELESS_SETTINGS = exports.ACTION_WIFI_SETTINGS = exports.ACTION_WIFI_IP_SETTINGS = exports.ACTION_WEBVIEW_SETTINGS = exports.ACTION_VR_LISTENER_SETTINGS = exports.ACTION_VPN_SETTINGS = exports.ACTION_VOICE_INPUT_SETTINGS = exports.ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE = exports.ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE = exports.ACTION_VOICE_CONTROL_AIRPLANE_MODE = exports.ACTION_USER_SETTINGS = exports.ACTION_USER_DICTIONARY_SETTINGS = exports.ACTION_USER_DICTIONARY_INSERT = exports.ACTION_USAGE_ACCESS_SETTINGS = exports.ACTION_TRUSTED_CREDENTIALS_USER = exports.ACTION_TETHER_PROVISIONING_UI = exports.ACTION_SYSTEM_UPDATE_SETTINGS = exports.ACTION_SYNC_SETTINGS = exports.ACTION_STORAGE_MANAGER_SETTINGS = exports.ACTION_SOUND_SETTINGS = exports.ACTION_SHOW_REMOTE_BUGREPORT_DIALOG = exports.ACTION_SHOW_REGULATORY_INFO = exports.ACTION_SHOW_INPUT_METHOD_PICKER = exports.ACTION_SHOW_ADMIN_SUPPORT_DETAILS = exports.ACTION_SETTINGS = exports.ACTION_SECURITY_SETTINGS = exports.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS = exports.ACTION_QUICK_LAUNCH_SETTINGS = exports.ACTION_PRIVACY_SETTINGS = exports.ACTION_PAIRING_SETTINGS = exports.ACTION_NOTIFICATION_SETTINGS = exports.ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS = exports.ACTION_NIGHT_DISPLAY_SETTINGS = exports.ACTION_NFC_SETTINGS = exports.ACTION_NFC_PAYMENT_SETTINGS = exports.ACTION_NFCSHARING_SETTINGS = exports.ACTION_NETWORK_OPERATOR_SETTINGS = exports.ACTION_MONITORING_CERT_INFO = exports.ACTION_MEMORY_CARD_SETTINGS = exports.ACTION_MANAGE_DEFAULT_APPS_SETTINGS = exports.ACTION_MANAGE_APPLICATIONS_SETTINGS = exports.ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS = exports.ACTION_LOCATION_SOURCE_SETTINGS = exports.ACTION_LOCALE_SETTINGS = exports.ACTION_INTERNAL_STORAGE_SETTINGS = exports.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS = exports.ACTION_INPUT_METHOD_SETTINGS = exports.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS = exports.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS = exports.ACTION_HOME_SETTINGS = exports.ACTION_HARD_KEYBOARD_SETTINGS = exports.ACTION_DREAM_SETTINGS = exports.ACTION_DISPLAY_SETTINGS = exports.ACTION_DEVICE_NAME = exports.ACTION_DEVICE_INFO_SETTINGS = exports.ACTION_DATE_SETTINGS = exports.ACTION_DATA_ROAMING_SETTINGS = exports.ACTION_CAST_SETTINGS = exports.ACTION_CAPTIONING_SETTINGS = exports.ACTION_BLUETOOTH_SETTINGS = exports.ACTION_BATTERY_SAVER_SETTINGS = exports.ACTION_APP_OPS_SETTINGS = exports.ACTION_APP_NOTIFICATION_SETTINGS = exports.ACTION_APPLICATION_SETTINGS = exports.ACTION_APPLICATION_DEVELOPMENT_SETTINGS = exports.ACTION_APPLICATION_DETAILS_SETTINGS = exports.ACTION_APN_SETTINGS = exports.ACTION_AIRPLANE_MODE_SETTINGS = exports.ACTION_ADD_ACCOUNT_SETTINGS = exports.ACTION_PRINT_SETTINGS = exports.ACTION_NOTIFICATION_LISTENER_SETTINGS = exports.ACTION_CONDITION_PROVIDER_SETTINGS = exports.ACTION_APP_NOTIFICATION_REDACTION = exports.ACTION_ACCESSIBILITY_SETTINGS = undefined;

  var _expoErrors = _$$_REQUIRE(_dependencyMap[1]);

  var _ExponentIntentLauncher = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var ACTION_ACCESSIBILITY_SETTINGS = 'android.settings.ACCESSIBILITY_SETTINGS';
  exports.ACTION_ACCESSIBILITY_SETTINGS = ACTION_ACCESSIBILITY_SETTINGS;
  var ACTION_APP_NOTIFICATION_REDACTION = 'android.settings.ACTION_APP_NOTIFICATION_REDACTION';
  exports.ACTION_APP_NOTIFICATION_REDACTION = ACTION_APP_NOTIFICATION_REDACTION;
  var ACTION_CONDITION_PROVIDER_SETTINGS = 'android.settings.ACTION_CONDITION_PROVIDER_SETTINGS';
  exports.ACTION_CONDITION_PROVIDER_SETTINGS = ACTION_CONDITION_PROVIDER_SETTINGS;
  var ACTION_NOTIFICATION_LISTENER_SETTINGS = 'android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS';
  exports.ACTION_NOTIFICATION_LISTENER_SETTINGS = ACTION_NOTIFICATION_LISTENER_SETTINGS;
  var ACTION_PRINT_SETTINGS = 'android.settings.ACTION_PRINT_SETTINGS';
  exports.ACTION_PRINT_SETTINGS = ACTION_PRINT_SETTINGS;
  var ACTION_ADD_ACCOUNT_SETTINGS = 'android.settings.ADD_ACCOUNT_SETTINGS';
  exports.ACTION_ADD_ACCOUNT_SETTINGS = ACTION_ADD_ACCOUNT_SETTINGS;
  var ACTION_AIRPLANE_MODE_SETTINGS = 'android.settings.AIRPLANE_MODE_SETTINGS';
  exports.ACTION_AIRPLANE_MODE_SETTINGS = ACTION_AIRPLANE_MODE_SETTINGS;
  var ACTION_APN_SETTINGS = 'android.settings.APN_SETTINGS';
  exports.ACTION_APN_SETTINGS = ACTION_APN_SETTINGS;
  var ACTION_APPLICATION_DETAILS_SETTINGS = 'android.settings.APPLICATION_DETAILS_SETTINGS';
  exports.ACTION_APPLICATION_DETAILS_SETTINGS = ACTION_APPLICATION_DETAILS_SETTINGS;
  var ACTION_APPLICATION_DEVELOPMENT_SETTINGS = 'android.settings.APPLICATION_DEVELOPMENT_SETTINGS';
  exports.ACTION_APPLICATION_DEVELOPMENT_SETTINGS = ACTION_APPLICATION_DEVELOPMENT_SETTINGS;
  var ACTION_APPLICATION_SETTINGS = 'android.settings.APPLICATION_SETTINGS';
  exports.ACTION_APPLICATION_SETTINGS = ACTION_APPLICATION_SETTINGS;
  var ACTION_APP_NOTIFICATION_SETTINGS = 'android.settings.APP_NOTIFICATION_SETTINGS';
  exports.ACTION_APP_NOTIFICATION_SETTINGS = ACTION_APP_NOTIFICATION_SETTINGS;
  var ACTION_APP_OPS_SETTINGS = 'android.settings.APP_OPS_SETTINGS';
  exports.ACTION_APP_OPS_SETTINGS = ACTION_APP_OPS_SETTINGS;
  var ACTION_BATTERY_SAVER_SETTINGS = 'android.settings.BATTERY_SAVER_SETTINGS';
  exports.ACTION_BATTERY_SAVER_SETTINGS = ACTION_BATTERY_SAVER_SETTINGS;
  var ACTION_BLUETOOTH_SETTINGS = 'android.settings.BLUETOOTH_SETTINGS';
  exports.ACTION_BLUETOOTH_SETTINGS = ACTION_BLUETOOTH_SETTINGS;
  var ACTION_CAPTIONING_SETTINGS = 'android.settings.CAPTIONING_SETTINGS';
  exports.ACTION_CAPTIONING_SETTINGS = ACTION_CAPTIONING_SETTINGS;
  var ACTION_CAST_SETTINGS = 'android.settings.CAST_SETTINGS';
  exports.ACTION_CAST_SETTINGS = ACTION_CAST_SETTINGS;
  var ACTION_DATA_ROAMING_SETTINGS = 'android.settings.DATA_ROAMING_SETTINGS';
  exports.ACTION_DATA_ROAMING_SETTINGS = ACTION_DATA_ROAMING_SETTINGS;
  var ACTION_DATE_SETTINGS = 'android.settings.DATE_SETTINGS';
  exports.ACTION_DATE_SETTINGS = ACTION_DATE_SETTINGS;
  var ACTION_DEVICE_INFO_SETTINGS = 'android.settings.DEVICE_INFO_SETTINGS';
  exports.ACTION_DEVICE_INFO_SETTINGS = ACTION_DEVICE_INFO_SETTINGS;
  var ACTION_DEVICE_NAME = 'android.settings.DEVICE_NAME';
  exports.ACTION_DEVICE_NAME = ACTION_DEVICE_NAME;
  var ACTION_DISPLAY_SETTINGS = 'android.settings.DISPLAY_SETTINGS';
  exports.ACTION_DISPLAY_SETTINGS = ACTION_DISPLAY_SETTINGS;
  var ACTION_DREAM_SETTINGS = 'android.settings.DREAM_SETTINGS';
  exports.ACTION_DREAM_SETTINGS = ACTION_DREAM_SETTINGS;
  var ACTION_HARD_KEYBOARD_SETTINGS = 'android.settings.HARD_KEYBOARD_SETTINGS';
  exports.ACTION_HARD_KEYBOARD_SETTINGS = ACTION_HARD_KEYBOARD_SETTINGS;
  var ACTION_HOME_SETTINGS = 'android.settings.HOME_SETTINGS';
  exports.ACTION_HOME_SETTINGS = ACTION_HOME_SETTINGS;
  var ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS = 'android.settings.IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS';
  exports.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS = ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS;
  var ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS = 'android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS';
  exports.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS = ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS;
  var ACTION_INPUT_METHOD_SETTINGS = 'android.settings.INPUT_METHOD_SETTINGS';
  exports.ACTION_INPUT_METHOD_SETTINGS = ACTION_INPUT_METHOD_SETTINGS;
  var ACTION_INPUT_METHOD_SUBTYPE_SETTINGS = 'android.settings.INPUT_METHOD_SUBTYPE_SETTINGS';
  exports.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS = ACTION_INPUT_METHOD_SUBTYPE_SETTINGS;
  var ACTION_INTERNAL_STORAGE_SETTINGS = 'android.settings.INTERNAL_STORAGE_SETTINGS';
  exports.ACTION_INTERNAL_STORAGE_SETTINGS = ACTION_INTERNAL_STORAGE_SETTINGS;
  var ACTION_LOCALE_SETTINGS = 'android.settings.LOCALE_SETTINGS';
  exports.ACTION_LOCALE_SETTINGS = ACTION_LOCALE_SETTINGS;
  var ACTION_LOCATION_SOURCE_SETTINGS = 'android.settings.LOCATION_SOURCE_SETTINGS';
  exports.ACTION_LOCATION_SOURCE_SETTINGS = ACTION_LOCATION_SOURCE_SETTINGS;
  var ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS = 'android.settings.MANAGE_ALL_APPLICATIONS_SETTINGS';
  exports.ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS = ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS;
  var ACTION_MANAGE_APPLICATIONS_SETTINGS = 'android.settings.MANAGE_APPLICATIONS_SETTINGS';
  exports.ACTION_MANAGE_APPLICATIONS_SETTINGS = ACTION_MANAGE_APPLICATIONS_SETTINGS;
  var ACTION_MANAGE_DEFAULT_APPS_SETTINGS = 'android.settings.MANAGE_DEFAULT_APPS_SETTINGS';
  exports.ACTION_MANAGE_DEFAULT_APPS_SETTINGS = ACTION_MANAGE_DEFAULT_APPS_SETTINGS;
  var ACTION_MEMORY_CARD_SETTINGS = 'android.settings.MEMORY_CARD_SETTINGS';
  exports.ACTION_MEMORY_CARD_SETTINGS = ACTION_MEMORY_CARD_SETTINGS;
  var ACTION_MONITORING_CERT_INFO = 'android.settings.MONITORING_CERT_INFO';
  exports.ACTION_MONITORING_CERT_INFO = ACTION_MONITORING_CERT_INFO;
  var ACTION_NETWORK_OPERATOR_SETTINGS = 'android.settings.NETWORK_OPERATOR_SETTINGS';
  exports.ACTION_NETWORK_OPERATOR_SETTINGS = ACTION_NETWORK_OPERATOR_SETTINGS;
  var ACTION_NFCSHARING_SETTINGS = 'android.settings.NFCSHARING_SETTINGS';
  exports.ACTION_NFCSHARING_SETTINGS = ACTION_NFCSHARING_SETTINGS;
  var ACTION_NFC_PAYMENT_SETTINGS = 'android.settings.NFC_PAYMENT_SETTINGS';
  exports.ACTION_NFC_PAYMENT_SETTINGS = ACTION_NFC_PAYMENT_SETTINGS;
  var ACTION_NFC_SETTINGS = 'android.settings.NFC_SETTINGS';
  exports.ACTION_NFC_SETTINGS = ACTION_NFC_SETTINGS;
  var ACTION_NIGHT_DISPLAY_SETTINGS = 'android.settings.NIGHT_DISPLAY_SETTINGS';
  exports.ACTION_NIGHT_DISPLAY_SETTINGS = ACTION_NIGHT_DISPLAY_SETTINGS;
  var ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS = 'android.settings.NOTIFICATION_POLICY_ACCESS_SETTINGS';
  exports.ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS = ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS;
  var ACTION_NOTIFICATION_SETTINGS = 'android.settings.NOTIFICATION_SETTINGS';
  exports.ACTION_NOTIFICATION_SETTINGS = ACTION_NOTIFICATION_SETTINGS;
  var ACTION_PAIRING_SETTINGS = 'android.settings.PAIRING_SETTINGS';
  exports.ACTION_PAIRING_SETTINGS = ACTION_PAIRING_SETTINGS;
  var ACTION_PRIVACY_SETTINGS = 'android.settings.PRIVACY_SETTINGS';
  exports.ACTION_PRIVACY_SETTINGS = ACTION_PRIVACY_SETTINGS;
  var ACTION_QUICK_LAUNCH_SETTINGS = 'android.settings.QUICK_LAUNCH_SETTINGS';
  exports.ACTION_QUICK_LAUNCH_SETTINGS = ACTION_QUICK_LAUNCH_SETTINGS;
  var ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS = 'android.settings.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS';
  exports.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS = ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS;
  var ACTION_SECURITY_SETTINGS = 'android.settings.SECURITY_SETTINGS';
  exports.ACTION_SECURITY_SETTINGS = ACTION_SECURITY_SETTINGS;
  var ACTION_SETTINGS = 'android.settings.SETTINGS';
  exports.ACTION_SETTINGS = ACTION_SETTINGS;
  var ACTION_SHOW_ADMIN_SUPPORT_DETAILS = 'android.settings.SHOW_ADMIN_SUPPORT_DETAILS';
  exports.ACTION_SHOW_ADMIN_SUPPORT_DETAILS = ACTION_SHOW_ADMIN_SUPPORT_DETAILS;
  var ACTION_SHOW_INPUT_METHOD_PICKER = 'android.settings.SHOW_INPUT_METHOD_PICKER';
  exports.ACTION_SHOW_INPUT_METHOD_PICKER = ACTION_SHOW_INPUT_METHOD_PICKER;
  var ACTION_SHOW_REGULATORY_INFO = 'android.settings.SHOW_REGULATORY_INFO';
  exports.ACTION_SHOW_REGULATORY_INFO = ACTION_SHOW_REGULATORY_INFO;
  var ACTION_SHOW_REMOTE_BUGREPORT_DIALOG = 'android.settings.SHOW_REMOTE_BUGREPORT_DIALOG';
  exports.ACTION_SHOW_REMOTE_BUGREPORT_DIALOG = ACTION_SHOW_REMOTE_BUGREPORT_DIALOG;
  var ACTION_SOUND_SETTINGS = 'android.settings.SOUND_SETTINGS';
  exports.ACTION_SOUND_SETTINGS = ACTION_SOUND_SETTINGS;
  var ACTION_STORAGE_MANAGER_SETTINGS = 'android.settings.STORAGE_MANAGER_SETTINGS';
  exports.ACTION_STORAGE_MANAGER_SETTINGS = ACTION_STORAGE_MANAGER_SETTINGS;
  var ACTION_SYNC_SETTINGS = 'android.settings.SYNC_SETTINGS';
  exports.ACTION_SYNC_SETTINGS = ACTION_SYNC_SETTINGS;
  var ACTION_SYSTEM_UPDATE_SETTINGS = 'android.settings.SYSTEM_UPDATE_SETTINGS';
  exports.ACTION_SYSTEM_UPDATE_SETTINGS = ACTION_SYSTEM_UPDATE_SETTINGS;
  var ACTION_TETHER_PROVISIONING_UI = 'android.settings.TETHER_PROVISIONING_UI';
  exports.ACTION_TETHER_PROVISIONING_UI = ACTION_TETHER_PROVISIONING_UI;
  var ACTION_TRUSTED_CREDENTIALS_USER = 'android.settings.TRUSTED_CREDENTIALS_USER';
  exports.ACTION_TRUSTED_CREDENTIALS_USER = ACTION_TRUSTED_CREDENTIALS_USER;
  var ACTION_USAGE_ACCESS_SETTINGS = 'android.settings.USAGE_ACCESS_SETTINGS';
  exports.ACTION_USAGE_ACCESS_SETTINGS = ACTION_USAGE_ACCESS_SETTINGS;
  var ACTION_USER_DICTIONARY_INSERT = 'android.settings.USER_DICTIONARY_INSERT';
  exports.ACTION_USER_DICTIONARY_INSERT = ACTION_USER_DICTIONARY_INSERT;
  var ACTION_USER_DICTIONARY_SETTINGS = 'android.settings.USER_DICTIONARY_SETTINGS';
  exports.ACTION_USER_DICTIONARY_SETTINGS = ACTION_USER_DICTIONARY_SETTINGS;
  var ACTION_USER_SETTINGS = 'android.settings.USER_SETTINGS';
  exports.ACTION_USER_SETTINGS = ACTION_USER_SETTINGS;
  var ACTION_VOICE_CONTROL_AIRPLANE_MODE = 'android.settings.VOICE_CONTROL_AIRPLANE_MODE';
  exports.ACTION_VOICE_CONTROL_AIRPLANE_MODE = ACTION_VOICE_CONTROL_AIRPLANE_MODE;
  var ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE = 'android.settings.VOICE_CONTROL_BATTERY_SAVER_MODE';
  exports.ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE = ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE;
  var ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE = 'android.settings.VOICE_CONTROL_DO_NOT_DISTURB_MODE';
  exports.ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE = ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE;
  var ACTION_VOICE_INPUT_SETTINGS = 'android.settings.VOICE_INPUT_SETTINGS';
  exports.ACTION_VOICE_INPUT_SETTINGS = ACTION_VOICE_INPUT_SETTINGS;
  var ACTION_VPN_SETTINGS = 'android.settings.VPN_SETTINGS';
  exports.ACTION_VPN_SETTINGS = ACTION_VPN_SETTINGS;
  var ACTION_VR_LISTENER_SETTINGS = 'android.settings.VR_LISTENER_SETTINGS';
  exports.ACTION_VR_LISTENER_SETTINGS = ACTION_VR_LISTENER_SETTINGS;
  var ACTION_WEBVIEW_SETTINGS = 'android.settings.WEBVIEW_SETTINGS';
  exports.ACTION_WEBVIEW_SETTINGS = ACTION_WEBVIEW_SETTINGS;
  var ACTION_WIFI_IP_SETTINGS = 'android.settings.WIFI_IP_SETTINGS';
  exports.ACTION_WIFI_IP_SETTINGS = ACTION_WIFI_IP_SETTINGS;
  var ACTION_WIFI_SETTINGS = 'android.settings.WIFI_SETTINGS';
  exports.ACTION_WIFI_SETTINGS = ACTION_WIFI_SETTINGS;
  var ACTION_WIRELESS_SETTINGS = 'android.settings.WIRELESS_SETTINGS';
  exports.ACTION_WIRELESS_SETTINGS = ACTION_WIRELESS_SETTINGS;
  var ACTION_ZEN_MODE_AUTOMATION_SETTINGS = 'android.settings.ZEN_MODE_AUTOMATION_SETTINGS';
  exports.ACTION_ZEN_MODE_AUTOMATION_SETTINGS = ACTION_ZEN_MODE_AUTOMATION_SETTINGS;
  var ACTION_ZEN_MODE_EVENT_RULE_SETTINGS = 'android.settings.ZEN_MODE_EVENT_RULE_SETTINGS';
  exports.ACTION_ZEN_MODE_EVENT_RULE_SETTINGS = ACTION_ZEN_MODE_EVENT_RULE_SETTINGS;
  var ACTION_ZEN_MODE_EXTERNAL_RULE_SETTINGS = 'android.settings.ZEN_MODE_EXTERNAL_RULE_SETTINGS';
  exports.ACTION_ZEN_MODE_EXTERNAL_RULE_SETTINGS = ACTION_ZEN_MODE_EXTERNAL_RULE_SETTINGS;
  var ACTION_ZEN_MODE_PRIORITY_SETTINGS = 'android.settings.ZEN_MODE_PRIORITY_SETTINGS';
  exports.ACTION_ZEN_MODE_PRIORITY_SETTINGS = ACTION_ZEN_MODE_PRIORITY_SETTINGS;
  var ACTION_ZEN_MODE_SCHEDULE_RULE_SETTINGS = 'android.settings.ZEN_MODE_SCHEDULE_RULE_SETTINGS';
  exports.ACTION_ZEN_MODE_SCHEDULE_RULE_SETTINGS = ACTION_ZEN_MODE_SCHEDULE_RULE_SETTINGS;
  var ACTION_ZEN_MODE_SETTINGS = 'android.settings.ZEN_MODE_SETTINGS';
  exports.ACTION_ZEN_MODE_SETTINGS = ACTION_ZEN_MODE_SETTINGS;

  function startActivityAsync(activity) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var uri = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (!_ExponentIntentLauncher.default.startActivity) {
      throw new _expoErrors.UnavailabilityError('IntentLauncherAndroid', 'startActivityAsync');
    }

    return _ExponentIntentLauncher.default.startActivity(activity, data, uri);
  }
},768,[1,368,769]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentIntentLauncher;
  exports.default = _default;
},769,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.activate = activate;
  exports.deactivate = deactivate;
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _ExponentKeepAwake = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var KeepAwake = function (_React$PureComponent) {
    (0, _inherits2.default)(KeepAwake, _React$PureComponent);

    function KeepAwake() {
      (0, _classCallCheck2.default)(this, KeepAwake);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(KeepAwake).apply(this, arguments));
    }

    (0, _createClass2.default)(KeepAwake, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        _ExponentKeepAwake.default.activate();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _ExponentKeepAwake.default.deactivate();
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return KeepAwake;
  }(_react.default.PureComponent);

  exports.default = KeepAwake;
  KeepAwake.activate = activate;
  KeepAwake.deactivate = deactivate;

  function activate() {
    _ExponentKeepAwake.default.activate();
  }

  function deactivate() {
    _ExponentKeepAwake.default.deactivate();
  }
},770,[1,21,22,34,37,40,51,771]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentKeepAwake;
  exports.default = _default;
},771,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.composeAsync = composeAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _ExponentMailComposer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function composeAsync(options) {
    return _regenerator.default.async(function composeAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(_ExponentMailComposer.default.composeAsync(options));

          case 2:
            return _context.abrupt("return", _context.sent);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},772,[1,130,773]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentMailComposer;
  exports.default = _default;
},773,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _fbemitter = _$$_REQUIRE(_dependencyMap[4]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);

  var _ExponentNotifications = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _emitter;

  var _initialNotification;

  function _maybeInitEmitter() {
    if (!_emitter) {
      _emitter = new _fbemitter.EventEmitter();

      _reactNative.DeviceEventEmitter.addListener('Exponent.notification', _emitNotification);
    }
  }

  function _emitNotification(notification) {
    if (typeof notification === 'string') {
      notification = JSON.parse(notification);
    }

    notification = (0, _objectSpread2.default)({}, notification);

    if (typeof notification.data === 'string') {
      try {
        notification.data = JSON.parse(notification.data);
      } catch (e) {}
    }

    _emitter.emit('notification', notification);
  }

  function _processNotification(notification) {
    notification = (0, _extends2.default)({}, notification);

    if (!notification.data) {
      notification.data = {};
    }

    if (notification.hasOwnProperty('count')) {
      delete notification.count;
    }

    if (_reactNative.Platform.OS === 'ios') {
      if (notification.android) {
        delete notification.android;
      }

      if (notification.ios) {
        notification = (0, _extends2.default)(notification, notification.ios);
        delete notification.ios;
      }
    }

    if (_reactNative.Platform.OS === 'android') {
      if (notification.ios) {
        delete notification.ios;
      }

      if (notification.android) {
        notification = (0, _extends2.default)(notification, notification.android);
        delete notification.android;
      }
    }

    return notification;
  }

  function _validateNotification(notification) {
    if (_reactNative.Platform.OS === 'ios') {
      (0, _invariant.default)(!!notification.title && !!notification.body, 'Local notifications on iOS require both a title and a body');
    } else if (_reactNative.Platform.OS === 'android') {
      (0, _invariant.default)(!!notification.title, 'Local notifications on Android require a title');
    }
  }

  var ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';
  var IS_USING_NEW_BINARY = typeof _ExponentNotifications.default.createChannel === 'function';

  function _legacyReadChannel(id) {
    var channelString;
    return _regenerator.default.async(function _legacyReadChannel$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _regenerator.default.awrap(_reactNative.AsyncStorage.getItem("__expo_internal_channel_" + id));

          case 3:
            channelString = _context.sent;

            if (!channelString) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", JSON.parse(channelString));

          case 6:
            _context.next = 10;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);

          case 10:
            return _context.abrupt("return", null);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[0, 8]]);
  }

  function _legacyDeleteChannel(id) {
    return _reactNative.AsyncStorage.removeItem("__expo_internal_channel_" + id);
  }

  if (_reactNative.Platform.OS === 'android') {
    _reactNative.AsyncStorage.clear = function _callee(callback) {
      var keys, result, filteredKeys;
      return _regenerator.default.async(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return _regenerator.default.awrap(_reactNative.AsyncStorage.getAllKeys());

            case 3:
              keys = _context2.sent;
              result = null;

              if (!(keys && keys.length)) {
                _context2.next = 9;
                break;
              }

              filteredKeys = keys.filter(function (key) {
                return !key.startsWith(ASYNC_STORAGE_PREFIX);
              });
              _context2.next = 9;
              return _regenerator.default.awrap(_reactNative.AsyncStorage.multiRemove(filteredKeys));

            case 9:
              callback && callback();
              _context2.next = 16;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](0);
              callback && callback(_context2.t0);
              throw _context2.t0;

            case 16:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[0, 12]]);
    };
  }

  function _legacySaveChannel(id, channel) {
    return _reactNative.AsyncStorage.setItem("__expo_internal_channel_" + id, JSON.stringify(channel));
  }

  var _default = {
    _setInitialNotification: function _setInitialNotification(notification) {
      _initialNotification = notification;
    },
    createCategoryAsync: function createCategoryAsync(categoryId, actions) {
      return _ExponentNotifications.default.createCategoryAsync(categoryId, actions);
    },
    deleteCategoryAsync: function deleteCategoryAsync(categoryId) {
      return _ExponentNotifications.default.deleteCategoryAsync(categoryId);
    },
    getExpoPushTokenAsync: function getExpoPushTokenAsync() {
      return _ExponentNotifications.default.getExponentPushTokenAsync();
    },
    getDevicePushTokenAsync: function getDevicePushTokenAsync(config) {
      return _ExponentNotifications.default.getDevicePushTokenAsync(config || {});
    },
    createChannelAndroidAsync: function createChannelAndroidAsync(id, channel) {
      if (_reactNative.Platform.OS !== 'android') {
        console.warn("createChannelAndroidAsync(...) has no effect on " + _reactNative.Platform.OS);
        return Promise.resolve();
      }

      if (!IS_USING_NEW_BINARY) {
        return _legacySaveChannel(id, channel);
      }

      return _ExponentNotifications.default.createChannel(id, channel);
    },
    deleteChannelAndroidAsync: function deleteChannelAndroidAsync(id) {
      if (_reactNative.Platform.OS === 'ios') {
        console.warn('deleteChannelAndroidAsync(...) has no effect on iOS');
        return Promise.resolve();
      }

      if (!IS_USING_NEW_BINARY) {
        return Promise.resolve();
      }

      return _ExponentNotifications.default.deleteChannel(id);
    },
    presentLocalNotificationAsync: function presentLocalNotificationAsync(notification) {
      var nativeNotification, _channel;

      return _regenerator.default.async(function presentLocalNotificationAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _validateNotification(notification);

              nativeNotification = _processNotification(notification);

              if (!(_reactNative.Platform.OS === 'ios')) {
                _context3.next = 6;
                break;
              }

              return _context3.abrupt("return", _ExponentNotifications.default.presentLocalNotification(nativeNotification));

            case 6:
              if (!nativeNotification.channelId) {
                _context3.next = 10;
                break;
              }

              _context3.next = 9;
              return _regenerator.default.awrap(_legacyReadChannel(nativeNotification.channelId));

            case 9:
              _channel = _context3.sent;

            case 10:
              if (!IS_USING_NEW_BINARY) {
                _context3.next = 15;
                break;
              }

              _legacyDeleteChannel(nativeNotification.channelId);

              return _context3.abrupt("return", _ExponentNotifications.default.presentLocalNotificationWithChannel(nativeNotification, _channel));

            case 15:
              if (_channel) {
                nativeNotification.sound = _channel.sound;
                nativeNotification.priority = _channel.priority;
                nativeNotification.vibrate = _channel.vibrate;
              }

              return _context3.abrupt("return", _ExponentNotifications.default.presentLocalNotification(nativeNotification));

            case 17:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    },
    scheduleLocalNotificationAsync: function scheduleLocalNotificationAsync(notification) {
      var options,
          now,
          nativeNotification,
          timeAsDateObj,
          validOptions,
          _channel2,
          _args4 = arguments;

      return _regenerator.default.async(function scheduleLocalNotificationAsync$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
              now = Date.now();

              _validateNotification(notification);

              nativeNotification = _processNotification(notification);

              if (!options.time) {
                _context4.next = 11;
                break;
              }

              timeAsDateObj = null;

              if (options.time && typeof options.time === 'number') {
                timeAsDateObj = new Date(options.time);

                if (timeAsDateObj.toString() === 'Invalid Date') {
                  timeAsDateObj = null;
                }
              } else if (options.time && options.time instanceof Date) {
                timeAsDateObj = options.time;
              }

              if (timeAsDateObj) {
                _context4.next = 9;
                break;
              }

              throw new Error("Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.");

            case 9:
              if (timeAsDateObj.getTime() < now) {
                console.warn("Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?");
              }

              if (_reactNative.Platform.OS === 'ios') {
                options = (0, _objectSpread2.default)({}, options, {
                  time: timeAsDateObj.getTime()
                });
              } else {
                options = (0, _objectSpread2.default)({}, options, {
                  time: timeAsDateObj
                });
              }

            case 11:
              if (!(options.intervalMs != null && options.repeat != null)) {
                _context4.next = 13;
                break;
              }

              throw new Error("Pass either the \"repeat\" option or \"intervalMs\" option, not both");

            case 13:
              if (!(options.repeat != null)) {
                _context4.next = 17;
                break;
              }

              validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);

              if (validOptions.has(options.repeat)) {
                _context4.next = 17;
                break;
              }

              throw new Error("Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option");

            case 17:
              if (!(options.intervalMs != null)) {
                _context4.next = 22;
                break;
              }

              if (!(_reactNative.Platform.OS === 'ios')) {
                _context4.next = 20;
                break;
              }

              throw new Error("The \"intervalMs\" option is not supported on iOS");

            case 20:
              if (!(options.intervalMs <= 0 || !Number.isInteger(options.intervalMs))) {
                _context4.next = 22;
                break;
              }

              throw new Error("Pass an integer greater than zero as the value for the \"intervalMs\" option");

            case 22:
              if (!(_reactNative.Platform.OS === 'ios')) {
                _context4.next = 29;
                break;
              }

              if (!options.repeat) {
                _context4.next = 26;
                break;
              }

              console.warn('Ability to schedule an automatically repeated notification is deprecated on iOS and will be removed in the next SDK release.');
              return _context4.abrupt("return", _ExponentNotifications.default.legacyScheduleLocalRepeatingNotification(nativeNotification, options));

            case 26:
              return _context4.abrupt("return", _ExponentNotifications.default.scheduleLocalNotification(nativeNotification, options));

            case 29:
              if (!nativeNotification.channelId) {
                _context4.next = 33;
                break;
              }

              _context4.next = 32;
              return _regenerator.default.awrap(_legacyReadChannel(nativeNotification.channelId));

            case 32:
              _channel2 = _context4.sent;

            case 33:
              if (!IS_USING_NEW_BINARY) {
                _context4.next = 38;
                break;
              }

              _legacyDeleteChannel(nativeNotification.channelId);

              return _context4.abrupt("return", _ExponentNotifications.default.scheduleLocalNotificationWithChannel(nativeNotification, options, _channel2));

            case 38:
              if (_channel2) {
                nativeNotification.sound = _channel2.sound;
                nativeNotification.priority = _channel2.priority;
                nativeNotification.vibrate = _channel2.vibrate;
              }

              return _context4.abrupt("return", _ExponentNotifications.default.scheduleLocalNotification(nativeNotification, options));

            case 40:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    },
    dismissNotificationAsync: function dismissNotificationAsync(notificationId) {
      return _regenerator.default.async(function dismissNotificationAsync$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(_reactNative.Platform.OS === 'android')) {
                _context5.next = 4;
                break;
              }

              return _context5.abrupt("return", _ExponentNotifications.default.dismissNotification(notificationId));

            case 4:
              throw new Error('Dismissing notifications is not supported on iOS');

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    },
    dismissAllNotificationsAsync: function dismissAllNotificationsAsync() {
      return _regenerator.default.async(function dismissAllNotificationsAsync$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!(_reactNative.Platform.OS === 'android')) {
                _context6.next = 4;
                break;
              }

              return _context6.abrupt("return", _ExponentNotifications.default.dismissAllNotifications());

            case 4:
              throw new Error('Dismissing notifications is not supported on iOS');

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    },
    cancelScheduledNotificationAsync: function cancelScheduledNotificationAsync(notificationId) {
      return _ExponentNotifications.default.cancelScheduledNotificationAsync(notificationId);
    },
    cancelAllScheduledNotificationsAsync: function cancelAllScheduledNotificationsAsync() {
      return _ExponentNotifications.default.cancelAllScheduledNotificationsAsync();
    },
    addListener: function addListener(listener) {
      _maybeInitEmitter();

      if (_initialNotification) {
        var initialNotification = _initialNotification;
        _initialNotification = null;
        setTimeout(function () {
          _emitNotification(initialNotification);
        }, 0);
      }

      return _emitter.addListener('notification', listener);
    },
    getBadgeNumberAsync: function getBadgeNumberAsync() {
      return _regenerator.default.async(function getBadgeNumberAsync$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (_ExponentNotifications.default.getBadgeNumberAsync) {
                _context7.next = 2;
                break;
              }

              return _context7.abrupt("return", 0);

            case 2:
              return _context7.abrupt("return", _ExponentNotifications.default.getBadgeNumberAsync());

            case 3:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    },
    setBadgeNumberAsync: function setBadgeNumberAsync(number) {
      return _regenerator.default.async(function setBadgeNumberAsync$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (_ExponentNotifications.default.setBadgeNumberAsync) {
                _context8.next = 2;
                break;
              }

              return _context8.abrupt("return");

            case 2:
              return _context8.abrupt("return", _ExponentNotifications.default.setBadgeNumberAsync(number));

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    }
  };
  exports.default = _default;
},774,[1,130,3,48,343,334,5,775]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentNotifications;
  exports.default = _default;
},775,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.openDatabase = openDatabase;
  exports.default = undefined;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  _$$_REQUIRE(_dependencyMap[4]);

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);

  var _custom = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var ExponentSQLite = _reactNative.NativeModules.ExponentSQLite;

  var SQLiteDatabase = function () {
    function SQLiteDatabase(name) {
      (0, _classCallCheck2.default)(this, SQLiteDatabase);
      this._closed = false;
      this._name = name;
    }

    (0, _createClass2.default)(SQLiteDatabase, [{
      key: "exec",
      value: function exec(queries, readOnly, callback) {
        if (this._closed) {
          throw new Error("The SQLite database is closed");
        }

        ExponentSQLite.exec(this._name, queries.map(_serializeQuery), readOnly).then(function (nativeResultSets) {
          callback(null, nativeResultSets.map(_deserializeResultSet));
        }, function (error) {
          callback(error instanceof Error ? error : new Error(error));
        });
      }
    }, {
      key: "close",
      value: function close() {
        this._closed = true;
        ExponentSQLite.close(this._name);
      }
    }]);
    return SQLiteDatabase;
  }();

  function _serializeQuery(query) {
    return [query.sql, _reactNative.Platform.OS === 'android' ? query.args.map(_escapeBlob) : query.args];
  }

  function _deserializeResultSet(nativeResult) {
    var _nativeResult = (0, _slicedToArray2.default)(nativeResult, 5),
        errorMessage = _nativeResult[0],
        insertId = _nativeResult[1],
        rowsAffected = _nativeResult[2],
        columns = _nativeResult[3],
        rows = _nativeResult[4];

    if (errorMessage !== null) {
      return {
        error: new Error(errorMessage)
      };
    }

    return {
      insertId: insertId,
      rowsAffected: rowsAffected,
      rows: rows.map(function (row) {
        return (0, _lodash.default)(columns, row);
      })
    };
  }

  function _escapeBlob(data) {
    if (typeof data === 'string') {
      return data.replace(/\u0002/g, "\x02\x02").replace(/\u0001/g, "\x01\x02").replace(/\u0000/g, "\x01\x01");
    } else {
      return data;
    }
  }

  var _openExpoSQLiteDatabase = (0, _custom.default)(SQLiteDatabase);

  function openDatabase(name) {
    var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1.0';
    var description = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : name;
    var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var callback = arguments.length > 4 ? arguments[4] : undefined;

    if (name === undefined) {
      throw new TypeError("The database name must not be undefined");
    }

    return _openExpoSQLiteDatabase(name, version, description, size, callback);
  }

  var _default = {
    openDatabase: openDatabase
  };
  exports.default = _default;
},776,[1,11,21,22,777,778,5,779]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  if (!process.nextTick) {
    process.nextTick = function (callback) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      setTimeout(function () {
        return callback.apply(undefined, args);
      }, 0);
    };
  }
},777,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      object[key] = value;
    }
  }

  function baseZipObject(props, values, assignFunc) {
    var index = -1,
        length = props.length,
        valsLength = values.length,
        result = {};

    while (++index < length) {
      var value = index < valsLength ? values[index] : undefined;
      assignFunc(result, props[index], value);
    }

    return result;
  }

  function zipObject(props, values) {
    return baseZipObject(props || [], values || [], assignValue);
  }

  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = zipObject;
},778,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},779,[780]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var immediate = _$$_REQUIRE(_dependencyMap[0]);

  var argsarray = _$$_REQUIRE(_dependencyMap[1]);

  var WebSQLDatabase = _$$_REQUIRE(_dependencyMap[2]);

  function customOpenDatabase(SQLiteDatabase) {
    function createDb(dbName, dbVersion) {
      var sqliteDatabase = new SQLiteDatabase(dbName);
      return new WebSQLDatabase(dbVersion, sqliteDatabase);
    }

    function openDatabase(args) {
      if (args.length < 4) {
        throw new Error("Failed to execute 'openDatabase': 4 arguments required, but only " + args.length + ' present');
      }

      var dbName = args[0];
      var dbVersion = args[1];
      var callback = args[4];
      var db = createDb(dbName, dbVersion);

      if (typeof callback === 'function') {
        immediate(function () {
          callback(db);
        });
      }

      return db;
    }

    return argsarray(openDatabase);
  }

  module.exports = customOpenDatabase;
},780,[781,787,788]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var types = [_$$_REQUIRE(_dependencyMap[0]), _$$_REQUIRE(_dependencyMap[1]), _$$_REQUIRE(_dependencyMap[2]), _$$_REQUIRE(_dependencyMap[3]), _$$_REQUIRE(_dependencyMap[4])];
  var draining;
  var currentQueue;
  var queueIndex = -1;
  var queue = [];
  var scheduled = false;

  function cleanUpNextTick() {
    if (!draining || !currentQueue) {
      return;
    }

    draining = false;

    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }

    if (queue.length) {
      nextTick();
    }
  }

  function nextTick() {
    if (draining) {
      return;
    }

    scheduled = false;
    draining = true;
    var len = queue.length;
    var timeout = setTimeout(cleanUpNextTick);

    while (len) {
      currentQueue = queue;
      queue = [];

      while (currentQueue && ++queueIndex < len) {
        currentQueue[queueIndex].run();
      }

      queueIndex = -1;
      len = queue.length;
    }

    currentQueue = null;
    queueIndex = -1;
    draining = false;
    clearTimeout(timeout);
  }

  var scheduleDrain;
  var i = -1;
  var len = types.length;

  while (++i < len) {
    if (types[i] && types[i].test && types[i].test()) {
      scheduleDrain = types[i].install(nextTick);
      break;
    }
  }

  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }

  Item.prototype.run = function () {
    var fun = this.fun;
    var array = this.array;

    switch (array.length) {
      case 0:
        return fun();

      case 1:
        return fun(array[0]);

      case 2:
        return fun(array[0], array[1]);

      case 3:
        return fun(array[0], array[1], array[2]);

      default:
        return fun.apply(null, array);
    }
  };

  module.exports = immediate;

  function immediate(task) {
    var args = new Array(arguments.length - 1);

    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }

    queue.push(new Item(task, args));

    if (!scheduled && !draining) {
      scheduled = true;
      scheduleDrain();
    }
  }
},781,[782,783,784,785,786]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.test = function () {
    return typeof process !== 'undefined' && !process.browser;
  };

  exports.install = function (func) {
    return function () {
      process.nextTick(func);
    };
  };
},782,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Mutation = global.MutationObserver || global.WebKitMutationObserver;

  exports.test = function () {
    return Mutation;
  };

  exports.install = function (handle) {
    var called = 0;
    var observer = new Mutation(handle);
    var element = global.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    return function () {
      element.data = called = ++called % 2;
    };
  };
},783,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.test = function () {
    if (global.setImmediate) {
      return false;
    }

    return typeof global.MessageChannel !== 'undefined';
  };

  exports.install = function (func) {
    var channel = new global.MessageChannel();
    channel.port1.onmessage = func;
    return function () {
      channel.port2.postMessage(0);
    };
  };
},784,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.test = function () {
    return 'document' in global && 'onreadystatechange' in global.document.createElement('script');
  };

  exports.install = function (handle) {
    return function () {
      var scriptEl = global.document.createElement('script');

      scriptEl.onreadystatechange = function () {
        handle();
        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };

      global.document.documentElement.appendChild(scriptEl);
      return handle;
    };
  };
},785,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.test = function () {
    return true;
  };

  exports.install = function (t) {
    return function () {
      setTimeout(t, 0);
    };
  };
},786,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = argsArray;

  function argsArray(fun) {
    return function () {
      var len = arguments.length;

      if (len) {
        var args = [];
        var i = -1;

        while (++i < len) {
          args[i] = arguments[i];
        }

        return fun.call(this, args);
      } else {
        return fun.call(this, []);
      }
    };
  }
},787,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Queue = _$$_REQUIRE(_dependencyMap[0]);

  var immediate = _$$_REQUIRE(_dependencyMap[1]);

  var noop = _$$_REQUIRE(_dependencyMap[2]);

  var WebSQLTransaction = _$$_REQUIRE(_dependencyMap[3]);

  var ROLLBACK = [{
    sql: 'ROLLBACK;',
    args: []
  }];
  var COMMIT = [{
    sql: 'END;',
    args: []
  }];

  function TransactionTask(readOnly, txnCallback, errorCallback, successCallback) {
    this.readOnly = readOnly;
    this.txnCallback = txnCallback;
    this.errorCallback = errorCallback;
    this.successCallback = successCallback;
  }

  function WebSQLDatabase(dbVersion, db) {
    this.version = dbVersion;
    this._db = db;
    this._txnQueue = new Queue();
    this._running = false;
    this._currentTask = null;
  }

  WebSQLDatabase.prototype._onTransactionComplete = function (err) {
    var self = this;

    function done() {
      if (err) {
        self._currentTask.errorCallback(err);
      } else {
        self._currentTask.successCallback();
      }

      self._running = false;
      self._currentTask = null;

      self._runNextTransaction();
    }

    if (self._currentTask.readOnly) {
      done();
    } else if (err) {
      self._db.exec(ROLLBACK, false, done);
    } else {
      self._db.exec(COMMIT, false, done);
    }
  };

  WebSQLDatabase.prototype._runTransaction = function () {
    var self = this;
    var txn = new WebSQLTransaction(self);
    immediate(function () {
      self._currentTask.txnCallback(txn);

      txn._checkDone();
    });
  };

  WebSQLDatabase.prototype._runNextTransaction = function () {
    if (this._running) {
      return;
    }

    var task = this._txnQueue.shift();

    if (!task) {
      return;
    }

    this._currentTask = task;
    this._running = true;

    this._runTransaction();
  };

  WebSQLDatabase.prototype._createTransaction = function (readOnly, txnCallback, errorCallback, successCallback) {
    errorCallback = errorCallback || noop;
    successCallback = successCallback || noop;

    if (typeof txnCallback !== 'function') {
      throw new Error('The callback provided as parameter 1 is not a function.');
    }

    this._txnQueue.push(new TransactionTask(readOnly, txnCallback, errorCallback, successCallback));

    this._runNextTransaction();
  };

  WebSQLDatabase.prototype.transaction = function (txnCallback, errorCallback, successCallback) {
    this._createTransaction(false, txnCallback, errorCallback, successCallback);
  };

  WebSQLDatabase.prototype.readTransaction = function (txnCallback, errorCallback, successCallback) {
    this._createTransaction(true, txnCallback, errorCallback, successCallback);
  };

  module.exports = WebSQLDatabase;
},788,[789,781,790,791]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function Queue() {
    this.length = 0;
  }

  Queue.prototype.push = function (item) {
    var node = {
      item: item
    };

    if (this.last) {
      this.last = this.last.next = node;
    } else {
      this.last = this.first = node;
    }

    this.length++;
  };

  Queue.prototype.shift = function () {
    var node = this.first;

    if (node) {
      this.first = node.next;

      if (! --this.length) {
        this.last = undefined;
      }

      return node.item;
    }
  };

  Queue.prototype.slice = function (start, end) {
    start = typeof start === 'undefined' ? 0 : start;
    end = typeof end === 'undefined' ? Infinity : end;
    var output = [];
    var i = 0;

    for (var node = this.first; node; node = node.next) {
      if (--end < 0) {
        break;
      } else if (++i > start) {
        output.push(node.item);
      }
    }

    return output;
  };

  module.exports = Queue;
},789,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = function () {};
},790,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var noop = _$$_REQUIRE(_dependencyMap[0]);

  var Queue = _$$_REQUIRE(_dependencyMap[1]);

  var immediate = _$$_REQUIRE(_dependencyMap[2]);

  var WebSQLResultSet = _$$_REQUIRE(_dependencyMap[3]);

  function errorUnhandled() {
    return true;
  }

  function massageSQLResult(sql, insertId, rowsAffected, rows) {
    if (/^\s*UPDATE\b/i.test(sql)) {
      insertId = undefined;
    } else if (/^\s*CREATE\s+TABLE\b/i.test(sql)) {
      insertId = 0;
      rowsAffected = 0;
    } else if (/^\s*DROP\s+TABLE\b/i.test(sql)) {
      insertId = undefined;
      rowsAffected = 0;
    } else if (!/^\s*INSERT\b/i.test(sql)) {
      insertId = undefined;
    }

    return new WebSQLResultSet(insertId, rowsAffected, rows);
  }

  function SQLTask(sql, args, sqlCallback, sqlErrorCallback) {
    this.sql = sql;
    this.args = args;
    this.sqlCallback = sqlCallback;
    this.sqlErrorCallback = sqlErrorCallback;
  }

  function runBatch(self, batch) {
    function onDone() {
      self._running = false;
      runAllSql(self);
    }

    var readOnly = self._websqlDatabase._currentTask.readOnly;

    self._websqlDatabase._db.exec(batch, readOnly, function (err, results) {
      if (err) {
        self._error = err;
        return onDone();
      }

      for (var i = 0; i < results.length; i++) {
        var res = results[i];
        var batchTask = batch[i];

        if (res.error) {
          if (batchTask.sqlErrorCallback(self, res.error)) {
            self._error = res.error;
            return onDone();
          }
        } else {
          batchTask.sqlCallback(self, massageSQLResult(batch[i].sql, res.insertId, res.rowsAffected, res.rows));
        }
      }

      onDone();
    });
  }

  function runAllSql(self) {
    if (self._running || self._complete) {
      return;
    }

    if (self._error || !self._sqlQueue.length) {
      self._complete = true;
      return self._websqlDatabase._onTransactionComplete(self._error);
    }

    self._running = true;
    var batch = [];
    var task;

    while (task = self._sqlQueue.shift()) {
      batch.push(task);
    }

    runBatch(self, batch);
  }

  function executeSql(self, sql, args, sqlCallback, sqlErrorCallback) {
    self._sqlQueue.push(new SQLTask(sql, args, sqlCallback, sqlErrorCallback));

    if (self._runningTimeout) {
      return;
    }

    self._runningTimeout = true;
    immediate(function () {
      self._runningTimeout = false;
      runAllSql(self);
    });
  }

  function WebSQLTransaction(websqlDatabase) {
    this._websqlDatabase = websqlDatabase;
    this._error = null;
    this._complete = false;
    this._runningTimeout = false;
    this._sqlQueue = new Queue();

    if (!websqlDatabase._currentTask.readOnly) {
      this._sqlQueue.push(new SQLTask('BEGIN;', [], noop, noop));
    }
  }

  WebSQLTransaction.prototype.executeSql = function (sql, args, sqlCallback, sqlErrorCallback) {
    args = Array.isArray(args) ? args : [];
    sqlCallback = typeof sqlCallback === 'function' ? sqlCallback : noop;
    sqlErrorCallback = typeof sqlErrorCallback === 'function' ? sqlErrorCallback : errorUnhandled;
    executeSql(this, sql, args, sqlCallback, sqlErrorCallback);
  };

  WebSQLTransaction.prototype._checkDone = function () {
    runAllSql(this);
  };

  module.exports = WebSQLTransaction;
},791,[790,789,781,792]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function WebSQLRows(array) {
    this._array = array;
    this.length = array.length;
  }

  WebSQLRows.prototype.item = function (i) {
    return this._array[i];
  };

  function WebSQLResultSet(insertId, rowsAffected, rows) {
    this.insertId = insertId;
    this.rowsAffected = rowsAffected;
    this.rows = new WebSQLRows(rows);
  }

  module.exports = WebSQLResultSet;
},792,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.allow = allow;
  exports.allowAsync = allowAsync;
  exports.doesSupportAsync = doesSupportAsync;
  exports.Orientation = undefined;

  var _ExponentScreenOrientation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[2]);

  var Orientation;
  exports.Orientation = Orientation;

  (function (Orientation) {
    Orientation["ALL"] = "ALL";
    Orientation["ALL_BUT_UPSIDE_DOWN"] = "ALL_BUT_UPSIDE_DOWN";
    Orientation["PORTRAIT"] = "PORTRAIT";
    Orientation["PORTRAIT_UP"] = "PORTRAIT_UP";
    Orientation["PORTRAIT_DOWN"] = "PORTRAIT_DOWN";
    Orientation["LANDSCAPE"] = "LANDSCAPE";
    Orientation["LANDSCAPE_LEFT"] = "LANDSCAPE_LEFT";
    Orientation["LANDSCAPE_RIGHT"] = "LANDSCAPE_RIGHT";
  })(Orientation || (exports.Orientation = Orientation = {}));

  function allow(orientation) {
    console.warn("'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.allowAsync'");
    allowAsync(orientation);
  }

  function allowAsync(orientation) {
    if (!_ExponentScreenOrientation.default.allowAsync) {
      throw new _expoErrors.UnavailabilityError('ScreenOrientation', 'allowAsync');
    }

    return _ExponentScreenOrientation.default.allowAsync(orientation);
  }

  function doesSupportAsync(orientation) {
    return _ExponentScreenOrientation.default.doesSupportAsync(orientation);
  }
},793,[1,794,368]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentScreenOrientation;
  exports.default = _default;
},794,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deleteItemAsync = deleteItemAsync;
  exports.getItemAsync = getItemAsync;
  exports.setItemAsync = setItemAsync;
  exports.WHEN_UNLOCKED_THIS_DEVICE_ONLY = exports.WHEN_UNLOCKED = exports.ALWAYS_THIS_DEVICE_ONLY = exports.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = exports.ALWAYS = exports.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = exports.AFTER_FIRST_UNLOCK = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[2]);

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _ExponentSecureStore = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var AFTER_FIRST_UNLOCK = _ExponentSecureStore.default.AFTER_FIRST_UNLOCK;
  exports.AFTER_FIRST_UNLOCK = AFTER_FIRST_UNLOCK;
  var AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = _ExponentSecureStore.default.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;
  exports.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;
  var ALWAYS = _ExponentSecureStore.default.ALWAYS;
  exports.ALWAYS = ALWAYS;
  var WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = _ExponentSecureStore.default.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;
  exports.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;
  var ALWAYS_THIS_DEVICE_ONLY = _ExponentSecureStore.default.ALWAYS_THIS_DEVICE_ONLY;
  exports.ALWAYS_THIS_DEVICE_ONLY = ALWAYS_THIS_DEVICE_ONLY;
  var WHEN_UNLOCKED = _ExponentSecureStore.default.WHEN_UNLOCKED;
  exports.WHEN_UNLOCKED = WHEN_UNLOCKED;
  var WHEN_UNLOCKED_THIS_DEVICE_ONLY = _ExponentSecureStore.default.WHEN_UNLOCKED_THIS_DEVICE_ONLY;
  exports.WHEN_UNLOCKED_THIS_DEVICE_ONLY = WHEN_UNLOCKED_THIS_DEVICE_ONLY;

  function deleteItemAsync(key) {
    var options,
        _args = arguments;
    return _regenerator.default.async(function deleteItemAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

            _ensureValidKey(key);

            if (_ExponentSecureStore.default.deleteValueWithKeyAsync) {
              _context.next = 4;
              break;
            }

            throw new _expoErrors.UnavailabilityError('SecureStore', 'deleteItemAsync');

          case 4:
            _context.next = 6;
            return _regenerator.default.awrap(_ExponentSecureStore.default.deleteValueWithKeyAsync(key, options));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function getItemAsync(key) {
    var options,
        _args2 = arguments;
    return _regenerator.default.async(function getItemAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};

            _ensureValidKey(key);

            _context2.next = 4;
            return _regenerator.default.awrap(_ExponentSecureStore.default.getValueWithKeyAsync(key, options));

          case 4:
            return _context2.abrupt("return", _context2.sent);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function setItemAsync(key, value) {
    var options,
        _args3 = arguments;
    return _regenerator.default.async(function setItemAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};

            _ensureValidKey(key);

            if (_isValidValue(value)) {
              _context3.next = 4;
              break;
            }

            throw new Error("Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.");

          case 4:
            if (_ExponentSecureStore.default.setValueWithKeyAsync) {
              _context3.next = 6;
              break;
            }

            throw new _expoErrors.UnavailabilityError('SecureStore', 'setItemAsync');

          case 6:
            _context3.next = 8;
            return _regenerator.default.awrap(_ExponentSecureStore.default.setValueWithKeyAsync(value, key, options));

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function _ensureValidKey(key) {
    (0, _invariant.default)(_isValidKey(key), "Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".");
  }

  function _isValidKey(key) {
    return typeof key === 'string' && /^[\w.-]+$/.test(key);
  }

  function _isValidValue(value) {
    return typeof value === 'string';
  }
},795,[1,130,368,334,796]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentSecureStore;
  exports.default = _default;
},796,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.speak = speak;
  exports.isSpeakingAsync = isSpeakingAsync;
  exports.stop = stop;
  exports.pause = pause;
  exports.resume = resume;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _expoErrors = _$$_REQUIRE(_dependencyMap[3]);

  var _ExponentSpeech = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var SpeechEventEmitter = new _reactNative.NativeEventEmitter(_ExponentSpeech.default);
  var _CALLBACKS = {};
  var _nextCallbackId = 1;
  var _didSetListeners = false;

  function _unregisterListenersIfNeeded() {
    if (Object.keys(_CALLBACKS).length === 0) {
      removeSpeakingListener('Exponent.speakingStarted');
      removeSpeakingListener('Exponent.speakingDone');
      removeSpeakingListener('Exponent.speakingStopped');
      removeSpeakingListener('Exponent.speakingError');
      _didSetListeners = false;
    }
  }

  function _registerListenersIfNeeded() {
    if (_didSetListeners) return;
    _didSetListeners = true;
    setSpeakingListener('Exponent.speakingStarted', function (_ref) {
      var id = _ref.id;
      var options = _CALLBACKS[id];

      if (options && options.onStart) {
        options.onStart();
      }
    });
    setSpeakingListener('Exponent.speakingDone', function (_ref2) {
      var id = _ref2.id;
      var options = _CALLBACKS[id];

      if (options && options.onDone) {
        options.onDone();
      }

      delete _CALLBACKS[id];

      _unregisterListenersIfNeeded();
    });
    setSpeakingListener('Exponent.speakingStopped', function (_ref3) {
      var id = _ref3.id;
      var options = _CALLBACKS[id];

      if (options && options.onStopped) {
        options.onStopped();
      }

      delete _CALLBACKS[id];

      _unregisterListenersIfNeeded();
    });
    setSpeakingListener('Exponent.speakingError', function (_ref4) {
      var id = _ref4.id,
          error = _ref4.error;
      var options = _CALLBACKS[id];

      if (options && options.onError) {
        options.onError(new Error(error));
      }

      delete _CALLBACKS[id];

      _unregisterListenersIfNeeded();
    });
  }

  function speak(text) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var id = _nextCallbackId++;
    _CALLBACKS[id] = options;

    _registerListenersIfNeeded();

    _ExponentSpeech.default.speak(String(id), text, options);
  }

  function isSpeakingAsync() {
    return _regenerator.default.async(function isSpeakingAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", _ExponentSpeech.default.isSpeaking());

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function stop() {
    return _ExponentSpeech.default.stop();
  }

  function pause() {
    if (!_ExponentSpeech.default.pause) {
      throw new _expoErrors.UnavailabilityError('Speech', 'pause');
    }

    return _ExponentSpeech.default.pause();
  }

  function resume() {
    if (!_ExponentSpeech.default.resume) {
      throw new _expoErrors.UnavailabilityError('Speech', 'resume');
    }

    return _ExponentSpeech.default.resume();
  }

  function setSpeakingListener(eventName, callback) {
    if (SpeechEventEmitter.listeners(eventName).length > 0) {
      SpeechEventEmitter.removeAllListeners(eventName);
    }

    SpeechEventEmitter.addListener(eventName, callback);
  }

  function removeSpeakingListener(eventName) {
    SpeechEventEmitter.removeAllListeners(eventName);
  }
},797,[1,130,5,368,798]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentSpeech;
  exports.default = _default;
},798,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isSupported = isSupported;
  exports.requestReview = requestReview;
  exports.storeUrl = storeUrl;
  exports.hasAction = hasAction;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoConstants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _ExponentStoreReview = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  function isSupported() {
    return _ExponentStoreReview.default && _ExponentStoreReview.default.isSupported;
  }

  function requestReview() {
    var url, supported;
    return _regenerator.default.async(function requestReview$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(_ExponentStoreReview.default && _ExponentStoreReview.default.requestReview)) {
              _context.next = 4;
              break;
            }

            _ExponentStoreReview.default.requestReview();

            _context.next = 17;
            break;

          case 4:
            url = storeUrl();

            if (!url) {
              _context.next = 16;
              break;
            }

            _context.next = 8;
            return _regenerator.default.awrap(_reactNative.Linking.canOpenURL(url));

          case 8:
            supported = _context.sent;

            if (supported) {
              _context.next = 13;
              break;
            }

            console.log("Expo.StoreReview.requestReview(): Can't open store url: ", url);
            _context.next = 14;
            break;

          case 13:
            return _context.abrupt("return", _reactNative.Linking.openURL(url));

          case 14:
            _context.next = 17;
            break;

          case 16:
            console.log("Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`");

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function storeUrl() {
    var OS = _reactNative.Platform.OS;

    if (OS === 'ios') {
      return _expoConstants.default.manifest.ios.appStoreUrl;
    } else if (OS === 'android') {
      return _expoConstants.default.manifest.android.playStoreUrl;
    }

    throw new Error("StoreReview.storeUrl() is not supported on " + OS);
  }

  function hasAction() {
    return !!storeUrl() || isSupported();
  }
},799,[1,130,329,5,800]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentStoreReview;
  exports.default = _default;
},800,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var SvgModules = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1]));

  var Svg = SvgModules.Svg;

  for (var key in SvgModules) {
    if (key !== 'default' && key !== 'Svg') {
      Svg[key] = SvgModules[key];
    }
  }

  var _default = Svg;
  exports.default = _default;
},801,[366,802]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Rect", {
    enumerable: true,
    get: function get() {
      return _Rect.default;
    }
  });
  Object.defineProperty(exports, "Circle", {
    enumerable: true,
    get: function get() {
      return _Circle.default;
    }
  });
  Object.defineProperty(exports, "Ellipse", {
    enumerable: true,
    get: function get() {
      return _Ellipse.default;
    }
  });
  Object.defineProperty(exports, "Polygon", {
    enumerable: true,
    get: function get() {
      return _Polygon.default;
    }
  });
  Object.defineProperty(exports, "Polyline", {
    enumerable: true,
    get: function get() {
      return _Polyline.default;
    }
  });
  Object.defineProperty(exports, "Line", {
    enumerable: true,
    get: function get() {
      return _Line.default;
    }
  });
  Object.defineProperty(exports, "Svg", {
    enumerable: true,
    get: function get() {
      return _Svg.default;
    }
  });
  Object.defineProperty(exports, "Path", {
    enumerable: true,
    get: function get() {
      return _Path.default;
    }
  });
  Object.defineProperty(exports, "G", {
    enumerable: true,
    get: function get() {
      return _G.default;
    }
  });
  Object.defineProperty(exports, "Text", {
    enumerable: true,
    get: function get() {
      return _Text.default;
    }
  });
  Object.defineProperty(exports, "TSpan", {
    enumerable: true,
    get: function get() {
      return _TSpan.default;
    }
  });
  Object.defineProperty(exports, "TextPath", {
    enumerable: true,
    get: function get() {
      return _TextPath.default;
    }
  });
  Object.defineProperty(exports, "Use", {
    enumerable: true,
    get: function get() {
      return _Use.default;
    }
  });
  Object.defineProperty(exports, "Image", {
    enumerable: true,
    get: function get() {
      return _Image.default;
    }
  });
  Object.defineProperty(exports, "Symbol", {
    enumerable: true,
    get: function get() {
      return _Symbol.default;
    }
  });
  Object.defineProperty(exports, "Defs", {
    enumerable: true,
    get: function get() {
      return _Defs.default;
    }
  });
  Object.defineProperty(exports, "LinearGradient", {
    enumerable: true,
    get: function get() {
      return _LinearGradient.default;
    }
  });
  Object.defineProperty(exports, "RadialGradient", {
    enumerable: true,
    get: function get() {
      return _RadialGradient.default;
    }
  });
  Object.defineProperty(exports, "Stop", {
    enumerable: true,
    get: function get() {
      return _Stop.default;
    }
  });
  Object.defineProperty(exports, "ClipPath", {
    enumerable: true,
    get: function get() {
      return _ClipPath.default;
    }
  });
  Object.defineProperty(exports, "Pattern", {
    enumerable: true,
    get: function get() {
      return _Pattern.default;
    }
  });
  Object.defineProperty(exports, "Mask", {
    enumerable: true,
    get: function get() {
      return _Mask.default;
    }
  });
  exports.default = undefined;

  var _Rect = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _Circle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _Ellipse = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _Polygon = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _Polyline = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _Line = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _Svg = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _Path = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _G = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _Text = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _TSpan = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _TextPath = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _Use = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Image = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _Symbol = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _Defs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _LinearGradient = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _RadialGradient = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _Stop = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _ClipPath = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _Pattern = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _Mask = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _default = _Svg.default;
  exports.default = _default;
},802,[1,803,847,848,849,851,852,853,804,855,857,858,859,860,861,862,863,864,867,868,869,870,871]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  _$$_REQUIRE(_dependencyMap[9]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        _this.root.setNativeProps(props);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            rx = props.rx,
            ry = props.ry;
        return _react.default.createElement(RNSVGRect, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, (0, _extractProps.default)((0, _objectSpread2.default)({}, props, {
          x: null,
          y: null
        }), this), {
          x: x,
          y: y,
          width: width,
          height: height,
          rx: rx,
          ry: ry
        }));
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Rect";
  _default.defaultProps = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    rx: 0,
    ry: 0
  };
  var RNSVGRect = (0, _reactNative.requireNativeComponent)("RNSVGRect");
},803,[1,3,48,21,22,34,37,40,51,804,5,808,805]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(_args)));

      _this.setNativeProps = function () {
        var _this$root;

        (_this$root = _this.root).setNativeProps.apply(_this$root, arguments);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        return _react.default.createElement(RNSVGPath, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, (0, _extractProps.default)(props, this), {
          d: props.d
        }));
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Path";
  var RNSVGPath = (0, _reactNative.requireNativeComponent)("RNSVGPath");
},804,[1,3,21,22,34,37,40,51,5,805,808]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _$$_REQUIRE(_dependencyMap[6]);

  var _SvgTouchableMixin = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var Shape = function (_Component) {
    (0, _inherits2.default)(Shape, _Component);

    function Shape() {
      var _this;

      (0, _classCallCheck2.default)(this, Shape);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Shape).apply(this, arguments));

      _lodash.default.forEach(_SvgTouchableMixin.default, function (method, key) {
        _this[key] = method.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
      });

      _this.state = _this.touchableGetInitialState();
      return _this;
    }

    return Shape;
  }(_react.Component);

  var _default = Shape;
  exports.default = _default;
},805,[1,21,34,37,40,36,51,806,807]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var PRESS_RETENTION_OFFSET = {
    top: 20,
    left: 20,
    right: 20,
    bottom: 30
  };

  var _default = (0, _objectSpread2.default)({}, _reactNative.Touchable.Mixin, {
    touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder(e) {
      if (this.props.onStartShouldSetResponder) {
        return this.props.onStartShouldSetResponder(e);
      } else {
        return _reactNative.Touchable.Mixin.touchableHandleStartShouldSetResponder.call(this, e);
      }
    },
    touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest(e) {
      if (this.props.onResponderTerminationRequest) {
        return this.props.onResponderTerminationRequest(e);
      } else {
        return _reactNative.Touchable.Mixin.touchableHandleResponderTerminationRequest.call(this, e);
      }
    },
    touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
      if (this.props.onResponderGrant) {
        return this.props.onResponderGrant(e);
      } else {
        return _reactNative.Touchable.Mixin.touchableHandleResponderGrant.call(this, e);
      }
    },
    touchableHandleResponderMove: function touchableHandleResponderMove(e) {
      if (this.props.onResponderMove) {
        return this.props.onResponderMove(e);
      } else {
        return _reactNative.Touchable.Mixin.touchableHandleResponderMove.call(this, e);
      }
    },
    touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
      if (this.props.onResponderRelease) {
        return this.props.onResponderRelease(e);
      } else {
        return _reactNative.Touchable.Mixin.touchableHandleResponderRelease.call(this, e);
      }
    },
    touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
      if (this.props.onResponderTerminate) {
        return this.props.onResponderTerminate(e);
      } else {
        return _reactNative.Touchable.Mixin.touchableHandleResponderTerminate.call(this, e);
      }
    },
    touchableHandlePress: function touchableHandlePress(e) {
      this.props.onPress && this.props.onPress(e);
    },
    touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
      this.props.onPressIn && this.props.onPressIn(e);
    },
    touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
      this.props.onPressOut && this.props.onPressOut(e);
    },
    touchableHandleLongPress: function touchableHandleLongPress(e) {
      this.props.onLongPress && this.props.onLongPress(e);
    },
    touchableGetPressRectOffset: function touchableGetPressRectOffset() {
      return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
    },
    touchableGetHitSlop: function touchableGetHitSlop() {
      return this.props.hitSlop;
    },
    touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
      return this.props.delayPressIn || 0;
    },
    touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
      return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
    },
    touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
      return this.props.delayPressOut || 0;
    }
  });

  exports.default = _default;
},806,[1,48,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright JS Foundation and other contributors <https://js.foundation/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  ;
  (function () {
    var undefined;
    var VERSION = '4.17.11';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800,
        HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = 4294967294,
        HALF_MAX_ARRAY_LENGTH = 2147483647;
    var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff",
        rsComboMarksRange = "\\u0300-\\u036f",
        reComboHalfMarksRange = "\\ufe20-\\ufe2f",
        rsComboSymbolsRange = "\\u20d0-\\u20ff",
        rsComboRange = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",
        rsDingbatRange = "\\u2700-\\u27bf",
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = "\\u2000-\\u206f",
        rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = "\\ufe0e\\ufe0f",
        rsBreakRange = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsApos = "['\u2019]",
        rsAstral = "[\\ud800-\\udfff]",
        rsBreak = "[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]",
        rsCombo = "[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",
        rsDigits = '\\d+',
        rsDingbat = "[\\u2700-\\u27bf]",
        rsLower = "[a-z\\xdf-\\xf6\\xf8-\\xff]",
        rsMisc = "[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",
        rsFitz = "\\ud83c[\\udffb-\\udfff]",
        rsModifier = "(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])",
        rsNonAstral = "[^\\ud800-\\udfff]",
        rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        rsUpper = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
        rsZWJ = "\\u200d";
    var rsMiscLower = "(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])",
        rsMiscUpper = "(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])",
        rsOptContrLower = "(?:['\u2019](?:d|ll|m|re|s|t|ve))?",
        rsOptContrUpper = "(?:['\u2019](?:D|LL|M|RE|S|T|VE))?",
        reOptMod = "(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",
        rsOptVar = "[\\ufe0e\\ufe0f]?",
        rsOptJoin = "(?:\\u200d(?:" + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = "[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?" + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + ["[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]?", rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp("\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|" + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp(["[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?=" + [rsBreak, rsUpper, '$'].join('|') + ')', "(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?=" + [rsBreak, "[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])", '$'].join('|') + ')', "[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:d|ll|m|re|s|t|ve))?", "[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?", rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
    var reHasUnicode = RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      '\xc0': 'A',
      '\xc1': 'A',
      '\xc2': 'A',
      '\xc3': 'A',
      '\xc4': 'A',
      '\xc5': 'A',
      '\xe0': 'a',
      '\xe1': 'a',
      '\xe2': 'a',
      '\xe3': 'a',
      '\xe4': 'a',
      '\xe5': 'a',
      '\xc7': 'C',
      '\xe7': 'c',
      '\xd0': 'D',
      '\xf0': 'd',
      '\xc8': 'E',
      '\xc9': 'E',
      '\xca': 'E',
      '\xcb': 'E',
      '\xe8': 'e',
      '\xe9': 'e',
      '\xea': 'e',
      '\xeb': 'e',
      '\xcc': 'I',
      '\xcd': 'I',
      '\xce': 'I',
      '\xcf': 'I',
      '\xec': 'i',
      '\xed': 'i',
      '\xee': 'i',
      '\xef': 'i',
      '\xd1': 'N',
      '\xf1': 'n',
      '\xd2': 'O',
      '\xd3': 'O',
      '\xd4': 'O',
      '\xd5': 'O',
      '\xd6': 'O',
      '\xd8': 'O',
      '\xf2': 'o',
      '\xf3': 'o',
      '\xf4': 'o',
      '\xf5': 'o',
      '\xf6': 'o',
      '\xf8': 'o',
      '\xd9': 'U',
      '\xda': 'U',
      '\xdb': 'U',
      '\xdc': 'U',
      '\xf9': 'u',
      '\xfa': 'u',
      '\xfb': 'u',
      '\xfc': 'u',
      '\xdd': 'Y',
      '\xfd': 'y',
      '\xff': 'y',
      '\xc6': 'Ae',
      '\xe6': 'ae',
      '\xde': 'Th',
      '\xfe': 'th',
      '\xdf': 'ss',
      "\u0100": 'A',
      "\u0102": 'A',
      "\u0104": 'A',
      "\u0101": 'a',
      "\u0103": 'a',
      "\u0105": 'a',
      "\u0106": 'C',
      "\u0108": 'C',
      "\u010A": 'C',
      "\u010C": 'C',
      "\u0107": 'c',
      "\u0109": 'c',
      "\u010B": 'c',
      "\u010D": 'c',
      "\u010E": 'D',
      "\u0110": 'D',
      "\u010F": 'd',
      "\u0111": 'd',
      "\u0112": 'E',
      "\u0114": 'E',
      "\u0116": 'E',
      "\u0118": 'E',
      "\u011A": 'E',
      "\u0113": 'e',
      "\u0115": 'e',
      "\u0117": 'e',
      "\u0119": 'e',
      "\u011B": 'e',
      "\u011C": 'G',
      "\u011E": 'G',
      "\u0120": 'G',
      "\u0122": 'G',
      "\u011D": 'g',
      "\u011F": 'g',
      "\u0121": 'g',
      "\u0123": 'g',
      "\u0124": 'H',
      "\u0126": 'H',
      "\u0125": 'h',
      "\u0127": 'h',
      "\u0128": 'I',
      "\u012A": 'I',
      "\u012C": 'I',
      "\u012E": 'I',
      "\u0130": 'I',
      "\u0129": 'i',
      "\u012B": 'i',
      "\u012D": 'i',
      "\u012F": 'i',
      "\u0131": 'i',
      "\u0134": 'J',
      "\u0135": 'j',
      "\u0136": 'K',
      "\u0137": 'k',
      "\u0138": 'k',
      "\u0139": 'L',
      "\u013B": 'L',
      "\u013D": 'L',
      "\u013F": 'L',
      "\u0141": 'L',
      "\u013A": 'l',
      "\u013C": 'l',
      "\u013E": 'l',
      "\u0140": 'l',
      "\u0142": 'l',
      "\u0143": 'N',
      "\u0145": 'N',
      "\u0147": 'N',
      "\u014A": 'N',
      "\u0144": 'n',
      "\u0146": 'n',
      "\u0148": 'n',
      "\u014B": 'n',
      "\u014C": 'O',
      "\u014E": 'O',
      "\u0150": 'O',
      "\u014D": 'o',
      "\u014F": 'o',
      "\u0151": 'o',
      "\u0154": 'R',
      "\u0156": 'R',
      "\u0158": 'R',
      "\u0155": 'r',
      "\u0157": 'r',
      "\u0159": 'r',
      "\u015A": 'S',
      "\u015C": 'S',
      "\u015E": 'S',
      "\u0160": 'S',
      "\u015B": 's',
      "\u015D": 's',
      "\u015F": 's',
      "\u0161": 's',
      "\u0162": 'T',
      "\u0164": 'T',
      "\u0166": 'T',
      "\u0163": 't',
      "\u0165": 't',
      "\u0167": 't',
      "\u0168": 'U',
      "\u016A": 'U',
      "\u016C": 'U',
      "\u016E": 'U',
      "\u0170": 'U',
      "\u0172": 'U',
      "\u0169": 'u',
      "\u016B": 'u',
      "\u016D": 'u',
      "\u016F": 'u',
      "\u0171": 'u',
      "\u0173": 'u',
      "\u0174": 'W',
      "\u0175": 'w',
      "\u0176": 'Y',
      "\u0177": 'y',
      "\u0178": 'Y',
      "\u0179": 'Z',
      "\u017B": 'Z',
      "\u017D": 'Z',
      "\u017A": 'z',
      "\u017C": 'z',
      "\u017E": 'z',
      "\u0132": 'IJ',
      "\u0133": 'ij',
      "\u0152": 'Oe',
      "\u0153": 'oe',
      "\u0149": "'n",
      "\u017F": 's'
    };
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      "\u2028": 'u2028',
      "\u2029": 'u2029'
    };
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;

    var nodeUtil = function () {
      try {
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);

        case 1:
          return func.call(thisArg, args[0]);

        case 2:
          return func.call(thisArg, args[0], args[1]);

        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }

      return func.apply(thisArg, args);
    }

    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }

      return accumulator;
    }

    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }

      return true;
    }

    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }

      return result;
    }

    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }

      return false;
    }

    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }

      return result;
    }

    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }

      return array;
    }

    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }

      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }

      return accumulator;
    }

    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[--length];
      }

      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }

      return accumulator;
    }

    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }

      return false;
    }

    var asciiSize = baseProperty('length');

    function asciiToArray(string) {
      return string.split('');
    }

    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }

      return -1;
    }

    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }

      return -1;
    }

    function baseIsNaN(value) {
      return value !== value;
    }

    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }

    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined : object[key];
      };
    }

    function basePropertyOf(object) {
      return function (key) {
        return object == null ? undefined : object[key];
      };
    }

    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);

      while (length--) {
        array[length] = array[length].value;
      }

      return array;
    }

    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);

        if (current !== undefined) {
          result = result === undefined ? current : result + current;
        }
      }

      return result;
    }

    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }

    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }

    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    function cacheHas(cache, key) {
      return cache.has(key);
    }

    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }

      return result;
    }

    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }

      return result;
    }

    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);
      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }

    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }

      return result;
    }

    function setToArray(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = [value, value];
      });
      return result;
    }

    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }

      return -1;
    }

    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;

      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }

      return index;
    }

    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }

    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }

    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;

      while (reUnicode.test(string)) {
        ++result;
      }

      return result;
    }

    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    var runInContext = function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;
      var coreJsData = context['__core-js_shared__'];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;

      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();

      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var oldDash = root._;
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable" : undefined,
          symIterator = Symbol ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : undefined,
          symToStringTag = Symbol ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : undefined;

      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol ? typeof Symbol === "function" ? Symbol.prototype : "@@prototype" : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }

          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }

        return new LodashWrapper(value);
      }

      var baseCreate = function () {
        function object() {}

        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }

          if (objectCreate) {
            return objectCreate(proto);
          }

          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      function baseLodash() {}

      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      lodash.templateSettings = {
        'escape': reEscape,
        'evaluate': reEvaluate,
        'interpolate': reInterpolate,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }

        return result;
      }

      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }

        var result = [];

        outer: while (length-- && resIndex < takeCount) {
          index += dir;
          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }

          result[resIndex++] = value;
        }

        return result;
      }

      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      function hashGet(key) {
        var data = this.__data__;

        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = data.length - 1;

        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }

        --this.size;
        return true;
      }

      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }

      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }

        return this;
      }

      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
          this.add(values[index]);
        }
      }

      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);

        return this;
      }

      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }

      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);
        this.size = data.size;
        return result;
      }

      function stackGet(key) {
        return this.__data__.get(key);
      }

      function stackHas(key) {
        return this.__data__.has(key);
      }

      function stackSet(key, value) {
        var data = this.__data__;

        if (data instanceof ListCache) {
          var pairs = data.__data__;

          if (!Map || pairs.length < 199) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }

          data = this.__data__ = new MapCache(pairs);
        }

        data.set(key, value);
        this.size = data.size;
        return this;
      }

      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
            result.push(key);
          }
        }

        return result;
      }

      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }

        return result;
      }

      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }

          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }

        return number;
      }

      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }

        if (result !== undefined) {
          return result;
        }

        if (!isObject(value)) {
          return value;
        }

        var isArr = isArray(value);

        if (isArr) {
          result = initCloneArray(value);

          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }

          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);

            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }

            result = initCloneByTag(value, tag, isDeep);
          }
        }

        stack || (stack = new Stack());
        var stacked = stack.get(value);

        if (stacked) {
          return stacked;
        }

        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
          return result;
        }

        if (isMap(value)) {
          value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }

          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      function baseConforms(source) {
        var props = keys(source);
        return function (object) {
          return baseConformsTo(object, source, props);
        };
      }

      function baseConformsTo(object, source, props) {
        var length = props.length;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if (value === undefined && !(key in object) || !predicate(value)) {
            return false;
          }
        }

        return true;
      }

      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }

        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }

        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;

            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }

            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }

        return result;
      }

      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
                result = value;
          }
        }

        return result;
      }

      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end === undefined || end > length ? length : toInteger(end);

        if (end < 0) {
          end += length;
        }

        end = start > end ? 0 : toLength(end);

        while (start < end) {
          array[start++] = value;
        }

        return array;
      }

      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];

          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }

        return result;
      }

      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);

      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }

      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      function baseGt(value, other) {
        return value > other;
      }

      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];

          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }

          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }

        array = arrays[0];
        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;

            while (--othIndex) {
              var cache = caches[othIndex];

              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }

            if (seen) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }

      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }

        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }

        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }

          objIsArr = true;
          objIsObj = false;
        }

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }

        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }

        if (!isSameTag) {
          return false;
        }

        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (index--) {
          var data = matchData[index];

          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }

        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();

            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }

            if (!(result === undefined ? baseIsEqual(srcValue, objValue, 3, customizer, stack) : result)) {
              return false;
            }
          }
        }

        return true;
      }

      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }

        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      function baseIteratee(value) {
        if (typeof value == 'function') {
          return value;
        }

        if (value == null) {
          return identity;
        }

        if (typeof value == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }

        return property(value);
      }

      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }

        var result = [];

        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }

        return result;
      }

      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }

        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }

      function baseLt(value, other) {
        return value < other;
      }

      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      function baseMatches(source) {
        var matchData = getMatchData(source);

        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }

        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }

        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, 3);
        };
      }

      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }

        baseFor(source, function (srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack());
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }

            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }

        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;

          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;

            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }

        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }

        assignMergeValue(object, key, newValue);
      }

      function baseNth(array, n) {
        var length = array.length;

        if (!length) {
          return;
        }

        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return {
            'criteria': criteria,
            'index': ++index,
            'value': value
          };
        });
        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      function basePick(object, paths) {
        return basePickBy(object, paths, function (value, path) {
          return hasIn(object, path);
        });
      }

      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }

        return result;
      }

      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }

      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }

        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }

        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }

            splice.call(array, fromIndex, 1);
          }
        }

        return array;
      }

      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];

          if (length == lastIndex || index !== previous) {
            var previous = index;

            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }

        return array;
      }

      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }

        return result;
      }

      function baseRepeat(string, n) {
        var result = '';

        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }

        do {
          if (n % 2) {
            result += string;
          }

          n = nativeFloor(n / 2);

          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      function baseSample(collection) {
        return arraySample(values(collection));
      }

      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }

        path = castPath(path, object);
        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;

            if (newValue === undefined) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }

          assignValue(nested, key, newValue);
          nested = nested[key];
        }

        return object;
      }

      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end > length ? length : end;

        if (end < 0) {
          end += length;
        }

        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);

        while (++index < length) {
          result[index] = array[index + start];
        }

        return result;
      }

      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }

          return high;
        }

        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);
        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }

          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }

        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }

        return result;
      }

      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        return +value;
      }

      function baseToString(value) {
        if (typeof value == 'string') {
          return value;
        }

        if (isArray(value)) {
          return arrayMap(value, baseToString) + '';
        }

        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
      }

      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);

          if (set) {
            return setToArray(set);
          }

          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var seenIndex = seen.length;

            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }

            if (iteratee) {
              seen.push(computed);
            }

            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }

      function baseWrapperValue(value, actions) {
        var result = value;

        if (result instanceof LazyWrapper) {
          result = result.value();
        }

        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;

        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }

        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }

        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }

        return result;
      }

      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }

        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      var castRest = baseRest;

      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      var clearTimeout = ctxClearTimeout || function (id) {
        return root.clearTimeout(id);
      };

      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }

        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }

      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }

          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }

        return 0;
      }

      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);

          if (result) {
            if (index >= ordersLength) {
              return result;
            }

            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }

        return object.index - other.index;
      }

      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }

        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }

        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }

        return result;
      }

      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }

        var offset = argsIndex;

        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }

        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }

        return result;
      }

      function copyArray(source, array) {
        var index = -1,
            length = source.length;
        array || (array = Array(length));

        while (++index < length) {
          array[index] = source[index];
        }

        return array;
      }

      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }

          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }

        return object;
      }

      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }

      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }

          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }

          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }

          return collection;
        };
      }

      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];

            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }

          return object;
        };
      }

      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }

        return wrapper;
      }

      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }

      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      function createCtor(Ctor) {
        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return new Ctor();

            case 1:
              return new Ctor(args[0]);

            case 2:
              return new Ctor(args[0], args[1]);

            case 3:
              return new Ctor(args[0], args[1], args[2]);

            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);

            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);

            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }

          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        };
      }

      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }

          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;

          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
          }

          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }

        return wrapper;
      }

      function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
          var iterable = Object(collection);

          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);

            predicate = function predicate(key) {
              return iteratee(iterable[key], key, iterable);
            };
          }

          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      function createFlow(fromRight) {
        return flatRest(function (funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }

          while (index--) {
            var func = funcs[index];

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }

          index = wrapper ? index : length;

          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == 424 && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }

          return function () {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }

            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }

            return result;
          };
        });
      }

      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & 24,
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }

          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }

          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }

          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }

          length -= holdersCount;

          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }

          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
          length = args.length;

          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }

          if (isAry && ary < length) {
            args.length = ary;
          }

          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }

          return fn.apply(thisBinding, args);
        }

        return wrapper;
      }

      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      function createMathOperation(operator, defaultValue) {
        return function (value, other) {
          var result;

          if (value === undefined && other === undefined) {
            return defaultValue;
          }

          if (value !== undefined) {
            result = value;
          }

          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }

            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }

            result = operator(value, other);
          }

          return result;
        };
      }

      function createOver(arrayFunc) {
        return flatRest(function (iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);
        var charsLength = chars.length;

        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }

        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }

      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = this && this !== root && this instanceof wrapper ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }

          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }

          return apply(fn, isBind ? thisArg : this, args);
        }

        return wrapper;
      }

      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }

          start = toFinite(start);

          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }

          step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }

          return operator(value, other);
        };
      }

      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= -4;
        }

        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
        var result = wrapFunc.apply(undefined, newData);

        if (isLaziable(func)) {
          setData(result, newData);
        }

        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);

          if (precision) {
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }

          return func(number);
        };
      }

      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };

      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);

          if (tag == mapTag) {
            return mapToArray(object);
          }

          if (tag == setTag) {
            return setToPairs(object);
          }

          return baseToPairs(object, keysFunc(object));
        };
      }

      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var length = partials ? partials.length : 0;

        if (!length) {
          bitmask &= -97;
          partials = holders = undefined;
        }

        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;
          partials = holders = undefined;
        }

        var data = isBindKey ? undefined : getData(func);
        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
        }

        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & 24) {
          bitmask &= -25;
        }

        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == 33) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }

        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }

        return objValue;
      }

      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }

        return objValue;
      }

      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }

      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }

        var stacked = stack.get(array);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
        stack.set(array, other);
        stack.set(other, array);

        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }

          if (compared !== undefined) {
            if (compared) {
              continue;
            }

            result = false;
            break;
          }

          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }

        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }

            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }

            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }

            var stacked = stack.get(object);

            if (stacked) {
              return stacked == other;
            }

            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }

        }

        return false;
      }

      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }

        var index = objLength;

        while (index--) {
          var key = objProps[index];

          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }

        var stacked = stack.get(object);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;

        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }

          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }

          skipCtor || (skipCtor = key == 'constructor');
        }

        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }

        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };

      function getFuncName(func) {
        var result = func.name + '',
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;

          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }

        return result;
      }

      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
      }

      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }

      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
        if (object == null) {
          return [];
        }

        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];

        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }

        return result;
      };
      var getTag = baseGetTag;

      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function getTag(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;

              case mapCtorString:
                return mapTag;

              case promiseCtorString:
                return promiseTag;

              case setCtorString:
                return setTag;

              case weakMapCtorString:
                return weakMapTag;
            }
          }

          return result;
        };
      }

      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':
              start += size;
              break;

            case 'dropRight':
              end -= size;
              break;

            case 'take':
              end = nativeMin(end, start + size);
              break;

            case 'takeRight':
              start = nativeMax(start, end - size);
              break;
          }
        }

        return {
          'start': start,
          'end': end
        };
      }

      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);

          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }

          object = object[key];
        }

        if (result || ++index != length) {
          return result;
        }

        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }

      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }

        return result;
      }

      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;

        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor();

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor();

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      function insertWrapDetails(source, details) {
        var length = details.length;

        if (!length) {
          return source;
        }

        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }

        var type = typeof index;

        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }

        return false;
      }

      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }

        var type = typeof value;

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }

        if (func === other) {
          return true;
        }

        var data = getData(other);
        return !!data && func === data[0];
      }

      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      var isMaskable = coreJsData ? isFunction : stubFalse;

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }

      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }

          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }

          return key;
        });
        var cache = result.cache;
        return result;
      }

      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < 131;
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == 384 && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

        if (!(isCommon || isCombo)) {
          return data;
        }

        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }

        var value = source[3];

        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }

        value = source[5];

        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }

        value = source[7];

        if (value) {
          data[7] = value;
        }

        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }

        if (data[9] == null) {
          data[9] = source[9];
        }

        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }

      function nativeKeysIn(object) {
        var result = [];

        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }

        return result;
      }

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }

        return array;
      }

      function safeGet(object, key) {
        if (key == '__proto__') {
          return;
        }

        return object[key];
      }

      var setData = shortOut(baseSetData);

      var setTimeout = ctxSetTimeout || function (func, wait) {
        return root.setTimeout(func, wait);
      };

      var setToString = shortOut(baseSetToString);

      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + '';
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }

      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;
        size = size === undefined ? length : size;

        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }

        array.length = size;
        return array;
      }

      var stringToPath = memoizeCapped(function (string) {
        var result = [];

        if (string.charCodeAt(0) === 46) {
            result.push('');
          }

        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });

      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
      }

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function (pair) {
          var value = '_.' + pair[0];

          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }

        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }

        var length = array == null ? 0 : array.length;

        if (!length || size < 1) {
          return [];
        }

        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }

        return result;
      }

      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      function concat() {
        var length = arguments.length;

        if (!length) {
          return [];
        }

        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }

        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function (array, values) {
        var iteratee = last(values);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
      });
      var differenceWith = baseRest(function (array, values) {
        var comparator = last(values);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
      });

      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }

      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }

      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }

        return baseFill(array, value, start, end);
      }

      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length - 1;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }

        return result;
      }

      function head(array) {
        return array && array.length ? array[0] : undefined;
      }

      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseIndexOf(array, value, index);
      }

      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function (arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
      });
      var intersectionWith = baseRest(function (arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == 'function' ? comparator : undefined;

        if (comparator) {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
      });

      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }

      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }

      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined;
      }

      var pull = baseRest(pullAll);

      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
      }

      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
      }

      var pullAt = flatRest(function (array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result;
      });

      function remove(array, predicate) {
        var result = [];

        if (!(array && array.length)) {
          return result;
        }

        var index = -1,
            indexes = [],
            length = array.length;
        predicate = getIteratee(predicate, 3);

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }

        basePullAt(array, indexes);
        return result;
      }

      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }

        return baseSlice(array, start, end);
      }

      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value);

          if (index < length && eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;

          if (eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }

      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }

      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }

      var union = baseRest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });
      var unionWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }

      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return array && array.length ? baseUniq(array, undefined, comparator) : [];
      }

      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }

        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }

        var result = unzip(array);

        if (iteratee == null) {
          return result;
        }

        return arrayMap(result, function (group) {
          return apply(iteratee, undefined, group);
        });
      }

      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });
      var xorWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });
      var zip = baseRest(unzip);

      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      var zipWith = baseRest(function (arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      function thru(value, interceptor) {
        return interceptor(value);
      }

      var wrapperAt = flatRest(function (paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function interceptor(object) {
          return baseAt(object, paths);
        };

        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }

        value = value.slice(start, +start + (length ? 1 : 0));

        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });

        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined);
          }

          return array;
        });
      });

      function wrapperChain() {
        return chain(this);
      }

      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }

        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];
        return {
          'done': done,
          'value': value
        };
      }

      function wrapperToIterator() {
        return this;
      }

      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;

          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }

          var previous = clone;
          parent = parent.__wrapped__;
        }

        previous.__wrapped__ = value;
        return result;
      }

      function wrapperReverse() {
        var value = this.__wrapped__;

        if (value instanceof LazyWrapper) {
          var wrapped = value;

          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }

          wrapped = wrapped.reverse();

          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });

          return new LodashWrapper(wrapped, this.__chain__);
        }

        return this.thru(reverse);
      }

      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      var countBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);

      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;

        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }

        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }

      var invokeMap = baseRest(function (collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
      var keyBy = createAggregator(function (result, value, key) {
        baseAssignValue(result, key, value);
      });

      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }

        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }

        orders = guard ? undefined : orders;

        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }

        return baseOrderBy(collection, iteratees, orders);
      }

      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });

      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      function size(collection) {
        if (collection == null) {
          return 0;
        }

        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }

        var tag = getTag(collection);

        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }

        return baseKeys(collection).length;
      }

      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      var sortBy = baseRest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }

        var length = iteratees.length;

        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }

        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      var now = ctxNow || function () {
        return root.Date.now();
      };

      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      function before(n, func) {
        var result;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }

          if (n <= 1) {
            func = undefined;
          }

          return result;
        };
      }

      var bind = baseRest(function (func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function (object, key, partials) {
        var bitmask = 3;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(key, bitmask, object, partials, holders);
      });

      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        wait = toNumber(wait) || 0;

        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now();

          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }

          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          if (trailing && lastArgs) {
            return invokeFunc(time);
          }

          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }

          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }

            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }

          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }

          return result;
        }

        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function memoized() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };

        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }

      memoize.Cache = MapCache;

      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return !predicate.call(this);

            case 1:
              return !predicate.call(this, args[0]);

            case 2:
              return !predicate.call(this, args[0], args[1]);

            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }

          return !predicate.apply(this, args);
        };
      }

      function once(func) {
        return before(2, func);
      }

      var overArgs = castRest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function (args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }

          return apply(func, this, args);
        });
      });
      var partial = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });
      var partialRight = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });
      var rearg = flatRest(function (func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function (args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }

          return apply(func, this, otherArgs);
        });
      }

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      function unary(func) {
        return ary(func, 1);
      }

      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      function castArray() {
        if (!arguments.length) {
          return [];
        }

        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      function cloneDeep(value) {
        return baseClone(value, 5);
      }

      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, 5, customizer);
      }

      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      var isArray = Array.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }

      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      function isEmpty(value) {
        if (value == null) {
          return true;
        }

        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }

        var tag = getTag(value);

        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }

        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }

        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }

        return true;
      }

      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }

      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
      }

      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      function isNaN(value) {
        return isNumber(value) && value != +value;
      }

      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }

        return baseIsNative(value);
      }

      function isNull(value) {
        return value === null;
      }

      function isNil(value) {
        return value == null;
      }

      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
      }

      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }

        var proto = getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      function isSafeInteger(value) {
        return isInteger(value) && value >= -9007199254740991 && value <= MAX_SAFE_INTEGER;
      }

      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }

      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }

      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      function isUndefined(value) {
        return value === undefined;
      }

      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });

      function toArray(value) {
        if (!value) {
          return [];
        }

        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }

        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }

        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }

      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }

        value = toNumber(value);

        if (value === INFINITY || value === -(1 / 0)) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }

        return value === value ? value : 0;
      }

      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }

      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }

        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }

        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -9007199254740991, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }

      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }

        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function (object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);

      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      var defaults = baseRest(function (object, sources) {
        object = Object(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });
      var defaultsDeep = baseRest(function (args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });

      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      var invert = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);

      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function (object, paths) {
        var result = {};

        if (object == null) {
          return result;
        }

        var isDeep = false;
        paths = arrayMap(paths, function (path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);

        if (isDeep) {
          result = baseClone(result, 7, customOmitClone);
        }

        var length = paths.length;

        while (length--) {
          baseUnset(result, paths[length]);
        }

        return result;
      });

      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }

        var props = arrayMap(getAllKeysIn(object), function (prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function (value, path) {
          return predicate(value, path[0]);
        });
      }

      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1,
            length = path.length;

        if (!length) {
          length = 1;
          object = undefined;
        }

        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];

          if (value === undefined) {
            index = length;
            value = defaultValue;
          }

          object = isFunction(value) ? value.call(object) : value;
        }

        return object;
      }

      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);

      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);

        if (accumulator == null) {
          var Ctor = object && object.constructor;

          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }

        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }

        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }

        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }

        return baseClamp(toNumber(number), lower, upper);
      }

      function inRange(number, start, end) {
        start = toFinite(start);

        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }

        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }

        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }

        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);

          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }

        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }

        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }

        return baseRandom(lower, upper);
      }

      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }

      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }

      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst('toLowerCase');

      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;

        if (!length || strLength >= length) {
          return string;
        }

        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }

      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }

      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }

      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }

        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        return baseRepeat(toString(string), n);
      }

      function replace() {
        var args = arguments,
            string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }

        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

        if (!limit) {
          return [];
        }

        string = toString(string);

        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);

          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }

        return string.split(separator, limit);
      }

      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      function template(string, options, guard) {
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }

        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = options.variable;

        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }

        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });
        result.source = source;

        if (isError(result)) {
          throw result;
        }

        return result;
      }

      function toLower(value) {
        return toString(value).toLowerCase();
      }

      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      function trim(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join('');
      }

      function trimEnd(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join('');
      }

      function trimStart(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join('');
      }

      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }

        string = toString(string);
        var strLength = string.length;

        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }

        if (length >= strLength) {
          return string;
        }

        var end = length - stringSize(omission);

        if (end < 1) {
          return omission;
        }

        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }

        if (strSymbols) {
          end += result.length - end;
        }

        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }

            separator.lastIndex = 0;

            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }

            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);

          if (index > -1) {
            result = result.slice(0, index);
          }
        }

        return result + omission;
      }

      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }

      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
      var upperFirst = createCaseFirst('toUpperCase');

      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }

        return string.match(pattern) || [];
      }

      var attempt = baseRest(function (func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
      var bindAll = flatRest(function (object, methodNames) {
        arrayEach(methodNames, function (key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function (args) {
          var index = -1;

          while (++index < length) {
            var pair = pairs[index];

            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      function constant(value) {
        return function () {
          return value;
        };
      }

      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }

      var flow = createFlow();
      var flowRight = createFlow(true);

      function identity(value) {
        return value;
      }

      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      var method = baseRest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });

      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }

        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;

          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;

              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);
                actions.push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }

              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }

      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }

        return this;
      }

      function noop() {}

      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function (args) {
          return baseNth(args, n);
        });
      }

      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);

      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      var range = createRange();
      var rangeRight = createRange(true);

      function stubArray() {
        return [];
      }

      function stubFalse() {
        return false;
      }

      function stubObject() {
        return {};
      }

      function stubString() {
        return '';
      }

      function stubTrue() {
        return true;
      }

      function times(n, iteratee) {
        n = toInteger(n);

        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }

        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
        var result = baseTimes(length, iteratee);

        while (++index < n) {
          iteratee(index);
        }

        return result;
      }

      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }

        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound('ceil');
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound('floor');

      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
      }

      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
      }

      function mean(array) {
        return baseMean(array, identity);
      }

      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
      }

      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
      }

      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound('round');
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }

      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
      }

      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {
        'chain': false
      });
      lodash.VERSION = VERSION;
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
          var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }

          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();

          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });

          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }

        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function (predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);
        var result = this;

        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }

        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }

        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }

        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };

      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }

        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function interceptor(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            isLazy = useLazy = false;
          }

          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);

            result.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined
            });

            return new LodashWrapper(result, chainAll);
          }

          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }

          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function () {
          var args = arguments;

          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }

          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];

        if (lodashFunc) {
          var key = lodashFunc.name + '',
              names = realNames[key] || (realNames[key] = []);
          names.push({
            'name': methodName,
            'func': lodashFunc
          });
        }
      });
      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }

      return lodash;
    };

    var _ = runInContext();

    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      root._ = _;
      define(function () {
        return _;
      });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
  }).call(this);
},807,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _extractFill = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _extractStroke = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _extractTransform = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6]));

  var _extractClipPath = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _extractResponder = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _extractOpacity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _patternReg = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  function _default(prop, ref) {
    var props = (0, _objectSpread2.default)({}, prop.style, prop);
    var opacity = props.opacity,
        onLayout = props.onLayout,
        id = props.id,
        clipPath = props.clipPath,
        mask = props.mask;
    var styleProperties = [];
    var extractedProps = {
      opacity: (0, _extractOpacity.default)(opacity),
      propList: styleProperties,
      onLayout: onLayout
    };

    if (id) {
      extractedProps.name = id;
    }

    if (clipPath) {
      (0, _extends2.default)(extractedProps, (0, _extractClipPath.default)(props));
    }

    if (mask) {
      var matched = mask.match(_patternReg.default);

      if (matched) {
        extractedProps.mask = matched[1];
      } else {
        console.warn('Invalid `mask` prop, expected a mask like `"#id"`, but got: "' + mask + '"');
      }
    }

    (0, _extends2.default)(extractedProps, (0, _extractStroke.default)(props, styleProperties));
    (0, _extends2.default)(extractedProps, (0, _extractFill.default)(props, styleProperties));
    extractedProps.matrix = (0, _extractTransform.default)(props);
    (0, _extends2.default)(extractedProps, (0, _extractTransform.props2transform)(props));
    (0, _extends2.default)(extractedProps, (0, _extractResponder.default)(props, ref));
    return extractedProps;
  }
},808,[366,1,3,48,809,822,824,845,846,821,820]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _extractBrush = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extractOpacity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var fillRules = {
    evenodd: 0,
    nonzero: 1
  };
  var fillProps = ["fill", "fillOpacity", "fillRule"];

  function _default(props, styleProperties) {
    fillProps.forEach(function (name) {
      if (props.hasOwnProperty(name)) {
        styleProperties.push(name);
      }
    });
    return {
      fill: (0, _extractBrush.default)(props.fill || "#000"),
      fillOpacity: (0, _extractOpacity.default)(props.fillOpacity),
      fillRule: fillRules[props.fillRule] === 0 ? 0 : 1
    };
  }
},809,[1,810,821]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _patternReg = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function _default(colorOrBrush) {
    if (colorOrBrush === "none" || !colorOrBrush) {
      return null;
    }

    if (colorOrBrush === "currentColor") {
      return [2];
    }

    try {
      var matched = colorOrBrush.match(_patternReg.default);

      if (matched) {
        return [1, matched[1]];
      } else {
        var _Color$rgb$array = (0, _color.default)(colorOrBrush).rgb().array(),
            _Color$rgb$array2 = (0, _slicedToArray2.default)(_Color$rgb$array, 4),
            r = _Color$rgb$array2[0],
            g = _Color$rgb$array2[1],
            b = _Color$rgb$array2[2],
            _Color$rgb$array2$ = _Color$rgb$array2[3],
            a = _Color$rgb$array2$ === undefined ? 1 : _Color$rgb$array2$;

        return [0, r / 255, g / 255, b / 255, a];
      }
    } catch (err) {
      console.warn("\"" + colorOrBrush + "\" is not a valid color or brush");
      return null;
    }
  }
},810,[1,11,811,820]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var colorString = _$$_REQUIRE(_dependencyMap[0]);

  var convert = _$$_REQUIRE(_dependencyMap[1]);

  var _slice = [].slice;
  var skippedModels = ['keyword', 'gray', 'hex'];
  var hashedModelKeys = {};
  Object.keys(convert).forEach(function (model) {
    hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
  });
  var limiters = {};

  function Color(obj, model) {
    if (!(this instanceof Color)) {
      return new Color(obj, model);
    }

    if (model && model in skippedModels) {
      model = null;
    }

    if (model && !(model in convert)) {
      throw new Error('Unknown model: ' + model);
    }

    var i;
    var channels;

    if (!obj) {
      this.model = 'rgb';
      this.color = [0, 0, 0];
      this.valpha = 1;
    } else if (obj instanceof Color) {
      this.model = obj.model;
      this.color = obj.color.slice();
      this.valpha = obj.valpha;
    } else if (typeof obj === 'string') {
      var result = colorString.get(obj);

      if (result === null) {
        throw new Error('Unable to parse color from string: ' + obj);
      }

      this.model = result.model;
      channels = convert[this.model].channels;
      this.color = result.value.slice(0, channels);
      this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
    } else if (obj.length) {
      this.model = model || 'rgb';
      channels = convert[this.model].channels;

      var newArr = _slice.call(obj, 0, channels);

      this.color = zeroArray(newArr, channels);
      this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
    } else if (typeof obj === 'number') {
      obj &= 0xFFFFFF;
      this.model = 'rgb';
      this.color = [obj >> 16 & 0xFF, obj >> 8 & 0xFF, obj & 0xFF];
      this.valpha = 1;
    } else {
      this.valpha = 1;
      var keys = Object.keys(obj);

      if ('alpha' in obj) {
        keys.splice(keys.indexOf('alpha'), 1);
        this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
      }

      var hashedKeys = keys.sort().join('');

      if (!(hashedKeys in hashedModelKeys)) {
        throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
      }

      this.model = hashedModelKeys[hashedKeys];
      var labels = convert[this.model].labels;
      var color = [];

      for (i = 0; i < labels.length; i++) {
        color.push(obj[labels[i]]);
      }

      this.color = zeroArray(color);
    }

    if (limiters[this.model]) {
      channels = convert[this.model].channels;

      for (i = 0; i < channels; i++) {
        var limit = limiters[this.model][i];

        if (limit) {
          this.color[i] = limit(this.color[i]);
        }
      }
    }

    this.valpha = Math.max(0, Math.min(1, this.valpha));

    if (Object.freeze) {
      Object.freeze(this);
    }
  }

  Color.prototype = {
    toString: function toString() {
      return this.string();
    },
    toJSON: function toJSON() {
      return this[this.model]();
    },
    string: function string(places) {
      var self = this.model in colorString.to ? this : this.rgb();
      self = self.round(typeof places === 'number' ? places : 1);
      var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
      return colorString.to[self.model](args);
    },
    percentString: function percentString(places) {
      var self = this.rgb().round(typeof places === 'number' ? places : 1);
      var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
      return colorString.to.rgb.percent(args);
    },
    array: function array() {
      return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
    },
    object: function object() {
      var result = {};
      var channels = convert[this.model].channels;
      var labels = convert[this.model].labels;

      for (var i = 0; i < channels; i++) {
        result[labels[i]] = this.color[i];
      }

      if (this.valpha !== 1) {
        result.alpha = this.valpha;
      }

      return result;
    },
    unitArray: function unitArray() {
      var rgb = this.rgb().color;
      rgb[0] /= 255;
      rgb[1] /= 255;
      rgb[2] /= 255;

      if (this.valpha !== 1) {
        rgb.push(this.valpha);
      }

      return rgb;
    },
    unitObject: function unitObject() {
      var rgb = this.rgb().object();
      rgb.r /= 255;
      rgb.g /= 255;
      rgb.b /= 255;

      if (this.valpha !== 1) {
        rgb.alpha = this.valpha;
      }

      return rgb;
    },
    round: function round(places) {
      places = Math.max(places || 0, 0);
      return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
    },
    alpha: function alpha(val) {
      if (arguments.length) {
        return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
      }

      return this.valpha;
    },
    red: getset('rgb', 0, maxfn(255)),
    green: getset('rgb', 1, maxfn(255)),
    blue: getset('rgb', 2, maxfn(255)),
    hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) {
      return (val % 360 + 360) % 360;
    }),
    saturationl: getset('hsl', 1, maxfn(100)),
    lightness: getset('hsl', 2, maxfn(100)),
    saturationv: getset('hsv', 1, maxfn(100)),
    value: getset('hsv', 2, maxfn(100)),
    chroma: getset('hcg', 1, maxfn(100)),
    gray: getset('hcg', 2, maxfn(100)),
    white: getset('hwb', 1, maxfn(100)),
    wblack: getset('hwb', 2, maxfn(100)),
    cyan: getset('cmyk', 0, maxfn(100)),
    magenta: getset('cmyk', 1, maxfn(100)),
    yellow: getset('cmyk', 2, maxfn(100)),
    black: getset('cmyk', 3, maxfn(100)),
    x: getset('xyz', 0, maxfn(100)),
    y: getset('xyz', 1, maxfn(100)),
    z: getset('xyz', 2, maxfn(100)),
    l: getset('lab', 0, maxfn(100)),
    a: getset('lab', 1),
    b: getset('lab', 2),
    keyword: function keyword(val) {
      if (arguments.length) {
        return new Color(val);
      }

      return convert[this.model].keyword(this.color);
    },
    hex: function hex(val) {
      if (arguments.length) {
        return new Color(val);
      }

      return colorString.to.hex(this.rgb().round().color);
    },
    rgbNumber: function rgbNumber() {
      var rgb = this.rgb().color;
      return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;
    },
    luminosity: function luminosity() {
      var rgb = this.rgb().color;
      var lum = [];

      for (var i = 0; i < rgb.length; i++) {
        var chan = rgb[i] / 255;
        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
      }

      return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    },
    contrast: function contrast(color2) {
      var lum1 = this.luminosity();
      var lum2 = color2.luminosity();

      if (lum1 > lum2) {
        return (lum1 + 0.05) / (lum2 + 0.05);
      }

      return (lum2 + 0.05) / (lum1 + 0.05);
    },
    level: function level(color2) {
      var contrastRatio = this.contrast(color2);

      if (contrastRatio >= 7.1) {
        return 'AAA';
      }

      return contrastRatio >= 4.5 ? 'AA' : '';
    },
    dark: function dark() {
      var rgb = this.rgb().color;
      var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
      return yiq < 128;
    },
    light: function light() {
      return !this.dark();
    },
    negate: function negate() {
      var rgb = this.rgb();

      for (var i = 0; i < 3; i++) {
        rgb.color[i] = 255 - rgb.color[i];
      }

      return rgb;
    },
    lighten: function lighten(ratio) {
      var hsl = this.hsl();
      hsl.color[2] += hsl.color[2] * ratio;
      return hsl;
    },
    darken: function darken(ratio) {
      var hsl = this.hsl();
      hsl.color[2] -= hsl.color[2] * ratio;
      return hsl;
    },
    saturate: function saturate(ratio) {
      var hsl = this.hsl();
      hsl.color[1] += hsl.color[1] * ratio;
      return hsl;
    },
    desaturate: function desaturate(ratio) {
      var hsl = this.hsl();
      hsl.color[1] -= hsl.color[1] * ratio;
      return hsl;
    },
    whiten: function whiten(ratio) {
      var hwb = this.hwb();
      hwb.color[1] += hwb.color[1] * ratio;
      return hwb;
    },
    blacken: function blacken(ratio) {
      var hwb = this.hwb();
      hwb.color[2] += hwb.color[2] * ratio;
      return hwb;
    },
    grayscale: function grayscale() {
      var rgb = this.rgb().color;
      var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
      return Color.rgb(val, val, val);
    },
    fade: function fade(ratio) {
      return this.alpha(this.valpha - this.valpha * ratio);
    },
    opaquer: function opaquer(ratio) {
      return this.alpha(this.valpha + this.valpha * ratio);
    },
    rotate: function rotate(degrees) {
      var hsl = this.hsl();
      var hue = hsl.color[0];
      hue = (hue + degrees) % 360;
      hue = hue < 0 ? 360 + hue : hue;
      hsl.color[0] = hue;
      return hsl;
    },
    mix: function mix(mixinColor, weight) {
      var color1 = mixinColor.rgb();
      var color2 = this.rgb();
      var p = weight === undefined ? 0.5 : weight;
      var w = 2 * p - 1;
      var a = color1.alpha() - color2.alpha();
      var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
      var w2 = 1 - w1;
      return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
    }
  };
  Object.keys(convert).forEach(function (model) {
    if (skippedModels.indexOf(model) !== -1) {
      return;
    }

    var channels = convert[model].channels;

    Color.prototype[model] = function () {
      if (this.model === model) {
        return new Color(this);
      }

      if (arguments.length) {
        return new Color(arguments, model);
      }

      var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
      return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
    };

    Color[model] = function (color) {
      if (typeof color === 'number') {
        color = zeroArray(_slice.call(arguments), channels);
      }

      return new Color(color, model);
    };
  });

  function roundTo(num, places) {
    return Number(num.toFixed(places));
  }

  function roundToPlace(places) {
    return function (num) {
      return roundTo(num, places);
    };
  }

  function getset(model, channel, modifier) {
    model = Array.isArray(model) ? model : [model];
    model.forEach(function (m) {
      (limiters[m] || (limiters[m] = []))[channel] = modifier;
    });
    model = model[0];
    return function (val) {
      var result;

      if (arguments.length) {
        if (modifier) {
          val = modifier(val);
        }

        result = this[model]();
        result.color[channel] = val;
        return result;
      }

      result = this[model]().color[channel];

      if (modifier) {
        result = modifier(result);
      }

      return result;
    };
  }

  function maxfn(max) {
    return function (v) {
      return Math.max(0, Math.min(max, v));
    };
  }

  function assertArray(val) {
    return Array.isArray(val) ? val : [val];
  }

  function zeroArray(arr, length) {
    for (var i = 0; i < length; i++) {
      if (typeof arr[i] !== 'number') {
        arr[i] = 0;
      }
    }

    return arr;
  }

  module.exports = Color;
},811,[812,816]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var colorNames = _$$_REQUIRE(_dependencyMap[0]);

  var swizzle = _$$_REQUIRE(_dependencyMap[1]);

  var reverseNames = {};

  for (var name in colorNames) {
    if (colorNames.hasOwnProperty(name)) {
      reverseNames[colorNames[name]] = name;
    }
  }

  var cs = module.exports = {
    to: {},
    get: {}
  };

  cs.get = function (string) {
    var prefix = string.substring(0, 3).toLowerCase();
    var val;
    var model;

    switch (prefix) {
      case 'hsl':
        val = cs.get.hsl(string);
        model = 'hsl';
        break;

      case 'hwb':
        val = cs.get.hwb(string);
        model = 'hwb';
        break;

      default:
        val = cs.get.rgb(string);
        model = 'rgb';
        break;
    }

    if (!val) {
      return null;
    }

    return {
      model: model,
      value: val
    };
  };

  cs.get.rgb = function (string) {
    if (!string) {
      return null;
    }

    var abbr = /^#([a-f0-9]{3,4})$/i;
    var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
    var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var keyword = /(\D+)/;
    var rgb = [0, 0, 0, 1];
    var match;
    var i;
    var hexAlpha;

    if (match = string.match(hex)) {
      hexAlpha = match[2];
      match = match[1];

      for (i = 0; i < 3; i++) {
        var i2 = i * 2;
        rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(abbr)) {
      match = match[1];
      hexAlpha = match[3];

      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16);
      }

      if (hexAlpha) {
        rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
      }
    } else if (match = string.match(rgba)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = parseInt(match[i + 1], 0);
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(per)) {
      for (i = 0; i < 3; i++) {
        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
      }

      if (match[4]) {
        rgb[3] = parseFloat(match[4]);
      }
    } else if (match = string.match(keyword)) {
      if (match[1] === 'transparent') {
        return [0, 0, 0, 0];
      }

      rgb = colorNames[match[1]];

      if (!rgb) {
        return null;
      }

      rgb[3] = 1;
      return rgb;
    } else {
      return null;
    }

    for (i = 0; i < 3; i++) {
      rgb[i] = clamp(rgb[i], 0, 255);
    }

    rgb[3] = clamp(rgb[3], 0, 1);
    return rgb;
  };

  cs.get.hsl = function (string) {
    if (!string) {
      return null;
    }

    var hsl = /^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var match = string.match(hsl);

    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) + 360) % 360;
      var s = clamp(parseFloat(match[2]), 0, 100);
      var l = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, s, l, a];
    }

    return null;
  };

  cs.get.hwb = function (string) {
    if (!string) {
      return null;
    }

    var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
    var match = string.match(hwb);

    if (match) {
      var alpha = parseFloat(match[4]);
      var h = (parseFloat(match[1]) % 360 + 360) % 360;
      var w = clamp(parseFloat(match[2]), 0, 100);
      var b = clamp(parseFloat(match[3]), 0, 100);
      var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
      return [h, w, b, a];
    }

    return null;
  };

  cs.to.hex = function () {
    var rgba = swizzle(arguments);
    return '#' + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : '');
  };

  cs.to.rgb = function () {
    var rgba = swizzle(arguments);
    return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')' : 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
  };

  cs.to.rgb.percent = function () {
    var rgba = swizzle(arguments);
    var r = Math.round(rgba[0] / 255 * 100);
    var g = Math.round(rgba[1] / 255 * 100);
    var b = Math.round(rgba[2] / 255 * 100);
    return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)' : 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
  };

  cs.to.hsl = function () {
    var hsla = swizzle(arguments);
    return hsla.length < 4 || hsla[3] === 1 ? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)' : 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
  };

  cs.to.hwb = function () {
    var hwba = swizzle(arguments);
    var a = '';

    if (hwba.length >= 4 && hwba[3] !== 1) {
      a = ', ' + hwba[3];
    }

    return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
  };

  cs.to.keyword = function (rgb) {
    return reverseNames[rgb.slice(0, 3)];
  };

  function clamp(num, min, max) {
    return Math.min(Math.max(min, num), max);
  }

  function hexDouble(num) {
    var str = num.toString(16).toUpperCase();
    return str.length < 2 ? '0' + str : str;
  }
},812,[813,814]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
},813,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var isArrayish = _$$_REQUIRE(_dependencyMap[0]);

  var concat = Array.prototype.concat;
  var slice = Array.prototype.slice;

  var swizzle = module.exports = function swizzle(args) {
    var results = [];

    for (var i = 0, len = args.length; i < len; i++) {
      var arg = args[i];

      if (isArrayish(arg)) {
        results = concat.call(results, slice.call(arg));
      } else {
        results.push(arg);
      }
    }

    return results;
  };

  swizzle.wrap = function (fn) {
    return function () {
      return fn(swizzle(arguments));
    };
  };
},814,[815]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = function isArrayish(obj) {
    if (!obj || typeof obj === 'string') {
      return false;
    }

    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');
  };
},815,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var conversions = _$$_REQUIRE(_dependencyMap[0]);

  var route = _$$_REQUIRE(_dependencyMap[1]);

  var convert = {};
  var models = Object.keys(conversions);

  function wrapRaw(fn) {
    var wrappedFn = function wrappedFn(args) {
      if (args === undefined || args === null) {
        return args;
      }

      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }

      return fn(args);
    };

    if ('conversion' in fn) {
      wrappedFn.conversion = fn.conversion;
    }

    return wrappedFn;
  }

  function wrapRounded(fn) {
    var wrappedFn = function wrappedFn(args) {
      if (args === undefined || args === null) {
        return args;
      }

      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }

      var result = fn(args);

      if (typeof result === 'object') {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }

      return result;
    };

    if ('conversion' in fn) {
      wrappedFn.conversion = fn.conversion;
    }

    return wrappedFn;
  }

  models.forEach(function (fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], 'channels', {
      value: conversions[fromModel].channels
    });
    Object.defineProperty(convert[fromModel], 'labels', {
      value: conversions[fromModel].labels
    });
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function (toModel) {
      var fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module.exports = convert;
},816,[817,819]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var cssKeywords = _$$_REQUIRE(_dependencyMap[0]);

  var reverseKeywords = {};

  for (var key in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
  }

  var convert = module.exports = {
    rgb: {
      channels: 3,
      labels: 'rgb'
    },
    hsl: {
      channels: 3,
      labels: 'hsl'
    },
    hsv: {
      channels: 3,
      labels: 'hsv'
    },
    hwb: {
      channels: 3,
      labels: 'hwb'
    },
    cmyk: {
      channels: 4,
      labels: 'cmyk'
    },
    xyz: {
      channels: 3,
      labels: 'xyz'
    },
    lab: {
      channels: 3,
      labels: 'lab'
    },
    lch: {
      channels: 3,
      labels: 'lch'
    },
    hex: {
      channels: 1,
      labels: ['hex']
    },
    keyword: {
      channels: 1,
      labels: ['keyword']
    },
    ansi16: {
      channels: 1,
      labels: ['ansi16']
    },
    ansi256: {
      channels: 1,
      labels: ['ansi256']
    },
    hcg: {
      channels: 3,
      labels: ['h', 'c', 'g']
    },
    apple: {
      channels: 3,
      labels: ['r16', 'g16', 'b16']
    },
    gray: {
      channels: 1,
      labels: ['gray']
    }
  };

  for (var model in convert) {
    if (convert.hasOwnProperty(model)) {
      if (!('channels' in convert[model])) {
        throw new Error('missing channels property: ' + model);
      }

      if (!('labels' in convert[model])) {
        throw new Error('missing channel labels property: ' + model);
      }

      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error('channel and label counts mismatch: ' + model);
      }

      var channels = convert[model].channels;
      var labels = convert[model].labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], 'channels', {
        value: channels
      });
      Object.defineProperty(convert[model], 'labels', {
        value: labels
      });
    }
  }

  convert.rgb.hsl = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;

    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }

    h = Math.min(h * 60, 360);

    if (h < 0) {
      h += 360;
    }

    l = (min + max) / 2;

    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }

    return [h, s * 100, l * 100];
  };

  convert.rgb.hsv = function (rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);

    var diffc = function diffc(c) {
      return (v - c) / 6 / diff + 0.5;
    };

    if (diff === 0) {
      h = s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);

      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 0.3333333333333333 + rdif - bdif;
      } else if (b === v) {
        h = 0.6666666666666666 + gdif - rdif;
      }

      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }

    return [h * 360, s * 100, v * 100];
  };

  convert.rgb.hwb = function (rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 0.00392156862745098 * Math.min(r, Math.min(g, b));
    b = 1 - 0.00392156862745098 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };

  convert.rgb.cmyk = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };

  function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
  }

  convert.rgb.keyword = function (rgb) {
    var reversed = reverseKeywords[rgb];

    if (reversed) {
      return reversed;
    }

    var currentClosestDistance = Infinity;
    var currentClosestKeyword;

    for (var keyword in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword)) {
        var value = cssKeywords[keyword];
        var distance = comparativeDistance(rgb, value);

        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
    }

    return currentClosestKeyword;
  };

  convert.keyword.rgb = function (keyword) {
    return cssKeywords[keyword];
  };

  convert.rgb.xyz = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };

  convert.rgb.lab = function (rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
    y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
    z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };

  convert.hsl.rgb = function (hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;

    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }

    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }

    t1 = 2 * l - t2;
    rgb = [0, 0, 0];

    for (var i = 0; i < 3; i++) {
      t3 = h + 0.3333333333333333 * -(i - 1);

      if (t3 < 0) {
        t3++;
      }

      if (t3 > 1) {
        t3--;
      }

      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (0.6666666666666666 - t3) * 6;
      } else {
        val = t1;
      }

      rgb[i] = val * 255;
    }

    return rgb;
  };

  convert.hsl.hsv = function (hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };

  convert.hsv.rgb = function (hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;

    switch (hi) {
      case 0:
        return [v, t, p];

      case 1:
        return [q, v, p];

      case 2:
        return [p, v, t];

      case 3:
        return [p, q, v];

      case 4:
        return [t, p, v];

      case 5:
        return [v, p, q];
    }
  };

  convert.hsv.hsl = function (hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };

  convert.hwb.rgb = function (hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;

    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }

    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;

    if ((i & 0x01) !== 0) {
      f = 1 - f;
    }

    n = wh + f * (v - wh);
    var r;
    var g;
    var b;

    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;

      case 1:
        r = n;
        g = v;
        b = wh;
        break;

      case 2:
        r = wh;
        g = v;
        b = n;
        break;

      case 3:
        r = wh;
        g = n;
        b = v;
        break;

      case 4:
        r = n;
        g = wh;
        b = v;
        break;

      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }

    return [r * 255, g * 255, b * 255];
  };

  convert.cmyk.rgb = function (cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };

  convert.xyz.rgb = function (xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.0570;
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 0.4166666666666667) - 0.055 : r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 0.4166666666666667) - 0.055 : g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 0.4166666666666667) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };

  convert.xyz.lab = function (xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 0.3333333333333333) : 7.787 * x + 0.13793103448275862;
    y = y > 0.008856 ? Math.pow(y, 0.3333333333333333) : 7.787 * y + 0.13793103448275862;
    z = z > 0.008856 ? Math.pow(z, 0.3333333333333333) : 7.787 * z + 0.13793103448275862;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };

  convert.lab.xyz = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 0.008856 ? y2 : (y - 0.13793103448275862) / 7.787;
    x = x2 > 0.008856 ? x2 : (x - 0.13793103448275862) / 7.787;
    z = z2 > 0.008856 ? z2 : (z - 0.13793103448275862) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };

  convert.lab.lch = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;

    if (h < 0) {
      h += 360;
    }

    c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };

  convert.lch.lab = function (lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [l, a, b];
  };

  convert.rgb.ansi16 = function (args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
    value = Math.round(value / 50);

    if (value === 0) {
      return 30;
    }

    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

    if (value === 2) {
      ansi += 60;
    }

    return ansi;
  };

  convert.hsv.ansi16 = function (args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };

  convert.rgb.ansi256 = function (args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];

    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }

      if (r > 248) {
        return 231;
      }

      return Math.round((r - 8) / 247 * 24) + 232;
    }

    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };

  convert.ansi16.rgb = function (args) {
    var color = args % 10;

    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }

      color = color / 10.5 * 255;
      return [color, color, color];
    }

    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };

  convert.ansi256.rgb = function (args) {
    if (args >= 232) {
      var c = (args - 232) * 10 + 8;
      return [c, c, c];
    }

    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };

  convert.rgb.hex = function (args) {
    var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
  };

  convert.hex.rgb = function (args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

    if (!match) {
      return [0, 0, 0];
    }

    var colorString = match[0];

    if (match[0].length === 3) {
      colorString = colorString.split('').map(function (char) {
        return char + char;
      }).join('');
    }

    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 0xFF;
    var g = integer >> 8 & 0xFF;
    var b = integer & 0xFF;
    return [r, g, b];
  };

  convert.rgb.hcg = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;

    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }

    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }

    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };

  convert.hsl.hcg = function (hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;

    if (l < 0.5) {
      c = 2.0 * s * l;
    } else {
      c = 2.0 * s * (1.0 - l);
    }

    if (c < 1.0) {
      f = (l - 0.5 * c) / (1.0 - c);
    }

    return [hsl[0], c * 100, f * 100];
  };

  convert.hsv.hcg = function (hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;

    if (c < 1.0) {
      f = (v - c) / (1 - c);
    }

    return [hsv[0], c * 100, f * 100];
  };

  convert.hcg.rgb = function (hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;

    if (c === 0.0) {
      return [g * 255, g * 255, g * 255];
    }

    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;

    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;

      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;

      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;

      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;

      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;

      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }

    mg = (1.0 - c) * g;
    return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
  };

  convert.hcg.hsv = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    var f = 0;

    if (v > 0.0) {
      f = c / v;
    }

    return [hcg[0], f * 100, v * 100];
  };

  convert.hcg.hsl = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1.0 - c) + 0.5 * c;
    var s = 0;

    if (l > 0.0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1.0) {
      s = c / (2 * (1 - l));
    }

    return [hcg[0], s * 100, l * 100];
  };

  convert.hcg.hwb = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };

  convert.hwb.hcg = function (hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;

    if (c < 1) {
      g = (v - c) / (1 - c);
    }

    return [hwb[0], c * 100, g * 100];
  };

  convert.apple.rgb = function (apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };

  convert.rgb.apple = function (rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };

  convert.gray.rgb = function (args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };

  convert.gray.hsl = convert.gray.hsv = function (args) {
    return [0, 0, args[0]];
  };

  convert.gray.hwb = function (gray) {
    return [0, 100, gray[0]];
  };

  convert.gray.cmyk = function (gray) {
    return [0, 0, 0, gray[0]];
  };

  convert.gray.lab = function (gray) {
    return [gray[0], 0, 0];
  };

  convert.gray.hex = function (gray) {
    var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
  };

  convert.rgb.gray = function (rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
},817,[818]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
},818,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var conversions = _$$_REQUIRE(_dependencyMap[0]);

  function buildGraph() {
    var graph = {};
    var models = Object.keys(conversions);

    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        distance: -1,
        parent: null
      };
    }

    return graph;
  }

  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel];
    graph[fromModel].distance = 0;

    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(conversions[current]);

      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node = graph[adjacent];

        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }

    return graph;
  }

  function link(from, to) {
    return function (args) {
      return to(from(args));
    };
  }

  function wrapConversion(toModel, graph) {
    var path = [graph[toModel].parent, toModel];
    var fn = conversions[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;

    while (graph[cur].parent) {
      path.unshift(graph[cur].parent);
      fn = link(conversions[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }

    fn.conversion = path;
    return fn;
  }

  module.exports = function (fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);

    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node = graph[toModel];

      if (node.parent === null) {
        continue;
      }

      conversion[toModel] = wrapConversion(toModel, graph);
    }

    return conversion;
  };
},819,[817]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = /^url\(#(.+?)\)$/;
  exports.default = _default;
},820,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  function _default(opacity) {
    var value = +opacity;
    return typeof value !== "number" || isNaN(value) ? 1 : value;
  }
},821,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _extractBrush = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extractOpacity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extractLengthList = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var caps = {
    butt: 0,
    square: 2,
    round: 1
  };
  var joins = {
    miter: 0,
    bevel: 2,
    round: 1
  };
  var strokeProps = ["stroke", "strokeWidth", "strokeOpacity", "strokeDasharray", "strokeDashoffset", "strokeLinecap", "strokeLinejoin", "strokeMiterlimit"];

  function _default(props, styleProperties) {
    strokeProps.forEach(function (name) {
      if (props.hasOwnProperty(name)) {
        styleProperties.push(name);
      }
    });
    var stroke = props.stroke;
    var strokeWidth = props.strokeWidth,
        strokeDasharray = props.strokeDasharray;

    if (!strokeDasharray || strokeDasharray === "none") {
      strokeDasharray = null;
    } else {
      strokeDasharray = (0, _extractLengthList.default)(strokeDasharray);

      if (strokeDasharray && strokeDasharray.length % 2 === 1) {
        strokeDasharray = strokeDasharray.concat(strokeDasharray);
      }
    }

    if (!strokeWidth || typeof strokeWidth !== "string") {
      strokeWidth = "" + (strokeWidth || 1);
    }

    return {
      stroke: (0, _extractBrush.default)(stroke),
      strokeOpacity: (0, _extractOpacity.default)(props.strokeOpacity),
      strokeLinecap: caps[props.strokeLinecap] || 0,
      strokeLinejoin: joins[props.strokeLinejoin] || 0,
      strokeDasharray: strokeDasharray,
      strokeWidth: strokeWidth,
      strokeDashoffset: strokeDasharray ? +props.strokeDashoffset || 0 : null,
      strokeMiterlimit: parseFloat(props.strokeMiterlimit) || 4
    };
  }
},822,[1,810,821,823]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  var spaceReg = /\s+/;
  var commaReg = /,/g;

  function _default(lengthList) {
    if (typeof lengthList === "string") {
      return lengthList.trim().replace(commaReg, " ").split(spaceReg);
    } else if (typeof lengthList === "number") {
      return ["" + lengthList];
    } else if (lengthList && typeof lengthList.map === "function") {
      return lengthList.map(function (d) {
        return "" + d;
      });
    } else {
      return [];
    }
  }
},823,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.props2transform = props2transform;
  exports.default = _default;

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _Matrix2D = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _pegjs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var pooledMatrix = new _Matrix2D.default();

  function transformToMatrix(props, transform) {
    pooledMatrix.reset();
    appendTransform(props);

    if (transform) {
      appendTransform(transform);
    }

    return pooledMatrix.toArray();
  }

  var transformParser = _pegjs.default.generate("\n{\n    var deg2rad = Math.PI / 180;\n\n    /*\n     \u2554\u2550        \u2550\u2557   \u2554\u2550        \u2550\u2557   \u2554\u2550     \u2550\u2557\n     \u2551 al cl el \u2551   \u2551 ar cr er \u2551   \u2551 a c e \u2551\n     \u2551 bl dl fl \u2551 * \u2551 br dr fr \u2551 = \u2551 b d f \u2551\n     \u2551 0  0  1  \u2551   \u2551 0  0  1  \u2551   \u2551 0 0 1 \u2551\n     \u255A\u2550        \u2550\u255D   \u255A\u2550        \u2550\u255D   \u255A\u2550     \u2550\u255D\n    */\n    function multiply_matrices(l, r) {\n        var [al, cl, el, bl, dl, fl] = l;\n        var [ar, cr, er, br, dr, fr] = r;\n\n        var a = al * ar + cl * br;\n        var c = al * cr + cl * dr;\n        var e = al * er + cl * fr + el;\n        var b = bl * ar + dl * br;\n        var d = bl * cr + dl * dr;\n        var f = bl * er + dl * fr + fl;\n\n        return [a, c, e, b, d, f];\n    }\n}\n\ntransformList\n    = wsp* ts:transforms? wsp* { return ts; }\n\ntransforms\n    = t:transform commaWsp* ts:transforms\n    {\n        return multiply_matrices(t, ts);\n    }\n    / t:transform\n\ntransform\n    = matrix\n    / translate\n    / scale\n    / rotate\n    / skewX\n    / skewY\n\nmatrix\n    = \"matrix\" wsp* \"(\" wsp*\n        a:number commaWsp\n        b:number commaWsp\n        c:number commaWsp\n        d:number commaWsp\n        e:number commaWsp\n        f:number wsp* \")\"\n    {\n        return [\n            a, c, e,\n            b, d, f\n        ];\n    }\n\ntranslate\n    = \"translate\" wsp* \"(\" wsp* tx:number ty:commaWspNumber? wsp* \")\"\n    {\n        return [\n            1, 0, tx,\n            0, 1, ty || 0\n        ];\n    }\n\nscale\n    = \"scale\" wsp* \"(\" wsp* sx:number sy:commaWspNumber? wsp* \")\"\n    {\n        return [\n            sx, 0,                     0,\n            0,  sy === null ? sx : sy, 0\n        ];\n    }\n\nrotate\n    = \"rotate\" wsp* \"(\" wsp* angle:number c:commaWspTwoNumbers? wsp* \")\"\n    {\n        var cos = Math.cos(deg2rad * angle);\n        var sin = Math.sin(deg2rad * angle);\n        if (c !== null) {\n            var [x, y] = c;\n            return [\n                cos, -sin, cos * -x + -sin * -y + x,\n                sin,  cos, sin * -x +  cos * -y + y\n            ];\n        }\n        return [\n            cos, -sin, 0,\n            sin,  cos, 0\n        ];\n    }\n\nskewX\n    = \"skewX\" wsp* \"(\" wsp* angle:number wsp* \")\"\n    {\n        return [\n            1, Math.tan(deg2rad * angle), 0,\n            0, 1,                         0\n        ];\n    }\n\nskewY\n    = \"skewY\" wsp* \"(\" wsp* angle:number wsp* \")\"\n    {\n        return [\n            1,                         0, 0,\n            Math.tan(deg2rad * angle), 1, 0\n        ];\n    }\n\nnumber\n    = f:(sign? floatingPointConstant) { return parseFloat(f.join(\"\")); }\n    / i:(sign? integerConstant) { return parseInt(i.join(\"\")); }\n\ncommaWspNumber\n    = commaWsp n:number { return n; }\n\ncommaWspTwoNumbers\n    = commaWsp n1:number commaWsp n2:number { return [n1, n2]; }\n\ncommaWsp\n    = (wsp+ comma? wsp*) / (comma wsp*)\n\ncomma\n    = \",\"\n\nintegerConstant\n    = ds:digitSequence { return ds.join(\"\"); }\n\nfloatingPointConstant\n    = f:(fractionalConstant exponent?) { return f.join(\"\"); }\n    / d:(digitSequence exponent) { return d.join(\"\"); }\n\nfractionalConstant \"fractionalConstant\"\n    = d1:digitSequence? \".\" d2:digitSequence { return [d1 ? d1.join(\"\") : null, \".\", d2.join(\"\")].join(\"\"); }\n    / d:digitSequence \".\" { return d.join(\"\"); }\n\nexponent\n    =  e:([eE] sign? digitSequence) { return [e[0], e[1], e[2].join(\"\")].join(\"\"); }\n\nsign\n    = [+-]\n\ndigitSequence\n    = digit+\n\ndigit\n    = [0-9]\n\nwsp\n    = [\\u0020\\u0009\\u000D\\u000A]\n");

  function appendTransform(transform) {
    if (transform) {
      if (typeof transform === "string") {
        try {
          var _transformParser$pars = transformParser.parse(transform),
              _transformParser$pars2 = (0, _slicedToArray2.default)(_transformParser$pars, 6),
              a = _transformParser$pars2[0],
              c = _transformParser$pars2[1],
              e = _transformParser$pars2[2],
              b = _transformParser$pars2[3],
              d = _transformParser$pars2[4],
              f = _transformParser$pars2[5];

          pooledMatrix.append.apply(pooledMatrix, [a, b, c, d, e, f]);
        } catch (e) {
          console.error(e);
        }
      } else {
        pooledMatrix.appendTransform(transform.x + transform.originX, transform.y + transform.originY, transform.scaleX, transform.scaleY, transform.rotation, transform.skewX, transform.skewY, transform.originX, transform.originY);
      }
    }
  }

  function universal2axis(universal, axisX, axisY, defaultValue) {
    var coords = [];
    var x;
    var y;

    if (_lodash.default.isString(universal)) {
      coords = universal.split(/\s*,\s*/);

      if (coords.length === 2) {
        x = +coords[0];
        y = +coords[1];
      } else if (coords.length === 1) {
        x = y = +coords[0];
      }
    } else if (_lodash.default.isNumber(universal)) {
      x = y = universal;
    }

    axisX = +axisX;

    if (!isNaN(axisX)) {
      x = axisX;
    }

    axisY = +axisY;

    if (!isNaN(axisY)) {
      y = axisY;
    }

    return [x || defaultValue || 0, y || defaultValue || 0];
  }

  function props2transform(props) {
    if (props && typeof props === "string") {
      return props;
    }

    var _universal2axis = universal2axis(props.origin, props.originX, props.originY),
        _universal2axis2 = (0, _slicedToArray2.default)(_universal2axis, 2),
        originX = _universal2axis2[0],
        originY = _universal2axis2[1];

    var _universal2axis3 = universal2axis(props.scale, props.scaleX, props.scaleY, 1),
        _universal2axis4 = (0, _slicedToArray2.default)(_universal2axis3, 2),
        scaleX = _universal2axis4[0],
        scaleY = _universal2axis4[1];

    var _universal2axis5 = universal2axis(props.skew, props.skewX, props.skewY),
        _universal2axis6 = (0, _slicedToArray2.default)(_universal2axis5, 2),
        skewX = _universal2axis6[0],
        skewY = _universal2axis6[1];

    var _universal2axis7 = universal2axis(props.translate, _lodash.default.isNil(props.translateX) ? props.x || 0 : props.translateX, _lodash.default.isNil(props.translateY) ? props.y || 0 : props.translateY),
        _universal2axis8 = (0, _slicedToArray2.default)(_universal2axis7, 2),
        translateX = _universal2axis8[0],
        translateY = _universal2axis8[1];

    return {
      rotation: +props.rotation || 0,
      scaleX: scaleX,
      scaleY: scaleY,
      originX: originX,
      originY: originY,
      skewX: skewX,
      skewY: skewY,
      x: translateX,
      y: translateY
    };
  }

  function _default(props) {
    return transformToMatrix(props2transform(props), props.transform ? props2transform(props.transform) : null);
  }
},824,[1,11,825,826,807]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var DEG_TO_RAD = Math.PI / 180;

  var Matrix2D = function Matrix2D(_a, _b, _c, _d, _tx, _ty) {
    (0, _classCallCheck2.default)(this, Matrix2D);

    this.setTransform = function (a, b, c, d, tx, ty) {
      this.a = a === null || a === undefined ? 1 : a;
      this.b = b || 0;
      this.c = c || 0;
      this.d = d === null || d === undefined ? 1 : d;
      this.tx = tx || 0;
      this.ty = ty || 0;
      return this;
    };

    this.reset = function () {
      this.a = this.d = 1;
      this.b = this.c = this.tx = this.ty = 0;
      return this;
    };

    this.toArray = function () {
      return [this.a, this.b, this.c, this.d, this.tx, this.ty];
    };

    this.copy = function (matrix) {
      return this.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
    };

    this.clone = function () {
      return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);
    };

    this.prepend = function (a, b, c, d, tx, ty) {
      var a1 = this.a;
      var c1 = this.c;
      var tx1 = this.tx;
      this.a = a * a1 + c * this.b;
      this.b = b * a1 + d * this.b;
      this.c = a * c1 + c * this.d;
      this.d = b * c1 + d * this.d;
      this.tx = a * tx1 + c * this.ty + tx;
      this.ty = b * tx1 + d * this.ty + ty;
      return this;
    };

    this.append = function (a, b, c, d, tx, ty) {
      var a1 = this.a;
      var b1 = this.b;
      var c1 = this.c;
      var d1 = this.d;

      if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {
        this.a = a1 * a + c1 * b;
        this.b = b1 * a + d1 * b;
        this.c = a1 * c + c1 * d;
        this.d = b1 * c + d1 * d;
      }

      this.tx = a1 * tx + c1 * ty + this.tx;
      this.ty = b1 * tx + d1 * ty + this.ty;
      return this;
    };

    this.appendTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
      var cos, sin;

      if (rotation % 360) {
        var r = rotation * DEG_TO_RAD;
        cos = Math.cos(r);
        sin = Math.sin(r);
      } else {
        cos = 1;
        sin = 0;
      }

      if (skewX || skewY) {
        skewX *= DEG_TO_RAD;
        skewY *= DEG_TO_RAD;
        this.append(Math.cos(skewY), Math.sin(skewY), Math.sin(skewX), Math.cos(skewX), x, y);
        this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);
      } else {
        this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);
      }

      if (regX || regY) {
        this.tx -= regX * this.a + regY * this.c;
        this.ty -= regX * this.b + regY * this.d;
      }

      return this;
    };

    this.prependTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
      var cos, sin;

      if (rotation % 360) {
        var r = rotation * DEG_TO_RAD;
        cos = Math.cos(r);
        sin = Math.sin(r);
      } else {
        cos = 1;
        sin = 0;
      }

      if (regX || regY) {
        this.tx -= regX;
        this.ty -= regY;
      }

      if (skewX || skewY) {
        skewX *= DEG_TO_RAD;
        skewY *= DEG_TO_RAD;
        this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);
        this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
      } else {
        this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);
      }

      return this;
    };

    this.setTransform(_a, _b, _c, _d, _tx, _ty);
  };

  exports.default = Matrix2D;
},825,[1,21]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _$$_REQUIRE(_dependencyMap[0]),
      objects = _$$_REQUIRE(_dependencyMap[1]);

  var peg = {
    VERSION: "0.10.0",
    GrammarError: _$$_REQUIRE(_dependencyMap[2]),
    parser: _$$_REQUIRE(_dependencyMap[3]),
    compiler: _$$_REQUIRE(_dependencyMap[4]),
    generate: function generate(grammar, options) {
      options = options !== undefined ? options : {};

      function convertPasses(passes) {
        var converted = {},
            stage;

        for (stage in passes) {
          if (passes.hasOwnProperty(stage)) {
            converted[stage] = objects.values(passes[stage]);
          }
        }

        return converted;
      }

      options = objects.clone(options);
      var plugins = "plugins" in options ? options.plugins : [],
          config = {
        parser: peg.parser,
        passes: convertPasses(peg.compiler.passes)
      };
      arrays.each(plugins, function (p) {
        p.use(config, options);
      });
      return peg.compiler.compile(config.parser.parse(grammar), config.passes, options);
    }
  };
  module.exports = peg;
},826,[827,828,829,831,832]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrays = {
    range: function range(start, stop) {
      var length = stop - start,
          result = new Array(length),
          i,
          j;

      for (i = 0, j = start; i < length; i++, j++) {
        result[i] = j;
      }

      return result;
    },
    find: function find(array, valueOrPredicate) {
      var length = array.length,
          i;

      if (typeof valueOrPredicate === "function") {
        for (i = 0; i < length; i++) {
          if (valueOrPredicate(array[i])) {
            return array[i];
          }
        }
      } else {
        for (i = 0; i < length; i++) {
          if (array[i] === valueOrPredicate) {
            return array[i];
          }
        }
      }
    },
    indexOf: function indexOf(array, valueOrPredicate) {
      var length = array.length,
          i;

      if (typeof valueOrPredicate === "function") {
        for (i = 0; i < length; i++) {
          if (valueOrPredicate(array[i])) {
            return i;
          }
        }
      } else {
        for (i = 0; i < length; i++) {
          if (array[i] === valueOrPredicate) {
            return i;
          }
        }
      }

      return -1;
    },
    contains: function contains(array, valueOrPredicate) {
      return arrays.indexOf(array, valueOrPredicate) !== -1;
    },
    each: function each(array, iterator) {
      var length = array.length,
          i;

      for (i = 0; i < length; i++) {
        iterator(array[i], i);
      }
    },
    map: function map(array, iterator) {
      var length = array.length,
          result = new Array(length),
          i;

      for (i = 0; i < length; i++) {
        result[i] = iterator(array[i], i);
      }

      return result;
    },
    pluck: function pluck(array, key) {
      return arrays.map(array, function (e) {
        return e[key];
      });
    },
    every: function every(array, predicate) {
      var length = array.length,
          i;

      for (i = 0; i < length; i++) {
        if (!predicate(array[i])) {
          return false;
        }
      }

      return true;
    },
    some: function some(array, predicate) {
      var length = array.length,
          i;

      for (i = 0; i < length; i++) {
        if (predicate(array[i])) {
          return true;
        }
      }

      return false;
    }
  };
  module.exports = arrays;
},827,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var objects = {
    keys: function keys(object) {
      var result = [],
          key;

      for (key in object) {
        if (object.hasOwnProperty(key)) {
          result.push(key);
        }
      }

      return result;
    },
    values: function values(object) {
      var result = [],
          key;

      for (key in object) {
        if (object.hasOwnProperty(key)) {
          result.push(object[key]);
        }
      }

      return result;
    },
    clone: function clone(object) {
      var result = {},
          key;

      for (key in object) {
        if (object.hasOwnProperty(key)) {
          result[key] = object[key];
        }
      }

      return result;
    },
    defaults: function defaults(object, _defaults) {
      var key;

      for (key in _defaults) {
        if (_defaults.hasOwnProperty(key)) {
          if (!(key in object)) {
            object[key] = _defaults[key];
          }
        }
      }
    }
  };
  module.exports = objects;
},828,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var classes = _$$_REQUIRE(_dependencyMap[0]);

  function GrammarError(message, location) {
    this.name = "GrammarError";
    this.message = message;
    this.location = location;

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, GrammarError);
    }
  }

  classes.subclass(GrammarError, Error);
  module.exports = GrammarError;
},829,[830]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var classes = {
    subclass: function subclass(child, parent) {
      function ctor() {
        this.constructor = child;
      }

      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
    }
  };
  module.exports = classes;
},830,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },
      "class": function _class(expectation) {
        var escapedParts = "",
            i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
        }

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },
      any: function any(expectation) {
        return "any character";
      },
      end: function end(expectation) {
        return "end of input";
      },
      other: function other(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function classEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i,
          j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }

        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== undefined ? options : {};

    var peg$FAILED = {},
        peg$startRuleFunctions = {
      Grammar: peg$parseGrammar
    },
        peg$startRuleFunction = peg$parseGrammar,
        peg$c0 = function peg$c0(initializer, rules) {
      return {
        type: "grammar",
        initializer: extractOptional(initializer, 0),
        rules: extractList(rules, 0),
        location: location()
      };
    },
        peg$c1 = function peg$c1(code) {
      return {
        type: "initializer",
        code: code,
        location: location()
      };
    },
        peg$c2 = "=",
        peg$c3 = peg$literalExpectation("=", false),
        peg$c4 = function peg$c4(name, displayName, expression) {
      return {
        type: "rule",
        name: name,
        expression: displayName !== null ? {
          type: "named",
          name: displayName[0],
          expression: expression,
          location: location()
        } : expression,
        location: location()
      };
    },
        peg$c5 = "/",
        peg$c6 = peg$literalExpectation("/", false),
        peg$c7 = function peg$c7(head, tail) {
      return tail.length > 0 ? {
        type: "choice",
        alternatives: buildList(head, tail, 3),
        location: location()
      } : head;
    },
        peg$c8 = function peg$c8(expression, code) {
      return code !== null ? {
        type: "action",
        expression: expression,
        code: code[1],
        location: location()
      } : expression;
    },
        peg$c9 = function peg$c9(head, tail) {
      return tail.length > 0 ? {
        type: "sequence",
        elements: buildList(head, tail, 1),
        location: location()
      } : head;
    },
        peg$c10 = ":",
        peg$c11 = peg$literalExpectation(":", false),
        peg$c12 = function peg$c12(label, expression) {
      return {
        type: "labeled",
        label: label,
        expression: expression,
        location: location()
      };
    },
        peg$c13 = function peg$c13(operator, expression) {
      return {
        type: OPS_TO_PREFIXED_TYPES[operator],
        expression: expression,
        location: location()
      };
    },
        peg$c14 = "$",
        peg$c15 = peg$literalExpectation("$", false),
        peg$c16 = "&",
        peg$c17 = peg$literalExpectation("&", false),
        peg$c18 = "!",
        peg$c19 = peg$literalExpectation("!", false),
        peg$c20 = function peg$c20(expression, operator) {
      return {
        type: OPS_TO_SUFFIXED_TYPES[operator],
        expression: expression,
        location: location()
      };
    },
        peg$c21 = "?",
        peg$c22 = peg$literalExpectation("?", false),
        peg$c23 = "*",
        peg$c24 = peg$literalExpectation("*", false),
        peg$c25 = "+",
        peg$c26 = peg$literalExpectation("+", false),
        peg$c27 = "(",
        peg$c28 = peg$literalExpectation("(", false),
        peg$c29 = ")",
        peg$c30 = peg$literalExpectation(")", false),
        peg$c31 = function peg$c31(expression) {
      return expression.type === 'labeled' || expression.type === 'sequence' ? {
        type: "group",
        expression: expression
      } : expression;
    },
        peg$c32 = function peg$c32(name) {
      return {
        type: "rule_ref",
        name: name,
        location: location()
      };
    },
        peg$c33 = function peg$c33(operator, code) {
      return {
        type: OPS_TO_SEMANTIC_PREDICATE_TYPES[operator],
        code: code,
        location: location()
      };
    },
        peg$c34 = peg$anyExpectation(),
        peg$c35 = peg$otherExpectation("whitespace"),
        peg$c36 = "\t",
        peg$c37 = peg$literalExpectation("\t", false),
        peg$c38 = "\x0B",
        peg$c39 = peg$literalExpectation("\x0B", false),
        peg$c40 = "\f",
        peg$c41 = peg$literalExpectation("\f", false),
        peg$c42 = " ",
        peg$c43 = peg$literalExpectation(" ", false),
        peg$c44 = "\xA0",
        peg$c45 = peg$literalExpectation("\xA0", false),
        peg$c46 = "\uFEFF",
        peg$c47 = peg$literalExpectation("\uFEFF", false),
        peg$c48 = /^[\n\r\u2028\u2029]/,
        peg$c49 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false),
        peg$c50 = peg$otherExpectation("end of line"),
        peg$c51 = "\n",
        peg$c52 = peg$literalExpectation("\n", false),
        peg$c53 = "\r\n",
        peg$c54 = peg$literalExpectation("\r\n", false),
        peg$c55 = "\r",
        peg$c56 = peg$literalExpectation("\r", false),
        peg$c57 = "\u2028",
        peg$c58 = peg$literalExpectation("\u2028", false),
        peg$c59 = "\u2029",
        peg$c60 = peg$literalExpectation("\u2029", false),
        peg$c61 = peg$otherExpectation("comment"),
        peg$c62 = "/*",
        peg$c63 = peg$literalExpectation("/*", false),
        peg$c64 = "*/",
        peg$c65 = peg$literalExpectation("*/", false),
        peg$c66 = "//",
        peg$c67 = peg$literalExpectation("//", false),
        peg$c68 = function peg$c68(name) {
      return name;
    },
        peg$c69 = peg$otherExpectation("identifier"),
        peg$c70 = function peg$c70(head, tail) {
      return head + tail.join("");
    },
        peg$c71 = "_",
        peg$c72 = peg$literalExpectation("_", false),
        peg$c73 = "\\",
        peg$c74 = peg$literalExpectation("\\", false),
        peg$c75 = function peg$c75(sequence) {
      return sequence;
    },
        peg$c76 = "\u200C",
        peg$c77 = peg$literalExpectation("\u200C", false),
        peg$c78 = "\u200D",
        peg$c79 = peg$literalExpectation("\u200D", false),
        peg$c80 = peg$otherExpectation("literal"),
        peg$c81 = "i",
        peg$c82 = peg$literalExpectation("i", false),
        peg$c83 = function peg$c83(value, ignoreCase) {
      return {
        type: "literal",
        value: value,
        ignoreCase: ignoreCase !== null,
        location: location()
      };
    },
        peg$c84 = peg$otherExpectation("string"),
        peg$c85 = "\"",
        peg$c86 = peg$literalExpectation("\"", false),
        peg$c87 = function peg$c87(chars) {
      return chars.join("");
    },
        peg$c88 = "'",
        peg$c89 = peg$literalExpectation("'", false),
        peg$c90 = function peg$c90() {
      return text();
    },
        peg$c91 = peg$otherExpectation("character class"),
        peg$c92 = "[",
        peg$c93 = peg$literalExpectation("[", false),
        peg$c94 = "^",
        peg$c95 = peg$literalExpectation("^", false),
        peg$c96 = "]",
        peg$c97 = peg$literalExpectation("]", false),
        peg$c98 = function peg$c98(inverted, parts, ignoreCase) {
      return {
        type: "class",
        parts: filterEmptyStrings(parts),
        inverted: inverted !== null,
        ignoreCase: ignoreCase !== null,
        location: location()
      };
    },
        peg$c99 = "-",
        peg$c100 = peg$literalExpectation("-", false),
        peg$c101 = function peg$c101(begin, end) {
      if (begin.charCodeAt(0) > end.charCodeAt(0)) {
        error("Invalid character range: " + text() + ".");
      }

      return [begin, end];
    },
        peg$c102 = function peg$c102() {
      return "";
    },
        peg$c103 = "0",
        peg$c104 = peg$literalExpectation("0", false),
        peg$c105 = function peg$c105() {
      return "\0";
    },
        peg$c106 = "b",
        peg$c107 = peg$literalExpectation("b", false),
        peg$c108 = function peg$c108() {
      return "\b";
    },
        peg$c109 = "f",
        peg$c110 = peg$literalExpectation("f", false),
        peg$c111 = function peg$c111() {
      return "\f";
    },
        peg$c112 = "n",
        peg$c113 = peg$literalExpectation("n", false),
        peg$c114 = function peg$c114() {
      return "\n";
    },
        peg$c115 = "r",
        peg$c116 = peg$literalExpectation("r", false),
        peg$c117 = function peg$c117() {
      return "\r";
    },
        peg$c118 = "t",
        peg$c119 = peg$literalExpectation("t", false),
        peg$c120 = function peg$c120() {
      return "\t";
    },
        peg$c121 = "v",
        peg$c122 = peg$literalExpectation("v", false),
        peg$c123 = function peg$c123() {
      return "\x0B";
    },
        peg$c124 = "x",
        peg$c125 = peg$literalExpectation("x", false),
        peg$c126 = "u",
        peg$c127 = peg$literalExpectation("u", false),
        peg$c128 = function peg$c128(digits) {
      return String.fromCharCode(parseInt(digits, 16));
    },
        peg$c129 = /^[0-9]/,
        peg$c130 = peg$classExpectation([["0", "9"]], false, false),
        peg$c131 = /^[0-9a-f]/i,
        peg$c132 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        peg$c133 = ".",
        peg$c134 = peg$literalExpectation(".", false),
        peg$c135 = function peg$c135() {
      return {
        type: "any",
        location: location()
      };
    },
        peg$c136 = peg$otherExpectation("code block"),
        peg$c137 = "{",
        peg$c138 = peg$literalExpectation("{", false),
        peg$c139 = "}",
        peg$c140 = peg$literalExpectation("}", false),
        peg$c141 = function peg$c141(code) {
      return code;
    },
        peg$c142 = /^[{}]/,
        peg$c143 = peg$classExpectation(["{", "}"], false, false),
        peg$c144 = /^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/,
        peg$c145 = peg$classExpectation([["a", "z"], "\xB5", ["\xDF", "\xF6"], ["\xF8", "\xFF"], "\u0101", "\u0103", "\u0105", "\u0107", "\u0109", "\u010B", "\u010D", "\u010F", "\u0111", "\u0113", "\u0115", "\u0117", "\u0119", "\u011B", "\u011D", "\u011F", "\u0121", "\u0123", "\u0125", "\u0127", "\u0129", "\u012B", "\u012D", "\u012F", "\u0131", "\u0133", "\u0135", ["\u0137", "\u0138"], "\u013A", "\u013C", "\u013E", "\u0140", "\u0142", "\u0144", "\u0146", ["\u0148", "\u0149"], "\u014B", "\u014D", "\u014F", "\u0151", "\u0153", "\u0155", "\u0157", "\u0159", "\u015B", "\u015D", "\u015F", "\u0161", "\u0163", "\u0165", "\u0167", "\u0169", "\u016B", "\u016D", "\u016F", "\u0171", "\u0173", "\u0175", "\u0177", "\u017A", "\u017C", ["\u017E", "\u0180"], "\u0183", "\u0185", "\u0188", ["\u018C", "\u018D"], "\u0192", "\u0195", ["\u0199", "\u019B"], "\u019E", "\u01A1", "\u01A3", "\u01A5", "\u01A8", ["\u01AA", "\u01AB"], "\u01AD", "\u01B0", "\u01B4", "\u01B6", ["\u01B9", "\u01BA"], ["\u01BD", "\u01BF"], "\u01C6", "\u01C9", "\u01CC", "\u01CE", "\u01D0", "\u01D2", "\u01D4", "\u01D6", "\u01D8", "\u01DA", ["\u01DC", "\u01DD"], "\u01DF", "\u01E1", "\u01E3", "\u01E5", "\u01E7", "\u01E9", "\u01EB", "\u01ED", ["\u01EF", "\u01F0"], "\u01F3", "\u01F5", "\u01F9", "\u01FB", "\u01FD", "\u01FF", "\u0201", "\u0203", "\u0205", "\u0207", "\u0209", "\u020B", "\u020D", "\u020F", "\u0211", "\u0213", "\u0215", "\u0217", "\u0219", "\u021B", "\u021D", "\u021F", "\u0221", "\u0223", "\u0225", "\u0227", "\u0229", "\u022B", "\u022D", "\u022F", "\u0231", ["\u0233", "\u0239"], "\u023C", ["\u023F", "\u0240"], "\u0242", "\u0247", "\u0249", "\u024B", "\u024D", ["\u024F", "\u0293"], ["\u0295", "\u02AF"], "\u0371", "\u0373", "\u0377", ["\u037B", "\u037D"], "\u0390", ["\u03AC", "\u03CE"], ["\u03D0", "\u03D1"], ["\u03D5", "\u03D7"], "\u03D9", "\u03DB", "\u03DD", "\u03DF", "\u03E1", "\u03E3", "\u03E5", "\u03E7", "\u03E9", "\u03EB", "\u03ED", ["\u03EF", "\u03F3"], "\u03F5", "\u03F8", ["\u03FB", "\u03FC"], ["\u0430", "\u045F"], "\u0461", "\u0463", "\u0465", "\u0467", "\u0469", "\u046B", "\u046D", "\u046F", "\u0471", "\u0473", "\u0475", "\u0477", "\u0479", "\u047B", "\u047D", "\u047F", "\u0481", "\u048B", "\u048D", "\u048F", "\u0491", "\u0493", "\u0495", "\u0497", "\u0499", "\u049B", "\u049D", "\u049F", "\u04A1", "\u04A3", "\u04A5", "\u04A7", "\u04A9", "\u04AB", "\u04AD", "\u04AF", "\u04B1", "\u04B3", "\u04B5", "\u04B7", "\u04B9", "\u04BB", "\u04BD", "\u04BF", "\u04C2", "\u04C4", "\u04C6", "\u04C8", "\u04CA", "\u04CC", ["\u04CE", "\u04CF"], "\u04D1", "\u04D3", "\u04D5", "\u04D7", "\u04D9", "\u04DB", "\u04DD", "\u04DF", "\u04E1", "\u04E3", "\u04E5", "\u04E7", "\u04E9", "\u04EB", "\u04ED", "\u04EF", "\u04F1", "\u04F3", "\u04F5", "\u04F7", "\u04F9", "\u04FB", "\u04FD", "\u04FF", "\u0501", "\u0503", "\u0505", "\u0507", "\u0509", "\u050B", "\u050D", "\u050F", "\u0511", "\u0513", "\u0515", "\u0517", "\u0519", "\u051B", "\u051D", "\u051F", "\u0521", "\u0523", "\u0525", "\u0527", "\u0529", "\u052B", "\u052D", "\u052F", ["\u0561", "\u0587"], ["\u13F8", "\u13FD"], ["\u1D00", "\u1D2B"], ["\u1D6B", "\u1D77"], ["\u1D79", "\u1D9A"], "\u1E01", "\u1E03", "\u1E05", "\u1E07", "\u1E09", "\u1E0B", "\u1E0D", "\u1E0F", "\u1E11", "\u1E13", "\u1E15", "\u1E17", "\u1E19", "\u1E1B", "\u1E1D", "\u1E1F", "\u1E21", "\u1E23", "\u1E25", "\u1E27", "\u1E29", "\u1E2B", "\u1E2D", "\u1E2F", "\u1E31", "\u1E33", "\u1E35", "\u1E37", "\u1E39", "\u1E3B", "\u1E3D", "\u1E3F", "\u1E41", "\u1E43", "\u1E45", "\u1E47", "\u1E49", "\u1E4B", "\u1E4D", "\u1E4F", "\u1E51", "\u1E53", "\u1E55", "\u1E57", "\u1E59", "\u1E5B", "\u1E5D", "\u1E5F", "\u1E61", "\u1E63", "\u1E65", "\u1E67", "\u1E69", "\u1E6B", "\u1E6D", "\u1E6F", "\u1E71", "\u1E73", "\u1E75", "\u1E77", "\u1E79", "\u1E7B", "\u1E7D", "\u1E7F", "\u1E81", "\u1E83", "\u1E85", "\u1E87", "\u1E89", "\u1E8B", "\u1E8D", "\u1E8F", "\u1E91", "\u1E93", ["\u1E95", "\u1E9D"], "\u1E9F", "\u1EA1", "\u1EA3", "\u1EA5", "\u1EA7", "\u1EA9", "\u1EAB", "\u1EAD", "\u1EAF", "\u1EB1", "\u1EB3", "\u1EB5", "\u1EB7", "\u1EB9", "\u1EBB", "\u1EBD", "\u1EBF", "\u1EC1", "\u1EC3", "\u1EC5", "\u1EC7", "\u1EC9", "\u1ECB", "\u1ECD", "\u1ECF", "\u1ED1", "\u1ED3", "\u1ED5", "\u1ED7", "\u1ED9", "\u1EDB", "\u1EDD", "\u1EDF", "\u1EE1", "\u1EE3", "\u1EE5", "\u1EE7", "\u1EE9", "\u1EEB", "\u1EED", "\u1EEF", "\u1EF1", "\u1EF3", "\u1EF5", "\u1EF7", "\u1EF9", "\u1EFB", "\u1EFD", ["\u1EFF", "\u1F07"], ["\u1F10", "\u1F15"], ["\u1F20", "\u1F27"], ["\u1F30", "\u1F37"], ["\u1F40", "\u1F45"], ["\u1F50", "\u1F57"], ["\u1F60", "\u1F67"], ["\u1F70", "\u1F7D"], ["\u1F80", "\u1F87"], ["\u1F90", "\u1F97"], ["\u1FA0", "\u1FA7"], ["\u1FB0", "\u1FB4"], ["\u1FB6", "\u1FB7"], "\u1FBE", ["\u1FC2", "\u1FC4"], ["\u1FC6", "\u1FC7"], ["\u1FD0", "\u1FD3"], ["\u1FD6", "\u1FD7"], ["\u1FE0", "\u1FE7"], ["\u1FF2", "\u1FF4"], ["\u1FF6", "\u1FF7"], "\u210A", ["\u210E", "\u210F"], "\u2113", "\u212F", "\u2134", "\u2139", ["\u213C", "\u213D"], ["\u2146", "\u2149"], "\u214E", "\u2184", ["\u2C30", "\u2C5E"], "\u2C61", ["\u2C65", "\u2C66"], "\u2C68", "\u2C6A", "\u2C6C", "\u2C71", ["\u2C73", "\u2C74"], ["\u2C76", "\u2C7B"], "\u2C81", "\u2C83", "\u2C85", "\u2C87", "\u2C89", "\u2C8B", "\u2C8D", "\u2C8F", "\u2C91", "\u2C93", "\u2C95", "\u2C97", "\u2C99", "\u2C9B", "\u2C9D", "\u2C9F", "\u2CA1", "\u2CA3", "\u2CA5", "\u2CA7", "\u2CA9", "\u2CAB", "\u2CAD", "\u2CAF", "\u2CB1", "\u2CB3", "\u2CB5", "\u2CB7", "\u2CB9", "\u2CBB", "\u2CBD", "\u2CBF", "\u2CC1", "\u2CC3", "\u2CC5", "\u2CC7", "\u2CC9", "\u2CCB", "\u2CCD", "\u2CCF", "\u2CD1", "\u2CD3", "\u2CD5", "\u2CD7", "\u2CD9", "\u2CDB", "\u2CDD", "\u2CDF", "\u2CE1", ["\u2CE3", "\u2CE4"], "\u2CEC", "\u2CEE", "\u2CF3", ["\u2D00", "\u2D25"], "\u2D27", "\u2D2D", "\uA641", "\uA643", "\uA645", "\uA647", "\uA649", "\uA64B", "\uA64D", "\uA64F", "\uA651", "\uA653", "\uA655", "\uA657", "\uA659", "\uA65B", "\uA65D", "\uA65F", "\uA661", "\uA663", "\uA665", "\uA667", "\uA669", "\uA66B", "\uA66D", "\uA681", "\uA683", "\uA685", "\uA687", "\uA689", "\uA68B", "\uA68D", "\uA68F", "\uA691", "\uA693", "\uA695", "\uA697", "\uA699", "\uA69B", "\uA723", "\uA725", "\uA727", "\uA729", "\uA72B", "\uA72D", ["\uA72F", "\uA731"], "\uA733", "\uA735", "\uA737", "\uA739", "\uA73B", "\uA73D", "\uA73F", "\uA741", "\uA743", "\uA745", "\uA747", "\uA749", "\uA74B", "\uA74D", "\uA74F", "\uA751", "\uA753", "\uA755", "\uA757", "\uA759", "\uA75B", "\uA75D", "\uA75F", "\uA761", "\uA763", "\uA765", "\uA767", "\uA769", "\uA76B", "\uA76D", "\uA76F", ["\uA771", "\uA778"], "\uA77A", "\uA77C", "\uA77F", "\uA781", "\uA783", "\uA785", "\uA787", "\uA78C", "\uA78E", "\uA791", ["\uA793", "\uA795"], "\uA797", "\uA799", "\uA79B", "\uA79D", "\uA79F", "\uA7A1", "\uA7A3", "\uA7A5", "\uA7A7", "\uA7A9", "\uA7B5", "\uA7B7", "\uA7FA", ["\uAB30", "\uAB5A"], ["\uAB60", "\uAB65"], ["\uAB70", "\uABBF"], ["\uFB00", "\uFB06"], ["\uFB13", "\uFB17"], ["\uFF41", "\uFF5A"]], false, false),
        peg$c146 = /^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F]/,
        peg$c147 = peg$classExpectation([["\u02B0", "\u02C1"], ["\u02C6", "\u02D1"], ["\u02E0", "\u02E4"], "\u02EC", "\u02EE", "\u0374", "\u037A", "\u0559", "\u0640", ["\u06E5", "\u06E6"], ["\u07F4", "\u07F5"], "\u07FA", "\u081A", "\u0824", "\u0828", "\u0971", "\u0E46", "\u0EC6", "\u10FC", "\u17D7", "\u1843", "\u1AA7", ["\u1C78", "\u1C7D"], ["\u1D2C", "\u1D6A"], "\u1D78", ["\u1D9B", "\u1DBF"], "\u2071", "\u207F", ["\u2090", "\u209C"], ["\u2C7C", "\u2C7D"], "\u2D6F", "\u2E2F", "\u3005", ["\u3031", "\u3035"], "\u303B", ["\u309D", "\u309E"], ["\u30FC", "\u30FE"], "\uA015", ["\uA4F8", "\uA4FD"], "\uA60C", "\uA67F", ["\uA69C", "\uA69D"], ["\uA717", "\uA71F"], "\uA770", "\uA788", ["\uA7F8", "\uA7F9"], "\uA9CF", "\uA9E6", "\uAA70", "\uAADD", ["\uAAF3", "\uAAF4"], ["\uAB5C", "\uAB5F"], "\uFF70", ["\uFF9E", "\uFF9F"]], false, false),
        peg$c148 = /^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
        peg$c149 = peg$classExpectation(["\xAA", "\xBA", "\u01BB", ["\u01C0", "\u01C3"], "\u0294", ["\u05D0", "\u05EA"], ["\u05F0", "\u05F2"], ["\u0620", "\u063F"], ["\u0641", "\u064A"], ["\u066E", "\u066F"], ["\u0671", "\u06D3"], "\u06D5", ["\u06EE", "\u06EF"], ["\u06FA", "\u06FC"], "\u06FF", "\u0710", ["\u0712", "\u072F"], ["\u074D", "\u07A5"], "\u07B1", ["\u07CA", "\u07EA"], ["\u0800", "\u0815"], ["\u0840", "\u0858"], ["\u08A0", "\u08B4"], ["\u0904", "\u0939"], "\u093D", "\u0950", ["\u0958", "\u0961"], ["\u0972", "\u0980"], ["\u0985", "\u098C"], ["\u098F", "\u0990"], ["\u0993", "\u09A8"], ["\u09AA", "\u09B0"], "\u09B2", ["\u09B6", "\u09B9"], "\u09BD", "\u09CE", ["\u09DC", "\u09DD"], ["\u09DF", "\u09E1"], ["\u09F0", "\u09F1"], ["\u0A05", "\u0A0A"], ["\u0A0F", "\u0A10"], ["\u0A13", "\u0A28"], ["\u0A2A", "\u0A30"], ["\u0A32", "\u0A33"], ["\u0A35", "\u0A36"], ["\u0A38", "\u0A39"], ["\u0A59", "\u0A5C"], "\u0A5E", ["\u0A72", "\u0A74"], ["\u0A85", "\u0A8D"], ["\u0A8F", "\u0A91"], ["\u0A93", "\u0AA8"], ["\u0AAA", "\u0AB0"], ["\u0AB2", "\u0AB3"], ["\u0AB5", "\u0AB9"], "\u0ABD", "\u0AD0", ["\u0AE0", "\u0AE1"], "\u0AF9", ["\u0B05", "\u0B0C"], ["\u0B0F", "\u0B10"], ["\u0B13", "\u0B28"], ["\u0B2A", "\u0B30"], ["\u0B32", "\u0B33"], ["\u0B35", "\u0B39"], "\u0B3D", ["\u0B5C", "\u0B5D"], ["\u0B5F", "\u0B61"], "\u0B71", "\u0B83", ["\u0B85", "\u0B8A"], ["\u0B8E", "\u0B90"], ["\u0B92", "\u0B95"], ["\u0B99", "\u0B9A"], "\u0B9C", ["\u0B9E", "\u0B9F"], ["\u0BA3", "\u0BA4"], ["\u0BA8", "\u0BAA"], ["\u0BAE", "\u0BB9"], "\u0BD0", ["\u0C05", "\u0C0C"], ["\u0C0E", "\u0C10"], ["\u0C12", "\u0C28"], ["\u0C2A", "\u0C39"], "\u0C3D", ["\u0C58", "\u0C5A"], ["\u0C60", "\u0C61"], ["\u0C85", "\u0C8C"], ["\u0C8E", "\u0C90"], ["\u0C92", "\u0CA8"], ["\u0CAA", "\u0CB3"], ["\u0CB5", "\u0CB9"], "\u0CBD", "\u0CDE", ["\u0CE0", "\u0CE1"], ["\u0CF1", "\u0CF2"], ["\u0D05", "\u0D0C"], ["\u0D0E", "\u0D10"], ["\u0D12", "\u0D3A"], "\u0D3D", "\u0D4E", ["\u0D5F", "\u0D61"], ["\u0D7A", "\u0D7F"], ["\u0D85", "\u0D96"], ["\u0D9A", "\u0DB1"], ["\u0DB3", "\u0DBB"], "\u0DBD", ["\u0DC0", "\u0DC6"], ["\u0E01", "\u0E30"], ["\u0E32", "\u0E33"], ["\u0E40", "\u0E45"], ["\u0E81", "\u0E82"], "\u0E84", ["\u0E87", "\u0E88"], "\u0E8A", "\u0E8D", ["\u0E94", "\u0E97"], ["\u0E99", "\u0E9F"], ["\u0EA1", "\u0EA3"], "\u0EA5", "\u0EA7", ["\u0EAA", "\u0EAB"], ["\u0EAD", "\u0EB0"], ["\u0EB2", "\u0EB3"], "\u0EBD", ["\u0EC0", "\u0EC4"], ["\u0EDC", "\u0EDF"], "\u0F00", ["\u0F40", "\u0F47"], ["\u0F49", "\u0F6C"], ["\u0F88", "\u0F8C"], ["\u1000", "\u102A"], "\u103F", ["\u1050", "\u1055"], ["\u105A", "\u105D"], "\u1061", ["\u1065", "\u1066"], ["\u106E", "\u1070"], ["\u1075", "\u1081"], "\u108E", ["\u10D0", "\u10FA"], ["\u10FD", "\u1248"], ["\u124A", "\u124D"], ["\u1250", "\u1256"], "\u1258", ["\u125A", "\u125D"], ["\u1260", "\u1288"], ["\u128A", "\u128D"], ["\u1290", "\u12B0"], ["\u12B2", "\u12B5"], ["\u12B8", "\u12BE"], "\u12C0", ["\u12C2", "\u12C5"], ["\u12C8", "\u12D6"], ["\u12D8", "\u1310"], ["\u1312", "\u1315"], ["\u1318", "\u135A"], ["\u1380", "\u138F"], ["\u1401", "\u166C"], ["\u166F", "\u167F"], ["\u1681", "\u169A"], ["\u16A0", "\u16EA"], ["\u16F1", "\u16F8"], ["\u1700", "\u170C"], ["\u170E", "\u1711"], ["\u1720", "\u1731"], ["\u1740", "\u1751"], ["\u1760", "\u176C"], ["\u176E", "\u1770"], ["\u1780", "\u17B3"], "\u17DC", ["\u1820", "\u1842"], ["\u1844", "\u1877"], ["\u1880", "\u18A8"], "\u18AA", ["\u18B0", "\u18F5"], ["\u1900", "\u191E"], ["\u1950", "\u196D"], ["\u1970", "\u1974"], ["\u1980", "\u19AB"], ["\u19B0", "\u19C9"], ["\u1A00", "\u1A16"], ["\u1A20", "\u1A54"], ["\u1B05", "\u1B33"], ["\u1B45", "\u1B4B"], ["\u1B83", "\u1BA0"], ["\u1BAE", "\u1BAF"], ["\u1BBA", "\u1BE5"], ["\u1C00", "\u1C23"], ["\u1C4D", "\u1C4F"], ["\u1C5A", "\u1C77"], ["\u1CE9", "\u1CEC"], ["\u1CEE", "\u1CF1"], ["\u1CF5", "\u1CF6"], ["\u2135", "\u2138"], ["\u2D30", "\u2D67"], ["\u2D80", "\u2D96"], ["\u2DA0", "\u2DA6"], ["\u2DA8", "\u2DAE"], ["\u2DB0", "\u2DB6"], ["\u2DB8", "\u2DBE"], ["\u2DC0", "\u2DC6"], ["\u2DC8", "\u2DCE"], ["\u2DD0", "\u2DD6"], ["\u2DD8", "\u2DDE"], "\u3006", "\u303C", ["\u3041", "\u3096"], "\u309F", ["\u30A1", "\u30FA"], "\u30FF", ["\u3105", "\u312D"], ["\u3131", "\u318E"], ["\u31A0", "\u31BA"], ["\u31F0", "\u31FF"], ["\u3400", "\u4DB5"], ["\u4E00", "\u9FD5"], ["\uA000", "\uA014"], ["\uA016", "\uA48C"], ["\uA4D0", "\uA4F7"], ["\uA500", "\uA60B"], ["\uA610", "\uA61F"], ["\uA62A", "\uA62B"], "\uA66E", ["\uA6A0", "\uA6E5"], "\uA78F", "\uA7F7", ["\uA7FB", "\uA801"], ["\uA803", "\uA805"], ["\uA807", "\uA80A"], ["\uA80C", "\uA822"], ["\uA840", "\uA873"], ["\uA882", "\uA8B3"], ["\uA8F2", "\uA8F7"], "\uA8FB", "\uA8FD", ["\uA90A", "\uA925"], ["\uA930", "\uA946"], ["\uA960", "\uA97C"], ["\uA984", "\uA9B2"], ["\uA9E0", "\uA9E4"], ["\uA9E7", "\uA9EF"], ["\uA9FA", "\uA9FE"], ["\uAA00", "\uAA28"], ["\uAA40", "\uAA42"], ["\uAA44", "\uAA4B"], ["\uAA60", "\uAA6F"], ["\uAA71", "\uAA76"], "\uAA7A", ["\uAA7E", "\uAAAF"], "\uAAB1", ["\uAAB5", "\uAAB6"], ["\uAAB9", "\uAABD"], "\uAAC0", "\uAAC2", ["\uAADB", "\uAADC"], ["\uAAE0", "\uAAEA"], "\uAAF2", ["\uAB01", "\uAB06"], ["\uAB09", "\uAB0E"], ["\uAB11", "\uAB16"], ["\uAB20", "\uAB26"], ["\uAB28", "\uAB2E"], ["\uABC0", "\uABE2"], ["\uAC00", "\uD7A3"], ["\uD7B0", "\uD7C6"], ["\uD7CB", "\uD7FB"], ["\uF900", "\uFA6D"], ["\uFA70", "\uFAD9"], "\uFB1D", ["\uFB1F", "\uFB28"], ["\uFB2A", "\uFB36"], ["\uFB38", "\uFB3C"], "\uFB3E", ["\uFB40", "\uFB41"], ["\uFB43", "\uFB44"], ["\uFB46", "\uFBB1"], ["\uFBD3", "\uFD3D"], ["\uFD50", "\uFD8F"], ["\uFD92", "\uFDC7"], ["\uFDF0", "\uFDFB"], ["\uFE70", "\uFE74"], ["\uFE76", "\uFEFC"], ["\uFF66", "\uFF6F"], ["\uFF71", "\uFF9D"], ["\uFFA0", "\uFFBE"], ["\uFFC2", "\uFFC7"], ["\uFFCA", "\uFFCF"], ["\uFFD2", "\uFFD7"], ["\uFFDA", "\uFFDC"]], false, false),
        peg$c150 = /^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/,
        peg$c151 = peg$classExpectation(["\u01C5", "\u01C8", "\u01CB", "\u01F2", ["\u1F88", "\u1F8F"], ["\u1F98", "\u1F9F"], ["\u1FA8", "\u1FAF"], "\u1FBC", "\u1FCC", "\u1FFC"], false, false),
        peg$c152 = /^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A]/,
        peg$c153 = peg$classExpectation([["A", "Z"], ["\xC0", "\xD6"], ["\xD8", "\xDE"], "\u0100", "\u0102", "\u0104", "\u0106", "\u0108", "\u010A", "\u010C", "\u010E", "\u0110", "\u0112", "\u0114", "\u0116", "\u0118", "\u011A", "\u011C", "\u011E", "\u0120", "\u0122", "\u0124", "\u0126", "\u0128", "\u012A", "\u012C", "\u012E", "\u0130", "\u0132", "\u0134", "\u0136", "\u0139", "\u013B", "\u013D", "\u013F", "\u0141", "\u0143", "\u0145", "\u0147", "\u014A", "\u014C", "\u014E", "\u0150", "\u0152", "\u0154", "\u0156", "\u0158", "\u015A", "\u015C", "\u015E", "\u0160", "\u0162", "\u0164", "\u0166", "\u0168", "\u016A", "\u016C", "\u016E", "\u0170", "\u0172", "\u0174", "\u0176", ["\u0178", "\u0179"], "\u017B", "\u017D", ["\u0181", "\u0182"], "\u0184", ["\u0186", "\u0187"], ["\u0189", "\u018B"], ["\u018E", "\u0191"], ["\u0193", "\u0194"], ["\u0196", "\u0198"], ["\u019C", "\u019D"], ["\u019F", "\u01A0"], "\u01A2", "\u01A4", ["\u01A6", "\u01A7"], "\u01A9", "\u01AC", ["\u01AE", "\u01AF"], ["\u01B1", "\u01B3"], "\u01B5", ["\u01B7", "\u01B8"], "\u01BC", "\u01C4", "\u01C7", "\u01CA", "\u01CD", "\u01CF", "\u01D1", "\u01D3", "\u01D5", "\u01D7", "\u01D9", "\u01DB", "\u01DE", "\u01E0", "\u01E2", "\u01E4", "\u01E6", "\u01E8", "\u01EA", "\u01EC", "\u01EE", "\u01F1", "\u01F4", ["\u01F6", "\u01F8"], "\u01FA", "\u01FC", "\u01FE", "\u0200", "\u0202", "\u0204", "\u0206", "\u0208", "\u020A", "\u020C", "\u020E", "\u0210", "\u0212", "\u0214", "\u0216", "\u0218", "\u021A", "\u021C", "\u021E", "\u0220", "\u0222", "\u0224", "\u0226", "\u0228", "\u022A", "\u022C", "\u022E", "\u0230", "\u0232", ["\u023A", "\u023B"], ["\u023D", "\u023E"], "\u0241", ["\u0243", "\u0246"], "\u0248", "\u024A", "\u024C", "\u024E", "\u0370", "\u0372", "\u0376", "\u037F", "\u0386", ["\u0388", "\u038A"], "\u038C", ["\u038E", "\u038F"], ["\u0391", "\u03A1"], ["\u03A3", "\u03AB"], "\u03CF", ["\u03D2", "\u03D4"], "\u03D8", "\u03DA", "\u03DC", "\u03DE", "\u03E0", "\u03E2", "\u03E4", "\u03E6", "\u03E8", "\u03EA", "\u03EC", "\u03EE", "\u03F4", "\u03F7", ["\u03F9", "\u03FA"], ["\u03FD", "\u042F"], "\u0460", "\u0462", "\u0464", "\u0466", "\u0468", "\u046A", "\u046C", "\u046E", "\u0470", "\u0472", "\u0474", "\u0476", "\u0478", "\u047A", "\u047C", "\u047E", "\u0480", "\u048A", "\u048C", "\u048E", "\u0490", "\u0492", "\u0494", "\u0496", "\u0498", "\u049A", "\u049C", "\u049E", "\u04A0", "\u04A2", "\u04A4", "\u04A6", "\u04A8", "\u04AA", "\u04AC", "\u04AE", "\u04B0", "\u04B2", "\u04B4", "\u04B6", "\u04B8", "\u04BA", "\u04BC", "\u04BE", ["\u04C0", "\u04C1"], "\u04C3", "\u04C5", "\u04C7", "\u04C9", "\u04CB", "\u04CD", "\u04D0", "\u04D2", "\u04D4", "\u04D6", "\u04D8", "\u04DA", "\u04DC", "\u04DE", "\u04E0", "\u04E2", "\u04E4", "\u04E6", "\u04E8", "\u04EA", "\u04EC", "\u04EE", "\u04F0", "\u04F2", "\u04F4", "\u04F6", "\u04F8", "\u04FA", "\u04FC", "\u04FE", "\u0500", "\u0502", "\u0504", "\u0506", "\u0508", "\u050A", "\u050C", "\u050E", "\u0510", "\u0512", "\u0514", "\u0516", "\u0518", "\u051A", "\u051C", "\u051E", "\u0520", "\u0522", "\u0524", "\u0526", "\u0528", "\u052A", "\u052C", "\u052E", ["\u0531", "\u0556"], ["\u10A0", "\u10C5"], "\u10C7", "\u10CD", ["\u13A0", "\u13F5"], "\u1E00", "\u1E02", "\u1E04", "\u1E06", "\u1E08", "\u1E0A", "\u1E0C", "\u1E0E", "\u1E10", "\u1E12", "\u1E14", "\u1E16", "\u1E18", "\u1E1A", "\u1E1C", "\u1E1E", "\u1E20", "\u1E22", "\u1E24", "\u1E26", "\u1E28", "\u1E2A", "\u1E2C", "\u1E2E", "\u1E30", "\u1E32", "\u1E34", "\u1E36", "\u1E38", "\u1E3A", "\u1E3C", "\u1E3E", "\u1E40", "\u1E42", "\u1E44", "\u1E46", "\u1E48", "\u1E4A", "\u1E4C", "\u1E4E", "\u1E50", "\u1E52", "\u1E54", "\u1E56", "\u1E58", "\u1E5A", "\u1E5C", "\u1E5E", "\u1E60", "\u1E62", "\u1E64", "\u1E66", "\u1E68", "\u1E6A", "\u1E6C", "\u1E6E", "\u1E70", "\u1E72", "\u1E74", "\u1E76", "\u1E78", "\u1E7A", "\u1E7C", "\u1E7E", "\u1E80", "\u1E82", "\u1E84", "\u1E86", "\u1E88", "\u1E8A", "\u1E8C", "\u1E8E", "\u1E90", "\u1E92", "\u1E94", "\u1E9E", "\u1EA0", "\u1EA2", "\u1EA4", "\u1EA6", "\u1EA8", "\u1EAA", "\u1EAC", "\u1EAE", "\u1EB0", "\u1EB2", "\u1EB4", "\u1EB6", "\u1EB8", "\u1EBA", "\u1EBC", "\u1EBE", "\u1EC0", "\u1EC2", "\u1EC4", "\u1EC6", "\u1EC8", "\u1ECA", "\u1ECC", "\u1ECE", "\u1ED0", "\u1ED2", "\u1ED4", "\u1ED6", "\u1ED8", "\u1EDA", "\u1EDC", "\u1EDE", "\u1EE0", "\u1EE2", "\u1EE4", "\u1EE6", "\u1EE8", "\u1EEA", "\u1EEC", "\u1EEE", "\u1EF0", "\u1EF2", "\u1EF4", "\u1EF6", "\u1EF8", "\u1EFA", "\u1EFC", "\u1EFE", ["\u1F08", "\u1F0F"], ["\u1F18", "\u1F1D"], ["\u1F28", "\u1F2F"], ["\u1F38", "\u1F3F"], ["\u1F48", "\u1F4D"], "\u1F59", "\u1F5B", "\u1F5D", "\u1F5F", ["\u1F68", "\u1F6F"], ["\u1FB8", "\u1FBB"], ["\u1FC8", "\u1FCB"], ["\u1FD8", "\u1FDB"], ["\u1FE8", "\u1FEC"], ["\u1FF8", "\u1FFB"], "\u2102", "\u2107", ["\u210B", "\u210D"], ["\u2110", "\u2112"], "\u2115", ["\u2119", "\u211D"], "\u2124", "\u2126", "\u2128", ["\u212A", "\u212D"], ["\u2130", "\u2133"], ["\u213E", "\u213F"], "\u2145", "\u2183", ["\u2C00", "\u2C2E"], "\u2C60", ["\u2C62", "\u2C64"], "\u2C67", "\u2C69", "\u2C6B", ["\u2C6D", "\u2C70"], "\u2C72", "\u2C75", ["\u2C7E", "\u2C80"], "\u2C82", "\u2C84", "\u2C86", "\u2C88", "\u2C8A", "\u2C8C", "\u2C8E", "\u2C90", "\u2C92", "\u2C94", "\u2C96", "\u2C98", "\u2C9A", "\u2C9C", "\u2C9E", "\u2CA0", "\u2CA2", "\u2CA4", "\u2CA6", "\u2CA8", "\u2CAA", "\u2CAC", "\u2CAE", "\u2CB0", "\u2CB2", "\u2CB4", "\u2CB6", "\u2CB8", "\u2CBA", "\u2CBC", "\u2CBE", "\u2CC0", "\u2CC2", "\u2CC4", "\u2CC6", "\u2CC8", "\u2CCA", "\u2CCC", "\u2CCE", "\u2CD0", "\u2CD2", "\u2CD4", "\u2CD6", "\u2CD8", "\u2CDA", "\u2CDC", "\u2CDE", "\u2CE0", "\u2CE2", "\u2CEB", "\u2CED", "\u2CF2", "\uA640", "\uA642", "\uA644", "\uA646", "\uA648", "\uA64A", "\uA64C", "\uA64E", "\uA650", "\uA652", "\uA654", "\uA656", "\uA658", "\uA65A", "\uA65C", "\uA65E", "\uA660", "\uA662", "\uA664", "\uA666", "\uA668", "\uA66A", "\uA66C", "\uA680", "\uA682", "\uA684", "\uA686", "\uA688", "\uA68A", "\uA68C", "\uA68E", "\uA690", "\uA692", "\uA694", "\uA696", "\uA698", "\uA69A", "\uA722", "\uA724", "\uA726", "\uA728", "\uA72A", "\uA72C", "\uA72E", "\uA732", "\uA734", "\uA736", "\uA738", "\uA73A", "\uA73C", "\uA73E", "\uA740", "\uA742", "\uA744", "\uA746", "\uA748", "\uA74A", "\uA74C", "\uA74E", "\uA750", "\uA752", "\uA754", "\uA756", "\uA758", "\uA75A", "\uA75C", "\uA75E", "\uA760", "\uA762", "\uA764", "\uA766", "\uA768", "\uA76A", "\uA76C", "\uA76E", "\uA779", "\uA77B", ["\uA77D", "\uA77E"], "\uA780", "\uA782", "\uA784", "\uA786", "\uA78B", "\uA78D", "\uA790", "\uA792", "\uA796", "\uA798", "\uA79A", "\uA79C", "\uA79E", "\uA7A0", "\uA7A2", "\uA7A4", "\uA7A6", "\uA7A8", ["\uA7AA", "\uA7AD"], ["\uA7B0", "\uA7B4"], "\uA7B6", ["\uFF21", "\uFF3A"]], false, false),
        peg$c154 = /^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/,
        peg$c155 = peg$classExpectation(["\u0903", "\u093B", ["\u093E", "\u0940"], ["\u0949", "\u094C"], ["\u094E", "\u094F"], ["\u0982", "\u0983"], ["\u09BE", "\u09C0"], ["\u09C7", "\u09C8"], ["\u09CB", "\u09CC"], "\u09D7", "\u0A03", ["\u0A3E", "\u0A40"], "\u0A83", ["\u0ABE", "\u0AC0"], "\u0AC9", ["\u0ACB", "\u0ACC"], ["\u0B02", "\u0B03"], "\u0B3E", "\u0B40", ["\u0B47", "\u0B48"], ["\u0B4B", "\u0B4C"], "\u0B57", ["\u0BBE", "\u0BBF"], ["\u0BC1", "\u0BC2"], ["\u0BC6", "\u0BC8"], ["\u0BCA", "\u0BCC"], "\u0BD7", ["\u0C01", "\u0C03"], ["\u0C41", "\u0C44"], ["\u0C82", "\u0C83"], "\u0CBE", ["\u0CC0", "\u0CC4"], ["\u0CC7", "\u0CC8"], ["\u0CCA", "\u0CCB"], ["\u0CD5", "\u0CD6"], ["\u0D02", "\u0D03"], ["\u0D3E", "\u0D40"], ["\u0D46", "\u0D48"], ["\u0D4A", "\u0D4C"], "\u0D57", ["\u0D82", "\u0D83"], ["\u0DCF", "\u0DD1"], ["\u0DD8", "\u0DDF"], ["\u0DF2", "\u0DF3"], ["\u0F3E", "\u0F3F"], "\u0F7F", ["\u102B", "\u102C"], "\u1031", "\u1038", ["\u103B", "\u103C"], ["\u1056", "\u1057"], ["\u1062", "\u1064"], ["\u1067", "\u106D"], ["\u1083", "\u1084"], ["\u1087", "\u108C"], "\u108F", ["\u109A", "\u109C"], "\u17B6", ["\u17BE", "\u17C5"], ["\u17C7", "\u17C8"], ["\u1923", "\u1926"], ["\u1929", "\u192B"], ["\u1930", "\u1931"], ["\u1933", "\u1938"], ["\u1A19", "\u1A1A"], "\u1A55", "\u1A57", "\u1A61", ["\u1A63", "\u1A64"], ["\u1A6D", "\u1A72"], "\u1B04", "\u1B35", "\u1B3B", ["\u1B3D", "\u1B41"], ["\u1B43", "\u1B44"], "\u1B82", "\u1BA1", ["\u1BA6", "\u1BA7"], "\u1BAA", "\u1BE7", ["\u1BEA", "\u1BEC"], "\u1BEE", ["\u1BF2", "\u1BF3"], ["\u1C24", "\u1C2B"], ["\u1C34", "\u1C35"], "\u1CE1", ["\u1CF2", "\u1CF3"], ["\u302E", "\u302F"], ["\uA823", "\uA824"], "\uA827", ["\uA880", "\uA881"], ["\uA8B4", "\uA8C3"], ["\uA952", "\uA953"], "\uA983", ["\uA9B4", "\uA9B5"], ["\uA9BA", "\uA9BB"], ["\uA9BD", "\uA9C0"], ["\uAA2F", "\uAA30"], ["\uAA33", "\uAA34"], "\uAA4D", "\uAA7B", "\uAA7D", "\uAAEB", ["\uAAEE", "\uAAEF"], "\uAAF5", ["\uABE3", "\uABE4"], ["\uABE6", "\uABE7"], ["\uABE9", "\uABEA"], "\uABEC"], false, false),
        peg$c156 = /^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8-\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69E-\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/,
        peg$c157 = peg$classExpectation([["\u0300", "\u036F"], ["\u0483", "\u0487"], ["\u0591", "\u05BD"], "\u05BF", ["\u05C1", "\u05C2"], ["\u05C4", "\u05C5"], "\u05C7", ["\u0610", "\u061A"], ["\u064B", "\u065F"], "\u0670", ["\u06D6", "\u06DC"], ["\u06DF", "\u06E4"], ["\u06E7", "\u06E8"], ["\u06EA", "\u06ED"], "\u0711", ["\u0730", "\u074A"], ["\u07A6", "\u07B0"], ["\u07EB", "\u07F3"], ["\u0816", "\u0819"], ["\u081B", "\u0823"], ["\u0825", "\u0827"], ["\u0829", "\u082D"], ["\u0859", "\u085B"], ["\u08E3", "\u0902"], "\u093A", "\u093C", ["\u0941", "\u0948"], "\u094D", ["\u0951", "\u0957"], ["\u0962", "\u0963"], "\u0981", "\u09BC", ["\u09C1", "\u09C4"], "\u09CD", ["\u09E2", "\u09E3"], ["\u0A01", "\u0A02"], "\u0A3C", ["\u0A41", "\u0A42"], ["\u0A47", "\u0A48"], ["\u0A4B", "\u0A4D"], "\u0A51", ["\u0A70", "\u0A71"], "\u0A75", ["\u0A81", "\u0A82"], "\u0ABC", ["\u0AC1", "\u0AC5"], ["\u0AC7", "\u0AC8"], "\u0ACD", ["\u0AE2", "\u0AE3"], "\u0B01", "\u0B3C", "\u0B3F", ["\u0B41", "\u0B44"], "\u0B4D", "\u0B56", ["\u0B62", "\u0B63"], "\u0B82", "\u0BC0", "\u0BCD", "\u0C00", ["\u0C3E", "\u0C40"], ["\u0C46", "\u0C48"], ["\u0C4A", "\u0C4D"], ["\u0C55", "\u0C56"], ["\u0C62", "\u0C63"], "\u0C81", "\u0CBC", "\u0CBF", "\u0CC6", ["\u0CCC", "\u0CCD"], ["\u0CE2", "\u0CE3"], "\u0D01", ["\u0D41", "\u0D44"], "\u0D4D", ["\u0D62", "\u0D63"], "\u0DCA", ["\u0DD2", "\u0DD4"], "\u0DD6", "\u0E31", ["\u0E34", "\u0E3A"], ["\u0E47", "\u0E4E"], "\u0EB1", ["\u0EB4", "\u0EB9"], ["\u0EBB", "\u0EBC"], ["\u0EC8", "\u0ECD"], ["\u0F18", "\u0F19"], "\u0F35", "\u0F37", "\u0F39", ["\u0F71", "\u0F7E"], ["\u0F80", "\u0F84"], ["\u0F86", "\u0F87"], ["\u0F8D", "\u0F97"], ["\u0F99", "\u0FBC"], "\u0FC6", ["\u102D", "\u1030"], ["\u1032", "\u1037"], ["\u1039", "\u103A"], ["\u103D", "\u103E"], ["\u1058", "\u1059"], ["\u105E", "\u1060"], ["\u1071", "\u1074"], "\u1082", ["\u1085", "\u1086"], "\u108D", "\u109D", ["\u135D", "\u135F"], ["\u1712", "\u1714"], ["\u1732", "\u1734"], ["\u1752", "\u1753"], ["\u1772", "\u1773"], ["\u17B4", "\u17B5"], ["\u17B7", "\u17BD"], "\u17C6", ["\u17C9", "\u17D3"], "\u17DD", ["\u180B", "\u180D"], "\u18A9", ["\u1920", "\u1922"], ["\u1927", "\u1928"], "\u1932", ["\u1939", "\u193B"], ["\u1A17", "\u1A18"], "\u1A1B", "\u1A56", ["\u1A58", "\u1A5E"], "\u1A60", "\u1A62", ["\u1A65", "\u1A6C"], ["\u1A73", "\u1A7C"], "\u1A7F", ["\u1AB0", "\u1ABD"], ["\u1B00", "\u1B03"], "\u1B34", ["\u1B36", "\u1B3A"], "\u1B3C", "\u1B42", ["\u1B6B", "\u1B73"], ["\u1B80", "\u1B81"], ["\u1BA2", "\u1BA5"], ["\u1BA8", "\u1BA9"], ["\u1BAB", "\u1BAD"], "\u1BE6", ["\u1BE8", "\u1BE9"], "\u1BED", ["\u1BEF", "\u1BF1"], ["\u1C2C", "\u1C33"], ["\u1C36", "\u1C37"], ["\u1CD0", "\u1CD2"], ["\u1CD4", "\u1CE0"], ["\u1CE2", "\u1CE8"], "\u1CED", "\u1CF4", ["\u1CF8", "\u1CF9"], ["\u1DC0", "\u1DF5"], ["\u1DFC", "\u1DFF"], ["\u20D0", "\u20DC"], "\u20E1", ["\u20E5", "\u20F0"], ["\u2CEF", "\u2CF1"], "\u2D7F", ["\u2DE0", "\u2DFF"], ["\u302A", "\u302D"], ["\u3099", "\u309A"], "\uA66F", ["\uA674", "\uA67D"], ["\uA69E", "\uA69F"], ["\uA6F0", "\uA6F1"], "\uA802", "\uA806", "\uA80B", ["\uA825", "\uA826"], "\uA8C4", ["\uA8E0", "\uA8F1"], ["\uA926", "\uA92D"], ["\uA947", "\uA951"], ["\uA980", "\uA982"], "\uA9B3", ["\uA9B6", "\uA9B9"], "\uA9BC", "\uA9E5", ["\uAA29", "\uAA2E"], ["\uAA31", "\uAA32"], ["\uAA35", "\uAA36"], "\uAA43", "\uAA4C", "\uAA7C", "\uAAB0", ["\uAAB2", "\uAAB4"], ["\uAAB7", "\uAAB8"], ["\uAABE", "\uAABF"], "\uAAC1", ["\uAAEC", "\uAAED"], "\uAAF6", "\uABE5", "\uABE8", "\uABED", "\uFB1E", ["\uFE00", "\uFE0F"], ["\uFE20", "\uFE2F"]], false, false),
        peg$c158 = /^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/,
        peg$c159 = peg$classExpectation([["0", "9"], ["\u0660", "\u0669"], ["\u06F0", "\u06F9"], ["\u07C0", "\u07C9"], ["\u0966", "\u096F"], ["\u09E6", "\u09EF"], ["\u0A66", "\u0A6F"], ["\u0AE6", "\u0AEF"], ["\u0B66", "\u0B6F"], ["\u0BE6", "\u0BEF"], ["\u0C66", "\u0C6F"], ["\u0CE6", "\u0CEF"], ["\u0D66", "\u0D6F"], ["\u0DE6", "\u0DEF"], ["\u0E50", "\u0E59"], ["\u0ED0", "\u0ED9"], ["\u0F20", "\u0F29"], ["\u1040", "\u1049"], ["\u1090", "\u1099"], ["\u17E0", "\u17E9"], ["\u1810", "\u1819"], ["\u1946", "\u194F"], ["\u19D0", "\u19D9"], ["\u1A80", "\u1A89"], ["\u1A90", "\u1A99"], ["\u1B50", "\u1B59"], ["\u1BB0", "\u1BB9"], ["\u1C40", "\u1C49"], ["\u1C50", "\u1C59"], ["\uA620", "\uA629"], ["\uA8D0", "\uA8D9"], ["\uA900", "\uA909"], ["\uA9D0", "\uA9D9"], ["\uA9F0", "\uA9F9"], ["\uAA50", "\uAA59"], ["\uABF0", "\uABF9"], ["\uFF10", "\uFF19"]], false, false),
        peg$c160 = /^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/,
        peg$c161 = peg$classExpectation([["\u16EE", "\u16F0"], ["\u2160", "\u2182"], ["\u2185", "\u2188"], "\u3007", ["\u3021", "\u3029"], ["\u3038", "\u303A"], ["\uA6E6", "\uA6EF"]], false, false),
        peg$c162 = /^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/,
        peg$c163 = peg$classExpectation(["_", ["\u203F", "\u2040"], "\u2054", ["\uFE33", "\uFE34"], ["\uFE4D", "\uFE4F"], "\uFF3F"], false, false),
        peg$c164 = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,
        peg$c165 = peg$classExpectation([" ", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u202F", "\u205F", "\u3000"], false, false),
        peg$c166 = "break",
        peg$c167 = peg$literalExpectation("break", false),
        peg$c168 = "case",
        peg$c169 = peg$literalExpectation("case", false),
        peg$c170 = "catch",
        peg$c171 = peg$literalExpectation("catch", false),
        peg$c172 = "class",
        peg$c173 = peg$literalExpectation("class", false),
        peg$c174 = "const",
        peg$c175 = peg$literalExpectation("const", false),
        peg$c176 = "continue",
        peg$c177 = peg$literalExpectation("continue", false),
        peg$c178 = "debugger",
        peg$c179 = peg$literalExpectation("debugger", false),
        peg$c180 = "default",
        peg$c181 = peg$literalExpectation("default", false),
        peg$c182 = "delete",
        peg$c183 = peg$literalExpectation("delete", false),
        peg$c184 = "do",
        peg$c185 = peg$literalExpectation("do", false),
        peg$c186 = "else",
        peg$c187 = peg$literalExpectation("else", false),
        peg$c188 = "enum",
        peg$c189 = peg$literalExpectation("enum", false),
        peg$c190 = "export",
        peg$c191 = peg$literalExpectation("export", false),
        peg$c192 = "extends",
        peg$c193 = peg$literalExpectation("extends", false),
        peg$c194 = "false",
        peg$c195 = peg$literalExpectation("false", false),
        peg$c196 = "finally",
        peg$c197 = peg$literalExpectation("finally", false),
        peg$c198 = "for",
        peg$c199 = peg$literalExpectation("for", false),
        peg$c200 = "function",
        peg$c201 = peg$literalExpectation("function", false),
        peg$c202 = "if",
        peg$c203 = peg$literalExpectation("if", false),
        peg$c204 = "import",
        peg$c205 = peg$literalExpectation("import", false),
        peg$c206 = "instanceof",
        peg$c207 = peg$literalExpectation("instanceof", false),
        peg$c208 = "in",
        peg$c209 = peg$literalExpectation("in", false),
        peg$c210 = "new",
        peg$c211 = peg$literalExpectation("new", false),
        peg$c212 = "null",
        peg$c213 = peg$literalExpectation("null", false),
        peg$c214 = "return",
        peg$c215 = peg$literalExpectation("return", false),
        peg$c216 = "super",
        peg$c217 = peg$literalExpectation("super", false),
        peg$c218 = "switch",
        peg$c219 = peg$literalExpectation("switch", false),
        peg$c220 = "this",
        peg$c221 = peg$literalExpectation("this", false),
        peg$c222 = "throw",
        peg$c223 = peg$literalExpectation("throw", false),
        peg$c224 = "true",
        peg$c225 = peg$literalExpectation("true", false),
        peg$c226 = "try",
        peg$c227 = peg$literalExpectation("try", false),
        peg$c228 = "typeof",
        peg$c229 = peg$literalExpectation("typeof", false),
        peg$c230 = "var",
        peg$c231 = peg$literalExpectation("var", false),
        peg$c232 = "void",
        peg$c233 = peg$literalExpectation("void", false),
        peg$c234 = "while",
        peg$c235 = peg$literalExpectation("while", false),
        peg$c236 = "with",
        peg$c237 = peg$literalExpectation("with", false),
        peg$c238 = ";",
        peg$c239 = peg$literalExpectation(";", false),
        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{
      line: 1,
      column: 1
    }],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function error(message, location) {
      location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos);
      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return {
        type: "literal",
        text: text,
        ignoreCase: ignoreCase
      };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return {
        type: "class",
        parts: parts,
        inverted: inverted,
        ignoreCase: ignoreCase
      };
    }

    function peg$anyExpectation() {
      return {
        type: "any"
      };
    }

    function peg$endExpectation() {
      return {
        type: "end"
      };
    }

    function peg$otherExpectation(description) {
      return {
        type: "other",
        description: description
      };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p;

      if (details) {
        return details;
      } else {
        p = pos - 1;

        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails = peg$computePosDetails(endPos);
      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }

    function peg$parseGrammar() {
      var s0, s1, s2, s3, s4, s5, s6;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseInitializer();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();

          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseRule();

          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();

            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parseRule();

              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();

                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          } else {
            s3 = peg$FAILED;
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInitializer() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$parseCodeBlock();

      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOS();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRule() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;
      s1 = peg$parseIdentifierName();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseStringLiteral();

          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }

          if (s3 === peg$FAILED) {
            s3 = null;
          }

          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c2;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c3);
              }
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();

              if (s5 !== peg$FAILED) {
                s6 = peg$parseChoiceExpression();

                if (s6 !== peg$FAILED) {
                  s7 = peg$parseEOS();

                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c4(s1, s3, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseChoiceExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;
      s1 = peg$parseActionExpression();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();

        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c5;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c6);
            }
          }

          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();

            if (s6 !== peg$FAILED) {
              s7 = peg$parseActionExpression();

              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c6);
              }
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();

              if (s6 !== peg$FAILED) {
                s7 = peg$parseActionExpression();

                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseActionExpression() {
      var s0, s1, s2, s3, s4;
      s0 = peg$currPos;
      s1 = peg$parseSequenceExpression();

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();

        if (s3 !== peg$FAILED) {
          s4 = peg$parseCodeBlock();

          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSequenceExpression() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;
      s1 = peg$parseLabeledExpression();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();

        if (s4 !== peg$FAILED) {
          s5 = peg$parseLabeledExpression();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();

          if (s4 !== peg$FAILED) {
            s5 = peg$parseLabeledExpression();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLabeledExpression() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c10;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c11);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();

            if (s4 !== peg$FAILED) {
              s5 = peg$parsePrefixedExpression();

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c12(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parsePrefixedExpression();
      }

      return s0;
    }

    function peg$parsePrefixedExpression() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parsePrefixedOperator();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseSuffixedExpression();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parseSuffixedExpression();
      }

      return s0;
    }

    function peg$parsePrefixedOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 36) {
        s0 = peg$c14;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c15);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 38) {
          s0 = peg$c16;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c17);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 33) {
            s0 = peg$c18;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c19);
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSuffixedExpression() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parsePrimaryExpression();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseSuffixedOperator();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$parsePrimaryExpression();
      }

      return s0;
    }

    function peg$parseSuffixedOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 63) {
        s0 = peg$c21;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c23;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c24);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c25;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c26);
            }
          }
        }
      }

      return s0;
    }

    function peg$parsePrimaryExpression() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$parseLiteralMatcher();

      if (s0 === peg$FAILED) {
        s0 = peg$parseCharacterClassMatcher();

        if (s0 === peg$FAILED) {
          s0 = peg$parseAnyMatcher();

          if (s0 === peg$FAILED) {
            s0 = peg$parseRuleReferenceExpression();

            if (s0 === peg$FAILED) {
              s0 = peg$parseSemanticPredicateExpression();

              if (s0 === peg$FAILED) {
                s0 = peg$currPos;

                if (input.charCodeAt(peg$currPos) === 40) {
                  s1 = peg$c27;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c28);
                  }
                }

                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();

                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseChoiceExpression();

                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse__();

                      if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s5 = peg$c29;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;

                          if (peg$silentFails === 0) {
                            peg$fail(peg$c30);
                          }
                        }

                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c31(s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseRuleReferenceExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;
      s1 = peg$parseIdentifierName();

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        s4 = peg$parse__();

        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseStringLiteral();

          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();

            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }

          if (s5 === peg$FAILED) {
            s5 = null;
          }

          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s6 = peg$c2;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c3);
              }
            }

            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c32(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSemanticPredicateExpression() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parseSemanticPredicateOperator();

      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();

        if (s2 !== peg$FAILED) {
          s3 = peg$parseCodeBlock();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c33(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSemanticPredicateOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 38) {
        s0 = peg$c16;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c17);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s0 = peg$c18;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c19);
          }
        }
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c34);
        }
      }

      return s0;
    }

    function peg$parseWhiteSpace() {
      var s0, s1;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c36;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c37);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11) {
          s0 = peg$c38;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c39);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s0 = peg$c40;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c41);
            }
          }

          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s0 = peg$c42;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c43);
              }
            }

            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 160) {
                s0 = peg$c44;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c45);
                }
              }

              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 65279) {
                  s0 = peg$c46;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c47);
                  }
                }

                if (s0 === peg$FAILED) {
                  s0 = peg$parseZs();
                }
              }
            }
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c35);
        }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (peg$c48.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c49);
        }
      }

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c51;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c52);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c53) {
          s0 = peg$c53;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c54);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c55;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c56);
            }
          }

          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c57;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c58);
              }
            }

            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c59;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c60);
                }
              }
            }
          }
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c50);
        }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1;
      peg$silentFails++;
      s0 = peg$parseMultiLineComment();

      if (s0 === peg$FAILED) {
        s0 = peg$parseSingleLineComment();
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c61);
        }
      }

      return s0;
    }

    function peg$parseMultiLineComment() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c63);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;

        if (input.substr(peg$currPos, 2) === peg$c64) {
          s5 = peg$c64;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c65);
          }
        }

        peg$silentFails--;

        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;

          if (input.substr(peg$currPos, 2) === peg$c64) {
            s5 = peg$c64;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }

          peg$silentFails--;

          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s3 = peg$c64;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }

          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseMultiLineCommentNoLineTerminator() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c63);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;

        if (input.substr(peg$currPos, 2) === peg$c64) {
          s5 = peg$c64;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c65);
          }
        }

        if (s5 === peg$FAILED) {
          s5 = peg$parseLineTerminator();
        }

        peg$silentFails--;

        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;

          if (input.substr(peg$currPos, 2) === peg$c64) {
            s5 = peg$c64;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }

          if (s5 === peg$FAILED) {
            s5 = peg$parseLineTerminator();
          }

          peg$silentFails--;

          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s3 = peg$c64;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c65);
            }
          }

          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSingleLineComment() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c67);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;

        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseLineTerminator();
          peg$silentFails--;

          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseReservedWord();
      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifierName();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c68(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIdentifierName() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseIdentifierStart();

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseIdentifierPart();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseIdentifierPart();
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c69);
        }
      }

      return s0;
    }

    function peg$parseIdentifierStart() {
      var s0, s1, s2;
      s0 = peg$parseUnicodeLetter();

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s0 = peg$c14;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c15);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s0 = peg$c71;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c72);
            }
          }

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;

            if (input.charCodeAt(peg$currPos) === 92) {
              s1 = peg$c73;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c74);
              }
            }

            if (s1 !== peg$FAILED) {
              s2 = peg$parseUnicodeEscapeSequence();

              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c75(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseIdentifierPart() {
      var s0;
      s0 = peg$parseIdentifierStart();

      if (s0 === peg$FAILED) {
        s0 = peg$parseUnicodeCombiningMark();

        if (s0 === peg$FAILED) {
          s0 = peg$parseNd();

          if (s0 === peg$FAILED) {
            s0 = peg$parsePc();

            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8204) {
                s0 = peg$c76;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c77);
                }
              }

              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 8205) {
                  s0 = peg$c78;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c79);
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnicodeLetter() {
      var s0;
      s0 = peg$parseLu();

      if (s0 === peg$FAILED) {
        s0 = peg$parseLl();

        if (s0 === peg$FAILED) {
          s0 = peg$parseLt();

          if (s0 === peg$FAILED) {
            s0 = peg$parseLm();

            if (s0 === peg$FAILED) {
              s0 = peg$parseLo();

              if (s0 === peg$FAILED) {
                s0 = peg$parseNl();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseUnicodeCombiningMark() {
      var s0;
      s0 = peg$parseMn();

      if (s0 === peg$FAILED) {
        s0 = peg$parseMc();
      }

      return s0;
    }

    function peg$parseReservedWord() {
      var s0;
      s0 = peg$parseKeyword();

      if (s0 === peg$FAILED) {
        s0 = peg$parseFutureReservedWord();

        if (s0 === peg$FAILED) {
          s0 = peg$parseNullToken();

          if (s0 === peg$FAILED) {
            s0 = peg$parseBooleanLiteral();
          }
        }
      }

      return s0;
    }

    function peg$parseKeyword() {
      var s0;
      s0 = peg$parseBreakToken();

      if (s0 === peg$FAILED) {
        s0 = peg$parseCaseToken();

        if (s0 === peg$FAILED) {
          s0 = peg$parseCatchToken();

          if (s0 === peg$FAILED) {
            s0 = peg$parseContinueToken();

            if (s0 === peg$FAILED) {
              s0 = peg$parseDebuggerToken();

              if (s0 === peg$FAILED) {
                s0 = peg$parseDefaultToken();

                if (s0 === peg$FAILED) {
                  s0 = peg$parseDeleteToken();

                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDoToken();

                    if (s0 === peg$FAILED) {
                      s0 = peg$parseElseToken();

                      if (s0 === peg$FAILED) {
                        s0 = peg$parseFinallyToken();

                        if (s0 === peg$FAILED) {
                          s0 = peg$parseForToken();

                          if (s0 === peg$FAILED) {
                            s0 = peg$parseFunctionToken();

                            if (s0 === peg$FAILED) {
                              s0 = peg$parseIfToken();

                              if (s0 === peg$FAILED) {
                                s0 = peg$parseInstanceofToken();

                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseInToken();

                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseNewToken();

                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseReturnToken();

                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseSwitchToken();

                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseThisToken();

                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseThrowToken();

                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseTryToken();

                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseTypeofToken();

                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseVarToken();

                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseVoidToken();

                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseWhileToken();

                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseWithToken();
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseFutureReservedWord() {
      var s0;
      s0 = peg$parseClassToken();

      if (s0 === peg$FAILED) {
        s0 = peg$parseConstToken();

        if (s0 === peg$FAILED) {
          s0 = peg$parseEnumToken();

          if (s0 === peg$FAILED) {
            s0 = peg$parseExportToken();

            if (s0 === peg$FAILED) {
              s0 = peg$parseExtendsToken();

              if (s0 === peg$FAILED) {
                s0 = peg$parseImportToken();

                if (s0 === peg$FAILED) {
                  s0 = peg$parseSuperToken();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseBooleanLiteral() {
      var s0;
      s0 = peg$parseTrueToken();

      if (s0 === peg$FAILED) {
        s0 = peg$parseFalseToken();
      }

      return s0;
    }

    function peg$parseLiteralMatcher() {
      var s0, s1, s2;
      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseStringLiteral();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 105) {
          s2 = peg$c81;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c82);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c83(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c80);
        }
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c85;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c86);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDoubleStringCharacter();

        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDoubleStringCharacter();
        }

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c85;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c86);
            }
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c87(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c88;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c89);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSingleStringCharacter();

          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSingleStringCharacter();
          }

          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c88;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c89);
              }
            }

            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c87(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c84);
        }
      }

      return s0;
    }

    function peg$parseDoubleStringCharacter() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c85;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c86);
        }
      }

      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c73;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseSingleStringCharacter() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c88;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c89);
        }
      }

      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c73;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseCharacterClassMatcher() {
      var s0, s1, s2, s3, s4, s5;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c92;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c93);
        }
      }

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 94) {
          s2 = peg$c94;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c95);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = null;
        }

        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseClassCharacterRange();

          if (s4 === peg$FAILED) {
            s4 = peg$parseClassCharacter();
          }

          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseClassCharacterRange();

            if (s4 === peg$FAILED) {
              s4 = peg$parseClassCharacter();
            }
          }

          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c96;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c97);
              }
            }

            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 105) {
                s5 = peg$c81;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c82);
                }
              }

              if (s5 === peg$FAILED) {
                s5 = null;
              }

              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c98(s2, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c91);
        }
      }

      return s0;
    }

    function peg$parseClassCharacterRange() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parseClassCharacter();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c99;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c100);
          }
        }

        if (s2 !== peg$FAILED) {
          s3 = peg$parseClassCharacter();

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c101(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassCharacter() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;

      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c96;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c97);
        }
      }

      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s2 = peg$c73;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c74);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseLineContinuation() {
      var s0, s1, s2;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c73;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c74);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseLineTerminatorSequence();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c102();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1, s2, s3;
      s0 = peg$parseCharacterEscapeSequence();

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c103;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c104);
          }
        }

        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseDecimalDigit();
          peg$silentFails--;

          if (s3 === peg$FAILED) {
            s2 = undefined;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }

          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c105();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$parseHexEscapeSequence();

          if (s0 === peg$FAILED) {
            s0 = peg$parseUnicodeEscapeSequence();
          }
        }
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0;
      s0 = peg$parseSingleEscapeCharacter();

      if (s0 === peg$FAILED) {
        s0 = peg$parseNonEscapeCharacter();
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0, s1;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c88;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c89);
        }
      }

      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c85;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c86);
          }
        }

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s0 = peg$c73;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c74);
            }
          }

          if (s0 === peg$FAILED) {
            s0 = peg$currPos;

            if (input.charCodeAt(peg$currPos) === 98) {
              s1 = peg$c106;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c107);
              }
            }

            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c108();
            }

            s0 = s1;

            if (s0 === peg$FAILED) {
              s0 = peg$currPos;

              if (input.charCodeAt(peg$currPos) === 102) {
                s1 = peg$c109;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c110);
                }
              }

              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c111();
              }

              s0 = s1;

              if (s0 === peg$FAILED) {
                s0 = peg$currPos;

                if (input.charCodeAt(peg$currPos) === 110) {
                  s1 = peg$c112;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c113);
                  }
                }

                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c114();
                }

                s0 = s1;

                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;

                  if (input.charCodeAt(peg$currPos) === 114) {
                    s1 = peg$c115;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c116);
                    }
                  }

                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c117();
                  }

                  s0 = s1;

                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;

                    if (input.charCodeAt(peg$currPos) === 116) {
                      s1 = peg$c118;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c119);
                      }
                    }

                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c120();
                    }

                    s0 = s1;

                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;

                      if (input.charCodeAt(peg$currPos) === 118) {
                        s1 = peg$c121;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;

                        if (peg$silentFails === 0) {
                          peg$fail(peg$c122);
                        }
                      }

                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c123();
                      }

                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNonEscapeCharacter() {
      var s0, s1, s2;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEscapeCharacter();

      if (s2 === peg$FAILED) {
        s2 = peg$parseLineTerminator();
      }

      peg$silentFails--;

      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEscapeCharacter() {
      var s0;
      s0 = peg$parseSingleEscapeCharacter();

      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();

        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 120) {
            s0 = peg$c124;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c125);
            }
          }

          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 117) {
              s0 = peg$c126;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c127);
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseHexEscapeSequence() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 120) {
        s1 = peg$c124;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c125);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();

        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c128(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUnicodeEscapeSequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 117) {
        s1 = peg$c126;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c127);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();

        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();

          if (s5 !== peg$FAILED) {
            s6 = peg$parseHexDigit();

            if (s6 !== peg$FAILED) {
              s7 = peg$parseHexDigit();

              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c128(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDecimalDigit() {
      var s0;

      if (peg$c129.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c130);
        }
      }

      return s0;
    }

    function peg$parseHexDigit() {
      var s0;

      if (peg$c131.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c132);
        }
      }

      return s0;
    }

    function peg$parseAnyMatcher() {
      var s0, s1;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c133;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c134);
        }
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135();
      }

      s0 = s1;
      return s0;
    }

    function peg$parseCodeBlock() {
      var s0, s1, s2, s3;
      peg$silentFails++;
      s0 = peg$currPos;

      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c137;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c138);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parseCode();

        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c139;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c140);
            }
          }

          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c141(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$silentFails--;

      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c136);
        }
      }

      return s0;
    }

    function peg$parseCode() {
      var s0, s1, s2, s3, s4, s5;
      s0 = peg$currPos;
      s1 = [];
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;

      if (peg$c142.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c143);
        }
      }

      peg$silentFails--;

      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }

      if (s4 !== peg$FAILED) {
        s5 = peg$parseSourceCharacter();

        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }

      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;

          if (peg$c142.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c143);
            }
          }

          peg$silentFails--;

          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }

          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();

            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }

      if (s2 === peg$FAILED) {
        s2 = peg$currPos;

        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c137;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c138);
          }
        }

        if (s3 !== peg$FAILED) {
          s4 = peg$parseCode();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c139;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c140);
              }
            }

            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }

      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;

        if (peg$c142.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c143);
          }
        }

        peg$silentFails--;

        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }

        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();

          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;

            if (peg$c142.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c143);
              }
            }

            peg$silentFails--;

            if (s5 === peg$FAILED) {
              s4 = undefined;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }

            if (s4 !== peg$FAILED) {
              s5 = peg$parseSourceCharacter();

              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }

        if (s2 === peg$FAILED) {
          s2 = peg$currPos;

          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c137;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c138);
            }
          }

          if (s3 !== peg$FAILED) {
            s4 = peg$parseCode();

            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c139;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;

                if (peg$silentFails === 0) {
                  peg$fail(peg$c140);
                }
              }

              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      }

      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseLl() {
      var s0;

      if (peg$c144.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c145);
        }
      }

      return s0;
    }

    function peg$parseLm() {
      var s0;

      if (peg$c146.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c147);
        }
      }

      return s0;
    }

    function peg$parseLo() {
      var s0;

      if (peg$c148.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c149);
        }
      }

      return s0;
    }

    function peg$parseLt() {
      var s0;

      if (peg$c150.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c151);
        }
      }

      return s0;
    }

    function peg$parseLu() {
      var s0;

      if (peg$c152.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c153);
        }
      }

      return s0;
    }

    function peg$parseMc() {
      var s0;

      if (peg$c154.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c155);
        }
      }

      return s0;
    }

    function peg$parseMn() {
      var s0;

      if (peg$c156.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c157);
        }
      }

      return s0;
    }

    function peg$parseNd() {
      var s0;

      if (peg$c158.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c159);
        }
      }

      return s0;
    }

    function peg$parseNl() {
      var s0;

      if (peg$c160.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c161);
        }
      }

      return s0;
    }

    function peg$parsePc() {
      var s0;

      if (peg$c162.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c163);
        }
      }

      return s0;
    }

    function peg$parseZs() {
      var s0;

      if (peg$c164.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c165);
        }
      }

      return s0;
    }

    function peg$parseBreakToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c166) {
        s1 = peg$c166;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c167);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCaseToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c168) {
        s1 = peg$c168;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c169);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCatchToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c170) {
        s1 = peg$c170;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c171);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseClassToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c172) {
        s1 = peg$c172;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c173);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConstToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c174) {
        s1 = peg$c174;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c175);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseContinueToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 8) === peg$c176) {
        s1 = peg$c176;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c177);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDebuggerToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 8) === peg$c178) {
        s1 = peg$c178;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c179);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDefaultToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 7) === peg$c180) {
        s1 = peg$c180;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c181);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDeleteToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c182) {
        s1 = peg$c182;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c183);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDoToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c184) {
        s1 = peg$c184;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c185);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseElseToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c186) {
        s1 = peg$c186;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c187);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEnumToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c188) {
        s1 = peg$c188;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c189);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExportToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c190) {
        s1 = peg$c190;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c191);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExtendsToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 7) === peg$c192) {
        s1 = peg$c192;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c193);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFalseToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c194) {
        s1 = peg$c194;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c195);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFinallyToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 7) === peg$c196) {
        s1 = peg$c196;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c197);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseForToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c198) {
        s1 = peg$c198;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c199);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFunctionToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 8) === peg$c200) {
        s1 = peg$c200;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c201);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIfToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c202) {
        s1 = peg$c202;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c203);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseImportToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c204) {
        s1 = peg$c204;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c205);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInstanceofToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 10) === peg$c206) {
        s1 = peg$c206;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c207);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseInToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 2) === peg$c208) {
        s1 = peg$c208;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c209);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNewToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c210) {
        s1 = peg$c210;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c211);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNullToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c212) {
        s1 = peg$c212;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c213);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseReturnToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c214) {
        s1 = peg$c214;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c215);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSuperToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c216) {
        s1 = peg$c216;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c217);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSwitchToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c218) {
        s1 = peg$c218;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c219);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseThisToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c220) {
        s1 = peg$c220;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c221);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseThrowToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c222) {
        s1 = peg$c222;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c223);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTrueToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c224) {
        s1 = peg$c224;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c225);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTryToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c226) {
        s1 = peg$c226;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c227);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTypeofToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 6) === peg$c228) {
        s1 = peg$c228;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c229);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseVarToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 3) === peg$c230) {
        s1 = peg$c230;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c231);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseVoidToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c232) {
        s1 = peg$c232;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c233);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWhileToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 5) === peg$c234) {
        s1 = peg$c234;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c235);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseWithToken() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;

      if (input.substr(peg$currPos, 4) === peg$c236) {
        s1 = peg$c236;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c237);
        }
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierPart();
        peg$silentFails--;

        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;
      s0 = [];
      s1 = peg$parseWhiteSpace();

      if (s1 === peg$FAILED) {
        s1 = peg$parseLineTerminatorSequence();

        if (s1 === peg$FAILED) {
          s1 = peg$parseComment();
        }
      }

      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();

        if (s1 === peg$FAILED) {
          s1 = peg$parseLineTerminatorSequence();

          if (s1 === peg$FAILED) {
            s1 = peg$parseComment();
          }
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;
      s0 = [];
      s1 = peg$parseWhiteSpace();

      if (s1 === peg$FAILED) {
        s1 = peg$parseMultiLineCommentNoLineTerminator();
      }

      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseWhiteSpace();

        if (s1 === peg$FAILED) {
          s1 = peg$parseMultiLineCommentNoLineTerminator();
        }
      }

      return s0;
    }

    function peg$parseEOS() {
      var s0, s1, s2, s3;
      s0 = peg$currPos;
      s1 = peg$parse__();

      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c238;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c239);
          }
        }

        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();

        if (s1 !== peg$FAILED) {
          s2 = peg$parseSingleLineComment();

          if (s2 === peg$FAILED) {
            s2 = null;
          }

          if (s2 !== peg$FAILED) {
            s3 = peg$parseLineTerminatorSequence();

            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }

        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse__();

          if (s1 !== peg$FAILED) {
            s2 = peg$parseEOF();

            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;
      s0 = peg$currPos;
      peg$silentFails++;

      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c34);
        }
      }

      peg$silentFails--;

      if (s1 === peg$FAILED) {
        s0 = undefined;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    var OPS_TO_PREFIXED_TYPES = {
      "$": "text",
      "&": "simple_and",
      "!": "simple_not"
    };
    var OPS_TO_SUFFIXED_TYPES = {
      "?": "optional",
      "*": "zero_or_more",
      "+": "one_or_more"
    };
    var OPS_TO_SEMANTIC_PREDICATE_TYPES = {
      "&": "semantic_and",
      "!": "semantic_not"
    };

    function filterEmptyStrings(array) {
      var result = [],
          i;

      for (i = 0; i < array.length; i++) {
        if (array[i] !== "") {
          result.push(array[i]);
        }
      }

      return result;
    }

    function extractOptional(optional, index) {
      return optional ? optional[index] : null;
    }

    function extractList(list, index) {
      var result = new Array(list.length),
          i;

      for (i = 0; i < list.length; i++) {
        result[i] = list[i][index];
      }

      return result;
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index));
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
  }

  module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
},831,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _$$_REQUIRE(_dependencyMap[0]),
      objects = _$$_REQUIRE(_dependencyMap[1]);

  var compiler = {
    visitor: _$$_REQUIRE(_dependencyMap[2]),
    passes: {
      check: {
        reportUndefinedRules: _$$_REQUIRE(_dependencyMap[3]),
        reportDuplicateRules: _$$_REQUIRE(_dependencyMap[4]),
        reportDuplicateLabels: _$$_REQUIRE(_dependencyMap[5]),
        reportInfiniteRecursion: _$$_REQUIRE(_dependencyMap[6]),
        reportInfiniteRepetition: _$$_REQUIRE(_dependencyMap[7])
      },
      transform: {
        removeProxyRules: _$$_REQUIRE(_dependencyMap[8])
      },
      generate: {
        generateBytecode: _$$_REQUIRE(_dependencyMap[9]),
        generateJS: _$$_REQUIRE(_dependencyMap[10])
      }
    },
    compile: function compile(ast, passes, options) {
      options = options !== undefined ? options : {};
      var stage;
      options = objects.clone(options);
      objects.defaults(options, {
        allowedStartRules: [ast.rules[0].name],
        cache: false,
        dependencies: {},
        exportVar: null,
        format: "bare",
        optimize: "speed",
        output: "parser",
        trace: false
      });

      for (stage in passes) {
        if (passes.hasOwnProperty(stage)) {
          arrays.each(passes[stage], function (p) {
            p(ast, options);
          });
        }
      }

      switch (options.output) {
        case "parser":
          return eval(ast.code);

        case "source":
          return ast.code;
      }
    }
  };
  module.exports = compiler;
},832,[827,828,833,834,836,837,838,839,840,841,844]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var objects = _$$_REQUIRE(_dependencyMap[0]),
      arrays = _$$_REQUIRE(_dependencyMap[1]);

  var visitor = {
    build: function build(functions) {
      function visit(node) {
        return functions[node.type].apply(null, arguments);
      }

      function visitNop() {}

      function visitExpression(node) {
        var extraArgs = Array.prototype.slice.call(arguments, 1);
        visit.apply(null, [node.expression].concat(extraArgs));
      }

      function visitChildren(property) {
        return function (node) {
          var extraArgs = Array.prototype.slice.call(arguments, 1);
          arrays.each(node[property], function (child) {
            visit.apply(null, [child].concat(extraArgs));
          });
        };
      }

      var DEFAULT_FUNCTIONS = {
        grammar: function grammar(node) {
          var extraArgs = Array.prototype.slice.call(arguments, 1);

          if (node.initializer) {
            visit.apply(null, [node.initializer].concat(extraArgs));
          }

          arrays.each(node.rules, function (rule) {
            visit.apply(null, [rule].concat(extraArgs));
          });
        },
        initializer: visitNop,
        rule: visitExpression,
        named: visitExpression,
        choice: visitChildren("alternatives"),
        action: visitExpression,
        sequence: visitChildren("elements"),
        labeled: visitExpression,
        text: visitExpression,
        simple_and: visitExpression,
        simple_not: visitExpression,
        optional: visitExpression,
        zero_or_more: visitExpression,
        one_or_more: visitExpression,
        group: visitExpression,
        semantic_and: visitNop,
        semantic_not: visitNop,
        rule_ref: visitNop,
        literal: visitNop,
        "class": visitNop,
        any: visitNop
      };
      objects.defaults(functions, DEFAULT_FUNCTIONS);
      return visit;
    }
  };
  module.exports = visitor;
},833,[828,827]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var GrammarError = _$$_REQUIRE(_dependencyMap[0]),
      asts = _$$_REQUIRE(_dependencyMap[1]),
      visitor = _$$_REQUIRE(_dependencyMap[2]);

  function reportUndefinedRules(ast) {
    var check = visitor.build({
      rule_ref: function rule_ref(node) {
        if (!asts.findRule(ast, node.name)) {
          throw new GrammarError("Rule \"" + node.name + "\" is not defined.", node.location);
        }
      }
    });
    check(ast);
  }

  module.exports = reportUndefinedRules;
},834,[829,835,833]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _$$_REQUIRE(_dependencyMap[0]),
      visitor = _$$_REQUIRE(_dependencyMap[1]);

  var asts = {
    findRule: function findRule(ast, name) {
      return arrays.find(ast.rules, function (r) {
        return r.name === name;
      });
    },
    indexOfRule: function indexOfRule(ast, name) {
      return arrays.indexOf(ast.rules, function (r) {
        return r.name === name;
      });
    },
    alwaysConsumesOnSuccess: function alwaysConsumesOnSuccess(ast, node) {
      function consumesTrue() {
        return true;
      }

      function consumesFalse() {
        return false;
      }

      function consumesExpression(node) {
        return consumes(node.expression);
      }

      var consumes = visitor.build({
        rule: consumesExpression,
        named: consumesExpression,
        choice: function choice(node) {
          return arrays.every(node.alternatives, consumes);
        },
        action: consumesExpression,
        sequence: function sequence(node) {
          return arrays.some(node.elements, consumes);
        },
        labeled: consumesExpression,
        text: consumesExpression,
        simple_and: consumesFalse,
        simple_not: consumesFalse,
        optional: consumesFalse,
        zero_or_more: consumesFalse,
        one_or_more: consumesExpression,
        group: consumesExpression,
        semantic_and: consumesFalse,
        semantic_not: consumesFalse,
        rule_ref: function rule_ref(node) {
          return consumes(asts.findRule(ast, node.name));
        },
        literal: function literal(node) {
          return node.value !== "";
        },
        "class": consumesTrue,
        any: consumesTrue
      });
      return consumes(node);
    }
  };
  module.exports = asts;
},835,[827,833]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var GrammarError = _$$_REQUIRE(_dependencyMap[0]),
      visitor = _$$_REQUIRE(_dependencyMap[1]);

  function reportDuplicateRules(ast) {
    var rules = {};
    var check = visitor.build({
      rule: function rule(node) {
        if (rules.hasOwnProperty(node.name)) {
          throw new GrammarError("Rule \"" + node.name + "\" is already defined " + "at line " + rules[node.name].start.line + ", " + "column " + rules[node.name].start.column + ".", node.location);
        }

        rules[node.name] = node.location;
      }
    });
    check(ast);
  }

  module.exports = reportDuplicateRules;
},836,[829,833]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var GrammarError = _$$_REQUIRE(_dependencyMap[0]),
      arrays = _$$_REQUIRE(_dependencyMap[1]),
      objects = _$$_REQUIRE(_dependencyMap[2]),
      visitor = _$$_REQUIRE(_dependencyMap[3]);

  function reportDuplicateLabels(ast) {
    function checkExpressionWithClonedEnv(node, env) {
      check(node.expression, objects.clone(env));
    }

    var check = visitor.build({
      rule: function rule(node) {
        check(node.expression, {});
      },
      choice: function choice(node, env) {
        arrays.each(node.alternatives, function (alternative) {
          check(alternative, objects.clone(env));
        });
      },
      action: checkExpressionWithClonedEnv,
      labeled: function labeled(node, env) {
        if (env.hasOwnProperty(node.label)) {
          throw new GrammarError("Label \"" + node.label + "\" is already defined " + "at line " + env[node.label].start.line + ", " + "column " + env[node.label].start.column + ".", node.location);
        }

        check(node.expression, env);
        env[node.label] = node.location;
      },
      text: checkExpressionWithClonedEnv,
      simple_and: checkExpressionWithClonedEnv,
      simple_not: checkExpressionWithClonedEnv,
      optional: checkExpressionWithClonedEnv,
      zero_or_more: checkExpressionWithClonedEnv,
      one_or_more: checkExpressionWithClonedEnv,
      group: checkExpressionWithClonedEnv
    });
    check(ast);
  }

  module.exports = reportDuplicateLabels;
},837,[829,827,828,833]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _$$_REQUIRE(_dependencyMap[0]),
      GrammarError = _$$_REQUIRE(_dependencyMap[1]),
      asts = _$$_REQUIRE(_dependencyMap[2]),
      visitor = _$$_REQUIRE(_dependencyMap[3]);

  function reportInfiniteRecursion(ast) {
    var visitedRules = [];
    var check = visitor.build({
      rule: function rule(node) {
        visitedRules.push(node.name);
        check(node.expression);
        visitedRules.pop(node.name);
      },
      sequence: function sequence(node) {
        arrays.every(node.elements, function (element) {
          check(element);
          return !asts.alwaysConsumesOnSuccess(ast, element);
        });
      },
      rule_ref: function rule_ref(node) {
        if (arrays.contains(visitedRules, node.name)) {
          visitedRules.push(node.name);
          throw new GrammarError("Possible infinite loop when parsing (left recursion: " + visitedRules.join(" -> ") + ").", node.location);
        }

        check(asts.findRule(ast, node.name));
      }
    });
    check(ast);
  }

  module.exports = reportInfiniteRecursion;
},838,[827,829,835,833]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var GrammarError = _$$_REQUIRE(_dependencyMap[0]),
      asts = _$$_REQUIRE(_dependencyMap[1]),
      visitor = _$$_REQUIRE(_dependencyMap[2]);

  function reportInfiniteRepetition(ast) {
    var check = visitor.build({
      zero_or_more: function zero_or_more(node) {
        if (!asts.alwaysConsumesOnSuccess(ast, node.expression)) {
          throw new GrammarError("Possible infinite loop when parsing (repetition used with an expression that may not consume any input).", node.location);
        }
      },
      one_or_more: function one_or_more(node) {
        if (!asts.alwaysConsumesOnSuccess(ast, node.expression)) {
          throw new GrammarError("Possible infinite loop when parsing (repetition used with an expression that may not consume any input).", node.location);
        }
      }
    });
    check(ast);
  }

  module.exports = reportInfiniteRepetition;
},839,[829,835,833]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _$$_REQUIRE(_dependencyMap[0]),
      visitor = _$$_REQUIRE(_dependencyMap[1]);

  function removeProxyRules(ast, options) {
    function isProxyRule(node) {
      return node.type === "rule" && node.expression.type === "rule_ref";
    }

    function replaceRuleRefs(ast, from, to) {
      var replace = visitor.build({
        rule_ref: function rule_ref(node) {
          if (node.name === from) {
            node.name = to;
          }
        }
      });
      replace(ast);
    }

    var indices = [];
    arrays.each(ast.rules, function (rule, i) {
      if (isProxyRule(rule)) {
        replaceRuleRefs(ast, rule.name, rule.expression.name);

        if (!arrays.contains(options.allowedStartRules, rule.name)) {
          indices.push(i);
        }
      }
    });
    indices.reverse();
    arrays.each(indices, function (i) {
      ast.rules.splice(i, 1);
    });
  }

  module.exports = removeProxyRules;
},840,[827,833]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _$$_REQUIRE(_dependencyMap[0]),
      objects = _$$_REQUIRE(_dependencyMap[1]),
      asts = _$$_REQUIRE(_dependencyMap[2]),
      visitor = _$$_REQUIRE(_dependencyMap[3]),
      op = _$$_REQUIRE(_dependencyMap[4]),
      js = _$$_REQUIRE(_dependencyMap[5]);

  function generateBytecode(ast) {
    var consts = [];

    function addConst(value) {
      var index = arrays.indexOf(consts, value);
      return index === -1 ? consts.push(value) - 1 : index;
    }

    function addFunctionConst(params, code) {
      return addConst("function(" + params.join(", ") + ") {" + code + "}");
    }

    function buildSequence() {
      return Array.prototype.concat.apply([], arguments);
    }

    function buildCondition(condCode, thenCode, elseCode) {
      return condCode.concat([thenCode.length, elseCode.length], thenCode, elseCode);
    }

    function buildLoop(condCode, bodyCode) {
      return condCode.concat([bodyCode.length], bodyCode);
    }

    function buildCall(functionIndex, delta, env, sp) {
      var params = arrays.map(objects.values(env), function (p) {
        return sp - p;
      });
      return [op.CALL, functionIndex, delta, params.length].concat(params);
    }

    function buildSimplePredicate(expression, negative, context) {
      return buildSequence([op.PUSH_CURR_POS], [op.SILENT_FAILS_ON], generate(expression, {
        sp: context.sp + 1,
        env: objects.clone(context.env),
        action: null
      }), [op.SILENT_FAILS_OFF], buildCondition([negative ? op.IF_ERROR : op.IF_NOT_ERROR], buildSequence([op.POP], [negative ? op.POP : op.POP_CURR_POS], [op.PUSH_UNDEFINED]), buildSequence([op.POP], [negative ? op.POP_CURR_POS : op.POP], [op.PUSH_FAILED])));
    }

    function buildSemanticPredicate(code, negative, context) {
      var functionIndex = addFunctionConst(objects.keys(context.env), code);
      return buildSequence([op.UPDATE_SAVED_POS], buildCall(functionIndex, 0, context.env, context.sp), buildCondition([op.IF], buildSequence([op.POP], negative ? [op.PUSH_FAILED] : [op.PUSH_UNDEFINED]), buildSequence([op.POP], negative ? [op.PUSH_UNDEFINED] : [op.PUSH_FAILED])));
    }

    function buildAppendLoop(expressionCode) {
      return buildLoop([op.WHILE_NOT_ERROR], buildSequence([op.APPEND], expressionCode));
    }

    var generate = visitor.build({
      grammar: function grammar(node) {
        arrays.each(node.rules, generate);
        node.consts = consts;
      },
      rule: function rule(node) {
        node.bytecode = generate(node.expression, {
          sp: -1,
          env: {},
          action: null
        });
      },
      named: function named(node, context) {
        var nameIndex = addConst('peg$otherExpectation("' + js.stringEscape(node.name) + '")');
        return buildSequence([op.SILENT_FAILS_ON], generate(node.expression, context), [op.SILENT_FAILS_OFF], buildCondition([op.IF_ERROR], [op.FAIL, nameIndex], []));
      },
      choice: function choice(node, context) {
        function buildAlternativesCode(alternatives, context) {
          return buildSequence(generate(alternatives[0], {
            sp: context.sp,
            env: objects.clone(context.env),
            action: null
          }), alternatives.length > 1 ? buildCondition([op.IF_ERROR], buildSequence([op.POP], buildAlternativesCode(alternatives.slice(1), context)), []) : []);
        }

        return buildAlternativesCode(node.alternatives, context);
      },
      action: function action(node, context) {
        var env = objects.clone(context.env),
            emitCall = node.expression.type !== "sequence" || node.expression.elements.length === 0,
            expressionCode = generate(node.expression, {
          sp: context.sp + (emitCall ? 1 : 0),
          env: env,
          action: node
        }),
            functionIndex = addFunctionConst(objects.keys(env), node.code);
        return emitCall ? buildSequence([op.PUSH_CURR_POS], expressionCode, buildCondition([op.IF_NOT_ERROR], buildSequence([op.LOAD_SAVED_POS, 1], buildCall(functionIndex, 1, env, context.sp + 2)), []), [op.NIP]) : expressionCode;
      },
      sequence: function sequence(node, context) {
        function buildElementsCode(elements, context) {
          var processedCount, functionIndex;

          if (elements.length > 0) {
            processedCount = node.elements.length - elements.slice(1).length;
            return buildSequence(generate(elements[0], {
              sp: context.sp,
              env: context.env,
              action: null
            }), buildCondition([op.IF_NOT_ERROR], buildElementsCode(elements.slice(1), {
              sp: context.sp + 1,
              env: context.env,
              action: context.action
            }), buildSequence(processedCount > 1 ? [op.POP_N, processedCount] : [op.POP], [op.POP_CURR_POS], [op.PUSH_FAILED])));
          } else {
            if (context.action) {
              functionIndex = addFunctionConst(objects.keys(context.env), context.action.code);
              return buildSequence([op.LOAD_SAVED_POS, node.elements.length], buildCall(functionIndex, node.elements.length, context.env, context.sp), [op.NIP]);
            } else {
              return buildSequence([op.WRAP, node.elements.length], [op.NIP]);
            }
          }
        }

        return buildSequence([op.PUSH_CURR_POS], buildElementsCode(node.elements, {
          sp: context.sp + 1,
          env: context.env,
          action: context.action
        }));
      },
      labeled: function labeled(node, context) {
        var env = objects.clone(context.env);
        context.env[node.label] = context.sp + 1;
        return generate(node.expression, {
          sp: context.sp,
          env: env,
          action: null
        });
      },
      text: function text(node, context) {
        return buildSequence([op.PUSH_CURR_POS], generate(node.expression, {
          sp: context.sp + 1,
          env: objects.clone(context.env),
          action: null
        }), buildCondition([op.IF_NOT_ERROR], buildSequence([op.POP], [op.TEXT]), [op.NIP]));
      },
      simple_and: function simple_and(node, context) {
        return buildSimplePredicate(node.expression, false, context);
      },
      simple_not: function simple_not(node, context) {
        return buildSimplePredicate(node.expression, true, context);
      },
      optional: function optional(node, context) {
        return buildSequence(generate(node.expression, {
          sp: context.sp,
          env: objects.clone(context.env),
          action: null
        }), buildCondition([op.IF_ERROR], buildSequence([op.POP], [op.PUSH_NULL]), []));
      },
      zero_or_more: function zero_or_more(node, context) {
        var expressionCode = generate(node.expression, {
          sp: context.sp + 1,
          env: objects.clone(context.env),
          action: null
        });
        return buildSequence([op.PUSH_EMPTY_ARRAY], expressionCode, buildAppendLoop(expressionCode), [op.POP]);
      },
      one_or_more: function one_or_more(node, context) {
        var expressionCode = generate(node.expression, {
          sp: context.sp + 1,
          env: objects.clone(context.env),
          action: null
        });
        return buildSequence([op.PUSH_EMPTY_ARRAY], expressionCode, buildCondition([op.IF_NOT_ERROR], buildSequence(buildAppendLoop(expressionCode), [op.POP]), buildSequence([op.POP], [op.POP], [op.PUSH_FAILED])));
      },
      group: function group(node, context) {
        return generate(node.expression, {
          sp: context.sp,
          env: objects.clone(context.env),
          action: null
        });
      },
      semantic_and: function semantic_and(node, context) {
        return buildSemanticPredicate(node.code, false, context);
      },
      semantic_not: function semantic_not(node, context) {
        return buildSemanticPredicate(node.code, true, context);
      },
      rule_ref: function rule_ref(node) {
        return [op.RULE, asts.indexOfRule(ast, node.name)];
      },
      literal: function literal(node) {
        var stringIndex, expectedIndex;

        if (node.value.length > 0) {
          stringIndex = addConst('"' + js.stringEscape(node.ignoreCase ? node.value.toLowerCase() : node.value) + '"');
          expectedIndex = addConst("peg$literalExpectation(\"" + js.stringEscape(node.value) + '", ' + node.ignoreCase + ')');
          return buildCondition(node.ignoreCase ? [op.MATCH_STRING_IC, stringIndex] : [op.MATCH_STRING, stringIndex], node.ignoreCase ? [op.ACCEPT_N, node.value.length] : [op.ACCEPT_STRING, stringIndex], [op.FAIL, expectedIndex]);
        } else {
          stringIndex = addConst('""');
          return [op.PUSH, stringIndex];
        }
      },
      "class": function _class(node) {
        var regexp, parts, regexpIndex, expectedIndex;

        if (node.parts.length > 0) {
          regexp = '/^[' + (node.inverted ? '^' : '') + arrays.map(node.parts, function (part) {
            return part instanceof Array ? js.regexpClassEscape(part[0]) + '-' + js.regexpClassEscape(part[1]) : js.regexpClassEscape(part);
          }).join('') + ']/' + (node.ignoreCase ? 'i' : '');
        } else {
          regexp = node.inverted ? '/^[\\S\\s]/' : '/^(?!)/';
        }

        parts = '[' + arrays.map(node.parts, function (part) {
          return part instanceof Array ? '["' + js.stringEscape(part[0]) + '", "' + js.stringEscape(part[1]) + '"]' : '"' + js.stringEscape(part) + '"';
        }).join(', ') + ']';
        regexpIndex = addConst(regexp);
        expectedIndex = addConst('peg$classExpectation(' + parts + ', ' + node.inverted + ', ' + node.ignoreCase + ')');
        return buildCondition([op.MATCH_REGEXP, regexpIndex], [op.ACCEPT_N, 1], [op.FAIL, expectedIndex]);
      },
      any: function any() {
        var expectedIndex = addConst('peg$anyExpectation()');
        return buildCondition([op.MATCH_ANY], [op.ACCEPT_N, 1], [op.FAIL, expectedIndex]);
      }
    });
    generate(ast);
  }

  module.exports = generateBytecode;
},841,[827,828,835,833,842,843]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var opcodes = {
    PUSH: 0,
    PUSH_UNDEFINED: 1,
    PUSH_NULL: 2,
    PUSH_FAILED: 3,
    PUSH_EMPTY_ARRAY: 4,
    PUSH_CURR_POS: 5,
    POP: 6,
    POP_CURR_POS: 7,
    POP_N: 8,
    NIP: 9,
    APPEND: 10,
    WRAP: 11,
    TEXT: 12,
    IF: 13,
    IF_ERROR: 14,
    IF_NOT_ERROR: 15,
    WHILE_NOT_ERROR: 16,
    MATCH_ANY: 17,
    MATCH_STRING: 18,
    MATCH_STRING_IC: 19,
    MATCH_REGEXP: 20,
    ACCEPT_N: 21,
    ACCEPT_STRING: 22,
    FAIL: 23,
    LOAD_SAVED_POS: 24,
    UPDATE_SAVED_POS: 25,
    CALL: 26,
    RULE: 27,
    SILENT_FAILS_ON: 28,
    SILENT_FAILS_OFF: 29
  };
  module.exports = opcodes;
},842,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  var js = {
    stringEscape: function stringEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\xFF]/g, function (ch) {
        return '\\x' + hex(ch);
      }).replace(/[\u0100-\u0FFF]/g, function (ch) {
        return "\\u0" + hex(ch);
      }).replace(/[\u1000-\uFFFF]/g, function (ch) {
        return "\\u" + hex(ch);
      });
    },
    regexpClassEscape: function regexpClassEscape(s) {
      return s.replace(/\\/g, '\\\\').replace(/\//g, '\\/').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\v/g, '\\x0B').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\xFF]/g, function (ch) {
        return '\\x' + hex(ch);
      }).replace(/[\u0100-\u0FFF]/g, function (ch) {
        return "\\u0" + hex(ch);
      }).replace(/[\u1000-\uFFFF]/g, function (ch) {
        return "\\u" + hex(ch);
      });
    }
  };
  module.exports = js;
},843,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _$$_REQUIRE(_dependencyMap[0]),
      objects = _$$_REQUIRE(_dependencyMap[1]),
      asts = _$$_REQUIRE(_dependencyMap[2]),
      op = _$$_REQUIRE(_dependencyMap[3]),
      js = _$$_REQUIRE(_dependencyMap[4]);

  function generateJS(ast, options) {
    function indent2(code) {
      return code.replace(/^(.+)$/gm, '  $1');
    }

    function indent6(code) {
      return code.replace(/^(.+)$/gm, '      $1');
    }

    function indent10(code) {
      return code.replace(/^(.+)$/gm, '          $1');
    }

    function generateTables() {
      if (options.optimize === "size") {
        return ['peg$consts = [', indent2(ast.consts.join(',\n')), '],', '', 'peg$bytecode = [', indent2(arrays.map(ast.rules, function (rule) {
          return 'peg$decode("' + js.stringEscape(arrays.map(rule.bytecode, function (b) {
            return String.fromCharCode(b + 32);
          }).join('')) + '")';
        }).join(',\n')), '],'].join('\n');
      } else {
        return arrays.map(ast.consts, function (c, i) {
          return 'peg$c' + i + ' = ' + c + ',';
        }).join('\n');
      }
    }

    function generateRuleHeader(ruleNameCode, ruleIndexCode) {
      var parts = [];
      parts.push('');

      if (options.trace) {
        parts.push(['peg$tracer.trace({', '  type:     "rule.enter",', '  rule:     ' + ruleNameCode + ',', '  location: peg$computeLocation(startPos, startPos)', '});', ''].join('\n'));
      }

      if (options.cache) {
        parts.push(['var key    = peg$currPos * ' + ast.rules.length + ' + ' + ruleIndexCode + ',', '    cached = peg$resultsCache[key];', '', 'if (cached) {', '  peg$currPos = cached.nextPos;', ''].join('\n'));

        if (options.trace) {
          parts.push(['if (cached.result !== peg$FAILED) {', '  peg$tracer.trace({', '    type:   "rule.match",', '    rule:   ' + ruleNameCode + ',', '    result: cached.result,', '    location: peg$computeLocation(startPos, peg$currPos)', '  });', '} else {', '  peg$tracer.trace({', '    type: "rule.fail",', '    rule: ' + ruleNameCode + ',', '    location: peg$computeLocation(startPos, startPos)', '  });', '}', ''].join('\n'));
        }

        parts.push(['  return cached.result;', '}', ''].join('\n'));
      }

      return parts.join('\n');
    }

    function generateRuleFooter(ruleNameCode, resultCode) {
      var parts = [];

      if (options.cache) {
        parts.push(['', 'peg$resultsCache[key] = { nextPos: peg$currPos, result: ' + resultCode + ' };'].join('\n'));
      }

      if (options.trace) {
        parts.push(['', 'if (' + resultCode + ' !== peg$FAILED) {', '  peg$tracer.trace({', '    type:   "rule.match",', '    rule:   ' + ruleNameCode + ',', '    result: ' + resultCode + ',', '    location: peg$computeLocation(startPos, peg$currPos)', '  });', '} else {', '  peg$tracer.trace({', '    type: "rule.fail",', '    rule: ' + ruleNameCode + ',', '    location: peg$computeLocation(startPos, startPos)', '  });', '}'].join('\n'));
      }

      parts.push(['', 'return ' + resultCode + ';'].join('\n'));
      return parts.join('\n');
    }

    function generateInterpreter() {
      var parts = [];

      function generateCondition(cond, argsLength) {
        var baseLength = argsLength + 3,
            thenLengthCode = 'bc[ip + ' + (baseLength - 2) + ']',
            elseLengthCode = 'bc[ip + ' + (baseLength - 1) + ']';
        return ['ends.push(end);', 'ips.push(ip + ' + baseLength + ' + ' + thenLengthCode + ' + ' + elseLengthCode + ');', '', 'if (' + cond + ') {', '  end = ip + ' + baseLength + ' + ' + thenLengthCode + ';', '  ip += ' + baseLength + ';', '} else {', '  end = ip + ' + baseLength + ' + ' + thenLengthCode + ' + ' + elseLengthCode + ';', '  ip += ' + baseLength + ' + ' + thenLengthCode + ';', '}', '', 'break;'].join('\n');
      }

      function generateLoop(cond) {
        var baseLength = 2,
            bodyLengthCode = "bc[ip + 1]";
        return ['if (' + cond + ') {', '  ends.push(end);', '  ips.push(ip);', '', "  end = ip + 2 + bc[ip + 1];", "  ip += 2;", '} else {', "  ip += 2 + bc[ip + 1];", '}', '', 'break;'].join('\n');
      }

      function generateCall() {
        var baseLength = 4,
            paramsLengthCode = "bc[ip + 3]";
        return ["params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);", "for (i = 0; i < bc[ip + 3]; i++) {", '  params[i] = stack[stack.length - 1 - params[i]];', '}', '', 'stack.splice(', '  stack.length - bc[ip + 2],', '  bc[ip + 2],', '  peg$consts[bc[ip + 1]].apply(null, params)', ');', '', "ip += 4 + bc[ip + 3];", 'break;'].join('\n');
      }

      parts.push(['function peg$decode(s) {', '  var bc = new Array(s.length), i;', '', '  for (i = 0; i < s.length; i++) {', '    bc[i] = s.charCodeAt(i) - 32;', '  }', '', '  return bc;', '}', '', 'function peg$parseRule(index) {'].join('\n'));

      if (options.trace) {
        parts.push(['  var bc       = peg$bytecode[index],', '      ip       = 0,', '      ips      = [],', '      end      = bc.length,', '      ends     = [],', '      stack    = [],', '      startPos = peg$currPos,', '      params, i;'].join('\n'));
      } else {
        parts.push(['  var bc    = peg$bytecode[index],', '      ip    = 0,', '      ips   = [],', '      end   = bc.length,', '      ends  = [],', '      stack = [],', '      params, i;'].join('\n'));
      }

      parts.push(indent2(generateRuleHeader('peg$ruleNames[index]', 'index')));
      parts.push(['  while (true) {', '    while (ip < end) {', '      switch (bc[ip]) {', '        case ' + op.PUSH + ':', '          stack.push(peg$consts[bc[ip + 1]]);', '          ip += 2;', '          break;', '', '        case ' + op.PUSH_UNDEFINED + ':', '          stack.push(void 0);', '          ip++;', '          break;', '', '        case ' + op.PUSH_NULL + ':', '          stack.push(null);', '          ip++;', '          break;', '', '        case ' + op.PUSH_FAILED + ':', '          stack.push(peg$FAILED);', '          ip++;', '          break;', '', '        case ' + op.PUSH_EMPTY_ARRAY + ':', '          stack.push([]);', '          ip++;', '          break;', '', '        case ' + op.PUSH_CURR_POS + ':', '          stack.push(peg$currPos);', '          ip++;', '          break;', '', '        case ' + op.POP + ':', '          stack.pop();', '          ip++;', '          break;', '', '        case ' + op.POP_CURR_POS + ':', '          peg$currPos = stack.pop();', '          ip++;', '          break;', '', '        case ' + op.POP_N + ':', '          stack.length -= bc[ip + 1];', '          ip += 2;', '          break;', '', '        case ' + op.NIP + ':', '          stack.splice(-2, 1);', '          ip++;', '          break;', '', '        case ' + op.APPEND + ':', '          stack[stack.length - 2].push(stack.pop());', '          ip++;', '          break;', '', '        case ' + op.WRAP + ':', '          stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));', '          ip += 2;', '          break;', '', '        case ' + op.TEXT + ':', '          stack.push(input.substring(stack.pop(), peg$currPos));', '          ip++;', '          break;', '', '        case ' + op.IF + ':', indent10(generateCondition('stack[stack.length - 1]', 0)), '', '        case ' + op.IF_ERROR + ':', indent10(generateCondition('stack[stack.length - 1] === peg$FAILED', 0)), '', '        case ' + op.IF_NOT_ERROR + ':', indent10(generateCondition('stack[stack.length - 1] !== peg$FAILED', 0)), '', '        case ' + op.WHILE_NOT_ERROR + ':', indent10(generateLoop('stack[stack.length - 1] !== peg$FAILED')), '', '        case ' + op.MATCH_ANY + ':', indent10(generateCondition('input.length > peg$currPos', 0)), '', '        case ' + op.MATCH_STRING + ':', indent10(generateCondition('input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]', 1)), '', '        case ' + op.MATCH_STRING_IC + ':', indent10(generateCondition('input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]', 1)), '', '        case ' + op.MATCH_REGEXP + ':', indent10(generateCondition('peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))', 1)), '', '        case ' + op.ACCEPT_N + ':', '          stack.push(input.substr(peg$currPos, bc[ip + 1]));', '          peg$currPos += bc[ip + 1];', '          ip += 2;', '          break;', '', '        case ' + op.ACCEPT_STRING + ':', '          stack.push(peg$consts[bc[ip + 1]]);', '          peg$currPos += peg$consts[bc[ip + 1]].length;', '          ip += 2;', '          break;', '', '        case ' + op.FAIL + ':', '          stack.push(peg$FAILED);', '          if (peg$silentFails === 0) {', '            peg$fail(peg$consts[bc[ip + 1]]);', '          }', '          ip += 2;', '          break;', '', '        case ' + op.LOAD_SAVED_POS + ':', '          peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];', '          ip += 2;', '          break;', '', '        case ' + op.UPDATE_SAVED_POS + ':', '          peg$savedPos = peg$currPos;', '          ip++;', '          break;', '', '        case ' + op.CALL + ':', indent10(generateCall()), '', '        case ' + op.RULE + ':', '          stack.push(peg$parseRule(bc[ip + 1]));', '          ip += 2;', '          break;', '', '        case ' + op.SILENT_FAILS_ON + ':', '          peg$silentFails++;', '          ip++;', '          break;', '', '        case ' + op.SILENT_FAILS_OFF + ':', '          peg$silentFails--;', '          ip++;', '          break;', '', '        default:', '          throw new Error("Invalid opcode: " + bc[ip] + ".");', '      }', '    }', '', '    if (ends.length > 0) {', '      end = ends.pop();', '      ip = ips.pop();', '    } else {', '      break;', '    }', '  }'].join('\n'));
      parts.push(indent2(generateRuleFooter('peg$ruleNames[index]', 'stack[0]')));
      parts.push('}');
      return parts.join('\n');
    }

    function generateRuleFunction(rule) {
      var parts = [],
          code;

      function c(i) {
        return "peg$c" + i;
      }

      function s(i) {
        return "s" + i;
      }

      var stack = {
        sp: -1,
        maxSp: -1,
        push: function push(exprCode) {
          var code = s(++this.sp) + ' = ' + exprCode + ';';

          if (this.sp > this.maxSp) {
            this.maxSp = this.sp;
          }

          return code;
        },
        pop: function pop(n) {
          var values;

          if (n === undefined) {
            return s(this.sp--);
          } else {
            values = arrays.map(arrays.range(this.sp - n + 1, this.sp + 1), s);
            this.sp -= n;
            return values;
          }
        },
        top: function top() {
          return s(this.sp);
        },
        index: function index(i) {
          return s(this.sp - i);
        }
      };

      function compile(bc) {
        var ip = 0,
            end = bc.length,
            parts = [],
            value;

        function compileCondition(cond, argCount) {
          var baseLength = argCount + 3,
              thenLength = bc[ip + baseLength - 2],
              elseLength = bc[ip + baseLength - 1],
              baseSp = stack.sp,
              thenCode,
              elseCode,
              thenSp,
              elseSp;
          ip += baseLength;
          thenCode = compile(bc.slice(ip, ip + thenLength));
          thenSp = stack.sp;
          ip += thenLength;

          if (elseLength > 0) {
            stack.sp = baseSp;
            elseCode = compile(bc.slice(ip, ip + elseLength));
            elseSp = stack.sp;
            ip += elseLength;

            if (thenSp !== elseSp) {
              throw new Error("Branches of a condition must move the stack pointer in the same way.");
            }
          }

          parts.push('if (' + cond + ') {');
          parts.push(indent2(thenCode));

          if (elseLength > 0) {
            parts.push('} else {');
            parts.push(indent2(elseCode));
          }

          parts.push('}');
        }

        function compileLoop(cond) {
          var baseLength = 2,
              bodyLength = bc[ip + baseLength - 1],
              baseSp = stack.sp,
              bodyCode,
              bodySp;
          ip += baseLength;
          bodyCode = compile(bc.slice(ip, ip + bodyLength));
          bodySp = stack.sp;
          ip += bodyLength;

          if (bodySp !== baseSp) {
            throw new Error("Body of a loop can't move the stack pointer.");
          }

          parts.push('while (' + cond + ') {');
          parts.push(indent2(bodyCode));
          parts.push('}');
        }

        function compileCall() {
          var baseLength = 4,
              paramsLength = bc[ip + baseLength - 1];
          var value = c(bc[ip + 1]) + '(' + arrays.map(bc.slice(ip + baseLength, ip + baseLength + paramsLength), function (p) {
            return stack.index(p);
          }).join(', ') + ')';
          stack.pop(bc[ip + 2]);
          parts.push(stack.push(value));
          ip += baseLength + paramsLength;
        }

        while (ip < end) {
          switch (bc[ip]) {
            case op.PUSH:
              parts.push(stack.push(c(bc[ip + 1])));
              ip += 2;
              break;

            case op.PUSH_CURR_POS:
              parts.push(stack.push('peg$currPos'));
              ip++;
              break;

            case op.PUSH_UNDEFINED:
              parts.push(stack.push('void 0'));
              ip++;
              break;

            case op.PUSH_NULL:
              parts.push(stack.push('null'));
              ip++;
              break;

            case op.PUSH_FAILED:
              parts.push(stack.push('peg$FAILED'));
              ip++;
              break;

            case op.PUSH_EMPTY_ARRAY:
              parts.push(stack.push('[]'));
              ip++;
              break;

            case op.POP:
              stack.pop();
              ip++;
              break;

            case op.POP_CURR_POS:
              parts.push('peg$currPos = ' + stack.pop() + ';');
              ip++;
              break;

            case op.POP_N:
              stack.pop(bc[ip + 1]);
              ip += 2;
              break;

            case op.NIP:
              value = stack.pop();
              stack.pop();
              parts.push(stack.push(value));
              ip++;
              break;

            case op.APPEND:
              value = stack.pop();
              parts.push(stack.top() + '.push(' + value + ');');
              ip++;
              break;

            case op.WRAP:
              parts.push(stack.push('[' + stack.pop(bc[ip + 1]).join(', ') + ']'));
              ip += 2;
              break;

            case op.TEXT:
              parts.push(stack.push('input.substring(' + stack.pop() + ', peg$currPos)'));
              ip++;
              break;

            case op.IF:
              compileCondition(stack.top(), 0);
              break;

            case op.IF_ERROR:
              compileCondition(stack.top() + ' === peg$FAILED', 0);
              break;

            case op.IF_NOT_ERROR:
              compileCondition(stack.top() + ' !== peg$FAILED', 0);
              break;

            case op.WHILE_NOT_ERROR:
              compileLoop(stack.top() + ' !== peg$FAILED', 0);
              break;

            case op.MATCH_ANY:
              compileCondition('input.length > peg$currPos', 0);
              break;

            case op.MATCH_STRING:
              compileCondition(eval(ast.consts[bc[ip + 1]]).length > 1 ? 'input.substr(peg$currPos, ' + eval(ast.consts[bc[ip + 1]]).length + ') === ' + c(bc[ip + 1]) : 'input.charCodeAt(peg$currPos) === ' + eval(ast.consts[bc[ip + 1]]).charCodeAt(0), 1);
              break;

            case op.MATCH_STRING_IC:
              compileCondition('input.substr(peg$currPos, ' + eval(ast.consts[bc[ip + 1]]).length + ').toLowerCase() === ' + c(bc[ip + 1]), 1);
              break;

            case op.MATCH_REGEXP:
              compileCondition(c(bc[ip + 1]) + '.test(input.charAt(peg$currPos))', 1);
              break;

            case op.ACCEPT_N:
              parts.push(stack.push(bc[ip + 1] > 1 ? 'input.substr(peg$currPos, ' + bc[ip + 1] + ')' : 'input.charAt(peg$currPos)'));
              parts.push(bc[ip + 1] > 1 ? 'peg$currPos += ' + bc[ip + 1] + ';' : 'peg$currPos++;');
              ip += 2;
              break;

            case op.ACCEPT_STRING:
              parts.push(stack.push(c(bc[ip + 1])));
              parts.push(eval(ast.consts[bc[ip + 1]]).length > 1 ? 'peg$currPos += ' + eval(ast.consts[bc[ip + 1]]).length + ';' : 'peg$currPos++;');
              ip += 2;
              break;

            case op.FAIL:
              parts.push(stack.push('peg$FAILED'));
              parts.push('if (peg$silentFails === 0) { peg$fail(' + c(bc[ip + 1]) + '); }');
              ip += 2;
              break;

            case op.LOAD_SAVED_POS:
              parts.push('peg$savedPos = ' + stack.index(bc[ip + 1]) + ';');
              ip += 2;
              break;

            case op.UPDATE_SAVED_POS:
              parts.push('peg$savedPos = peg$currPos;');
              ip++;
              break;

            case op.CALL:
              compileCall();
              break;

            case op.RULE:
              parts.push(stack.push("peg$parse" + ast.rules[bc[ip + 1]].name + "()"));
              ip += 2;
              break;

            case op.SILENT_FAILS_ON:
              parts.push('peg$silentFails++;');
              ip++;
              break;

            case op.SILENT_FAILS_OFF:
              parts.push('peg$silentFails--;');
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        return parts.join('\n');
      }

      code = compile(rule.bytecode);
      parts.push('function peg$parse' + rule.name + '() {');

      if (options.trace) {
        parts.push(['  var ' + arrays.map(arrays.range(0, stack.maxSp + 1), s).join(', ') + ',', '      startPos = peg$currPos;'].join('\n'));
      } else {
        parts.push('  var ' + arrays.map(arrays.range(0, stack.maxSp + 1), s).join(', ') + ';');
      }

      parts.push(indent2(generateRuleHeader('"' + js.stringEscape(rule.name) + '"', asts.indexOfRule(ast, rule.name))));
      parts.push(indent2(code));
      parts.push(indent2(generateRuleFooter('"' + js.stringEscape(rule.name) + '"', s(0))));
      parts.push('}');
      return parts.join('\n');
    }

    function generateToplevel() {
      var parts = [],
          startRuleIndices,
          startRuleIndex,
          startRuleFunctions,
          startRuleFunction,
          ruleNames;
      parts.push(['function peg$subclass(child, parent) {', '  function ctor() { this.constructor = child; }', '  ctor.prototype = parent.prototype;', '  child.prototype = new ctor();', '}', '', 'function peg$SyntaxError(message, expected, found, location) {', '  this.message  = message;', '  this.expected = expected;', '  this.found    = found;', '  this.location = location;', '  this.name     = "SyntaxError";', '', '  if (typeof Error.captureStackTrace === "function") {', '    Error.captureStackTrace(this, peg$SyntaxError);', '  }', '}', '', 'peg$subclass(peg$SyntaxError, Error);', '', 'peg$SyntaxError.buildMessage = function(expected, found) {', '  var DESCRIBE_EXPECTATION_FNS = {', '        literal: function(expectation) {', '          return "\\\"" + literalEscape(expectation.text) + "\\\"";', '        },', '', '        "class": function(expectation) {', '          var escapedParts = "",', '              i;', '', '          for (i = 0; i < expectation.parts.length; i++) {', '            escapedParts += expectation.parts[i] instanceof Array', '              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])', '              : classEscape(expectation.parts[i]);', '          }', '', '          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";', '        },', '', '        any: function(expectation) {', '          return "any character";', '        },', '', '        end: function(expectation) {', '          return "end of input";', '        },', '', '        other: function(expectation) {', '          return expectation.description;', '        }', '      };', '', '  function hex(ch) {', '    return ch.charCodeAt(0).toString(16).toUpperCase();', '  }', '', '  function literalEscape(s) {', '    return s', '      .replace(/\\\\/g, \'\\\\\\\\\')', '      .replace(/"/g,  \'\\\\"\')', '      .replace(/\\0/g, \'\\\\0\')', '      .replace(/\\t/g, \'\\\\t\')', '      .replace(/\\n/g, \'\\\\n\')', '      .replace(/\\r/g, \'\\\\r\')', '      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \'\\\\x0\' + hex(ch); })', '      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \'\\\\x\'  + hex(ch); });', '  }', '', '  function classEscape(s) {', '    return s', '      .replace(/\\\\/g, \'\\\\\\\\\')', '      .replace(/\\]/g, \'\\\\]\')', '      .replace(/\\^/g, \'\\\\^\')', '      .replace(/-/g,  \'\\\\-\')', '      .replace(/\\0/g, \'\\\\0\')', '      .replace(/\\t/g, \'\\\\t\')', '      .replace(/\\n/g, \'\\\\n\')', '      .replace(/\\r/g, \'\\\\r\')', '      .replace(/[\\x00-\\x0F]/g,          function(ch) { return \'\\\\x0\' + hex(ch); })', '      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return \'\\\\x\'  + hex(ch); });', '  }', '', '  function describeExpectation(expectation) {', '    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);', '  }', '', '  function describeExpected(expected) {', '    var descriptions = new Array(expected.length),', '        i, j;', '', '    for (i = 0; i < expected.length; i++) {', '      descriptions[i] = describeExpectation(expected[i]);', '    }', '', '    descriptions.sort();', '', '    if (descriptions.length > 0) {', '      for (i = 1, j = 1; i < descriptions.length; i++) {', '        if (descriptions[i - 1] !== descriptions[i]) {', '          descriptions[j] = descriptions[i];', '          j++;', '        }', '      }', '      descriptions.length = j;', '    }', '', '    switch (descriptions.length) {', '      case 1:', '        return descriptions[0];', '', '      case 2:', '        return descriptions[0] + " or " + descriptions[1];', '', '      default:', '        return descriptions.slice(0, -1).join(", ")', '          + ", or "', '          + descriptions[descriptions.length - 1];', '    }', '  }', '', '  function describeFound(found) {', '    return found ? "\\"" + literalEscape(found) + "\\"" : "end of input";', '  }', '', '  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";', '};', ''].join('\n'));

      if (options.trace) {
        parts.push(['function peg$DefaultTracer() {', '  this.indentLevel = 0;', '}', '', 'peg$DefaultTracer.prototype.trace = function(event) {', '  var that = this;', '', '  function log(event) {', '    function repeat(string, n) {', '       var result = "", i;', '', '       for (i = 0; i < n; i++) {', '         result += string;', '       }', '', '       return result;', '    }', '', '    function pad(string, length) {', '      return string + repeat(" ", length - string.length);', '    }', '', '    if (typeof console === "object") {', '      console.log(', '        event.location.start.line + ":" + event.location.start.column + "-"', '          + event.location.end.line + ":" + event.location.end.column + " "', '          + pad(event.type, 10) + " "', '          + repeat("  ", that.indentLevel) + event.rule', '      );', '    }', '  }', '', '  switch (event.type) {', '    case "rule.enter":', '      log(event);', '      this.indentLevel++;', '      break;', '', '    case "rule.match":', '      this.indentLevel--;', '      log(event);', '      break;', '', '    case "rule.fail":', '      this.indentLevel--;', '      log(event);', '      break;', '', '    default:', '      throw new Error("Invalid event type: " + event.type + ".");', '  }', '};', ''].join('\n'));
      }

      parts.push(['function peg$parse(input, options) {', '  options = options !== void 0 ? options : {};', '', '  var peg$FAILED = {},', ''].join('\n'));

      if (options.optimize === "size") {
        startRuleIndices = '{ ' + arrays.map(options.allowedStartRules, function (r) {
          return r + ': ' + asts.indexOfRule(ast, r);
        }).join(', ') + ' }';
        startRuleIndex = asts.indexOfRule(ast, options.allowedStartRules[0]);
        parts.push(['      peg$startRuleIndices = ' + startRuleIndices + ',', '      peg$startRuleIndex   = ' + startRuleIndex + ','].join('\n'));
      } else {
        startRuleFunctions = '{ ' + arrays.map(options.allowedStartRules, function (r) {
          return r + ': peg$parse' + r;
        }).join(', ') + ' }';
        startRuleFunction = 'peg$parse' + options.allowedStartRules[0];
        parts.push(['      peg$startRuleFunctions = ' + startRuleFunctions + ',', '      peg$startRuleFunction  = ' + startRuleFunction + ','].join('\n'));
      }

      parts.push('');
      parts.push(indent6(generateTables()));
      parts.push(['', '      peg$currPos          = 0,', '      peg$savedPos         = 0,', '      peg$posDetailsCache  = [{ line: 1, column: 1 }],', '      peg$maxFailPos       = 0,', '      peg$maxFailExpected  = [],', '      peg$silentFails      = 0,', ''].join('\n'));

      if (options.cache) {
        parts.push(['      peg$resultsCache = {},', ''].join('\n'));
      }

      if (options.trace) {
        if (options.optimize === "size") {
          ruleNames = '[' + arrays.map(ast.rules, function (r) {
            return '"' + js.stringEscape(r.name) + '"';
          }).join(', ') + ']';
          parts.push(['      peg$ruleNames = ' + ruleNames + ',', ''].join('\n'));
        }

        parts.push(['      peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer(),', ''].join('\n'));
      }

      parts.push(['      peg$result;', ''].join('\n'));

      if (options.optimize === "size") {
        parts.push(['  if ("startRule" in options) {', '    if (!(options.startRule in peg$startRuleIndices)) {', '      throw new Error("Can\'t start parsing from rule \\"" + options.startRule + "\\".");', '    }', '', '    peg$startRuleIndex = peg$startRuleIndices[options.startRule];', '  }'].join('\n'));
      } else {
        parts.push(['  if ("startRule" in options) {', '    if (!(options.startRule in peg$startRuleFunctions)) {', '      throw new Error("Can\'t start parsing from rule \\"" + options.startRule + "\\".");', '    }', '', '    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];', '  }'].join('\n'));
      }

      parts.push(['', '  function text() {', '    return input.substring(peg$savedPos, peg$currPos);', '  }', '', '  function location() {', '    return peg$computeLocation(peg$savedPos, peg$currPos);', '  }', '', '  function expected(description, location) {', '    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)', '', '    throw peg$buildStructuredError(', '      [peg$otherExpectation(description)],', '      input.substring(peg$savedPos, peg$currPos),', '      location', '    );', '  }', '', '  function error(message, location) {', '    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)', '', '    throw peg$buildSimpleError(message, location);', '  }', '', '  function peg$literalExpectation(text, ignoreCase) {', '    return { type: "literal", text: text, ignoreCase: ignoreCase };', '  }', '', '  function peg$classExpectation(parts, inverted, ignoreCase) {', '    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };', '  }', '', '  function peg$anyExpectation() {', '    return { type: "any" };', '  }', '', '  function peg$endExpectation() {', '    return { type: "end" };', '  }', '', '  function peg$otherExpectation(description) {', '    return { type: "other", description: description };', '  }', '', '  function peg$computePosDetails(pos) {', '    var details = peg$posDetailsCache[pos], p;', '', '    if (details) {', '      return details;', '    } else {', '      p = pos - 1;', '      while (!peg$posDetailsCache[p]) {', '        p--;', '      }', '', '      details = peg$posDetailsCache[p];', '      details = {', '        line:   details.line,', '        column: details.column', '      };', '', '      while (p < pos) {', '        if (input.charCodeAt(p) === 10) {', '          details.line++;', '          details.column = 1;', '        } else {', '          details.column++;', '        }', '', '        p++;', '      }', '', '      peg$posDetailsCache[pos] = details;', '      return details;', '    }', '  }', '', '  function peg$computeLocation(startPos, endPos) {', '    var startPosDetails = peg$computePosDetails(startPos),', '        endPosDetails   = peg$computePosDetails(endPos);', '', '    return {', '      start: {', '        offset: startPos,', '        line:   startPosDetails.line,', '        column: startPosDetails.column', '      },', '      end: {', '        offset: endPos,', '        line:   endPosDetails.line,', '        column: endPosDetails.column', '      }', '    };', '  }', '', '  function peg$fail(expected) {', '    if (peg$currPos < peg$maxFailPos) { return; }', '', '    if (peg$currPos > peg$maxFailPos) {', '      peg$maxFailPos = peg$currPos;', '      peg$maxFailExpected = [];', '    }', '', '    peg$maxFailExpected.push(expected);', '  }', '', '  function peg$buildSimpleError(message, location) {', '    return new peg$SyntaxError(message, null, null, location);', '  }', '', '  function peg$buildStructuredError(expected, found, location) {', '    return new peg$SyntaxError(', '      peg$SyntaxError.buildMessage(expected, found),', '      expected,', '      found,', '      location', '    );', '  }', ''].join('\n'));

      if (options.optimize === "size") {
        parts.push(indent2(generateInterpreter()));
        parts.push('');
      } else {
        arrays.each(ast.rules, function (rule) {
          parts.push(indent2(generateRuleFunction(rule)));
          parts.push('');
        });
      }

      if (ast.initializer) {
        parts.push(indent2(ast.initializer.code));
        parts.push('');
      }

      if (options.optimize === "size") {
        parts.push('  peg$result = peg$parseRule(peg$startRuleIndex);');
      } else {
        parts.push('  peg$result = peg$startRuleFunction();');
      }

      parts.push(['', '  if (peg$result !== peg$FAILED && peg$currPos === input.length) {', '    return peg$result;', '  } else {', '    if (peg$result !== peg$FAILED && peg$currPos < input.length) {', '      peg$fail(peg$endExpectation());', '    }', '', '    throw peg$buildStructuredError(', '      peg$maxFailExpected,', '      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,', '      peg$maxFailPos < input.length', '        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)', '        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)', '    );', '  }', '}'].join('\n'));
      return parts.join('\n');
    }

    function generateWrapper(toplevelCode) {
      function generateGeneratedByComment() {
        return ['/*', ' * Generated by PEG.js 0.10.0.', ' *', ' * http://pegjs.org/', ' */'].join('\n');
      }

      function generateParserObject() {
        return options.trace ? ['{', '  SyntaxError:   peg$SyntaxError,', '  DefaultTracer: peg$DefaultTracer,', '  parse:         peg$parse', '}'].join('\n') : ['{', '  SyntaxError: peg$SyntaxError,', '  parse:       peg$parse', '}'].join('\n');
      }

      var generators = {
        bare: function bare() {
          return [generateGeneratedByComment(), '(function() {', '  "use strict";', '', indent2(toplevelCode), '', indent2('return ' + generateParserObject() + ';'), '})()'].join('\n');
        },
        commonjs: function commonjs() {
          var parts = [],
              dependencyVars = objects.keys(options.dependencies),
              requires = arrays.map(dependencyVars, function (variable) {
            return variable + ' = require("' + js.stringEscape(options.dependencies[variable]) + '")';
          });
          parts.push([generateGeneratedByComment(), '', '"use strict";', ''].join('\n'));

          if (requires.length > 0) {
            parts.push('var ' + requires.join(', ') + ';');
            parts.push('');
          }

          parts.push([toplevelCode, '', 'module.exports = ' + generateParserObject() + ';', ''].join('\n'));
          return parts.join('\n');
        },
        amd: function amd() {
          var dependencyIds = objects.values(options.dependencies),
              dependencyVars = objects.keys(options.dependencies),
              dependencies = '[' + arrays.map(dependencyIds, function (id) {
            return '"' + js.stringEscape(id) + '"';
          }).join(', ') + ']',
              params = dependencyVars.join(', ');
          return [generateGeneratedByComment(), 'define(' + dependencies + ', function(' + params + ') {', '  "use strict";', '', indent2(toplevelCode), '', indent2('return ' + generateParserObject() + ';'), '});', ''].join('\n');
        },
        globals: function globals() {
          return [generateGeneratedByComment(), '(function(root) {', '  "use strict";', '', indent2(toplevelCode), '', indent2('root.' + options.exportVar + ' = ' + generateParserObject() + ';'), '})(this);', ''].join('\n');
        },
        umd: function umd() {
          var parts = [],
              dependencyIds = objects.values(options.dependencies),
              dependencyVars = objects.keys(options.dependencies),
              dependencies = '[' + arrays.map(dependencyIds, function (id) {
            return '"' + js.stringEscape(id) + '"';
          }).join(', ') + ']',
              requires = arrays.map(dependencyIds, function (id) {
            return 'require("' + js.stringEscape(id) + '")';
          }).join(', '),
              params = dependencyVars.join(', ');
          parts.push([generateGeneratedByComment(), '(function(root, factory) {', '  if (typeof define === "function" && define.amd) {', '    define(' + dependencies + ', factory);', '  } else if (typeof module === "object" && module.exports) {', '    module.exports = factory(' + requires + ');'].join('\n'));

          if (options.exportVar !== null) {
            parts.push(['  } else {', '    root.' + options.exportVar + ' = factory();'].join('\n'));
          }

          parts.push(['  }', '})(this, function(' + params + ') {', '  "use strict";', '', indent2(toplevelCode), '', indent2('return ' + generateParserObject() + ';'), '});', ''].join('\n'));
          return parts.join('\n');
        }
      };
      return generators[options.format]();
    }

    ast.code = generateWrapper(generateToplevel());
  }

  module.exports = generateJS;
},844,[827,828,835,842,843]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _patternReg = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var clipRules = {
    evenodd: 0,
    nonzero: 1
  };

  function _default(props) {
    var clipPath = props.clipPath,
        clipRule = props.clipRule;
    var clipPathProps = {};

    if (clipRule) {
      clipPathProps.clipRule = clipRules[clipRule] === 0 ? 0 : 1;
    }

    if (clipPath) {
      var matched = clipPath.match(_patternReg.default);

      if (matched) {
        clipPathProps.clipPath = matched[1];
      } else {
        console.warn('Invalid `clipPath` prop, expected a clipPath like `"#id"`, but got: "' + clipPath + '"');
      }
    }

    return clipPathProps;
  }
},845,[1,820]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var responderProps = [].concat((0, _toConsumableArray2.default)(Object.keys(_reactNative.PanResponder.create({}).panHandlers)), ["pointerEvents"]);
  var touchableProps = ["disabled", "onPress", "onPressIn", "onPressOut", "onLongPress", "delayPressIn", "delayPressOut", "delayLongPress"];

  function _default(props, ref) {
    var extractedProps = {};

    _lodash.default.forEach(responderProps, function (key) {
      var value = props[key];

      if (props[key]) {
        if (!extractedProps.responsible && key !== "pointerEvents") {
          extractedProps.responsible = true;
        }

        extractedProps[key] = value;
      }
    });

    _lodash.default.every(touchableProps, function (key) {
      if (!props[key]) {
        return true;
      }

      extractedProps.responsible = true;
      (0, _extends2.default)(extractedProps, {
        onStartShouldSetResponder: ref.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: ref.touchableHandleResponderTerminationRequest,
        onResponderGrant: ref.touchableHandleResponderGrant,
        onResponderMove: ref.touchableHandleResponderMove,
        onResponderRelease: ref.touchableHandleResponderRelease,
        onResponderTerminate: ref.touchableHandleResponderTerminate
      });
      return false;
    });

    return extractedProps;
  }
},846,[1,3,17,5,807]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(_args)));

      _this.setNativeProps = function () {
        var _this$root;

        (_this$root = _this.root).setNativeProps.apply(_this$root, arguments);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var cx = props.cx,
            cy = props.cy,
            r = props.r;
        return _react.default.createElement(RNSVGCircle, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, (0, _extractProps.default)(props, this), {
          cx: cx,
          cy: cy,
          r: r
        }));
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Circle";
  _default.defaultProps = {
    cx: 0,
    cy: 0,
    r: 0
  };
  var RNSVGCircle = (0, _reactNative.requireNativeComponent)("RNSVGCircle");
},847,[1,3,21,22,34,37,40,51,5,805,808]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(_args)));

      _this.setNativeProps = function () {
        var _this$root;

        (_this$root = _this.root).setNativeProps.apply(_this$root, arguments);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var cx = props.cx,
            cy = props.cy,
            rx = props.rx,
            ry = props.ry;
        return _react.default.createElement(RNSVGEllipse, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, (0, _extractProps.default)(props, this), {
          cx: cx,
          cy: cy,
          rx: rx,
          ry: ry
        }));
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Ellipse";
  _default.defaultProps = {
    cx: 0,
    cy: 0,
    rx: 0,
    ry: 0
  };
  var RNSVGEllipse = (0, _reactNative.requireNativeComponent)("RNSVGEllipse");
},848,[1,3,21,22,34,37,40,51,5,805,808]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _Path = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _extractPolyPoints = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        var points = props.points;

        if (points) {
          if (Array.isArray(points)) {
            points = points.join(",");
          }

          props.d = "M" + (0, _extractPolyPoints.default)(points);
        }

        _this.root.setNativeProps(props);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var points = props.points;

        if (Array.isArray(points)) {
          points = points.join(",");
        }

        return _react.default.createElement(_Path.default, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, props, {
          d: "M" + (0, _extractPolyPoints.default)(points) + "z"
        }));
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Polygon";
  _default.defaultProps = {
    points: ""
  };
},849,[1,3,21,22,34,37,40,51,804,850,805]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  function _default(polyPoints) {
    return polyPoints.replace(/[^e]-/, " -").split(/(?:\s+|\s*,\s*)/g).join(" ");
  }
},850,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _Path = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _extractPolyPoints = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        var points = props.points;

        if (points) {
          if (Array.isArray(points)) {
            points = points.join(",");
          }

          props.d = "M" + (0, _extractPolyPoints.default)(points);
        }

        _this.root.setNativeProps(props);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var points = props.points;

        if (Array.isArray(points)) {
          points = points.join(",");
        }

        return _react.default.createElement(_Path.default, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, this.props, {
          d: "M" + (0, _extractPolyPoints.default)(points)
        }));
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Polyline";
  _default.defaultProps = {
    points: ""
  };
},851,[1,3,21,22,34,37,40,51,804,850,805]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(_args)));

      _this.setNativeProps = function () {
        var _this$root;

        (_this$root = _this.root).setNativeProps.apply(_this$root, arguments);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var x1 = props.x1,
            y1 = props.y1,
            x2 = props.x2,
            y2 = props.y2;
        return _react.default.createElement(RNSVGLine, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, (0, _extractProps.default)(props, this), {
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2
        }));
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Line";
  _default.defaultProps = {
    x1: 0,
    y1: 0,
    x2: 0,
    y2: 0
  };
  var RNSVGLine = (0, _reactNative.requireNativeComponent)("RNSVGLine");
},852,[1,3,21,22,34,37,40,51,5,805,808]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _extractResponder = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _extractViewBox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _G = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var RNSVGSvgViewManager = _reactNative.NativeModules.RNSVGSvgViewManager;
  var id = 0;

  var styles = _reactNative.StyleSheet.create({
    svg: {
      backgroundColor: "transparent",
      borderWidth: 0
    }
  });

  var gProps = ["font", "transform", "fill", "fillOpacity", "fillRule", "stroke", "strokeWidth", "strokeOpacity", "strokeDasharray", "strokeDashoffset", "strokeLinecap", "strokeLinejoin", "strokeMiterlimit"];

  var Svg = function (_Shape) {
    (0, _inherits2.default)(Svg, _Shape);

    function Svg() {
      var _this;

      (0, _classCallCheck2.default)(this, Svg);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Svg).apply(this, arguments));

      _this.measureInWindow = function () {
        var _this$root;

        (_this$root = _this.root).measureInWindow.apply(_this$root, arguments);
      };

      _this.measure = function () {
        var _this$root2;

        (_this$root2 = _this.root).measure.apply(_this$root2, arguments);
      };

      _this.measureLayout = function () {
        var _this$root3;

        (_this$root3 = _this.root).measureLayout.apply(_this$root3, arguments);
      };

      _this.setNativeProps = function (props) {
        if (props.width) {
          props.bbWidth = "" + props.width;
        }

        if (props.height) {
          props.bbHeight = "" + props.height;
        }

        _this.root.setNativeProps(props);
      };

      _this.toDataURL = function (callback) {
        callback && RNSVGSvgViewManager.toDataURL((0, _reactNative.findNodeHandle)(_this.root), callback);
      };

      _this.id = ++id;
      return _this;
    }

    (0, _createClass2.default)(Svg, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
            opacity = _this$props.opacity,
            viewBox = _this$props.viewBox,
            preserveAspectRatio = _this$props.preserveAspectRatio,
            style = _this$props.style,
            children = _this$props.children,
            onLayout = _this$props.onLayout,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["opacity", "viewBox", "preserveAspectRatio", "style", "children", "onLayout"]);
        var stylesAndProps = (0, _objectSpread2.default)({}, style && style.length ? Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2.default)(style))) : style, props);
        var color = stylesAndProps.color,
            width = stylesAndProps.width,
            height = stylesAndProps.height;
        var dimensions;

        if (width && height) {
          dimensions = {
            width: width[width.length - 1] === "%" ? width : +width,
            height: height[height.length - 1] === "%" ? height : +height,
            flex: 0
          };
        }

        var w = "" + width;
        var h = "" + height;
        return _react.default.createElement(NativeSvgView, (0, _extends2.default)({}, props, {
          bbWidth: w,
          bbHeight: h,
          tintColor: color,
          onLayout: onLayout
        }, (0, _extractResponder.default)(props, this), (0, _extractViewBox.default)({
          viewBox: viewBox,
          preserveAspectRatio: preserveAspectRatio
        }), {
          ref: function ref(ele) {
            _this2.root = ele;
          },
          style: [styles.svg, style, !isNaN(+opacity) && {
            opacity: +opacity
          }, dimensions]
        }), _react.default.createElement(_G.default, (0, _extends2.default)({
          style: style
        }, _lodash.default.pick(stylesAndProps, gProps)), children));
      }
    }]);
    return Svg;
  }(_Shape2.default);

  Svg.displayName = "Svg";
  Svg.defaultProps = {
    preserveAspectRatio: "xMidYMid meet"
  };
  var NativeSvgView = (0, _reactNative.requireNativeComponent)("RNSVGSvgView");
  var _default = Svg;
  exports.default = _default;
},853,[1,3,17,48,9,21,22,34,37,40,51,5,846,854,805,855,807]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.alignEnum = exports.meetOrSliceTypes = undefined;
  var meetOrSliceTypes = {
    meet: 0,
    slice: 1,
    none: 2
  };
  exports.meetOrSliceTypes = meetOrSliceTypes;
  var alignEnum = ["xMinYMin", "xMidYMin", "xMaxYMin", "xMinYMid", "xMidYMid", "xMaxYMid", "xMinYMax", "xMidYMax", "xMaxYMax", "none"].reduce(function (prev, name) {
    prev[name] = name;
    return prev;
  }, {});
  exports.alignEnum = alignEnum;
  var spacesRegExp = /\s+/;

  function _default(props) {
    var viewBox = props.viewBox,
        preserveAspectRatio = props.preserveAspectRatio;

    if (!viewBox) {
      return null;
    }

    var params = viewBox.trim().split(spacesRegExp);

    if (params.length === 4 && params.some(function (param) {
      return isNaN(+param);
    })) {
      console.warn("Invalid `viewBox` prop:" + viewBox);
      return null;
    }

    var modes = preserveAspectRatio ? preserveAspectRatio.trim().split(spacesRegExp) : [];
    var meetOrSlice = meetOrSliceTypes[modes[1]] || 0;
    var align = alignEnum[modes[0]] || "xMidYMid";
    return {
      minX: +params[0],
      minY: +params[1],
      vbWidth: +params[2],
      vbHeight: +params[3],
      align: align,
      meetOrSlice: meetOrSlice
    };
  }
},854,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _extractText = _$$_REQUIRE(_dependencyMap[11]);

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        var matrix = !props.matrix && (0, _extractTransform.default)(props);

        if (matrix) {
          props.matrix = matrix;
        }

        _this.root.setNativeProps(props);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        return _react.default.createElement(RNSVGGroup, (0, _extends2.default)({}, (0, _extractProps.default)(props, this), {
          font: (0, _extractText.extractFont)(props),
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }), props.children);
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "G";
  var RNSVGGroup = (0, _reactNative.requireNativeComponent)("RNSVGGroup");
},855,[1,3,21,22,34,37,40,51,5,805,808,856,824]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.extractFont = extractFont;
  exports.default = _default;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4]));

  var _extractLengthList = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var fontRegExp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?[ptexm%])*(?:\s*\/.*?)?\s+)?\s*"?([^"]*)/i;
  var fontFamilyPrefix = /^[\s"']*/;
  var fontFamilySuffix = /[\s"']*$/;
  var commaReg = /\s*,\s*/g;
  var cachedFontObjectsFromString = {};

  function extractSingleFontFamily(fontFamilyString) {
    return fontFamilyString ? fontFamilyString.split(commaReg)[0].replace(fontFamilyPrefix, "").replace(fontFamilySuffix, "") : null;
  }

  function parseFontString(font) {
    if (cachedFontObjectsFromString.hasOwnProperty(font)) {
      return cachedFontObjectsFromString[font];
    }

    var match = fontRegExp.exec(font);

    if (!match) {
      return null;
    }

    var fontFamily = extractSingleFontFamily(match[3]);
    var fontSize = match[2] || "12";
    var isBold = /bold/.exec(match[1]);
    var isItalic = /italic/.exec(match[1]);
    var fontWeight = isBold ? "bold" : "normal";
    var fontStyle = isItalic ? "italic" : "normal";
    cachedFontObjectsFromString[font] = {
      fontSize: fontSize,
      fontFamily: fontFamily,
      fontWeight: fontWeight,
      fontStyle: fontStyle
    };
    return cachedFontObjectsFromString[font];
  }

  function extractFont(prop) {
    var props = (0, _objectSpread2.default)({}, prop.style, prop);
    var fontData = props.fontData,
        fontStyle = props.fontStyle,
        fontVariant = props.fontVariant,
        fontWeight = props.fontWeight,
        fontStretch = props.fontStretch,
        textAnchor = props.textAnchor,
        textDecoration = props.textDecoration,
        letterSpacing = props.letterSpacing,
        wordSpacing = props.wordSpacing,
        kerning = props.kerning,
        fontVariantLigatures = props.fontVariantLigatures,
        fontFeatureSettings = props.fontFeatureSettings;
    var fontSize = props.fontSize,
        fontFamily = props.fontFamily,
        font = props.font;
    fontFamily = extractSingleFontFamily(fontFamily);
    fontSize = fontSize ? "" + fontSize : null;

    var ownedFont = _lodash.default.pickBy({
      fontData: fontData,
      fontStyle: fontStyle,
      fontVariant: fontVariant,
      fontWeight: fontWeight,
      fontStretch: fontStretch,
      fontSize: fontSize,
      fontFamily: fontFamily,
      textAnchor: textAnchor,
      textDecoration: textDecoration,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      kerning: kerning,
      fontVariantLigatures: fontVariantLigatures,
      fontFeatureSettings: fontFeatureSettings
    }, function (p) {
      return !_lodash.default.isNil(p);
    });

    if (typeof font === "string") {
      font = parseFontString(font);
    }

    return _lodash.default.defaults(ownedFont, font);
  }

  function _default(props) {
    var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var TSpan = arguments.length > 2 ? arguments[2] : undefined;
    var x = props.x,
        y = props.y,
        dx = props.dx,
        dy = props.dy,
        rotate = props.rotate,
        baselineShift = props.baselineShift,
        verticalAlign = props.verticalAlign,
        alignmentBaseline = props.alignmentBaseline;
    var children = props.children;
    var content = null;

    if (typeof children === "string" || typeof children === "number") {
      var childrenString = children.toString();

      if (container) {
        children = _react.default.createElement(TSpan, null, childrenString);
      } else {
        content = childrenString;
        children = null;
      }
    } else if (_react.Children.count(children) > 1 || Array.isArray(children)) {
      children = _react.Children.map(children, function (child) {
        if (typeof child === "string" || typeof child === "number") {
          return _react.default.createElement(TSpan, null, child.toString());
        } else {
          return child;
        }
      });
    }

    return {
      content: content,
      children: children,
      baselineShift: baselineShift,
      verticalAlign: verticalAlign,
      alignmentBaseline: alignmentBaseline,
      font: extractFont(props),
      x: (0, _extractLengthList.default)(x),
      y: (0, _extractLengthList.default)(y),
      dx: (0, _extractLengthList.default)(dx),
      dy: (0, _extractLengthList.default)(dy),
      rotate: (0, _extractLengthList.default)(rotate)
    };
  }
},856,[366,1,48,807,51,823]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _extractText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var _TSpan = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15]));

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        var matrix = !props.matrix && (0, _extractTransform.default)(props);

        if (matrix) {
          props.matrix = matrix;
        }

        var text = _lodash.default.pickBy((0, _extractText.default)(props, true, _TSpan.default), function (p) {
          return !_lodash.default.isNil(p);
        });

        _this.root.setNativeProps((0, _objectSpread2.default)({}, props, text));
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        return _react.default.createElement(RNSVGText, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, (0, _extractProps.default)((0, _objectSpread2.default)({}, props, {
          x: null,
          y: null
        }), this), (0, _extractText.default)(props, true, _TSpan.default)));
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Text";
  var RNSVGText = (0, _reactNative.requireNativeComponent)("RNSVGText");
},857,[1,3,48,21,22,34,37,40,51,807,5,856,808,824,805,858]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _extractText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var TSpan = function (_Shape) {
    (0, _inherits2.default)(TSpan, _Shape);

    function TSpan() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TSpan);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TSpan)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        var matrix = !props.matrix && (0, _extractTransform.default)(props);

        if (matrix) {
          props.matrix = matrix;
        }

        var text = _lodash.default.pickBy((0, _extractText.default)(props, true, TSpan), function (p) {
          return !_lodash.default.isNil(p);
        });

        _this.root.setNativeProps((0, _objectSpread2.default)({}, props, text));
      };

      return _this;
    }

    (0, _createClass2.default)(TSpan, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        return _react.default.createElement(RNSVGTSpan, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, (0, _extractProps.default)((0, _objectSpread2.default)({}, props, {
          x: null,
          y: null
        }), this), (0, _extractText.default)(props, false, TSpan)));
      }
    }]);
    return TSpan;
  }(_Shape2.default);

  exports.default = TSpan;
  TSpan.displayName = "TSpan";
  var RNSVGTSpan = (0, _reactNative.requireNativeComponent)("RNSVGTSpan");
},858,[1,3,48,21,22,34,37,40,51,807,5,856,808,824,805]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _extractText = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _TSpan = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14]));

  var idExpReg = /^#(.+)$/;

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      (0, _classCallCheck2.default)(this, _default);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_default).apply(this, arguments));
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            href = _this$props.href,
            startOffset = _this$props.startOffset,
            method = _this$props.method,
            spacing = _this$props.spacing,
            side = _this$props.side,
            alignmentBaseline = _this$props.alignmentBaseline,
            midLine = _this$props.midLine,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["children", "href", "startOffset", "method", "spacing", "side", "alignmentBaseline", "midLine"]);
        var matched = href && href.match(idExpReg);
        var match = matched && matched[1];

        if (href && match) {
          return _react.default.createElement(RNSVGTextPath, (0, _extends2.default)({
            href: match,
            startOffset: startOffset || 0,
            method: method,
            spacing: spacing,
            side: side,
            alignmentBaseline: alignmentBaseline,
            midLine: midLine
          }, (0, _extractProps.default)((0, _objectSpread2.default)({}, props, {
            x: null,
            y: null
          }), this), (0, _extractText.default)({
            children: children
          }, true, _TSpan.default)));
        }

        console.warn('Invalid `href` prop for `TextPath` element, expected a href like `"#id"`, but got: "' + href + '"');
        return _react.default.createElement(_TSpan.default, null, children);
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "TextPath";
  var RNSVGTextPath = (0, _reactNative.requireNativeComponent)("RNSVGTextPath");
},859,[1,3,48,9,21,22,34,37,40,51,5,856,805,808,858]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var idExpReg = /^#(.+)$/;

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        _this.root.setNativeProps(props);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var children = props.children,
            width = props.width,
            height = props.height,
            href = props.href;
        var matched = href.match(idExpReg);
        var match = matched && matched[1];

        if (!match) {
          console.warn('Invalid `href` prop for `Use` element, expected a href like `"#id"`, but got: "' + href + '"');
        }

        return _react.default.createElement(RNSVGUse, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, (0, _extractProps.default)(props, this), {
          href: match,
          width: width,
          height: height
        }), children);
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Use";
  _default.defaultProps = {
    width: 0,
    height: 0
  };
  var RNSVGUse = (0, _reactNative.requireNativeComponent)("RNSVGUse");
},860,[1,3,21,22,34,37,40,51,5,808,805]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _Shape2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _extractViewBox = _$$_REQUIRE(_dependencyMap[11]);

  var _extractProps = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var spacesRegExp = /\s+/;

  var _default = function (_Shape) {
    (0, _inherits2.default)(_default, _Shape);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        _this.root.setNativeProps(props);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var preserveAspectRatio = props.preserveAspectRatio,
            x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            href = props.href;
        var modes = preserveAspectRatio.trim().split(spacesRegExp);
        var meetOrSlice = _extractViewBox.meetOrSliceTypes[modes[1]] || 0;
        var align = _extractViewBox.alignEnum[modes[0]] || "xMidYMid";
        return _react.default.createElement(RNSVGImage, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          }
        }, (0, _extractProps.default)((0, _objectSpread2.default)({}, props, {
          x: null,
          y: null
        }), this), {
          x: x,
          y: y,
          width: width,
          height: height,
          meetOrSlice: meetOrSlice,
          align: align,
          src: _reactNative.Image.resolveAssetSource(href)
        }));
      }
    }]);
    return _default;
  }(_Shape2.default);

  exports.default = _default;
  _default.displayName = "Image";
  _default.defaultProps = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    preserveAspectRatio: "xMidYMid meet"
  };
  var RNSVGImage = (0, _reactNative.requireNativeComponent)("RNSVGImage");
},861,[1,3,48,21,22,34,37,40,51,5,805,854,808]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _extractViewBox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _default = function (_Component) {
    (0, _inherits2.default)(_default, _Component);

    function _default() {
      (0, _classCallCheck2.default)(this, _default);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_default).apply(this, arguments));
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var id = props.id,
            children = props.children;
        return _react.default.createElement(RNSVGSymbol, (0, _extends2.default)({
          name: id
        }, (0, _extractViewBox.default)(props)), children);
      }
    }]);
    return _default;
  }(_react.Component);

  exports.default = _default;
  _default.displayName = "Symbol";
  var RNSVGSymbol = (0, _reactNative.requireNativeComponent)("RNSVGSymbol");
},862,[366,1,3,21,22,34,37,40,51,854,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _default = function (_Component) {
    (0, _inherits2.default)(_default, _Component);

    function _default() {
      (0, _classCallCheck2.default)(this, _default);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_default).apply(this, arguments));
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(RNSVGDefs, null, this.props.children);
      }
    }]);
    return _default;
  }(_react.Component);

  exports.default = _default;
  _default.displayName = "Defs";
  var RNSVGDefs = (0, _reactNative.requireNativeComponent)("RNSVGDefs");
},863,[366,1,21,22,34,37,40,51,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _extractGradient = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _default = function (_Component) {
    (0, _inherits2.default)(_default, _Component);

    function _default() {
      (0, _classCallCheck2.default)(this, _default);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_default).apply(this, arguments));
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var x1 = props.x1,
            y1 = props.y1,
            x2 = props.x2,
            y2 = props.y2;
        return _react.default.createElement(RNSVGLinearGradient, (0, _extends2.default)({
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2
        }, (0, _extractGradient.default)(props)));
      }
    }]);
    return _default;
  }(_react.Component);

  exports.default = _default;
  _default.displayName = "LinearGradient";
  _default.defaultProps = {
    x1: "0%",
    y1: "0%",
    x2: "100%",
    y2: "0%"
  };
  var RNSVGLinearGradient = (0, _reactNative.requireNativeComponent)("RNSVGLinearGradient");
},864,[366,1,3,21,22,34,37,40,51,865,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _react = _$$_REQUIRE(_dependencyMap[3]);

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _extractOpacity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var percentReg = /^([+\-]?\d+(?:\.\d+)?(?:[eE][+\-]?\d+)?)(%?)$/;

  function percentToFloat(percent) {
    if (typeof percent === 'number') {
      return percent;
    }

    var matched = percent.match(percentReg);

    if (!matched) {
      console.warn("`" + percent + "` is not a valid number or percentage string.");
      return 0;
    }

    return matched[2] ? matched[1] / 100 : +matched[1];
  }

  function _default(props) {
    if (!props.id) {
      return null;
    }

    var stops = {};

    _react.Children.forEach(props.children, function (_ref) {
      var _ref$props = _ref.props,
          offset = _ref$props.offset,
          stopColor = _ref$props.stopColor,
          stopOpacity = _ref$props.stopOpacity;
      offset = percentToFloat(offset);

      if (stopColor && !isNaN(offset)) {
        stops[offset] = (0, _color.default)(stopColor).alpha((0, _extractOpacity.default)(stopOpacity));
      }
    });

    var sorted = _lodash.default.sortBy(_lodash.default.map(stops, function (stop, offset) {
      return {
        stop: stop,
        offset: offset
      };
    }), "offset");

    var gradient = [];
    sorted.forEach(function (_ref2) {
      var stop = _ref2.stop;

      var _stop$rgb$array = stop.rgb().array(),
          _stop$rgb$array2 = (0, _slicedToArray2.default)(_stop$rgb$array, 4),
          r = _stop$rgb$array2[0],
          g = _stop$rgb$array2[1],
          b = _stop$rgb$array2[2],
          _stop$rgb$array2$ = _stop$rgb$array2[3],
          a = _stop$rgb$array2$ === undefined ? 1 : _stop$rgb$array2$;

      gradient.push(r / 255);
      gradient.push(g / 255);
      gradient.push(b / 255);
      gradient.push(a);
    });
    gradient.push.apply(gradient, (0, _toConsumableArray2.default)(sorted.map(function (_ref3) {
      var offset = _ref3.offset;
      return +offset;
    })));
    var gradientTransform;

    if (props.gradientTransform) {
      gradientTransform = (0, _extractTransform.default)(props.gradientTransform);
    } else if (props.transform) {
      gradientTransform = (0, _extractTransform.default)(props.transform);
    } else {
      gradientTransform = (0, _extractTransform.default)(props);
    }

    return {
      gradient: gradient,
      name: props.id,
      gradientTransform: gradientTransform,
      gradientUnits: _units.default[props.gradientUnits] || 0
    };
  }
},865,[1,17,11,51,807,811,821,824,866]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = {
    objectBoundingBox: 0,
    userSpaceOnUse: 1
  };
  exports.default = _default;
},866,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _extractGradient = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _default = function (_Component) {
    (0, _inherits2.default)(_default, _Component);

    function _default() {
      (0, _classCallCheck2.default)(this, _default);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_default).apply(this, arguments));
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var props = this.props;
        var fx = props.fx,
            fy = props.fy,
            rx = props.rx,
            ry = props.ry,
            r = props.r,
            cx = props.cx,
            cy = props.cy;
        return _react.default.createElement(RNSVGRadialGradient, (0, _extends2.default)({
          fx: fx,
          fy: fy,
          rx: rx || r,
          ry: ry || r,
          cx: cx,
          cy: cy
        }, (0, _extractGradient.default)(props)));
      }
    }]);
    return _default;
  }(_react.Component);

  exports.default = _default;
  _default.displayName = "RadialGradient";
  _default.defaultProps = {
    fx: "50%",
    fy: "50%",
    cx: "50%",
    cy: "50%",
    r: "50%"
  };
  var RNSVGRadialGradient = (0, _reactNative.requireNativeComponent)("RNSVGRadialGradient");
},867,[366,1,3,21,22,34,37,40,51,865,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _$$_REQUIRE(_dependencyMap[6]);

  var _default = function (_Component) {
    (0, _inherits2.default)(_default, _Component);

    function _default() {
      (0, _classCallCheck2.default)(this, _default);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_default).apply(this, arguments));
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return _default;
  }(_react.Component);

  exports.default = _default;
  _default.displayName = "Stop";
  _default.defaultProps = {
    stopColor: "#000",
    stopOpacity: 1
  };
},868,[1,21,22,34,37,40,51]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _extractClipPath = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _default = function (_Component) {
    (0, _inherits2.default)(_default, _Component);

    function _default() {
      (0, _classCallCheck2.default)(this, _default);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_default).apply(this, arguments));
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            id = _this$props.id,
            children = _this$props.children;
        return _react.default.createElement(RNSVGClipPath, (0, _extends2.default)({
          name: id
        }, (0, _extractClipPath.default)(this.props)), children);
      }
    }]);
    return _default;
  }(_react.Component);

  exports.default = _default;
  _default.displayName = "ClipPath";
  var RNSVGClipPath = (0, _reactNative.requireNativeComponent)("RNSVGClipPath");
},869,[366,1,3,21,22,34,37,40,51,5,845]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _extractViewBox = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _default = function (_Component) {
    (0, _inherits2.default)(_default, _Component);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        _this.root.setNativeProps(props);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var patternTransform = props.patternTransform,
            transform = props.transform,
            id = props.id,
            x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            patternUnits = props.patternUnits,
            patternContentUnits = props.patternContentUnits,
            children = props.children,
            viewBox = props.viewBox,
            preserveAspectRatio = props.preserveAspectRatio;
        var extractedTransform;

        if (patternTransform) {
          extractedTransform = (0, _extractTransform.default)(patternTransform);
        } else if (transform) {
          extractedTransform = (0, _extractTransform.default)(transform);
        } else {
          extractedTransform = (0, _extractTransform.default)(props);
        }

        return _react.default.createElement(RNSVGPattern, (0, _extends2.default)({
          ref: function ref(ele) {
            _this2.root = ele;
          },
          name: id,
          x: x,
          y: y,
          width: width,
          height: height,
          matrix: extractedTransform,
          patternTransform: extractedTransform,
          patternUnits: _units.default[patternUnits] || 0,
          patternContentUnits: patternContentUnits ? _units.default[patternContentUnits] : 1
        }, (0, _extractViewBox.default)({
          viewBox: viewBox,
          preserveAspectRatio: preserveAspectRatio
        })), children);
      }
    }]);
    return _default;
  }(_react.Component);

  exports.default = _default;
  _default.displayName = "Pattern";
  var RNSVGPattern = (0, _reactNative.requireNativeComponent)("RNSVGPattern");
},870,[366,1,3,21,22,34,37,40,51,5,866,824,854]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[8]);

  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _default = function (_Component) {
    (0, _inherits2.default)(_default, _Component);

    function _default() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _default);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this.setNativeProps = function (props) {
        _this.root.setNativeProps(props);
      };

      return _this;
    }

    (0, _createClass2.default)(_default, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var props = this.props;
        var maskTransform = props.maskTransform,
            transform = props.transform,
            id = props.id,
            x = props.x,
            y = props.y,
            width = props.width,
            height = props.height,
            maskUnits = props.maskUnits,
            maskContentUnits = props.maskContentUnits,
            children = props.children;
        var extractedTransform;

        if (maskTransform) {
          extractedTransform = (0, _extractTransform.default)(maskTransform);
        } else if (transform) {
          extractedTransform = (0, _extractTransform.default)(transform);
        } else {
          extractedTransform = (0, _extractTransform.default)(props);
        }

        return _react.default.createElement(RNSVGMask, {
          ref: function ref(ele) {
            _this2.root = ele;
          },
          name: id,
          x: x,
          y: y,
          width: width,
          height: height,
          matrix: extractedTransform,
          maskTransform: extractedTransform,
          maskUnits: maskUnits !== undefined ? _units.default[maskUnits] : 0,
          maskContentUnits: maskContentUnits !== undefined ? _units.default[maskContentUnits] : 1
        }, children);
      }
    }]);
    return _default;
  }(_react.Component);

  exports.default = _default;
  _default.displayName = "Mask";
  var RNSVGMask = (0, _reactNative.requireNativeComponent)("RNSVGMask");
},871,[366,1,21,22,34,37,40,51,5,866,824]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.reload = reload;
  exports.reloadFromCache = reloadFromCache;
  exports.checkForUpdateAsync = checkForUpdateAsync;
  exports.fetchUpdateAsync = fetchUpdateAsync;
  exports.addListener = addListener;
  exports.EventType = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _expoErrors = _$$_REQUIRE(_dependencyMap[2]);

  var _fbemitter = _$$_REQUIRE(_dependencyMap[3]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _ExponentUpdates = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  function reload() {
    return _regenerator.default.async(function reload$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(_ExponentUpdates.default.reload());

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function reloadFromCache() {
    return _regenerator.default.async(function reloadFromCache$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(_ExponentUpdates.default.reloadFromCache());

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }

  function checkForUpdateAsync() {
    var result, returnObj;
    return _regenerator.default.async(function checkForUpdateAsync$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (_ExponentUpdates.default.checkForUpdateAsync) {
              _context3.next = 2;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Updates', 'checkForUpdateAsync');

          case 2:
            _context3.next = 4;
            return _regenerator.default.awrap(_ExponentUpdates.default.checkForUpdateAsync());

          case 4:
            result = _context3.sent;
            returnObj = {
              isAvailable: !!result
            };

            if (result) {
              returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;
            }

            return _context3.abrupt("return", returnObj);

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, null, this);
  }

  function fetchUpdateAsync() {
    var _ref,
        eventListener,
        subscription,
        result,
        returnObj,
        _args4 = arguments;

    return _regenerator.default.async(function fetchUpdateAsync$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, eventListener = _ref.eventListener;

            if (_ExponentUpdates.default.fetchUpdateAsync) {
              _context4.next = 3;
              break;
            }

            throw new _expoErrors.UnavailabilityError('Updates', 'fetchUpdateAsync');

          case 3:
            if (eventListener && typeof eventListener === 'function') {
              subscription = addListener(eventListener);
            }

            _context4.prev = 4;
            _context4.next = 7;
            return _regenerator.default.awrap(_ExponentUpdates.default.fetchUpdateAsync());

          case 7:
            result = _context4.sent;

          case 8:
            _context4.prev = 8;
            subscription && subscription.remove();
            return _context4.finish(8);

          case 11:
            returnObj = {
              isNew: !!result
            };

            if (result) {
              returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;
            }

            return _context4.abrupt("return", returnObj);

          case 14:
          case "end":
            return _context4.stop();
        }
      }
    }, null, this, [[4,, 8, 11]]);
  }

  var _emitter;

  function _getEmitter() {
    if (!_emitter) {
      _emitter = new _fbemitter.EventEmitter();

      _reactNative.DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);
    }

    return _emitter;
  }

  function _emitEvent(params) {
    var newParams = params;

    if (typeof params === 'string') {
      newParams = JSON.parse(params);
    }

    if (newParams.manifestString) {
      newParams.manifest = JSON.parse(newParams.manifestString);
      delete newParams.manifestString;
    }

    if (!_emitter) {
      throw new Error("EventEmitter must be initialized to use from its listener");
    }

    _emitter.emit('Exponent.updatesEvent', newParams);
  }

  function addListener(listener) {
    var emitter = _getEmitter();

    return emitter.addListener('Exponent.updatesEvent', listener);
  }

  var EventType = {
    DOWNLOAD_STARTED: 'downloadStart',
    DOWNLOAD_PROGRESS: 'downloadProgress',
    DOWNLOAD_FINISHED: 'downloadFinished',
    NO_UPDATE_AVAILABLE: 'noUpdateAvailable',
    ERROR: 'error'
  };
  exports.EventType = EventType;
},872,[1,130,368,343,5,873]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _default = _reactNative.NativeModules.ExponentUpdates;
  exports.default = _default;
},873,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addNewVersionListenerExperimental = addNewVersionListenerExperimental;

  var _fbemitter = _$$_REQUIRE(_dependencyMap[0]);

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _emitter;

  function _getEmitter() {
    if (!_emitter) {
      _emitter = new _fbemitter.EventEmitter();

      _reactNative.DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitNewVersionAvailable);
    }

    return _emitter;
  }

  function _emitNewVersionAvailable(newVersionEvent) {
    if (typeof newVersionEvent === 'string') {
      newVersionEvent = JSON.parse(newVersionEvent);
    }

    if (newVersionEvent.type === 'downloadFinished') {
      if (newVersionEvent.manifestString && typeof newVersionEvent.manifestString === 'string') {
        newVersionEvent.manifest = JSON.parse(newVersionEvent.manifestString);
        delete newVersionEvent.manifestString;
      }

      delete newVersionEvent.type;

      if (!_emitter) {
        throw new Error("EventEmitter must be initialized to use from its listener");
      }

      _emitter.emit('newVersionAvailable', newVersionEvent);
    }
  }

  function addNewVersionListenerExperimental(listener) {
    console.warn('Util.addNewVersionListenerExperimental is deprecated and will be removed in SDK 31, use Updates.addListener instead');

    var emitter = _getEmitter();

    return emitter.addListener('newVersionAvailable', listener);
  }
},874,[343,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = apisAreAvailable;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  function apisAreAvailable() {
    return !!_reactNative.NativeModules.ExponentConstants;
  }
},875,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = takeSnapshotAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNativeViewShot = _$$_REQUIRE(_dependencyMap[2]);

  function takeSnapshotAsync(node, options) {
    return _regenerator.default.async(function takeSnapshotAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(typeof node === 'object' && 'current' in node && node.current)) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", (0, _reactNativeViewShot.captureRef)(node.current, options));

          case 2:
            return _context.abrupt("return", (0, _reactNativeViewShot.captureRef)(node, options));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},876,[1,130,877]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.captureRef = captureRef;
  exports.releaseCapture = releaseCapture;
  exports.captureScreen = captureScreen;
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf3 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _assertThisInitialized2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var RNViewShot = _reactNative.NativeModules.RNViewShot;
  var neverEndingPromise = new Promise(function () {});

  if (!RNViewShot) {
    console.warn("NativeModules.RNViewShot is undefined. Make sure the library is linked on the native side.");
  }

  var acceptedFormats = ["png", "jpg"].concat(_reactNative.Platform.OS === "android" ? ["webm", "raw"] : []);
  var acceptedResults = ["tmpfile", "base64", "data-uri"].concat(_reactNative.Platform.OS === "android" ? ["zip-base64"] : []);
  var defaultOptions = {
    format: "png",
    quality: 1,
    result: "tmpfile",
    snapshotContentContainer: false
  };

  function validateOptions(options) {
    options = (0, _objectSpread2.default)({}, defaultOptions, options);
    var errors = [];

    if ("width" in options && (typeof options.width !== "number" || options.width <= 0)) {
      errors.push("option width should be a positive number");
      delete options.width;
    }

    if ("height" in options && (typeof options.height !== "number" || options.height <= 0)) {
      errors.push("option height should be a positive number");
      delete options.height;
    }

    if (typeof options.quality !== "number" || options.quality < 0 || options.quality > 1) {
      errors.push("option quality should be a number between 0.0 and 1.0");
      options.quality = defaultOptions.quality;
    }

    if (typeof options.snapshotContentContainer !== "boolean") {
      errors.push("option snapshotContentContainer should be a boolean");
    }

    if (acceptedFormats.indexOf(options.format) === -1) {
      options.format = defaultOptions.format;
      errors.push("option format '" + options.format + "' is not in valid formats: " + acceptedFormats.join(" | "));
    }

    if (acceptedResults.indexOf(options.result) === -1) {
      options.result = defaultOptions.result;
      errors.push("option result '" + options.result + "' is not in valid formats: " + acceptedResults.join(" | "));
    }

    return {
      options: options,
      errors: errors
    };
  }

  function captureRef(view, optionsObject) {
    if (typeof view !== "number") {
      var node = (0, _reactNative.findNodeHandle)(view);
      if (!node) return Promise.reject(new Error("findNodeHandle failed to resolve view=" + String(view)));
      view = node;
    }

    var _validateOptions = validateOptions(optionsObject),
        options = _validateOptions.options,
        errors = _validateOptions.errors;

    return RNViewShot.captureRef(view, options);
  }

  function releaseCapture(uri) {
    if (typeof uri !== "string") {} else {
      RNViewShot.releaseCapture(uri);
    }
  }

  function captureScreen(optionsObject) {
    var _validateOptions2 = validateOptions(optionsObject),
        options = _validateOptions2.options,
        errors = _validateOptions2.errors;

    return RNViewShot.captureScreen(options);
  }

  var ViewShot = function (_Component) {
    (0, _inherits2.default)(ViewShot, _Component);

    function ViewShot() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, ViewShot);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ViewShot)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.firstLayoutPromise = new Promise(function (resolve) {
        _this.resolveFirstLayout = resolve;
      });

      _this.capture = function () {
        return _this.firstLayoutPromise.then(function () {
          var _assertThisInitialize = (0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)),
              root = _assertThisInitialize.root;

          if (!root) return neverEndingPromise;
          return captureRef(root, _this.props.options);
        }).then(function (uri) {
          _this.onCapture(uri);

          return uri;
        }, function (e) {
          _this.onCaptureFailure(e);

          throw e;
        });
      };

      _this.onCapture = function (uri) {
        if (!_this.root) return;

        if (_this.lastCapturedURI) {
          setTimeout(releaseCapture, 500, _this.lastCapturedURI);
        }

        _this.lastCapturedURI = uri;
        var onCapture = _this.props.onCapture;
        if (onCapture) onCapture(uri);
      };

      _this.onCaptureFailure = function (e) {
        if (!_this.root) return;
        var onCaptureFailure = _this.props.onCaptureFailure;
        if (onCaptureFailure) onCaptureFailure(e);
      };

      _this.syncCaptureLoop = function (captureMode) {
        cancelAnimationFrame(_this._raf);

        if (captureMode === "continuous") {
          var previousCaptureURI = "-";

          var loop = function loop() {
            _this._raf = requestAnimationFrame(loop);
            if (previousCaptureURI === _this.lastCapturedURI) return;
            previousCaptureURI = _this.lastCapturedURI;

            _this.capture();
          };

          _this._raf = requestAnimationFrame(loop);
        }
      };

      _this.onRef = function (ref) {
        _this.root = ref;
      };

      _this.onLayout = function (e) {
        var onLayout = _this.props.onLayout;

        _this.resolveFirstLayout(e.nativeEvent.layout);

        if (onLayout) onLayout(e);
      };

      return _this;
    }

    (0, _createClass2.default)(ViewShot, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.props.captureMode === "mount") {
          this.capture();
        } else {
          this.syncCaptureLoop(this.props.captureMode);
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (nextProps.captureMode !== this.props.captureMode) {
          this.syncCaptureLoop(nextProps.captureMode);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.props.captureMode === "update") {
          this.capture();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.syncCaptureLoop(null);
      }
    }, {
      key: "render",
      value: function render() {
        var children = this.props.children;
        return _react.default.createElement(_reactNative.View, {
          ref: this.onRef,
          collapsable: false,
          onLayout: this.onLayout,
          style: this.props.style
        }, children);
      }
    }]);
    return ViewShot;
  }(_react.Component);

  exports.default = ViewShot;
  ViewShot.captureRef = captureRef;
  ViewShot.releaseCapture = releaseCapture;
},877,[366,1,21,22,34,37,40,36,48,51,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS: true,
    INTERRUPTION_MODE_IOS_DO_NOT_MIX: true,
    INTERRUPTION_MODE_IOS_DUCK_OTHERS: true,
    INTERRUPTION_MODE_ANDROID_DO_NOT_MIX: true,
    INTERRUPTION_MODE_ANDROID_DUCK_OTHERS: true,
    setAudioModeAsync: true,
    setIsEnabledAsync: true
  };
  exports.setAudioModeAsync = setAudioModeAsync;
  Object.defineProperty(exports, "setIsEnabledAsync", {
    enumerable: true,
    get: function get() {
      return _AudioAvailability.setIsEnabledAsync;
    }
  });
  exports.INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = exports.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = exports.INTERRUPTION_MODE_IOS_DUCK_OTHERS = exports.INTERRUPTION_MODE_IOS_DO_NOT_MIX = exports.INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var _Recording = _$$_REQUIRE(_dependencyMap[3]);

  Object.keys(_Recording).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Recording[key];
      }
    });
  });

  var _Sound = _$$_REQUIRE(_dependencyMap[4]);

  Object.keys(_Sound).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function get() {
        return _Sound[key];
      }
    });
  });

  var _AudioAvailability = _$$_REQUIRE(_dependencyMap[5]);

  var INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = 0;
  exports.INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS = INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS;
  var INTERRUPTION_MODE_IOS_DO_NOT_MIX = 1;
  exports.INTERRUPTION_MODE_IOS_DO_NOT_MIX = INTERRUPTION_MODE_IOS_DO_NOT_MIX;
  var INTERRUPTION_MODE_IOS_DUCK_OTHERS = 2;
  exports.INTERRUPTION_MODE_IOS_DUCK_OTHERS = INTERRUPTION_MODE_IOS_DUCK_OTHERS;
  var INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = 1;
  exports.INTERRUPTION_MODE_ANDROID_DO_NOT_MIX = INTERRUPTION_MODE_ANDROID_DO_NOT_MIX;
  var INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = 2;
  exports.INTERRUPTION_MODE_ANDROID_DUCK_OTHERS = INTERRUPTION_MODE_ANDROID_DUCK_OTHERS;

  var _isValueValid = function _isValueValid(value, validValues) {
    return validValues.filter(function (validValue) {
      return validValue === value;
    }).length > 0;
  };

  var _findMissingKeys = function _findMissingKeys(object, requiredKeys) {
    return requiredKeys.filter(function (requiredKey) {
      return !(requiredKey in object);
    });
  };

  function setAudioModeAsync(mode) {
    var missingKeys;
    return _regenerator.default.async(function setAudioModeAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            missingKeys = _findMissingKeys(mode, ['allowsRecordingIOS', 'interruptionModeIOS', 'playsInSilentModeIOS', 'interruptionModeAndroid', 'shouldDuckAndroid', 'playThroughEarpieceAndroid']);

            if (!(missingKeys.length > 0)) {
              _context.next = 3;
              break;
            }

            throw new Error("Audio mode attempted to be set without the required keys: " + JSON.stringify(missingKeys));

          case 3:
            if (_isValueValid(mode.interruptionModeIOS, [INTERRUPTION_MODE_IOS_MIX_WITH_OTHERS, INTERRUPTION_MODE_IOS_DO_NOT_MIX, INTERRUPTION_MODE_IOS_DUCK_OTHERS])) {
              _context.next = 5;
              break;
            }

            throw new Error("\"interruptionModeIOS\" was set to an invalid value.");

          case 5:
            if (_isValueValid(mode.interruptionModeAndroid, [INTERRUPTION_MODE_ANDROID_DO_NOT_MIX, INTERRUPTION_MODE_ANDROID_DUCK_OTHERS])) {
              _context.next = 7;
              break;
            }

            throw new Error("\"interruptionModeAndroid\" was set to an invalid value.");

          case 7:
            if (!(typeof mode.allowsRecordingIOS !== 'boolean' || typeof mode.playsInSilentModeIOS !== 'boolean' || typeof mode.shouldDuckAndroid !== 'boolean' || typeof mode.playThroughEarpieceAndroid !== 'boolean')) {
              _context.next = 9;
              break;
            }

            throw new Error('"allowsRecordingIOS", "playsInSilentModeIOS", "playThroughEarpieceAndroid", and "shouldDuckAndroid" must be booleans.');

          case 9:
            _context.next = 11;
            return _regenerator.default.awrap(_reactNative.NativeModules.ExponentAV.setAudioMode(mode));

          case 11:
            return _context.abrupt("return", _context.sent);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},878,[1,130,5,879,882,881]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Recording = exports.RECORDING_OPTIONS_PRESET_LOW_QUALITY = exports.RECORDING_OPTIONS_PRESET_HIGH_QUALITY = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[5]);

  var _AV = _$$_REQUIRE(_dependencyMap[6]);

  var _AudioAvailability = _$$_REQUIRE(_dependencyMap[7]);

  var _Sound = _$$_REQUIRE(_dependencyMap[8]);

  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;
  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;
  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;
  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;
  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;
  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;
  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;
  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';
  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;
  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;
  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;
  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;
  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;
  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;
  exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;
  exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;
  exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;
  exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE;
  var RECORDING_OPTIONS_PRESET_HIGH_QUALITY = {
    android: {
      extension: '.m4a',
      outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,
      audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000
    },
    ios: {
      extension: '.caf',
      audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000,
      linearPCMBitDepth: 16,
      linearPCMIsBigEndian: false,
      linearPCMIsFloat: false
    }
  };
  exports.RECORDING_OPTIONS_PRESET_HIGH_QUALITY = RECORDING_OPTIONS_PRESET_HIGH_QUALITY;
  var RECORDING_OPTIONS_PRESET_LOW_QUALITY = {
    android: {
      extension: '.3gp',
      outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,
      audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000
    },
    ios: {
      extension: '.caf',
      audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000,
      linearPCMBitDepth: 16,
      linearPCMIsBigEndian: false,
      linearPCMIsFloat: false
    }
  };
  exports.RECORDING_OPTIONS_PRESET_LOW_QUALITY = RECORDING_OPTIONS_PRESET_LOW_QUALITY;
  var _recorderExists = false;

  var Recording = function () {
    function Recording() {
      var _this = this;

      (0, _classCallCheck2.default)(this, Recording);
      this._canRecord = false;
      this._isDoneRecording = false;
      this._finalDurationMillis = 0;
      this._uri = null;
      this._onRecordingStatusUpdate = null;
      this._progressUpdateTimeoutVariable = null;
      this._progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;
      this._options = null;

      this._cleanupForUnloadedRecorder = function _callee(finalStatus) {
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this._canRecord = false;
                _this._isDoneRecording = true;
                _this._finalDurationMillis = finalStatus.durationMillis;
                _recorderExists = false;

                if (_reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording) {
                  _reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording(null);
                }

                _this._disablePolling();

                _context.next = 8;
                return _regenerator.default.awrap(_this.getStatusAsync());

              case 8:
                return _context.abrupt("return", _context.sent);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      };

      this._pollingLoop = function _callee2() {
        return _regenerator.default.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!((0, _AudioAvailability.isAudioEnabled)() && _this._canRecord && _this._onRecordingStatusUpdate != null)) {
                  _context2.next = 10;
                  break;
                }

                _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);
                _context2.prev = 2;
                _context2.next = 5;
                return _regenerator.default.awrap(_this.getStatusAsync());

              case 5:
                _context2.next = 10;
                break;

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](2);

                _this._disablePolling();

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this, [[2, 7]]);
      };

      this.getStatusAsync = function _callee3() {
        var status;
        return _regenerator.default.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!_this._canRecord) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", _this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.getAudioRecordingStatus();
                }));

              case 2:
                status = {
                  canRecord: false,
                  isRecording: false,
                  isDoneRecording: _this._isDoneRecording,
                  durationMillis: _this._finalDurationMillis
                };

                _this._callOnRecordingStatusUpdateForNewStatus(status);

                return _context3.abrupt("return", status);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      };
    }

    (0, _createClass2.default)(Recording, [{
      key: "_disablePolling",
      value: function _disablePolling() {
        if (this._progressUpdateTimeoutVariable != null) {
          clearTimeout(this._progressUpdateTimeoutVariable);
          this._progressUpdateTimeoutVariable = null;
        }
      }
    }, {
      key: "_enablePollingIfNecessaryAndPossible",
      value: function _enablePollingIfNecessaryAndPossible() {
        if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {
          this._disablePolling();

          this._pollingLoop();
        }
      }
    }, {
      key: "_callOnRecordingStatusUpdateForNewStatus",
      value: function _callOnRecordingStatusUpdateForNewStatus(status) {
        if (this._onRecordingStatusUpdate != null) {
          this._onRecordingStatusUpdate(status);
        }
      }
    }, {
      key: "_performOperationAndHandleStatusAsync",
      value: function _performOperationAndHandleStatusAsync(operation) {
        var status;
        return _regenerator.default.async(function _performOperationAndHandleStatusAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _AudioAvailability.throwIfAudioIsDisabled)();

                if (!this._canRecord) {
                  _context4.next = 9;
                  break;
                }

                _context4.next = 4;
                return _regenerator.default.awrap(operation());

              case 4:
                status = _context4.sent;

                this._callOnRecordingStatusUpdateForNewStatus(status);

                return _context4.abrupt("return", status);

              case 9:
                throw new Error('Cannot complete operation because this recorder is not ready to record.');

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "setOnRecordingStatusUpdate",
      value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {
        this._onRecordingStatusUpdate = onRecordingStatusUpdate;

        if (onRecordingStatusUpdate == null) {
          this._disablePolling();
        } else {
          this._enablePollingIfNecessaryAndPossible();
        }

        this.getStatusAsync();
      }
    }, {
      key: "setProgressUpdateInterval",
      value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {
        this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;
        this.getStatusAsync();
      }
    }, {
      key: "prepareToRecordAsync",
      value: function prepareToRecordAsync() {
        var options,
            extensionRegex,
            _ref,
            uri,
            status,
            currentStatus,
            _args5 = arguments;

        return _regenerator.default.async(function prepareToRecordAsync$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;
                (0, _AudioAvailability.throwIfAudioIsDisabled)();

                if (!_recorderExists) {
                  _context5.next = 4;
                  break;
                }

                throw new Error('Only one Recording object can be prepared at a given time.');

              case 4:
                if (!this._isDoneRecording) {
                  _context5.next = 6;
                  break;
                }

                throw new Error('This Recording object is done recording; you must make a new one.');

              case 6:
                if (!(!options || !options.android || !options.ios)) {
                  _context5.next = 8;
                  break;
                }

                throw new Error('You must provide recording options for android and ios in order to prepare to record.');

              case 8:
                extensionRegex = /^\.\w+$/;

                if (!(!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension))) {
                  _context5.next = 11;
                  break;
                }

                throw new Error("Your file extensions must match " + extensionRegex.toString() + ".");

              case 11:
                if (this._canRecord) {
                  _context5.next = 28;
                  break;
                }

                if (_reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording) {
                  _reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording(this._cleanupForUnloadedRecorder);
                }

                _context5.next = 15;
                return _regenerator.default.awrap(_reactNative.NativeModules.ExponentAV.prepareAudioRecorder(options));

              case 15:
                _ref = _context5.sent;
                uri = _ref.uri;
                status = _ref.status;
                _recorderExists = true;
                this._uri = uri;
                this._options = options;
                this._canRecord = true;
                currentStatus = (0, _objectSpread2.default)({}, status, {
                  canRecord: true
                });

                this._callOnRecordingStatusUpdateForNewStatus(currentStatus);

                this._enablePollingIfNecessaryAndPossible();

                return _context5.abrupt("return", currentStatus);

              case 28:
                throw new Error('This Recording object is already prepared to record.');

              case 29:
              case "end":
                return _context5.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "startAsync",
      value: function startAsync() {
        return _regenerator.default.async(function startAsync$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.startAudioRecording();
                }));

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "pauseAsync",
      value: function pauseAsync() {
        return _regenerator.default.async(function pauseAsync$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.pauseAudioRecording();
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "stopAndUnloadAsync",
      value: function stopAndUnloadAsync() {
        var finalStatus;
        return _regenerator.default.async(function stopAndUnloadAsync$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (this._canRecord) {
                  _context8.next = 6;
                  break;
                }

                if (!this._isDoneRecording) {
                  _context8.next = 5;
                  break;
                }

                throw new Error('Cannot unload a Recording that has already been unloaded.');

              case 5:
                throw new Error('Cannot unload a Recording that has not been prepared.');

              case 6:
                _context8.next = 8;
                return _regenerator.default.awrap(_reactNative.NativeModules.ExponentAV.stopAudioRecording());

              case 8:
                finalStatus = _context8.sent;
                _context8.next = 11;
                return _regenerator.default.awrap(_reactNative.NativeModules.ExponentAV.unloadAudioRecorder());

              case 11:
                return _context8.abrupt("return", this._cleanupForUnloadedRecorder(finalStatus));

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "getURI",
      value: function getURI() {
        return this._uri;
      }
    }, {
      key: "createNewLoadedSound",
      value: function createNewLoadedSound() {
        var initialStatus,
            onPlaybackStatusUpdate,
            _args9 = arguments;
        return _regenerator.default.async(function createNewLoadedSound$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                initialStatus = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
                onPlaybackStatusUpdate = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : null;
                console.warn("createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name");
                return _context9.abrupt("return", this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate));

              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "createNewLoadedSoundAsync",
      value: function createNewLoadedSoundAsync() {
        var initialStatus,
            onPlaybackStatusUpdate,
            _args10 = arguments;
        return _regenerator.default.async(function createNewLoadedSoundAsync$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                initialStatus = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
                onPlaybackStatusUpdate = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : null;

                if (!(this._uri == null || !this._isDoneRecording)) {
                  _context10.next = 4;
                  break;
                }

                throw new Error('Cannot create sound when the Recording has not finished!');

              case 4:
                return _context10.abrupt("return", _Sound.Sound.createAsync({
                  uri: this._uri
                }, initialStatus, onPlaybackStatusUpdate, false));

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, null, this);
      }
    }]);
    return Recording;
  }();

  exports.Recording = Recording;
},879,[1,48,130,21,22,5,880,881,882]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getNativeSourceFromSource = getNativeSourceFromSource;
  exports.assertStatusValuesInBounds = assertStatusValuesInBounds;
  exports.getNativeSourceAndFullInitialStatusForLoadAsync = getNativeSourceAndFullInitialStatusForLoadAsync;
  exports.getUnloadedStatus = getUnloadedStatus;
  exports.PlaybackMixin = exports._DEFAULT_INITIAL_PLAYBACK_STATUS = exports._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _expoAsset = _$$_REQUIRE(_dependencyMap[3]);

  var _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = 500;
  exports._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;
  var _DEFAULT_INITIAL_PLAYBACK_STATUS = {
    positionMillis: 0,
    progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,
    shouldPlay: false,
    rate: 1.0,
    shouldCorrectPitch: false,
    volume: 1.0,
    isMuted: false,
    isLooping: false
  };
  exports._DEFAULT_INITIAL_PLAYBACK_STATUS = _DEFAULT_INITIAL_PLAYBACK_STATUS;

  function getNativeSourceFromSource(source) {
    var uri = null;
    var overridingExtension = null;
    var headers;

    var asset = _getAssetFromPlaybackSource(source);

    if (asset != null) {
      uri = asset.localUri || asset.uri;
    } else if (source != null && typeof source !== 'number' && 'uri' in source && typeof source.uri === 'string') {
      uri = source.uri;
    }

    if (uri == null) {
      return null;
    }

    if (source != null && typeof source !== 'number' && 'overrideFileExtensionAndroid' in source && typeof source.overrideFileExtensionAndroid === 'string') {
      overridingExtension = source.overrideFileExtensionAndroid;
    }

    if (source != null && typeof source !== 'number' && 'headers' in source && typeof source.headers === 'object') {
      headers = source.headers;
    }

    return {
      uri: uri,
      overridingExtension: overridingExtension,
      headers: headers
    };
  }

  function _getAssetFromPlaybackSource(source) {
    if (source == null) {
      return null;
    }

    var asset = null;

    if (typeof source === 'number') {
      asset = _expoAsset.Asset.fromModule(source);
    } else if (source instanceof _expoAsset.Asset) {
      asset = source;
    }

    return asset;
  }

  function assertStatusValuesInBounds(status) {
    if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {
      throw new RangeError('Rate value must be between 0.0 and 32.0');
    }

    if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {
      throw new RangeError('Volume value must be between 0.0 and 1.0');
    }
  }

  function getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst) {
    var asset, nativeSource, fullInitialStatus;
    return _regenerator.default.async(function getNativeSourceAndFullInitialStatusForLoadAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            asset = _getAssetFromPlaybackSource(source);

            if (!(downloadFirst && asset)) {
              _context.next = 4;
              break;
            }

            _context.next = 4;
            return _regenerator.default.awrap(asset.downloadAsync());

          case 4:
            nativeSource = getNativeSourceFromSource(source);

            if (!(nativeSource === null)) {
              _context.next = 7;
              break;
            }

            throw new Error("Cannot load an AV asset from a null playback source");

          case 7:
            fullInitialStatus = initialStatus == null ? _DEFAULT_INITIAL_PLAYBACK_STATUS : (0, _objectSpread2.default)({}, _DEFAULT_INITIAL_PLAYBACK_STATUS, initialStatus);
            assertStatusValuesInBounds(fullInitialStatus);
            return _context.abrupt("return", {
              nativeSource: nativeSource,
              fullInitialStatus: fullInitialStatus
            });

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function getUnloadedStatus() {
    var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return (0, _objectSpread2.default)({
      isLoaded: false
    }, error ? {
      error: error
    } : null);
  }

  var PlaybackMixin = {
    playAsync: function playAsync() {
      return _regenerator.default.async(function playAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.setStatusAsync({
                shouldPlay: true
              }));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    },
    playFromPositionAsync: function playFromPositionAsync(positionMillis) {
      var tolerances,
          _args3 = arguments;
      return _regenerator.default.async(function playFromPositionAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              tolerances = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
              return _context3.abrupt("return", this.setStatusAsync({
                positionMillis: positionMillis,
                shouldPlay: true,
                seekMillisToleranceAfter: tolerances.toleranceMillisAfter,
                seekMillisToleranceBefore: tolerances.toleranceMillisBefore
              }));

            case 2:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    },
    pauseAsync: function pauseAsync() {
      return _regenerator.default.async(function pauseAsync$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this.setStatusAsync({
                shouldPlay: false
              }));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    },
    stopAsync: function stopAsync() {
      return _regenerator.default.async(function stopAsync$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", this.setStatusAsync({
                positionMillis: 0,
                shouldPlay: false
              }));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    },
    setPositionAsync: function setPositionAsync(positionMillis) {
      var tolerances,
          _args6 = arguments;
      return _regenerator.default.async(function setPositionAsync$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              tolerances = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
              return _context6.abrupt("return", this.setStatusAsync({
                positionMillis: positionMillis,
                seekMillisToleranceAfter: tolerances.toleranceMillisAfter,
                seekMillisToleranceBefore: tolerances.toleranceMillisBefore
              }));

            case 2:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    },
    setRateAsync: function setRateAsync(rate, shouldCorrectPitch) {
      return _regenerator.default.async(function setRateAsync$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", this.setStatusAsync({
                rate: rate,
                shouldCorrectPitch: shouldCorrectPitch
              }));

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    },
    setVolumeAsync: function setVolumeAsync(volume) {
      return _regenerator.default.async(function setVolumeAsync$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt("return", this.setStatusAsync({
                volume: volume
              }));

            case 1:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    },
    setIsMutedAsync: function setIsMutedAsync(isMuted) {
      return _regenerator.default.async(function setIsMutedAsync$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", this.setStatusAsync({
                isMuted: isMuted
              }));

            case 1:
            case "end":
              return _context9.stop();
          }
        }
      }, null, this);
    },
    setIsLoopingAsync: function setIsLoopingAsync(isLooping) {
      return _regenerator.default.async(function setIsLoopingAsync$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", this.setStatusAsync({
                isLooping: isLooping
              }));

            case 1:
            case "end":
              return _context10.stop();
          }
        }
      }, null, this);
    },
    setProgressUpdateIntervalAsync: function setProgressUpdateIntervalAsync(progressUpdateIntervalMillis) {
      return _regenerator.default.async(function setProgressUpdateIntervalAsync$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", this.setStatusAsync({
                progressUpdateIntervalMillis: progressUpdateIntervalMillis
              }));

            case 1:
            case "end":
              return _context11.stop();
          }
        }
      }, null, this);
    }
  };
  exports.PlaybackMixin = PlaybackMixin;
},880,[1,130,48,378]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isAudioEnabled = isAudioEnabled;
  exports.throwIfAudioIsDisabled = throwIfAudioIsDisabled;
  exports.setIsEnabledAsync = setIsEnabledAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2]);

  var ExponentAV = _reactNative.NativeModules.ExponentAV;
  var _enabled = true;

  function isAudioEnabled() {
    return _enabled;
  }

  function throwIfAudioIsDisabled() {
    if (!_enabled) {
      throw new Error('Cannot complete operation because audio is not enabled.');
    }
  }

  function setIsEnabledAsync(value) {
    return _regenerator.default.async(function setIsEnabledAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _enabled = value;
            _context.next = 3;
            return _regenerator.default.awrap(ExponentAV.setAudioIsEnabled(value));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }
},881,[1,130,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Sound = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[6]);

  var _AudioAvailability = _$$_REQUIRE(_dependencyMap[7]);

  var _AV = _$$_REQUIRE(_dependencyMap[8]);

  var Sound = function () {
    function Sound() {
      var _this = this;

      (0, _classCallCheck2.default)(this, Sound);
      this._loaded = false;
      this._loading = false;
      this._key = -1;
      this._lastStatusUpdate = null;
      this._lastStatusUpdateTime = null;
      this._subscriptions = [];
      this._eventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.ExponentAV);
      this._coalesceStatusUpdatesInMillis = 100;
      this._onPlaybackStatusUpdate = null;

      this._internalStatusUpdateCallback = function (_ref) {
        var key = _ref.key,
            status = _ref.status;

        if (_this._key === key) {
          _this._callOnPlaybackStatusUpdateForNewStatus(status);
        }
      };

      this._errorCallback = function (error) {
        _this._clearSubscriptions();

        _this._loaded = false;
        _this._key = -1;

        _this._callOnPlaybackStatusUpdateForNewStatus((0, _AV.getUnloadedStatus)(error));
      };

      this.getStatusAsync = function _callee() {
        var status;
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this._loaded) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", _this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.getStatusForSound(_this._key);
                }));

              case 2:
                status = (0, _AV.getUnloadedStatus)();

                _this._callOnPlaybackStatusUpdateForNewStatus(status);

                return _context.abrupt("return", status);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      };
    }

    (0, _createClass2.default)(Sound, [{
      key: "_callOnPlaybackStatusUpdateForNewStatus",
      value: function _callOnPlaybackStatusUpdateForNewStatus(status) {
        var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;

        if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {
          this._onPlaybackStatusUpdate(status);

          this._lastStatusUpdateTime = new Date();
          this._lastStatusUpdate = JSON.stringify(status);
        }
      }
    }, {
      key: "_performOperationAndHandleStatusAsync",
      value: function _performOperationAndHandleStatusAsync(operation) {
        var status;
        return _regenerator.default.async(function _performOperationAndHandleStatusAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _AudioAvailability.throwIfAudioIsDisabled)();

                if (!this._loaded) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 4;
                return _regenerator.default.awrap(operation());

              case 4:
                status = _context2.sent;

                this._callOnPlaybackStatusUpdateForNewStatus(status);

                return _context2.abrupt("return", status);

              case 9:
                throw new Error('Cannot complete operation because sound is not loaded.');

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "_subscribeToNativeStatusUpdateEvents",
      value: function _subscribeToNativeStatusUpdateEvents() {
        if (this._loaded) {
          this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "setOnPlaybackStatusUpdate",
      value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {
        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;
        this.getStatusAsync();
      }
    }, {
      key: "loadAsync",
      value: function loadAsync(source) {
        var _this2 = this;

        var initialStatus,
            downloadFirst,
            _ref2,
            nativeSource,
            fullInitialStatus,
            _args3 = arguments;

        return _regenerator.default.async(function loadAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                initialStatus = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                downloadFirst = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;
                (0, _AudioAvailability.throwIfAudioIsDisabled)();

                if (!this._loading) {
                  _context3.next = 5;
                  break;
                }

                throw new Error('The Sound is already loading.');

              case 5:
                if (this._loaded) {
                  _context3.next = 15;
                  break;
                }

                this._loading = true;
                _context3.next = 9;
                return _regenerator.default.awrap((0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst));

              case 9:
                _ref2 = _context3.sent;
                nativeSource = _ref2.nativeSource;
                fullInitialStatus = _ref2.fullInitialStatus;
                return _context3.abrupt("return", new Promise(function (resolve, reject) {
                  var loadSuccess = function loadSuccess(key, status) {
                    _this2._key = key;
                    _this2._loaded = true;
                    _this2._loading = false;

                    _reactNative.NativeModules.ExponentAV.setErrorCallbackForSound(_this2._key, _this2._errorCallback);

                    _this2._subscribeToNativeStatusUpdateEvents();

                    _this2._callOnPlaybackStatusUpdateForNewStatus(status);

                    resolve(status);
                  };

                  var loadError = function loadError(error) {
                    _this2._loading = false;
                    reject(new Error(error));
                  };

                  _reactNative.NativeModules.ExponentAV.loadForSound(nativeSource, fullInitialStatus, loadSuccess, loadError);
                }));

              case 15:
                throw new Error('The Sound is already loaded.');

              case 16:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "unloadAsync",
      value: function unloadAsync() {
        var key, status;
        return _regenerator.default.async(function unloadAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!this._loaded) {
                  _context4.next = 12;
                  break;
                }

                this._loaded = false;
                key = this._key;
                this._key = -1;
                _context4.next = 6;
                return _regenerator.default.awrap(_reactNative.NativeModules.ExponentAV.unloadForSound(key));

              case 6:
                status = _context4.sent;

                this._callOnPlaybackStatusUpdateForNewStatus(status);

                this._clearSubscriptions();

                return _context4.abrupt("return", status);

              case 12:
                return _context4.abrupt("return", this.getStatusAsync());

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "setStatusAsync",
      value: function setStatusAsync(status) {
        var _this3 = this;

        return _regenerator.default.async(function setStatusAsync$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _AV.assertStatusValuesInBounds)(status);
                return _context5.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.setStatusForSound(_this3._key, status);
                }));

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "replayAsync",
      value: function replayAsync() {
        var _this4 = this;

        var status,
            _args6 = arguments;
        return _regenerator.default.async(function replayAsync$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                status = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};

                if (!(status.positionMillis && status.positionMillis !== 0)) {
                  _context6.next = 3;
                  break;
                }

                throw new Error('Requested position after replay has to be 0.');

              case 3:
                return _context6.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.replaySound(_this4._key, (0, _objectSpread2.default)({}, status, {
                    positionMillis: 0,
                    shouldPlay: true
                  }));
                }));

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, null, this);
      }
    }]);
    return Sound;
  }();

  exports.Sound = Sound;

  Sound.create = function _callee2(source) {
    var initialStatus,
        onPlaybackStatusUpdate,
        downloadFirst,
        _args7 = arguments;
    return _regenerator.default.async(function _callee2$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};
            onPlaybackStatusUpdate = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : null;
            downloadFirst = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : true;
            console.warn("Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name");
            return _context7.abrupt("return", Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst));

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, null, this);
  };

  Sound.createAsync = function _callee3(source) {
    var initialStatus,
        onPlaybackStatusUpdate,
        downloadFirst,
        sound,
        status,
        _args8 = arguments;
    return _regenerator.default.async(function _callee3$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            initialStatus = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
            onPlaybackStatusUpdate = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : null;
            downloadFirst = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : true;
            sound = new Sound();
            sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);
            _context8.next = 7;
            return _regenerator.default.awrap(sound.loadAsync(source, initialStatus, downloadFirst));

          case 7:
            status = _context8.sent;
            return _context8.abrupt("return", {
              sound: sound,
              status: status
            });

          case 9:
          case "end":
            return _context8.stop();
        }
      }
    }, null, this);
  };

  (0, _extends2.default)(Sound.prototype, _AV.PlaybackMixin);
},882,[1,3,48,130,21,22,5,881,880]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[13]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[14]);

  var _AV = _$$_REQUIRE(_dependencyMap[15]);

  var ResizeMode;

  (function (ResizeMode) {
    ResizeMode["CONTAIN"] = "contain";
    ResizeMode["COVER"] = "cover";
    ResizeMode["STRETCH"] = "stretch";
  })(ResizeMode || (ResizeMode = {}));

  var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;
  exports.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;
  var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;
  exports.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;
  var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;
  exports.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;
  var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;
  exports.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;
  var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;
  exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;
  var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;
  exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;
  var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;
  exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;
  var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;
  exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;

  var _STYLES = _reactNative.StyleSheet.create({
    base: {
      overflow: 'hidden'
    },
    poster: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      resizeMode: 'contain'
    },
    video: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    }
  });

  var ExpoVideoManagerConstants = _reactNative.NativeModules.UIManager.ExponentVideo ? _reactNative.NativeModules.UIManager.ExponentVideo.Constants : _reactNative.NativeModules.ExponentVideoManager;

  var Video = function (_React$Component) {
    (0, _inherits2.default)(Video, _React$Component);

    function Video(props) {
      var _this;

      (0, _classCallCheck2.default)(this, Video);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Video).call(this, props));
      _this._nativeRef = React.createRef();

      _this._handleNewStatus = function (status) {
        if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {
          _this.setState({
            showPoster: false
          });
        }

        if (_this.props.onPlaybackStatusUpdate) {
          _this.props.onPlaybackStatusUpdate(status);
        }
      };

      _this._performOperationAndHandleStatusAsync = function _callee(operation) {
        var video, handle, status;
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                video = _this._nativeRef.current;

                if (video) {
                  _context.next = 3;
                  break;
                }

                throw new Error("Cannot complete operation because the Video component has not yet loaded");

              case 3:
                handle = (0, _reactNative.findNodeHandle)(_this._nativeRef.current);
                _context.next = 6;
                return _regenerator.default.awrap(operation(handle));

              case 6:
                status = _context.sent;

                _this._handleNewStatus(status);

                return _context.abrupt("return", status);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      };

      _this._setFullscreen = function _callee2(value) {
        return _regenerator.default.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentVideoManager.setFullscreen(tag, value);
                }));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      };

      _this.presentFullscreenPlayer = function _callee3() {
        return _regenerator.default.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", _this._setFullscreen(true));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      };

      _this.presentIOSFullscreenPlayer = function () {
        console.warn("You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.");
        return _this.presentFullscreenPlayer();
      };

      _this.presentFullscreenPlayerAsync = function () {
        return _this._performOperationAndHandleStatusAsync(function (tag) {
          return _reactNative.NativeModules.ExponentAV.presentFullscreenPlayer(tag);
        });
      };

      _this.dismissFullscreenPlayer = function _callee4() {
        return _regenerator.default.async(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", _this._setFullscreen(false));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      };

      _this.dismissIOSFullscreenPlayer = function () {
        console.warn("You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.");

        _this.dismissFullscreenPlayer();
      };

      _this.getStatusAsync = function _callee5() {
        return _regenerator.default.async(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.getStatusForVideo(tag);
                }));

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, null, this);
      };

      _this.loadAsync = function _callee6(source) {
        var initialStatus,
            downloadFirst,
            _ref,
            nativeSource,
            fullInitialStatus,
            _args6 = arguments;

        return _regenerator.default.async(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                initialStatus = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
                downloadFirst = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : true;
                _context6.next = 4;
                return _regenerator.default.awrap((0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst));

              case 4:
                _ref = _context6.sent;
                nativeSource = _ref.nativeSource;
                fullInitialStatus = _ref.fullInitialStatus;
                return _context6.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);
                }));

              case 8:
              case "end":
                return _context6.stop();
            }
          }
        }, null, this);
      };

      _this.unloadAsync = function _callee7() {
        return _regenerator.default.async(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.unloadForVideo(tag);
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, null, this);
      };

      _this.setStatusAsync = function _callee8(status) {
        return _regenerator.default.async(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                (0, _AV.assertStatusValuesInBounds)(status);
                return _context8.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.setStatusForVideo(tag, status);
                }));

              case 2:
              case "end":
                return _context8.stop();
            }
          }
        }, null, this);
      };

      _this.replayAsync = function _callee9() {
        var status,
            _args9 = arguments;
        return _regenerator.default.async(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                status = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};

                if (!(status.positionMillis && status.positionMillis !== 0)) {
                  _context9.next = 3;
                  break;
                }

                throw new Error('Requested position after replay has to be 0.');

              case 3:
                return _context9.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.replayVideo(tag, (0, _objectSpread2.default)({}, status, {
                    positionMillis: 0,
                    shouldPlay: true
                  }));
                }));

              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, null, this);
      };

      _this._nativeOnPlaybackStatusUpdate = function (event) {
        _this._handleNewStatus(event.nativeEvent);
      };

      _this._nativeOnLoadStart = function () {
        if (_this.props.onLoadStart) {
          _this.props.onLoadStart();
        }
      };

      _this._nativeOnLoad = function (event) {
        if (_this.props.onLoad) {
          _this.props.onLoad(event.nativeEvent);
        }

        _this._handleNewStatus(event.nativeEvent);
      };

      _this._nativeOnError = function (event) {
        var error = event.nativeEvent.error;

        if (_this.props.onError) {
          _this.props.onError(error);
        }

        _this._handleNewStatus((0, _AV.getUnloadedStatus)(error));
      };

      _this._nativeOnReadyForDisplay = function (event) {
        if (_this.props.onReadyForDisplay) {
          _this.props.onReadyForDisplay(event.nativeEvent);
        }
      };

      _this._nativeOnFullscreenUpdate = function (event) {
        if (_this.props.onIOSFullscreenUpdate && _this.props.onFullscreenUpdate) {
          console.warn("You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.");
        } else if (_this.props.onIOSFullscreenUpdate) {
          console.warn("You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.");
        }

        if (_this.props.onIOSFullscreenUpdate) {
          _this.props.onIOSFullscreenUpdate(event.nativeEvent);
        }

        if (_this.props.onFullscreenUpdate) {
          _this.props.onFullscreenUpdate(event.nativeEvent);
        }
      };

      _this._renderPoster = function () {
        return _this.props.usePoster && _this.state.showPoster ? React.createElement(_reactNative.Image, {
          style: _STYLES.poster,
          source: _this.props.posterSource
        }) : null;
      };

      _this.state = {
        showPoster: !!props.usePoster
      };
      return _this;
    }

    (0, _createClass2.default)(Video, [{
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        var nativeVideo = (0, _nullthrows.default)(this._nativeRef.current);
        nativeVideo.setNativeProps(nativeProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var source = (0, _AV.getNativeSourceFromSource)(this.props.source);
        var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;

        if (this.props.resizeMode) {
          var resizeMode = this.props.resizeMode;

          if (resizeMode === ResizeMode.STRETCH) {
            nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;
          } else if (resizeMode === ResizeMode.CONTAIN) {
            nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;
          } else if (resizeMode === ResizeMode.COVER) {
            nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;
          }
        }

        var status = (0, _objectSpread2.default)({}, this.props.status);
        ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {
          if (prop in _this2.props) {
            status[prop] = _this2.props[prop];
          }
        });
        var nativeProps = (0, _objectSpread2.default)({
          style: _STYLES.base
        }, (0, _lodash.default)(this.props, 'source'), {
          source: source,
          nativeResizeMode: nativeResizeMode,
          status: status,
          onStatusUpdateNative: this._nativeOnPlaybackStatusUpdate,
          onLoadStartNative: this._nativeOnLoadStart,
          onLoadNative: this._nativeOnLoad,
          onErrorNative: this._nativeOnError,
          onReadyForDisplayNative: this._nativeOnReadyForDisplay,
          onFullscreenUpdateNative: this._nativeOnFullscreenUpdate
        });
        return React.createElement(_reactNative.View, {
          style: nativeProps.style,
          pointerEvents: "box-none"
        }, React.createElement(ExponentVideo, (0, _extends2.default)({
          ref: this._nativeRef
        }, nativeProps, {
          style: _STYLES.video
        })), this._renderPoster());
      }
    }]);
    return Video;
  }(React.Component);

  exports.default = Video;
  Video.RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;
  Video.RESIZE_MODE_COVER = ResizeMode.COVER;
  Video.RESIZE_MODE_STRETCH = ResizeMode.STRETCH;
  Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;
  Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;
  Video.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;
  Video.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;
  Video.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;
  Video.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;
  Video.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;
  Video.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;
  Video.propTypes = (0, _objectSpread2.default)({
    source: _propTypes.default.oneOfType([_propTypes.default.shape({
      uri: _propTypes.default.string,
      overrideFileExtensionAndroid: _propTypes.default.string
    }), _propTypes.default.number]),
    posterSource: _propTypes.default.oneOfType([_propTypes.default.shape({
      uri: _propTypes.default.string
    }), _propTypes.default.number]),
    onPlaybackStatusUpdate: _propTypes.default.func,
    onLoadStart: _propTypes.default.func,
    onLoad: _propTypes.default.func,
    onError: _propTypes.default.func,
    onIOSFullscreenUpdate: _propTypes.default.func,
    onFullscreenUpdate: _propTypes.default.func,
    onReadyForDisplay: _propTypes.default.func,
    useNativeControls: _propTypes.default.bool,
    resizeMode: _propTypes.default.string,
    usePoster: _propTypes.default.bool,
    status: _propTypes.default.shape({
      progressUpdateIntervalMillis: _propTypes.default.number,
      positionMillis: _propTypes.default.number,
      shouldPlay: _propTypes.default.bool,
      rate: _propTypes.default.number,
      shouldCorrectPitch: _propTypes.default.bool,
      volume: _propTypes.default.number,
      isMuted: _propTypes.default.bool,
      isLooping: _propTypes.default.bool
    }),
    progressUpdateIntervalMillis: _propTypes.default.number,
    positionMillis: _propTypes.default.number,
    shouldPlay: _propTypes.default.bool,
    rate: _propTypes.default.number,
    shouldCorrectPitch: _propTypes.default.bool,
    volume: _propTypes.default.number,
    isMuted: _propTypes.default.bool,
    isLooping: _propTypes.default.bool,
    scaleX: _propTypes.default.number,
    scaleY: _propTypes.default.number,
    translateX: _propTypes.default.number,
    translateY: _propTypes.default.number,
    rotation: _propTypes.default.number
  }, _reactNative.ViewPropTypes);
  (0, _extends2.default)(Video.prototype, _AV.PlaybackMixin);
  var ExponentVideo = (0, _reactNative.requireNativeComponent)('ExponentVideo');
},883,[366,1,3,48,130,21,22,34,37,40,337,884,65,51,5,880]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }

    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1;
    throw error;
  }

  module.exports = nullthrows;
  module.exports.default = nullthrows;
  Object.defineProperty(module.exports, '__esModule', {
    value: true
  });
},884,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[11]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[12]);

  var BlurView = function (_React$Component) {
    (0, _inherits2.default)(BlurView, _React$Component);

    function BlurView() {
      (0, _classCallCheck2.default)(this, BlurView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BlurView).apply(this, arguments));
    }

    (0, _createClass2.default)(BlurView, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            style = _this$props.style,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["style"]);
        return React.createElement(NativeBlurView, (0, _extends2.default)({}, props, {
          style: [style, {
            backgroundColor: 'transparent'
          }]
        }));
      }
    }]);
    return BlurView;
  }(React.Component);

  exports.default = BlurView;
  BlurView.propTypes = (0, _objectSpread2.default)({}, _reactNative.ViewPropTypes, {
    tint: _propTypes.default.oneOf(['light', 'default', 'dark']).isRequired,
    intensity: _propTypes.default.number.isRequired
  });
  BlurView.defaultProps = {
    tint: 'default',
    intensity: 50
  };
  var NativeBlurView = (0, _reactNative.requireNativeComponent)('ExponentBlurView');
},885,[366,1,48,3,9,21,22,34,37,40,65,51,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _propTypes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _NativeLinearGradient = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var LinearGradient = function (_React$Component) {
    (0, _inherits2.default)(LinearGradient, _React$Component);

    function LinearGradient() {
      (0, _classCallCheck2.default)(this, LinearGradient);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LinearGradient).apply(this, arguments));
    }

    (0, _createClass2.default)(LinearGradient, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            colors = _this$props.colors,
            locations = _this$props.locations,
            start = _this$props.start,
            end = _this$props.end,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["colors", "locations", "start", "end"]);

        if (locations && colors.length !== locations.length) {
          console.warn('LinearGradient colors and locations props should be arrays of the same length');
          locations = locations.slice(0, colors.length);
        }

        return _react.default.createElement(_NativeLinearGradient.default, (0, _extends2.default)({}, props, {
          colors: colors.map(_reactNative.processColor),
          locations: locations,
          startPoint: start ? _normalizePoint(start) : undefined,
          endPoint: end ? _normalizePoint(end) : undefined
        }));
      }
    }]);
    return LinearGradient;
  }(_react.default.Component);

  exports.default = LinearGradient;
  LinearGradient.propTypes = (0, _objectSpread2.default)({}, _reactNative.ViewPropTypes, {
    colors: _propTypes.default.arrayOf(_reactNative.ColorPropType).isRequired,
    locations: _propTypes.default.arrayOf(_propTypes.default.number),
    start: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.object]),
    end: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.object])
  });

  function _normalizePoint(point) {
    return Array.isArray(point) ? point : [point.x, point.y];
  }
},886,[1,48,3,9,21,22,34,37,40,65,51,5,887]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var NativeLinearGradient = function (_React$PureComponent) {
    (0, _inherits2.default)(NativeLinearGradient, _React$PureComponent);

    function NativeLinearGradient() {
      (0, _classCallCheck2.default)(this, NativeLinearGradient);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NativeLinearGradient).apply(this, arguments));
    }

    (0, _createClass2.default)(NativeLinearGradient, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(BaseNativeLinearGradient, this.props);
      }
    }]);
    return NativeLinearGradient;
  }(_react.default.PureComponent);

  exports.default = NativeLinearGradient;
  var BaseNativeLinearGradient = (0, _reactNative.requireNativeComponent)('ExponentLinearGradient');
},887,[1,21,22,34,37,40,51,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "withNativeAd", {
    enumerable: true,
    get: function get() {
      return _withNativeAd.default;
    }
  });
  Object.defineProperty(exports, "AdMediaView", {
    enumerable: true,
    get: function get() {
      return _AdMediaView.default;
    }
  });
  Object.defineProperty(exports, "AdIconView", {
    enumerable: true,
    get: function get() {
      return _AdIconView.default;
    }
  });
  Object.defineProperty(exports, "AdTriggerView", {
    enumerable: true,
    get: function get() {
      return _AdTriggerView.default;
    }
  });
  Object.defineProperty(exports, "AdSettings", {
    enumerable: true,
    get: function get() {
      return _AdSettings.default;
    }
  });
  Object.defineProperty(exports, "NativeAdsManager", {
    enumerable: true,
    get: function get() {
      return _NativeAdsManager.default;
    }
  });
  Object.defineProperty(exports, "InterstitialAdManager", {
    enumerable: true,
    get: function get() {
      return _InterstitialAdManager.default;
    }
  });
  Object.defineProperty(exports, "BannerAd", {
    enumerable: true,
    get: function get() {
      return _BannerAd.default;
    }
  });

  var _withNativeAd = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _AdMediaView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _AdIconView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _AdTriggerView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _AdSettings = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _NativeAdsManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _InterstitialAdManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _BannerAd = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  Object.defineProperties(exports, {
    MediaView: {
      get: function get() {
        console.warn("MediaView has been renamed to AdMediaView and will be removed in SDK 33; update the import in your code");
        return _$$_REQUIRE(_dependencyMap[2]).default;
      }
    },
    TriggerableView: {
      get: function get() {
        console.warn("TriggerableView has been renamed to AdTriggerView and will be removed in SDK 33; update the import in your code");
        return _$$_REQUIRE(_dependencyMap[4]).default;
      }
    }
  });
},888,[1,889,891,892,893,894,890,895,896]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = withNativeAd;
  exports.AdTriggerViewContext = exports.AdMediaViewContext = exports.AdIconViewContext = undefined;

  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[11]);

  var _NativeAdsManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  function withNativeAd(Component) {
    return function (_React$Component) {
      (0, _inherits2.default)(NativeAdContainer, _React$Component);

      function NativeAdContainer(props) {
        var _this;

        (0, _classCallCheck2.default)(this, NativeAdContainer);
        _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NativeAdContainer).call(this, props));
        _this._subscription = null;
        _this._nativeAdViewRef = _react.default.createRef();
        _this._adMediaViewNodeHandle = null;
        _this._adIconViewNodeHandle = null;
        _this._interactiveTriggerNodeHandles = new Map();

        _this._handleAdLoaded = function (_ref) {
          var ad = _ref.nativeEvent;

          _this.setState({
            ad: ad
          }, function () {
            if (_this.props.onAdLoaded) {
              var _ad = (0, _nullthrows.default)(_this.state.ad);

              _this.props.onAdLoaded(_ad);
            }
          });
        };

        _this._adMediaViewContextValue = {
          nativeRef: function nativeRef(component) {
            if (component) {
              _this._setAdNodeHandles({
                adMediaViewNodeHandle: (0, _nullthrows.default)((0, _reactNative.findNodeHandle)(component))
              });
            } else {
              _this._setAdNodeHandles({
                adMediaViewNodeHandle: null
              });
            }
          }
        };
        _this._adIconViewContextValue = {
          nativeRef: function nativeRef(component) {
            if (component) {
              _this._setAdNodeHandles({
                adIconViewNodeHandle: (0, _nullthrows.default)((0, _reactNative.findNodeHandle)(component))
              });
            } else {
              _this._setAdNodeHandles({
                adIconViewNodeHandle: null
              });
            }
          }
        };
        _this._adTriggerViewContextValue = {
          registerComponent: function registerComponent(component) {
            var nodeHandle = (0, _nullthrows.default)((0, _reactNative.findNodeHandle)(component));
            var interactiveTriggerNodeHandles = new Map(_this._interactiveTriggerNodeHandles);
            interactiveTriggerNodeHandles.set(component, nodeHandle);

            _this._setAdNodeHandles({
              interactiveTriggerNodeHandles: interactiveTriggerNodeHandles
            });
          },
          unregisterComponent: function unregisterComponent(component) {
            var interactiveTriggerNodeHandles = new Map(_this._interactiveTriggerNodeHandles);
            interactiveTriggerNodeHandles.delete(component);

            _this._setAdNodeHandles({
              interactiveTriggerNodeHandles: interactiveTriggerNodeHandles
            });
          },
          onTriggerAd: function onTriggerAd() {
            if (_this._adMediaViewNodeHandle !== null && _reactNative.Platform.OS === 'android') {
              var nodeHandle = (0, _reactNative.findNodeHandle)(_this._nativeAdViewRef.current);

              _NativeAdsManager.default.triggerEvent(nodeHandle);
            }
          }
        };
        _this.state = {
          ad: null,
          canRequestAds: props.adsManager.isValid
        };
        return _this;
      }

      (0, _createClass2.default)(NativeAdContainer, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          if (!this.state.canRequestAds) {
            this._subscription = this.props.adsManager.onAdsLoaded(function () {
              _this2.setState({
                canRequestAds: true
              });
            });
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this._subscription) {
            this._subscription.remove();

            this._subscription = null;
          }
        }
      }, {
        key: "render",
        value: function render() {
          if (!this.state.canRequestAds) {
            return null;
          }

          var adsManager = this.props.adsManager;

          var props = this._getForwardedProps();

          return _react.default.createElement(NativeAdView, {
            ref: this._nativeAdViewRef,
            adsManager: adsManager.placementId,
            onAdLoaded: this._handleAdLoaded
          }, _react.default.createElement(AdMediaViewContext.Provider, {
            value: this._adMediaViewContextValue
          }, _react.default.createElement(AdIconViewContext.Provider, {
            value: this._adIconViewContextValue
          }, _react.default.createElement(AdTriggerViewContext.Provider, {
            value: this._adTriggerViewContextValue
          }, this.state.ad ? _react.default.createElement(Component, (0, _extends2.default)({}, props, {
            nativeAd: this.state.ad
          })) : null))));
        }
      }, {
        key: "_getForwardedProps",
        value: function _getForwardedProps() {
          var _this$props = this.props,
              adsManager = _this$props.adsManager,
              onAdLoaded = _this$props.onAdLoaded,
              props = (0, _objectWithoutProperties2.default)(_this$props, ["adsManager", "onAdLoaded"]);
          return props;
        }
      }, {
        key: "_setAdNodeHandles",
        value: function _setAdNodeHandles(_ref2) {
          var _ref2$adMediaViewNode = _ref2.adMediaViewNodeHandle,
              adMediaViewNodeHandle = _ref2$adMediaViewNode === undefined ? this._adMediaViewNodeHandle : _ref2$adMediaViewNode,
              _ref2$adIconViewNodeH = _ref2.adIconViewNodeHandle,
              adIconViewNodeHandle = _ref2$adIconViewNodeH === undefined ? this._adIconViewNodeHandle : _ref2$adIconViewNodeH,
              _ref2$interactiveTrig = _ref2.interactiveTriggerNodeHandles,
              interactiveTriggerNodeHandles = _ref2$interactiveTrig === undefined ? this._interactiveTriggerNodeHandles : _ref2$interactiveTrig;
          var adMediaViewChanged = adMediaViewNodeHandle !== this._adMediaViewNodeHandle;
          var adIconViewChanged = adIconViewNodeHandle !== this._adIconViewNodeHandle;
          var interactiveTriggersChanged = !_areEqualSets(new Set(interactiveTriggerNodeHandles.values()), new Set(this._interactiveTriggerNodeHandles.values()));

          if (adMediaViewChanged || adIconViewChanged || interactiveTriggersChanged) {
            this._adMediaViewNodeHandle = adMediaViewNodeHandle;
            this._adIconViewNodeHandle = adIconViewNodeHandle;
            this._interactiveTriggerNodeHandles = interactiveTriggerNodeHandles;

            if (this._adMediaViewNodeHandle !== null && this._adIconViewNodeHandle !== null) {
              _NativeAdsManager.default.registerViewsForInteractionAsync((0, _nullthrows.default)((0, _reactNative.findNodeHandle)(this._nativeAdViewRef.current)), this._adMediaViewNodeHandle, this._adIconViewNodeHandle, (0, _toConsumableArray2.default)(this._interactiveTriggerNodeHandles.values()));
            }
          }
        }
      }]);
      return NativeAdContainer;
    }(_react.default.Component);
  }

  var NativeAdView = (0, _reactNative.requireNativeComponent)('CTKNativeAd');

  var AdIconViewContext = _react.default.createContext(null);

  exports.AdIconViewContext = AdIconViewContext;

  var AdMediaViewContext = _react.default.createContext(null);

  exports.AdMediaViewContext = AdMediaViewContext;

  var AdTriggerViewContext = _react.default.createContext(null);

  exports.AdTriggerViewContext = AdTriggerViewContext;

  function _areEqualSets(set1, set2) {
    if (set1.size !== set2.size) {
      return false;
    }

    for (var _iterator = set1.values(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref3;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref3 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref3 = _i.value;
      }

      var _item = _ref3;

      if (!set2.has(_item)) {
        return false;
      }
    }

    return true;
  }
},889,[1,17,9,3,21,22,34,37,40,884,51,5,890]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[4]);

  var _fbemitter = _$$_REQUIRE(_dependencyMap[5]);

  var CTKNativeAdManager = _reactNative.NativeModules.CTKNativeAdManager,
      CTKNativeAdEmitter = _reactNative.NativeModules.CTKNativeAdEmitter;
  var nativeAdEmitter = new _reactNative.NativeEventEmitter(CTKNativeAdEmitter);
  var EVENT_DID_BECOME_VALID = 'AdsManagerDidBecomeValid';

  var NativeAdsManager = function () {
    function NativeAdsManager(placementId) {
      var adsToRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      (0, _classCallCheck2.default)(this, NativeAdsManager);
      this.isValid = false;
      this.eventEmitter = new _fbemitter.EventEmitter();
      this.placementId = placementId;
      this.adsToRequest = adsToRequest;

      this._listenForStateChanges();

      CTKNativeAdManager.init(placementId, adsToRequest);
    }

    (0, _createClass2.default)(NativeAdsManager, [{
      key: "_listenForStateChanges",
      value: function _listenForStateChanges() {
        var _this = this;

        nativeAdEmitter.addListener('CTKNativeAdsManagersChanged', function (managers) {
          var isValidNew = managers[_this.placementId];
          var isValid = _this.isValid;

          if (isValid !== isValidNew && isValidNew) {
            _this.isValid = true;

            _this.eventEmitter.emit(EVENT_DID_BECOME_VALID);
          }
        });
      }
    }, {
      key: "onAdsLoaded",
      value: function onAdsLoaded(listener) {
        if (this.isValid) {
          setImmediate(listener);
          return {
            remove: function remove() {}
          };
        }

        return this.eventEmitter.once(EVENT_DID_BECOME_VALID, listener);
      }
    }, {
      key: "disableAutoRefresh",
      value: function disableAutoRefresh() {
        CTKNativeAdManager.disableAutoRefresh(this.placementId);
      }
    }, {
      key: "setMediaCachePolicy",
      value: function setMediaCachePolicy(cachePolicy) {
        CTKNativeAdManager.setMediaCachePolicy(this.placementId, cachePolicy);
      }
    }], [{
      key: "registerViewsForInteractionAsync",
      value: function registerViewsForInteractionAsync(nativeAdViewTag, mediaViewTag, adIconViewTag, clickable) {
        return _regenerator.default.async(function registerViewsForInteractionAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _regenerator.default.awrap(CTKNativeAdManager.registerViewsForInteraction(nativeAdViewTag, mediaViewTag, adIconViewTag, clickable));

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "triggerEvent",
      value: function triggerEvent(nativeAdViewTag) {
        return CTKNativeAdManager.triggerEvent(nativeAdViewTag);
      }
    }]);
    return NativeAdsManager;
  }();

  var _default = NativeAdsManager;
  exports.default = _default;
},890,[1,130,21,22,5,343]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NativeAdMediaView = exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _withNativeAd = _$$_REQUIRE(_dependencyMap[10]);

  var AdMediaView = function (_React$Component) {
    (0, _inherits2.default)(AdMediaView, _React$Component);

    function AdMediaView() {
      (0, _classCallCheck2.default)(this, AdMediaView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AdMediaView).apply(this, arguments));
    }

    (0, _createClass2.default)(AdMediaView, [{
      key: "render",
      value: function render() {
        var _this = this;

        return _react.default.createElement(_withNativeAd.AdMediaViewContext.Consumer, null, function (contextValue) {
          var context = (0, _nullthrows.default)(contextValue);
          return _react.default.createElement(NativeAdMediaView, (0, _extends2.default)({}, _this.props, {
            ref: context.nativeRef
          }));
        });
      }
    }]);
    return AdMediaView;
  }(_react.default.Component);

  exports.default = AdMediaView;
  var NativeAdMediaView = (0, _reactNative.requireNativeComponent)('MediaView');
  exports.NativeAdMediaView = NativeAdMediaView;
},891,[1,3,21,22,34,37,40,884,51,5,889]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NativeAdIconView = exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _withNativeAd = _$$_REQUIRE(_dependencyMap[10]);

  var AdIconView = function (_React$Component) {
    (0, _inherits2.default)(AdIconView, _React$Component);

    function AdIconView() {
      (0, _classCallCheck2.default)(this, AdIconView);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AdIconView).apply(this, arguments));
    }

    (0, _createClass2.default)(AdIconView, [{
      key: "render",
      value: function render() {
        var _this = this;

        return _react.default.createElement(_withNativeAd.AdIconViewContext.Consumer, null, function (contextValue) {
          var context = (0, _nullthrows.default)(contextValue);
          return _react.default.createElement(NativeAdIconView, (0, _extends2.default)({}, _this.props, {
            ref: context.nativeRef
          }));
        });
      }
    }]);
    return AdIconView;
  }(_react.default.Component);

  exports.default = AdIconView;
  var NativeAdIconView = (0, _reactNative.requireNativeComponent)('AdIconView');
  exports.NativeAdIconView = NativeAdIconView;
},892,[1,3,21,22,34,37,40,884,51,5,889]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _nullthrows = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[10]);

  var _withNativeAd = _$$_REQUIRE(_dependencyMap[11]);

  var AdTriggerView = function (_React$Component) {
    (0, _inherits2.default)(AdTriggerView, _React$Component);

    function AdTriggerView() {
      var _this;

      (0, _classCallCheck2.default)(this, AdTriggerView);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AdTriggerView).apply(this, arguments));
      _this._trigger = null;
      return _this;
    }

    (0, _createClass2.default)(AdTriggerView, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react.default.createElement(_withNativeAd.AdTriggerViewContext.Consumer, null, function (contextValue) {
          var context = (0, _nullthrows.default)(contextValue);

          var forwardedProps = _this2._getForwardedProps();

          var props = (0, _extends2.default)({}, forwardedProps, {
            ref: function ref(component) {
              if (component) {
                _this2._trigger = component;
                context.registerComponent(component);
              } else {
                context.unregisterComponent((0, _nullthrows.default)(_this2._trigger));
                _this2._trigger = null;
              }
            },
            onPress: function onPress() {
              context.onTriggerAd();

              if (forwardedProps.onPress) {
                return forwardedProps.onPress.apply(forwardedProps, arguments);
              }
            }
          });
          return _this2.props.renderInteractiveComponent ? _this2.props.renderInteractiveComponent(props) : _this2._renderDefaultInteractiveComponent(props);
        });
      }
    }, {
      key: "_getForwardedProps",
      value: function _getForwardedProps() {
        var _this$props = this.props,
            renderInteractiveComponent = _this$props.renderInteractiveComponent,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["renderInteractiveComponent"]);
        return props;
      }
    }, {
      key: "_renderDefaultInteractiveComponent",
      value: function _renderDefaultInteractiveComponent(props) {
        return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({}, props, {
          collapsable: false
        }));
      }
    }]);
    return AdTriggerView;
  }(_react.default.Component);

  exports.default = AdTriggerView;
},893,[1,9,3,21,22,34,37,40,884,51,5,889]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var CTKAdSettingsManager = _reactNative.NativeModules.CTKAdSettingsManager;
  var _default = {
    get currentDeviceHash() {
      return CTKAdSettingsManager.currentDeviceHash;
    },

    addTestDevice: function addTestDevice(deviceHash) {
      CTKAdSettingsManager.addTestDevice(deviceHash);
    },
    clearTestDevices: function clearTestDevices() {
      CTKAdSettingsManager.clearTestDevices();
    },
    setLogLevel: function setLogLevel(logLevel) {
      CTKAdSettingsManager.setLogLevel(logLevel);
    },
    setIsChildDirected: function setIsChildDirected(isDirected) {
      CTKAdSettingsManager.setIsChildDirected(isDirected);
    },
    setMediationService: function setMediationService(mediationService) {
      CTKAdSettingsManager.setMediationService(mediationService);
    },
    setUrlPrefix: function setUrlPrefix(urlPrefix) {
      CTKAdSettingsManager.setUrlPrefix(urlPrefix);
    }
  };
  exports.default = _default;
},894,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var CTKInterstitialAdManager = _reactNative.NativeModules.CTKInterstitialAdManager;
  var _default = {
    showAd: function showAd(placementId) {
      return CTKInterstitialAdManager.showAd(placementId);
    }
  };
  exports.default = _default;
},895,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _objectWithoutProperties2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var BannerAd = function (_React$Component) {
    (0, _inherits2.default)(BannerAd, _React$Component);

    function BannerAd() {
      (0, _classCallCheck2.default)(this, BannerAd);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BannerAd).apply(this, arguments));
    }

    (0, _createClass2.default)(BannerAd, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            type = _this$props.type,
            onPress = _this$props.onPress,
            onError = _this$props.onError,
            style = _this$props.style,
            props = (0, _objectWithoutProperties2.default)(_this$props, ["type", "onPress", "onError", "style"]);

        var size = _getSizeForAdType(type);

        return _react.default.createElement(NativeBannerView, (0, _extends2.default)({
          size: size,
          onAdPress: onPress,
          onAdError: onError,
          style: [style, {
            height: size
          }]
        }, props));
      }
    }]);
    return BannerAd;
  }(_react.default.Component);

  exports.default = BannerAd;

  function _getSizeForAdType(type) {
    var sizes = {
      standard: 50,
      large: 90,
      rectangle: 250
    };
    return sizes.hasOwnProperty(type) ? sizes[type] : sizes.standard;
  }

  var NativeBannerView = (0, _reactNative.requireNativeComponent)('CTKBannerView');
},896,[1,3,9,21,22,34,37,40,51,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAppLoadingLifecycleEmitter = getAppLoadingLifecycleEmitter;
  exports.default = undefined;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _fbemitter = _$$_REQUIRE(_dependencyMap[7]);

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _AppLoadingNativeWrapper = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var AppLoading = function (_React$Component) {
    (0, _inherits2.default)(AppLoading, _React$Component);

    function AppLoading() {
      var _this;

      (0, _classCallCheck2.default)(this, AppLoading);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AppLoading).apply(this, arguments));
      _this._isMounted = false;

      _this._startLoadingAppResourcesAsync = function _callee() {
        return _regenerator.default.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (_this.props.onFinish) {
                  _context.next = 2;
                  break;
                }

                throw new Error('AppLoading onFinish prop is required if startAsync is provided');

              case 2:
                _context.prev = 2;
                _context.next = 5;
                return _regenerator.default.awrap(_this.props.startAsync());

              case 5:
                _context.next = 16;
                break;

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](2);

                if (_this._isMounted) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return");

              case 11:
                if (!_this.props.onError) {
                  _context.next = 15;
                  break;
                }

                _this.props.onError(_context.t0);

                _context.next = 16;
                break;

              case 15:
                throw _context.t0;

              case 16:
                _context.prev = 16;

                if (_this._isMounted) {
                  _context.next = 19;
                  break;
                }

                return _context.abrupt("return");

              case 19:
                if (_this.props.onFinish) {
                  _this.props.onFinish();
                }

                return _context.finish(16);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[2, 7, 16, 21]]);
      };

      return _this;
    }

    (0, _createClass2.default)(AppLoading, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;

        _emitEvent('componentDidMount');

        if (this.props.startAsync) {
          this._startLoadingAppResourcesAsync().catch(function (error) {
            console.error("AppLoading threw an unexpected error when loading:\n" + error.stack);
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;

        _emitEvent('componentWillUnmount');
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(_AppLoadingNativeWrapper.default, this.props);
      }
    }]);
    return AppLoading;
  }(_react.default.Component);

  exports.default = AppLoading;
  var _lifecycleEmitter = null;

  function _emitEvent(event) {
    if (_lifecycleEmitter) {
      _lifecycleEmitter.emit(event);
    }
  }

  function getAppLoadingLifecycleEmitter() {
    if (!_lifecycleEmitter) {
      _lifecycleEmitter = new _fbemitter.EventEmitter();
    }

    return _lifecycleEmitter;
  }
},897,[1,130,21,22,34,37,40,343,51,898]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var SplashScreen = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var AppLoading = function (_React$Component) {
    (0, _inherits2.default)(AppLoading, _React$Component);

    function AppLoading(props) {
      var _this;

      (0, _classCallCheck2.default)(this, AppLoading);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AppLoading).call(this, props));
      SplashScreen.preventAutoHide();
      return _this;
    }

    (0, _createClass2.default)(AppLoading, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.props.autoHideSplash === undefined || this.props.autoHideSplash) {
          if (global.__E2E__) {
            SplashScreen.hide();
          } else {
            setTimeout(function () {
              SplashScreen.hide();
            }, 200);
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return AppLoading;
  }(_react.default.Component);

  exports.default = AppLoading;
},898,[366,1,21,22,34,37,40,51,899]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.preventAutoHide = preventAutoHide;
  exports.hide = hide;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0]);

  var _NativeModules$Expone = _reactNative.NativeModules.ExponentSplashScreen,
      SplashScreen = _NativeModules$Expone === undefined ? {} : _NativeModules$Expone;

  function preventAutoHide() {
    if (SplashScreen.preventAutoHide) {
      SplashScreen.preventAutoHide();
    }
  }

  function hide() {
    if (SplashScreen.hide) {
      SplashScreen.hide();
    }
  }
},899,[5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = registerRootComponent;

  var _reactNative = _$$_REQUIRE(_dependencyMap[1]);

  var _withExpoRoot = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  function registerRootComponent(component) {
    _reactNative.AppRegistry.registerComponent('main', function () {
      return (0, _withExpoRoot.default)(component);
    });
  }
},900,[1,5,901]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0]);

  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = withExpoRoot;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var Font = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7]));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[9]);

  var _Notifications = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _RootErrorBoundary = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  function withExpoRoot(AppRootComponent) {
    return function (_React$Component) {
      (0, _inherits2.default)(ExpoRootComponent, _React$Component);

      function ExpoRootComponent() {
        (0, _classCallCheck2.default)(this, ExpoRootComponent);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ExpoRootComponent).apply(this, arguments));
      }

      (0, _createClass2.default)(ExpoRootComponent, [{
        key: "componentWillMount",
        value: function componentWillMount() {
          if (_reactNative.StyleSheet.setStyleAttributePreprocessor) {
            _reactNative.StyleSheet.setStyleAttributePreprocessor('fontFamily', Font.processFontFamily);
          }

          var exp = this.props.exp;

          if (exp.notification) {
            _Notifications.default._setInitialNotification(exp.notification);
          }
        }
      }, {
        key: "render",
        value: function render() {
          {
            return React.createElement(AppRootComponent, this.props);
          }
        }
      }]);
      return ExpoRootComponent;
    }(React.Component);
  }
},901,[366,1,21,22,34,37,40,394,51,5,774,902]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var _AppLoading = _$$_REQUIRE(_dependencyMap[8]);

  var RootErrorBoundary = function (_React$Component) {
    (0, _inherits2.default)(RootErrorBoundary, _React$Component);

    function RootErrorBoundary() {
      var _this;

      (0, _classCallCheck2.default)(this, RootErrorBoundary);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RootErrorBoundary).apply(this, arguments));
      _this.state = {
        error: null
      };
      _this._appLoadingIsMounted = false;

      _this._subscribeToGlobalErrors = function () {
        _this._appLoadingIsMounted = true;
        var ErrorUtils = global.ErrorUtils;
        var originalErrorHandler = ErrorUtils.getGlobalHandler();
        ErrorUtils.setGlobalHandler(function (error, isFatal) {
          if (_this._appLoadingIsMounted) {
            _reactNative.NativeModules.ExponentAppLoadingManager && _reactNative.NativeModules.ExponentAppLoadingManager.finishedAsync();

            if (isFatal) {
              _this.setState({
                error: error
              });
            }
          }

          originalErrorHandler(error, isFatal);
        });
      };

      _this._unsubscribeFromGlobalErrors = function () {
        _this._appLoadingIsMounted = false;
      };

      return _this;
    }

    (0, _createClass2.default)(RootErrorBoundary, [{
      key: "componentWillMount",
      value: function componentWillMount() {}
    }, {
      key: "componentDidCatch",
      value: function componentDidCatch(error) {
        if (this._appLoadingIsMounted) {
          _reactNative.NativeModules.ExponentAppLoadingManager && _reactNative.NativeModules.ExponentAppLoadingManager.finishedAsync();
          this.setState({
            error: error
          });
        }

        console.error(error);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.state.error) {
          return _react.default.createElement(_reactNative.View, {
            style: styles.container
          }, _react.default.createElement(_reactNative.Text, {
            style: styles.warningIcon
          }, "\u26A0\uFE0F"), _react.default.createElement(_reactNative.Text, {
            style: [styles.paragraph, {
              color: '#000'
            }]
          }, "A fatal error was encountered while rendering the root component."), _react.default.createElement(_reactNative.Text, {
            style: styles.paragraph
          }, "Review your application logs for more information, and reload the app when the issue is resolved. In production, your app would have crashed."));
        } else {
          return this.props.children;
        }
      }
    }]);
    return RootErrorBoundary;
  }(_react.default.Component);

  exports.default = RootErrorBoundary;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center'
    },
    paragraph: {
      marginBottom: 10,
      textAlign: 'center',
      marginHorizontal: 30,
      maxWidth: 350,
      fontSize: 15,
      color: '#888'
    },
    warningIcon: {
      fontSize: 40,
      marginBottom: 20
    }
  });
},902,[1,21,22,34,37,40,51,5,897]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.watchStepCount = watchStepCount;
  exports.getStepCountAsync = getStepCountAsync;
  exports.isAvailableAsync = isAvailableAsync;

  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3]);

  var PedometerEventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.ExponentPedometer);
  var _listenerCount = 0;

  function watchStepCount(callback) {
    if (_listenerCount === 0) {
      _reactNative.NativeModules.ExponentPedometer.watchStepCount();
    }

    _listenerCount++;
    var listener = PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);
    return {
      remove: function remove() {
        listener.remove();
        _listenerCount--;

        if (_listenerCount === 0) {
          _reactNative.NativeModules.ExponentPedometer.stopWatchingStepCount();
        }
      }
    };
  }

  function getStepCountAsync(start, end) {
    return _regenerator.default.async(function getStepCountAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            (0, _invariant.default)(start <= end, 'Pedometer: The start date must precede the end date.');
            _context.next = 3;
            return _regenerator.default.awrap(_reactNative.NativeModules.ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime()));

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function isAvailableAsync() {
    return _regenerator.default.async(function isAvailableAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _regenerator.default.awrap(_reactNative.NativeModules.ExponentPedometer.isAvailableAsync());

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }
},903,[1,130,334,5]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0]);

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7]);

  var App = function (_React$Component) {
    (0, _inherits2.default)(App, _React$Component);

    function App() {
      (0, _classCallCheck2.default)(this, App);
      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(App).apply(this, arguments));
    }

    (0, _createClass2.default)(App, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.Text, null, "Host your app from github!!"));
      }
    }]);
    return App;
  }(_react.default.Component);

  exports.default = App;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      alignItems: 'center',
      justifyContent: 'center'
    }
  });
},904,[1,21,22,34,37,40,51,5]);
__r(85);
__r(0);
//# sourceMappingURL=http://127.0.0.1:19004/node_modules/expo/AppEntry.map?dev=false&hot=false&assetPlugin=%2FUsers%2Fquin%2Fselfhosting-example%2Fnode_modules%2Fexpo%2Ftools%2FhashAssetFiles.js&platform=ios